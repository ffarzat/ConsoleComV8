<?xml version="1.0"?>
<testsuite name="Chrome 48.0.2564 (Windows 8.1 0.0.0)" package="" timestamp="2016-03-01T17:54:46" id="0" hostname="Optmus" tests="2077" errors="0" failures="0" time="17.361">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36"/>
  </properties>
  <testcase name="should support loading lodash.js as the &quot;lodash&quot; module" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.js"/>
  <testcase name="should support loading lodash.js with the Require.js &quot;shim&quot; configuration option" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.js"/>
  <testcase name="should support loading lodash.js as the &quot;underscore&quot; module" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.js"/>
  <testcase name="should not add `Function.prototype` extensions to lodash" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.js"/>
  <testcase name="should avoid overwritten native methods" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.js"/>
  <testcase name="should return `true` for indexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isIndex"/>
  <testcase name="should return `false` for non-indexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isIndex"/>
  <testcase name="should return `true` for iteratee calls" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isIterateeCall"/>
  <testcase name="should return `false` for non-iteratee calls" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isIterateeCall"/>
  <testcase name="should work with `NaN` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isIterateeCall"/>
  <testcase name="should not error when `index` is an object without a `toString` method" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isIterateeCall"/>
  <testcase name="should return `true` for lengths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isLength"/>
  <testcase name="should return `false` for non-lengths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isLength"/>
  <testcase name="should create a new instance when called without the `new` operator" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash constructor"/>
  <testcase name="should return provided `lodash` instances" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash constructor"/>
  <testcase name="should convert foreign wrapped values to `lodash` instances" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash constructor"/>
  <testcase name="should add two numbers together" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.add"/>
  <testcase name="should coerce params to numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.add"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.add"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.add"/>
  <testcase name="should create a function that invokes `func` after `n` calls" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.after"/>
  <testcase name="should coerce non-finite `n` values to `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.after"/>
  <testcase name="should allow `func` as the first argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.after"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.after"/>
  <testcase name="should cap the number of params provided to `func`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.ary"/>
  <testcase name="should use `func.length` if `n` is not provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.ary"/>
  <testcase name="should treat a negative `n` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.ary"/>
  <testcase name="should coerce `n` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.ary"/>
  <testcase name="should work when provided less than the capped numer of arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.ary"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.ary"/>
  <testcase name="should work when combined with other methods that use metadata" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.ary"/>
  <testcase name="`_.assign` should assign properties of a source object to the destination object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.assign` should accept multiple source objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.assign` should overwrite destination properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.assign` should assign source properties with nullish values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.extend` should assign properties of a source object to the destination object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.extend` should accept multiple source objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.extend` should overwrite destination properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.extend` should assign source properties with nullish values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assign and lodash.extend"/>
  <testcase name="`_.assignWith` should work with a `customizer` callback" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assignWith and lodash.extendWith"/>
  <testcase name="`_.assignWith` should work with a `customizer` that returns `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assignWith and lodash.extendWith"/>
  <testcase name="`_.extendWith` should work with a `customizer` callback" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assignWith and lodash.extendWith"/>
  <testcase name="`_.extendWith` should work with a `customizer` that returns `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.assignWith and lodash.extendWith"/>
  <testcase name="should return the elements corresponding to the specified keys" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should return `undefined` for nonexistent keys" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should work with non-index keys on array values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should return an empty array when no keys are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should accept multiple key arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should work with a falsey `object` argument when keys are provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should work with an `arguments` object for `object`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should work with `arguments` object as secondary arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should work with an object for `object`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should pluck inherited property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.at"/>
  <testcase name="should return the result of `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.attempt"/>
  <testcase name="should provide additional arguments to `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.attempt"/>
  <testcase name="should return the caught error" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.attempt"/>
  <testcase name="should coerce errors to error objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.attempt"/>
  <testcase name="should work with an error object from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.attempt"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.attempt"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.attempt"/>
  <testcase name="should create a function that invokes `func` after `n` calls" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.before"/>
  <testcase name="should coerce non-finite `n` values to `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.before"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.before"/>
  <testcase name="should bind a function to an object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should accept a falsey `thisArg` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should bind a function to nullish values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should partially apply arguments " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should support placeholders" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should create a function with a `length` of `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should ignore binding when called with the `new` operator" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should handle a number of arguments when called with the `new` operator" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should ensure `new bound` is an instance of `func`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should append array arguments to partially applied arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should not rebind functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should not error when instantiating bound built-ins" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should not error when calling bound class constructors with the `new` operator" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should return a wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bind"/>
  <testcase name="should accept individual method names" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bindAll"/>
  <testcase name="should accept arrays of method names" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bindAll"/>
  <testcase name="should work with an array `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bindAll"/>
  <testcase name="should work with `arguments` objects as secondary arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bindAll"/>
  <testcase name="should work when the target function is overwritten" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bindKey"/>
  <testcase name="should support placeholders" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.bindKey"/>
  <testcase name="`_.camelCase` should convert `string` to camel case" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.camelCase` should handle double-converting strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.camelCase` should deburr letters" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.camelCase` should trim latin-1 mathematical operators" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.camelCase` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.camelCase` should return an unwrapped value implicitly when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.camelCase` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.kebabCase` should convert `string` to kebab case" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.kebabCase` should handle double-converting strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.kebabCase` should deburr letters" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.kebabCase` should trim latin-1 mathematical operators" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.kebabCase` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.kebabCase` should return an unwrapped value implicitly when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.kebabCase` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.snakeCase` should convert `string` to snake case" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.snakeCase` should handle double-converting strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.snakeCase` should deburr letters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.snakeCase` should trim latin-1 mathematical operators" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.snakeCase` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.snakeCase` should return an unwrapped value implicitly when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.snakeCase` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.startCase` should convert `string` to start case" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.startCase` should handle double-converting strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.startCase` should deburr letters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.startCase` should trim latin-1 mathematical operators" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.startCase` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.startCase` should return an unwrapped value implicitly when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="`_.startCase` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="should get the original value after cycling through all case methods" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).case methods"/>
  <testcase name="should work with numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.camelCase"/>
  <testcase name="should handle acronyms" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.camelCase"/>
  <testcase name="should capitalize the first character of a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.capitalize"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.capitalize"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.capitalize"/>
  <testcase name="should return a wrapped value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chain"/>
  <testcase name="should return existing wrapped values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chain"/>
  <testcase name="should enable chaining of methods that return unwrapped values by default" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chain"/>
  <testcase name="should chain multiple methods" time="0.006" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chain"/>
  <testcase name="should return chunked arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chunk"/>
  <testcase name="should return the last chunk as remaining elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chunk"/>
  <testcase name="should ensure the minimum `size` is `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chunk"/>
  <testcase name="should coerce `size` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.chunk"/>
  <testcase name="`_.clone` should perform a shallow clone" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should deep clone objects with circular references" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone `arguments` objects" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone array-like-objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone booleans" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone boolean objects" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Foo instances" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone objects with object values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone objects from another document" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone null values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone number objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone regexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone string objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone undefined values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone DOM elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone Errors" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone EvalErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone RangeErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone ReferenceErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone SyntaxErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone TypeErrors" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not clone URIErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone array buffers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Float32Array arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Float64Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Int8Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Int16Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Int32Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Uint8Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Uint8ClampedArray arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Uint16Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone Uint32Array arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone `index` and `input` array properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should clone `lastIndex` regexp property" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should not error on DOM elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should perform a shallow clone when used as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should create an object from the same realm as `value`" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.clone` should return a unwrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone array-like-objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone booleans" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone boolean objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Foo instances" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone objects with object values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone objects from another document" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone null values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone number objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone regexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone string objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone undefined values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone DOM elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone Errors" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone EvalErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone RangeErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone ReferenceErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone SyntaxErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone TypeErrors" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not clone URIErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone array buffers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Float32Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Float64Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Int8Array arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Int16Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Int32Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Uint8Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Uint8ClampedArray arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Uint16Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone Uint32Array arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone `index` and `input` array properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should clone `lastIndex` regexp property" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should not error on DOM elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should perform a deep clone when used as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should create an object from the same realm as `value`" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeep` should return a unwrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should provide the correct `customizer` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should handle cloning if `customizer` returns `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and DOM elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and Errors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and EvalErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and RangeErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and ReferenceErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and SyntaxErrors" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and TypeErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneWith` should work with a `customizer` callback and URIErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should provide the correct `customizer` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should handle cloning if `customizer` returns `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and DOM elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and Errors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and EvalErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and RangeErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and ReferenceErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and SyntaxErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and TypeErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="`_.cloneDeepWith` should work with a `customizer` callback and URIErrors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).clone methods"/>
  <testcase name="should filter falsey values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.compact"/>
  <testcase name="should work when in between lazy operators" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.compact"/>
  <testcase name="should work in a lazy chain sequence" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.compact"/>
  <testcase name="`_.flow` should supply each function with the return value of the previous" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flow` should return a new function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flow` should return an identity function when no arguments are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flow` should work with a curried function and `_.first`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flow` should support shortcut fusion" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flow` should work with curried functions with placeholders" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flow` should return a wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flowRight` should supply each function with the return value of the previous" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flowRight` should return a new function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flowRight` should return an identity function when no arguments are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flowRight` should work with a curried function and `_.first`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flowRight` should support shortcut fusion" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flowRight` should work with curried functions with placeholders" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="`_.flowRight` should return a wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flow methods"/>
  <testcase name="should create a function that returns `value`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.constant"/>
  <testcase name="should work with falsey values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.constant"/>
  <testcase name="should return a wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.constant"/>
  <testcase name="should work with an iteratee" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should use `_.identity` when `iteratee` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should only add values to own, not inherited, properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should work with a number for `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should work with an object for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should work in a lazy chain sequence" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.countBy"/>
  <testcase name="should create an object that inherits from the given `prototype` object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.create"/>
  <testcase name="should assign `properties` to the created object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.create"/>
  <testcase name="should assign own properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.create"/>
  <testcase name="should accept a falsey `prototype` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.create"/>
  <testcase name="should ignore primitive `prototype` arguments and use an empty object instead" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.create"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.create"/>
  <testcase name="should curry based on the number of arguments provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should allow specifying `arity`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should coerce `arity` to an integer" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should support placeholders" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should provide additional arguments after reaching the target arity" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should return a function with a `length` of `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should ensure `new curried` is an instance of `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should not set a `this` binding" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should work with partialed methods" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curry"/>
  <testcase name="should curry based on the number of arguments provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should allow specifying `arity`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should coerce `arity` to an integer" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should support placeholders" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should provide additional arguments after reaching the target arity" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should return a function with a `length` of `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should ensure `new curried` is an instance of `func`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should not set a `this` binding" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="should work with partialed methods" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.curryRight"/>
  <testcase name="`_.curry` should not error on functions with the same name as lodash methods" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).curry methods"/>
  <testcase name="`_.curry` should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).curry methods"/>
  <testcase name="`_.curryRight` should not error on functions with the same name as lodash methods" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).curry methods"/>
  <testcase name="`_.curryRight` should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).curry methods"/>
  <testcase name="should debounce a function" time="0.112" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="subsequent debounced calls return the last `func` result" time="0.142" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="subsequent &quot;immediate&quot; debounced calls return the last `func` result" time="0.079" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="should apply default options" time="0.077" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="should support a `leading` option" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="should support a `trailing` option" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="should support a `maxWait` option" time="0.337" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="should cancel `maxDelayed` when `delayed` is invoked" time="0.142" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="should invoke the `trailing` call with the correct arguments and `this` binding" time="0.141" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce"/>
  <testcase name="should convert latin-1 supplementary letters to basic latin" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.deburr"/>
  <testcase name="should not deburr latin-1 mathematical operators" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.deburr"/>
  <testcase name="should deburr combining diacritical marks" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.deburr"/>
  <testcase name="should assign properties of a source object if missing on the destination object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaults"/>
  <testcase name="should accept multiple source objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaults"/>
  <testcase name="should not overwrite `null` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaults"/>
  <testcase name="should overwrite `undefined` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaults"/>
  <testcase name="should deep assign properties of a source object if missing on the destination object" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaultsDeep"/>
  <testcase name="should accept multiple source objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaultsDeep"/>
  <testcase name="should not overwrite `null` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaultsDeep"/>
  <testcase name="should overwrite `undefined` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaultsDeep"/>
  <testcase name="should merge sources containing circular references" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defaultsDeep"/>
  <testcase name="should defer `func` execution" time="0.047" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defer"/>
  <testcase name="should provide additional arguments to `func`" time="0.045" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defer"/>
  <testcase name="should be cancelable" time="0.046" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.defer"/>
  <testcase name="should delay `func` execution" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.delay"/>
  <testcase name="should provide additional arguments to `func`" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.delay"/>
  <testcase name="should be cancelable" time="0.077" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.delay"/>
  <testcase name="should return the difference of the given arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.difference"/>
  <testcase name="should match `NaN`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.difference"/>
  <testcase name="should work with large arrays" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.difference"/>
  <testcase name="should work with large arrays of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.difference"/>
  <testcase name="should work with large arrays of `NaN`" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.difference"/>
  <testcase name="should ignore values that are not array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.difference"/>
  <testcase name="should drop the first two elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.drop"/>
  <testcase name="should treat falsey `n` values, except nullish, as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.drop"/>
  <testcase name="should return all elements when `n` &lt; `1`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.drop"/>
  <testcase name="should return an empty array when `n` >= `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.drop"/>
  <testcase name="should coerce `n` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.drop"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.drop"/>
  <testcase name="should work in a lazy chain sequence" time="0.006" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.drop"/>
  <testcase name="should drop the last two elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRight"/>
  <testcase name="should treat falsey `n` values, except nullish, as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRight"/>
  <testcase name="should return all elements when `n` &lt; `1`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRight"/>
  <testcase name="should return an empty array when `n` >= `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRight"/>
  <testcase name="should coerce `n` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRight"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRight"/>
  <testcase name="should work in a lazy chain sequence" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRight"/>
  <testcase name="should drop elements while `predicate` returns truthy" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRightWhile"/>
  <testcase name="should provide the correct `predicate` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRightWhile"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRightWhile"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRightWhile"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRightWhile"/>
  <testcase name="should return a wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropRightWhile"/>
  <testcase name="should drop elements while `predicate` returns truthy" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropWhile"/>
  <testcase name="should provide the correct `predicate` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropWhile"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropWhile"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropWhile"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropWhile"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropWhile"/>
  <testcase name="should work in a lazy chain sequence with `drop`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.dropWhile"/>
  <testcase name="should return `true` if a string ends with `target`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should return `false` if a string does not end with `target`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should work with a `position` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should work with `position` >= `string.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should treat falsey `position` values, except `undefined`, as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should treat a negative `position` as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should coerce `position` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should return `true` when `target` is an empty string regardless of `position`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.endsWith"/>
  <testcase name="should perform a `SameValueZero` comparison of two values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.eq"/>
  <testcase name="should escape values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.escape"/>
  <testcase name="should not escape the &quot;/&quot; character" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.escape"/>
  <testcase name="should handle strings with nothing to escape" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.escape"/>
  <testcase name="should escape the same characters unescaped by `_.unescape`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.escape"/>
  <testcase name="should escape values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.escapeRegExp"/>
  <testcase name="should handle strings with nothing to escape" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.escapeRegExp"/>
  <testcase name="should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.escapeRegExp"/>
  <testcase name="should return `true` for empty collections" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="should return `true` if `predicate` returns truthy for all elements in the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="should return `false` as soon as `predicate` returns falsey" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="should work with collections of `undefined` values (test in IE &lt; 9)" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="should use `_.identity` when `predicate` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.every"/>
  <testcase name="`_.assign` should not throw strict mode errors" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).strict mode checks"/>
  <testcase name="`_.extend` should not throw strict mode errors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).strict mode checks"/>
  <testcase name="`_.bindAll` should not throw strict mode errors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).strict mode checks"/>
  <testcase name="`_.defaults` should not throw strict mode errors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).strict mode checks"/>
  <testcase name="should use a default `start` of `0` and a default `end` of `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should use `undefined` for `value` if not provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a positive `start`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a `start` >= `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should treat falsey `start` values as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a negative `start`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a negative `start` &lt;= negative `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with `start` >= `end`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a positive `end`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a `end` >= `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should treat falsey `end` values, except `undefined`, as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a negative `end`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work with a negative `end` &lt;= negative `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should coerce `start` and `end` to integers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should return a wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.fill"/>
  <testcase name="should return elements `predicate` returns truthy for" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.filter"/>
  <testcase name="should iterate over an object with numeric keys (test in Mobile Safari 8)" time="0.009" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.filter"/>
  <testcase name="should return the found value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should return `undefined` if value is not found" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should return `undefined` for empty collections" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should work with an object for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find"/>
  <testcase name="should return the found value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should return `undefined` if value is not found" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should return `undefined` for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should work with an object for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLast"/>
  <testcase name="should return the found value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should return `-1` if value is not found" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should return `-1` for empty collections" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findIndex"/>
  <testcase name="should return the found value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should return `-1` if value is not found" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should return `-1` for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastIndex"/>
  <testcase name="should return the found value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should return `undefined` if value is not found" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should return `undefined` for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should work with an object for `collection`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findKey"/>
  <testcase name="should return the found value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should return `undefined` if value is not found" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should return `undefined` for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should work in a lazy chain sequence" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="should work with an object for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.findLastKey"/>
  <testcase name="`_.find` should support shortcut fusion" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find and lodash.findLast"/>
  <testcase name="`_.findLast` should support shortcut fusion" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.find and lodash.findLast"/>
  <testcase name="should return the first element" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.first"/>
  <testcase name="should return `undefined` when querying empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.first"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.first"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.first"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.first"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.first"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.first"/>
  <testcase name="should take the first two elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.take"/>
  <testcase name="should treat falsey `n` values, except nullish, as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.take"/>
  <testcase name="should return an empty array when `n` &lt; `1`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.take"/>
  <testcase name="should return all elements when `n` >= `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.take"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.take"/>
  <testcase name="should work in a lazy chain sequence" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.take"/>
  <testcase name="should take the last two elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRight"/>
  <testcase name="should treat falsey `n` values, except nullish, as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRight"/>
  <testcase name="should return an empty array when `n` &lt; `1`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRight"/>
  <testcase name="should return all elements when `n` >= `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRight"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRight"/>
  <testcase name="should work in a lazy chain sequence" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRight"/>
  <testcase name="should take elements while `predicate` returns truthy" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRightWhile"/>
  <testcase name="should provide the correct `predicate` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRightWhile"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRightWhile"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRightWhile"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRightWhile"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRightWhile"/>
  <testcase name="should provide the correct `predicate` arguments in a lazy chain sequence" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeRightWhile"/>
  <testcase name="should take elements while `predicate` returns truthy" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should provide the correct `predicate` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should work in a lazy chain sequence with `take`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should provide the correct `predicate` arguments in a lazy chain sequence" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.takeWhile"/>
  <testcase name="should perform a shallow flatten" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should flatten `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should work with extremely large arrays" time="4.246" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should work with empty arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should support flattening of nested arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should return an empty array for non array-like objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should return a wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).flatten methods"/>
  <testcase name="should be aliased" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.forEach"/>
  <testcase name="should be aliased" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.forEachRight"/>
  <testcase name="`_.forIn` iterates over inherited properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).forIn methods"/>
  <testcase name="`_.forInRight` iterates over inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).forIn methods"/>
  <testcase name="should iterate over `length` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).forOwn methods"/>
  <testcase name="should iterate over `length` properties " time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).forOwn methods"/>
  <testcase name="`_._baseEach` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findIndex` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findIndex` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findKey` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findKey` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastIndex` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastIndex` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastKey` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastKey` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forIn` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forIn` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forInRight` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forInRight` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapKeys` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapKeys` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapValues` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapValues` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.maxBy` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.maxBy` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.minBy` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.minBy` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.omitBy` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.omitBy` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.pickBy` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.pickBy` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` should provide the correct iteratee arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should provide the correct iteratee arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findIndex` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should not iterate custom properties on arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastIndex` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` should not iterate custom properties on arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.maxBy` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.minBy` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should not iterate custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` should return a wrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` should return a wrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapKeys` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapValues` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.omitBy` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.pickBy` should return a wrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` should return a wrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findIndex` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findIndex` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findKey` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findKey` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastIndex` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastIndex` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastKey` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastKey` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forIn` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forIn` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forInRight` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forInRight` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.max` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.max` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.maxBy` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.maxBy` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.min` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.min` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.minBy` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.minBy` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should return a wrapped value when explicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` iterates over own properties of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` iterates over own properties of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findKey` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastKey` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` iterates over own properties of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` iterates over own properties of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapKeys` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapValues` iterates over own properties of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` iterates over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` iterates over own properties of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` should return the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should return the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should return the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forIn` should return the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forInRight` should return the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` should return the collection" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` should return the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` should use `isArrayLike` to determine whether a value is array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should use `isArrayLike` to determine whether a value is array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should use `isArrayLike` to determine whether a value is array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` should use `isArrayLike` to determine whether a value is array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reduce` should use `isArrayLike` to determine whether a value is array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reduceRight` should use `isArrayLike` to determine whether a value is array-like" time="0.005" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` should use `isArrayLike` to determine whether a value is array-like" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should use `isArrayLike` to determine whether a value is array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` should ignore changes to `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findIndex` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findKey` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastIndex` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastKey` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forIn` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forInRight` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` should ignore changes to `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapKeys` should ignore changes to `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapValues` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.maxBy` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.minBy` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.omitBy` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` should ignore changes to `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.pickBy` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should ignore changes to `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_._baseEach` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.countBy` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.every` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.filter` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.find` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findKey` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLast` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.findLastKey` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEach` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forEachRight` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forIn` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forInRight` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwn` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.forOwnRight` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.groupBy` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.indexBy` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.map` should ignore added `object` properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapKeys` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.mapValues` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.omitBy` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.partition` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.pickBy` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reject` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.some` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reduce` should ignore added `object` properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.reduceRight` should ignore added `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).iteration methods"/>
  <testcase name="`_.assign` should coerce primitives to objects" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assign` should assign own source properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assign` should not error on nullish sources" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assign` should not error when `object` is nullish and source objects are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assign` should work as an iteratee for methods like `_.reduce`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assign` should not return the existing wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.defaults` should coerce primitives to objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.defaults` should assign own and inherited source properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.defaults` should not error on nullish sources" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.defaults` should not error when `object` is nullish and source objects are provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.defaults` should work as an iteratee for methods like `_.reduce`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.defaults` should not return the existing wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should coerce primitives to objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should assign own and inherited source properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should not error on nullish sources" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should not error when `object` is nullish and source objects are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should work as an iteratee for methods like `_.reduce`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should not return the existing wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should coerce primitives to objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should assign own and inherited source properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should not error on nullish sources" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should not error when `object` is nullish and source objects are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should work as an iteratee for methods like `_.reduce`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should not return the existing wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assign` should not treat `object` as `source`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should not treat `object` as `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should not treat `object` as `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assign` should not assign values that are the same as their destinations" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assignWith` should not assign values that are the same as their destinations" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.defaults` should not assign values that are the same as their destinations" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extend` should not assign values that are the same as their destinations" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extendWith` should not assign values that are the same as their destinations" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.merge` should not assign values that are the same as their destinations" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.mergeWith` should not assign values that are the same as their destinations" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assignWith` should provide the correct `customizer` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.assignWith` should not treat the second argument as a `customizer` callback" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extendWith` should provide the correct `customizer` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.extendWith` should not treat the second argument as a `customizer` callback" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.mergeWith` should provide the correct `customizer` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_.mergeWith` should not treat the second argument as a `customizer` callback" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).object assignments"/>
  <testcase name="`_._baseEach` can exit early when iterating arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_._baseEach` can exit early when iterating objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forEach` can exit early when iterating arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forEach` can exit early when iterating objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forEachRight` can exit early when iterating arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forEachRight` can exit early when iterating objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forIn` can exit early when iterating arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forIn` can exit early when iterating objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forInRight` can exit early when iterating arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forInRight` can exit early when iterating objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forOwn` can exit early when iterating arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forOwn` can exit early when iterating objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forOwnRight` can exit early when iterating arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.forOwnRight` can exit early when iterating objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.transform` can exit early when iterating arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="`_.transform` can exit early when iterating objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).exit early"/>
  <testcase name="internal data objects should work with the `__proto__` key" time="0.012" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).`__proto__` property bugs"/>
  <testcase name="should return the function names of an object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.functions"/>
  <testcase name="should include inherited functions" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.functions"/>
  <testcase name="should use `_.identity` when `iteratee` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.groupBy"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.groupBy"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.groupBy"/>
  <testcase name="should only add values to own, not inherited, properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.groupBy"/>
  <testcase name="should work with a number for `iteratee`" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.groupBy"/>
  <testcase name="should work with an object for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.groupBy"/>
  <testcase name="should work in a lazy chain sequence" time="0.009" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.groupBy"/>
  <testcase name="should return `true` if `value` is greater than `other`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.gt"/>
  <testcase name="should return `false` if `value` is less than or equal to `other`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.gt"/>
  <testcase name="should return `true` if `value` is greater than or equal to `other`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.gte"/>
  <testcase name="should return `false` if `value` is less than `other`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.gte"/>
  <testcase name="`_.has` should check for own properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should not use the `hasOwnProperty` method of the object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should support deep paths" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should work with non-string `path` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should coerce key to a string" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should return `false` for inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should work with `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should check for a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should return `false` when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should return `false` with deep paths when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.has` should return `false` if parts of `path` are missing" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should check for own properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should not use the `hasOwnProperty` method of the object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should support deep paths" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should work with non-string `path` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should coerce key to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should return `true` for inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should work with `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should check for a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should return `false` when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should return `false` with deep paths when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="`_.hasIn` should return `false` if parts of `path` are missing" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).has methods"/>
  <testcase name="should return the first argument provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.identity"/>
  <testcase name="should work with an `arguments` object and  return `true` for  matched values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and  return `false` for unmatched values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and a positive `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and a `fromIndex` >= `collection.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and treat falsey `fromIndex` values as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and treat non-number `fromIndex` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and a negative `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and a negative `fromIndex` &lt;= negative `collection.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and floor `position` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and return an unwrapped value implicitly when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an `arguments` object and return a wrapped value when explicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and  return `true` for  matched values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and  return `false` for unmatched values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and a positive `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and a `fromIndex` >= `collection.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and treat falsey `fromIndex` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and treat non-number `fromIndex` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and a negative `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and a negative `fromIndex` &lt;= negative `collection.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and floor `position` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and return an unwrapped value implicitly when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an array and return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and  return `true` for  matched values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and  return `false` for unmatched values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and a positive `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and a `fromIndex` >= `collection.length`" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and treat falsey `fromIndex` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and treat non-number `fromIndex` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and a negative `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and a negative `fromIndex` &lt;= negative `collection.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and floor `position` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and return an unwrapped value implicitly when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with an object and return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and  return `true` for  matched values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and  return `false` for unmatched values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and a positive `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and a `fromIndex` >= `collection.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and treat falsey `fromIndex` values as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and treat non-number `fromIndex` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and a negative `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and a negative `fromIndex` &lt;= negative `collection.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and floor `position` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and return an unwrapped value implicitly when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string and return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string literal for `collection`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work with a string object for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should return `false` for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should not be possible to perform a binary search" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should match `NaN`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should match `-0` as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should work as an iteratee for methods like `_.reduce`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.includes"/>
  <testcase name="should use `_.identity` when `iteratee` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexBy"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexBy"/>
  <testcase name="should only add values to own, not inherited, properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexBy"/>
  <testcase name="should work with a number for `iteratee`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexBy"/>
  <testcase name="should work with an object for `collection`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexBy"/>
  <testcase name="should work in a lazy chain sequence" time="0.01" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexBy"/>
  <testcase name="should return the index of the first matched value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="should work with a positive `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="should work with `fromIndex` >= `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="should work with a negative `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="should work with a negative `fromIndex` &lt;= `-array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="should treat falsey `fromIndex` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="should coerce `fromIndex` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="should perform a binary search when `fromIndex` is a non-number truthy value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.indexOf"/>
  <testcase name="`_.includes` should work with a custom `_.indexOf` method" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.indexOf` methods"/>
  <testcase name="`_.difference` should work with a custom `_.indexOf` method" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.indexOf` methods"/>
  <testcase name="`_.intersection` should work with a custom `_.indexOf` method" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.indexOf` methods"/>
  <testcase name="`_.uniq` should work with a custom `_.indexOf` method" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.indexOf` methods"/>
  <testcase name="`_.uniqBy` should work with a custom `_.indexOf` method" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.indexOf` methods"/>
  <testcase name="should accept a falsey `array` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.initial"/>
  <testcase name="should exclude last element" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.initial"/>
  <testcase name="should return an empty when querying empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.initial"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.initial"/>
  <testcase name="should work in a lazy chain sequence" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.initial"/>
  <testcase name="should work with an `end` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.inRange"/>
  <testcase name="should work with `start` and `end` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.inRange"/>
  <testcase name="should treat falsey `start` arguments as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.inRange"/>
  <testcase name="should swap `start` and `end` when `start` is greater than `end`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.inRange"/>
  <testcase name="should work with a floating point `n` value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.inRange"/>
  <testcase name="should coerce arguments to finite numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.inRange"/>
  <testcase name="should return the intersection of the given arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should return an array of unique values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should match `NaN`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should work with large arrays of objects" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should work with large arrays of `NaN`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should work with `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should work with a single array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should treat values that are not arrays or `arguments` objects as empty" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should return a wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.intersection"/>
  <testcase name="should invert an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invert"/>
  <testcase name="should work with an object that has a `length` property" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invert"/>
  <testcase name="should accept a `multiValue` flag" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invert"/>
  <testcase name="should only add multiple values to own, not inherited, properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invert"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invert"/>
  <testcase name="should return a wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invert"/>
  <testcase name="should invoke a methods on each element of a collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should support invoking with arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should work with a function for `methodName`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should work with an object for `collection`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should treat number values for `collection` as empty" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should not error on nullish elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should not error on elements with missing properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should invoke deep property methods with the correct `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.invoke"/>
  <testcase name="should return `true` for `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isArguments"/>
  <testcase name="should return `false` for non `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isArguments"/>
  <testcase name="should work with an `arguments` object from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isArguments"/>
  <testcase name="should return `true` for arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isArray"/>
  <testcase name="should return `false` for non-arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isArray"/>
  <testcase name="should work with an array from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isArray"/>
  <testcase name="should return `true` for booleans" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isBoolean"/>
  <testcase name="should return `false` for non-booleans" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isBoolean"/>
  <testcase name="should work with a boolean from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isBoolean"/>
  <testcase name="should return `true` for dates" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isDate"/>
  <testcase name="should return `false` for non-dates" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isDate"/>
  <testcase name="should work with a date object from another realm" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isDate"/>
  <testcase name="should return `false` for plain objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isElement"/>
  <testcase name="should return `false` for non DOM elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isElement"/>
  <testcase name="should work with a DOM element from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isElement"/>
  <testcase name="should return `true` for empty values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should return `false` for non-empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should work with an object that has a `length` property" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should work with `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should work with jQuery/MooTools DOM query collections" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should not treat objects with negative lengths as array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should not treat objects with lengths larger than `MAX_SAFE_INTEGER` as array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should not treat objects with non-number lengths as array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEmpty"/>
  <testcase name="should perform comparisons between primitive values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should treat arrays with identical values but different non-index properties as equal" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should work with sparse arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between plain objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons of nested objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between object instances" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between objects with constructor properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between arrays with circular references" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between objects with circular references" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between objects with multiple circular references" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between objects with complex circular references" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between objects with shared property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should work with `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should treat `arguments` objects like `Object` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between date objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between error objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between regexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between typed arrays" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should avoid common type coercions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should return `false` for objects with custom `toString` methods" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should work as an iteratee for `_.every`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should treat objects created by `Object.create(null)` like any other plain object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should return `true` for like-objects from different documents" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should not error on DOM elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between wrapped values" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should perform comparisons between wrapped and non-wrapped values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqual"/>
  <testcase name="should provide the correct `customizer` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqualWith"/>
  <testcase name="should handle comparisons if `customizer` returns `undefined`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqualWith"/>
  <testcase name="should not handle comparisons if `customizer` returns `true`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqualWith"/>
  <testcase name="should not handle comparisons if `customizer` returns `false`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqualWith"/>
  <testcase name="should return a boolean value even if `customizer` does not" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqualWith"/>
  <testcase name="should ensure `customizer` is a function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isEqualWith"/>
  <testcase name="should return `true` for error objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isError"/>
  <testcase name="should return `false` for non error objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isError"/>
  <testcase name="should work with an error object from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isError"/>
  <testcase name="should return `true` for finite values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFinite"/>
  <testcase name="should return `false` for non-finite values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFinite"/>
  <testcase name="should return `false` for non-numeric values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFinite"/>
  <testcase name="should return `false` for numeric string values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFinite"/>
  <testcase name="should return `true` for functions" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFunction"/>
  <testcase name="should return `true` for typed array constructors" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFunction"/>
  <testcase name="should return `false` for non-functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFunction"/>
  <testcase name="should work with host objects in IE 8 document mode (test in IE 11)" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFunction"/>
  <testcase name="should work with a function from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isFunction"/>
  <testcase name="should perform a deep comparison between `object` and `source`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should match inherited `object` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should match `-0` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should not match by inherited `source` properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should return `false` when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should return `true` when comparing an empty `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should compare a variety of `source` property values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should work with a function for `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should return `true` when comparing a `source` of empty arrays and objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should return `true` when comparing an empty `source` to a nullish `object`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should search arrays of `source` for values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should perform a partial comparison of all objects within arrays of `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should handle a `source` with `undefined` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should match properties when `value` is a function" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should match properties when `value` is not a plain object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatch"/>
  <testcase name="should provide the correct `customizer` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatchWith"/>
  <testcase name="should handle comparisons if `customizer` returns `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatchWith"/>
  <testcase name="should return a boolean value even if `customizer` does not" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatchWith"/>
  <testcase name="should ensure `customizer` is a function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isMatchWith"/>
  <testcase name="should return `true` for NaNs" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNaN"/>
  <testcase name="should return `false` for non-NaNs" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNaN"/>
  <testcase name="should work with `NaN` from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNaN"/>
  <testcase name="should return `true` for native methods" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNative"/>
  <testcase name="should return `false` for non-native methods" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNative"/>
  <testcase name="should work with native functions from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNative"/>
  <testcase name="should return `true` for nulls" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNull"/>
  <testcase name="should return `false` for non-nulls" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNull"/>
  <testcase name="should work with nulls from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNull"/>
  <testcase name="should return `true` for nulls" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNil"/>
  <testcase name="should return `true` for undefinitions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNil"/>
  <testcase name="should return `false` for non-nils" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNil"/>
  <testcase name="should return `true` for numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNumber"/>
  <testcase name="should return `false` for non-numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNumber"/>
  <testcase name="should work with numbers from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNumber"/>
  <testcase name="should avoid `[xpconnect wrapped native prototype]` in Firefox" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isNumber"/>
  <testcase name="should return `true` for objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isObject"/>
  <testcase name="should return `false` for non-objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isObject"/>
  <testcase name="should work with objects from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isObject"/>
  <testcase name="should avoid V8 bug #2291 (test in Chrome 19-20)" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isObject"/>
  <testcase name="should detect plain objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isPlainObject"/>
  <testcase name="should return `true` for objects with a `[[Prototype]]` of `null`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isPlainObject"/>
  <testcase name="should return `true` for plain objects with a custom `valueOf` property" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isPlainObject"/>
  <testcase name="should return `false` for DOM elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isPlainObject"/>
  <testcase name="should return `false` for Object objects without a `toStringTag` of &quot;Object&quot;" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isPlainObject"/>
  <testcase name="should return `false` for non-objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isPlainObject"/>
  <testcase name="should work with objects from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isPlainObject"/>
  <testcase name="should return `true` for regexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isRegExp"/>
  <testcase name="should return `false` for non-regexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isRegExp"/>
  <testcase name="should work with regexes from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isRegExp"/>
  <testcase name="should return `true` for strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isString"/>
  <testcase name="should return `false` for non-strings" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isString"/>
  <testcase name="should work with strings from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isString"/>
  <testcase name="should return `true` for typed arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isTypedArray"/>
  <testcase name="should return `false` for non typed arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isTypedArray"/>
  <testcase name="should work with typed arrays from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isTypedArray"/>
  <testcase name="should return `true` for `undefined` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isUndefined"/>
  <testcase name="should return `false` for non `undefined` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isUndefined"/>
  <testcase name="should work with `undefined` from another realm" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.isUndefined"/>
  <testcase name="should return `false` for subclassed values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isType checks"/>
  <testcase name="should not error on host objects (test in IE)" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).isType checks"/>
  <testcase name="should provide arguments to `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should return `_.identity` when `func` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should return an iteratee created by `_.matches` when `func` is an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should not change match behavior if `source` is augmented" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should return an iteratee created by `_.matchesProperty` when `func` is a number or string and a value is provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should support deep paths for &quot;_.matchesProperty&quot; shorthands" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should return an iteratee created by `_.property` when `func` is a number or string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should support deep paths for &quot;_.property&quot; shorthands" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should work with functions created by `_.partial` and `_.partialRight`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.iteratee"/>
  <testcase name="`_.countBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.dropRightWhile` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.dropWhile` should use `_.iteratee` internally" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.every` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.filter` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.find` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.findIndex` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.findLast` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.findLastIndex` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.findLastKey` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.findKey` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.groupBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.indexBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.map` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.mapKeys` should use `_.iteratee` internally" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.mapValues` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.maxBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.minBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.partition` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.reduce` should use `_.iteratee` internally" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.reduceRight` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.reject` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.remove` should use `_.iteratee` internally" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.some` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.sortBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.sortedIndexBy` should use `_.iteratee` internally" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.sortedLastIndexBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.sumBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.takeRightWhile` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.takeWhile` should use `_.iteratee` internally" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.transform` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.uniqBy` should use `_.iteratee` internally" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).custom `_.iteratee` methods"/>
  <testcase name="`_.keys` should return the keys of an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should coerce primitives to objects (test in IE 9)" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should coerce nullish values to objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should return keys for custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should not include inherited properties of arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should work with `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should return keys for custom properties on `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should not include inherited properties of `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should work with string objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should return keys for custom properties on string objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should not include inherited properties of string objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` skips the `constructor` property on prototype objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keys` should not include inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should return the keys of an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should coerce primitives to objects (test in IE 9)" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should coerce nullish values to objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should return keys for custom properties on arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should  include inherited properties of arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should work with `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should return keys for custom properties on `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should  include inherited properties of `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should work with string objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should return keys for custom properties on string objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should  include inherited properties of string objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` skips the `constructor` property on prototype objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="`_.keysIn` should  include inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).keys methods"/>
  <testcase name="should return the last element" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.last"/>
  <testcase name="should return `undefined` when querying empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.last"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.last"/>
  <testcase name="should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.last"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.last"/>
  <testcase name="should not execute immediately when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.last"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.last"/>
  <testcase name="should return `true` if `value` is less than `other`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lt"/>
  <testcase name="should return `false` if `value` is greater than or equal to `other`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lt"/>
  <testcase name="should return `true` if `value` is less than or equal to `other`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lte"/>
  <testcase name="should return `false` if `value` is greater than `other`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lte"/>
  <testcase name="should return the index of the last matched value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="should work with a positive `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="should work with `fromIndex` >= `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="should work with a negative `fromIndex`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="should work with a negative `fromIndex` &lt;= `-array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="should treat falsey `fromIndex` values, except `0` and `NaN`, as `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="should coerce `fromIndex` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="should perform a binary search when `fromIndex` is a non-number truthy value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.lastIndexOf"/>
  <testcase name="`_.indexOf` should accept a falsey `array` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.indexOf` should return `-1` for an unmatched value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.indexOf` should not match values on empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.indexOf` should match `NaN`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.indexOf` should match `-0` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.lastIndexOf` should accept a falsey `array` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.lastIndexOf` should return `-1` for an unmatched value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.lastIndexOf` should not match values on empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.lastIndexOf` should match `NaN`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="`_.lastIndexOf` should match `-0` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).indexOf methods"/>
  <testcase name="should map values in `collection` to a new array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should iterate over own properties of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should work on an object with no `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should handle object arguments with non-numeric length properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should treat a nodelist as an array-like object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should accept a falsey `collection` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should treat number values for `collection` as empty" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should return a wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should provide the correct `predicate` arguments in a lazy chain sequence" time="0.005" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.map"/>
  <testcase name="should map keys in `object` to a new object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys"/>
  <testcase name="should treat arrays like objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys"/>
  <testcase name="should work on an object with no `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys"/>
  <testcase name="should map values in `object` to a new object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapValues"/>
  <testcase name="should treat arrays like objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapValues"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapValues"/>
  <testcase name="should work on an object with no `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapValues"/>
  <testcase name="should iterate over own properties of objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should accept a falsey `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should return a wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should iterate over own properties of objects " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should accept a falsey `object` argument " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should provide the correct `iteratee` arguments " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should return a wrapped value when chaining " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mapKeys and lodash.mapValues"/>
  <testcase name="should create a function that performs a deep comparison between a given object and `source`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should match inherited `value` properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should match `-0` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should not match by inherited `source` properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should return `false` when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should return `true` when comparing an empty `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should compare a variety of `source` property values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should compare functions by reference" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should not change match behavior if `source` is augmented" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should return `true` when comparing a `source` of empty arrays and objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should return `true` when comparing an empty `source` to a nullish `object`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should search arrays of `source` for values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should perform a partial comparison of all objects within arrays of `source`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should handle a `source` with `undefined` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should handle a primitive `object` and a `source` with `undefined` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should match properties when `value` is a function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should match properties when `value` is not a plain object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should work with a function for `source`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matches"/>
  <testcase name="should create a function that performs a deep comparison between a property value and `value`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should support deep paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should coerce key to a string" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should match a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should work with non-string `path` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should return `false` if parts of `path` are missing" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should match inherited `value` properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should match `-0` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should not match by inherited `source` properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should return `false` when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should return `false` with deep paths when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should compare a variety of values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should compare functions by reference" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should not change match behavior if `value` is augmented" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should return `true` when comparing a `value` of empty arrays and objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should search arrays of `value` for values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should perform a partial comparison of all objects within arrays of `value`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should handle a `value` with `undefined` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should handle a primitive `object` and a `source` with `undefined` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should work with a function for `value`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should match properties when `value` is not a plain object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.matchesProperty"/>
  <testcase name="should return the largest value from a collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.max"/>
  <testcase name="should return `-Infinity` for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.max"/>
  <testcase name="should return `-Infinity` for non-numeric collection values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.max"/>
  <testcase name="should memoize results based on the first argument provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should support a `resolver` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should throw a TypeError if `resolve` is truthy and not a function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should not error if `resolver` is falsey" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should check cache for own properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should expose a `cache` object on the `memoized` function which implements `Map` interface" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should skip the `__proto__` key" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should allow `_.memoize.Cache` to be customized" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should works with an immutable `_.memoize.Cache` " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.memoize"/>
  <testcase name="should merge `source` into the destination object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should merge sources containing circular references" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should treat sources that are sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should skip `undefined` values in arrays if a destination value exists" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should merge `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should merge typed arrays" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should work with four arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should assign `null` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should not assign `undefined` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should not error on DOM elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should assign non array/plain-object values directly" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should convert values to arrays when merging with arrays of `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should not convert strings to arrays when merging with arrays of `source`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should work with a function for `object`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should work with a non-plain `object` value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should pass thru primitive `object` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.merge"/>
  <testcase name="should handle merging if `customizer` returns `undefined`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mergeWith"/>
  <testcase name="should defer to `customizer` when it returns a value other than `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mergeWith"/>
  <testcase name="should create a function that calls a method of a given object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should work with deep property values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should work with non-string `path` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should coerce key to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should work with inherited property values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should use a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should return `undefined` when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should return `undefined` with deep paths when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should return `undefined` if parts of `path` are missing" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should apply partial arguments to function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should invoke deep property methods with the correct `this` binding" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.method"/>
  <testcase name="should create a function that calls a method of a given key" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should work with deep property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should work with non-string `path` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should coerce key to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should work with inherited property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should use a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should return `undefined` when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should return `undefined` with deep paths when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should return `undefined` if parts of `path` are missing" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should apply partial arguments to function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should invoke deep property methods with the correct `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.methodOf"/>
  <testcase name="should return the smallest value from a collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.min"/>
  <testcase name="should return `Infinity` for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.min"/>
  <testcase name="should return `Infinity` for non-numeric collection values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.min"/>
  <testcase name="`_.max` should work with Date objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.max` should work with extremely large arrays" time="2.008" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.max` should work when chaining on an array with only one value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.maxBy` should work with Date objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.maxBy` should work with extremely large arrays" time="2.263" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.maxBy` should work when chaining on an array with only one value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.min` should work with Date objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.min` should work with extremely large arrays" time="1.681" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.min` should work when chaining on an array with only one value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.minBy` should work with Date objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.minBy` should work with extremely large arrays" time="1.677" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.minBy` should work when chaining on an array with only one value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.maxBy` should work with an `iteratee` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.maxBy` should work when `iteratee` returns +/-Infinity" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.minBy` should work with an `iteratee` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee` " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="`_.minBy` should work when `iteratee` returns +/-Infinity" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).extremum methods"/>
  <testcase name="should mixin `source` methods into lodash" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should mixin chaining methods by reference" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should use `this` as the default `object` value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should accept an `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should return `object`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should work with a function for `object`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should not assign inherited `source` methods" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should accept an `options` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should not extend lodash when an `object` is provided with an empty `options` object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should not error for non-object `options` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should not return the existing wrapped value when chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should produce methods that work in a lazy chain sequence" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.mixin"/>
  <testcase name="should transform each argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.modArgs"/>
  <testcase name="should flatten `transforms`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.modArgs"/>
  <testcase name="should not transform any argument greater than the number of transforms" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.modArgs"/>
  <testcase name="should not transform any arguments if no transforms are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.modArgs"/>
  <testcase name="should not pass `undefined` if there are more `transforms` than `arguments`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.modArgs"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.modArgs"/>
  <testcase name="should create a function that negates the result of `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.negate"/>
  <testcase name="should return `undefined`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.noop"/>
  <testcase name="should return the `lodash` function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.noConflict"/>
  <testcase name="should work with a `root` of `this`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.noConflict"/>
  <testcase name="should return the number of milliseconds that have elapsed since the Unix epoch" time="0.045" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.now"/>
  <testcase name="should flatten `props`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.omit"/>
  <testcase name="should work with a primitive `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.omit"/>
  <testcase name="should return an empty object when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.omit"/>
  <testcase name="should work with `arguments` objects as secondary arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.omit"/>
  <testcase name="should coerce property names to strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.omit"/>
  <testcase name="should work with a predicate argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.omitBy"/>
  <testcase name="`_.omit` should create an object with omitted properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).omit methods"/>
  <testcase name="`_.omit` should iterate over inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).omit methods"/>
  <testcase name="`_.omit` should work with an array `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).omit methods"/>
  <testcase name="`_.omitBy` should create an object with omitted properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).omit methods"/>
  <testcase name="`_.omitBy` should iterate over inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).omit methods"/>
  <testcase name="`_.omitBy` should work with an array `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).omit methods"/>
  <testcase name="should invoke `func` once" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.once"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.once"/>
  <testcase name="should ignore recursive calls" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.once"/>
  <testcase name="should not throw more than once" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.once"/>
  <testcase name="should pad a string to a given length" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pad"/>
  <testcase name="should truncate pad characters to fit the pad length" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pad"/>
  <testcase name="should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pad"/>
  <testcase name="should pad a string to a given length" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.padLeft"/>
  <testcase name="should truncate pad characters to fit the pad length" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.padLeft"/>
  <testcase name="should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.padLeft"/>
  <testcase name="should pad a string to a given length" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.padRight"/>
  <testcase name="should truncate pad characters to fit the pad length" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.padRight"/>
  <testcase name="should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.padRight"/>
  <testcase name="`_.pad` should not pad is string is >= `length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.pad` should treat negative `length` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.pad` should coerce `length` to a number" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.pad` should treat nullish values as empty strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.pad` should work with nullish or empty string values for `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padLeft` should not pad is string is >= `length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padLeft` should treat negative `length` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padLeft` should coerce `length` to a number" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padLeft` should treat nullish values as empty strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padLeft` should work with nullish or empty string values for `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padRight` should not pad is string is >= `length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padRight` should treat negative `length` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padRight` should coerce `length` to a number" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padRight` should treat nullish values as empty strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="`_.padRight` should work with nullish or empty string values for `chars`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pad methods"/>
  <testcase name="should create a two dimensional array of key-value pairs" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pairs"/>
  <testcase name="should work with an object that has a `length` property" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pairs"/>
  <testcase name="should work with strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pairs"/>
  <testcase name="should accept a `radix` argument" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.parseInt"/>
  <testcase name="should use a radix of `10`, for non-hexadecimals, if `radix` is `undefined` or `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.parseInt"/>
  <testcase name="should use a radix of `16`, for hexadecimals, if `radix` is `undefined` or `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.parseInt"/>
  <testcase name="should use a radix of `10` for string with leading zeros" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.parseInt"/>
  <testcase name="should parse strings with leading whitespace (test in Chrome, Firefox, and Opera)" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.parseInt"/>
  <testcase name="should coerce `radix` to a number" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.parseInt"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.parseInt"/>
  <testcase name="`_.partial` partially applies arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` creates a function that can be invoked with additional arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` works when there are no partially applied arguments and the created function is invoked without additional arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` works when there are no partially applied arguments and the created function is invoked with additional arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` should support placeholders" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` creates a function with a `length` of `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` ensure `new partialed` is an instance of `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` should clone metadata for created functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partial` should work with curried functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="should work with placeholders and curried functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` partially applies arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` creates a function that can be invoked with additional arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` works when there are no partially applied arguments and the created function is invoked without additional arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` works when there are no partially applied arguments and the created function is invoked with additional arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` should support placeholders" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` creates a function with a `length` of `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` ensure `new partialed` is an instance of `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` should clone metadata for created functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="`_.partialRight` should work with curried functions" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="should work with placeholders and curried functions " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).partial methods"/>
  <testcase name="should work as a deep `_.defaults`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.partialRight"/>
  <testcase name="should work with combinations of partial functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).methods using `createWrapper`"/>
  <testcase name="should work with combinations of bound and partial functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).methods using `createWrapper`"/>
  <testcase name="should work with combinations of functions with placeholders" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).methods using `createWrapper`"/>
  <testcase name="should work with combinations of functions with overlaping placeholders" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).methods using `createWrapper`"/>
  <testcase name="should work with recursively bound functions" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).methods using `createWrapper`"/>
  <testcase name="should work when hot" time="0.09" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).methods using `createWrapper`"/>
  <testcase name="should return two groups of elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.partition"/>
  <testcase name="should use `_.identity` when `predicate` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.partition"/>
  <testcase name="should provide the correct `predicate` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.partition"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.partition"/>
  <testcase name="should work with a number for `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.partition"/>
  <testcase name="should work with an object for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.partition"/>
  <testcase name="should flatten `props`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pick"/>
  <testcase name="should work with a primitive `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pick"/>
  <testcase name="should return an empty object when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pick"/>
  <testcase name="should work with `arguments` objects as secondary arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pick"/>
  <testcase name="should coerce property names to strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pick"/>
  <testcase name="should work with a predicate argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pickBy"/>
  <testcase name="`_.pick` should create an object of picked properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pick methods"/>
  <testcase name="`_.pick` should iterate over inherited properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pick methods"/>
  <testcase name="`_.pick` should work with an array `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pick methods"/>
  <testcase name="`_.pickBy` should create an object of picked properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pick methods"/>
  <testcase name="`_.pickBy` should iterate over inherited properties" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pick methods"/>
  <testcase name="`_.pickBy` should work with an array `object` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).pick methods"/>
  <testcase name="should create a function that plucks a property value of a given object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should pluck deep property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should work with non-string `path` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should coerce key to a string" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should pluck inherited property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should pluck a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should return `undefined` when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should return `undefined` with deep paths when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should return `undefined` if parts of `path` are missing" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.property"/>
  <testcase name="should create a function that plucks a property value of a given key" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should pluck deep property values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should work with non-string `path` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should coerce key to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should pluck inherited property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should pluck a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should return `undefined` when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should return `undefined` with deep paths when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should return `undefined` if parts of `path` are missing" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.propertyOf"/>
  <testcase name="should modify and return the array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pull"/>
  <testcase name="should preserve holes in arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pull"/>
  <testcase name="should treat holes as `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pull"/>
  <testcase name="should match `NaN`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pull"/>
  <testcase name="should modify the array and return removed elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should work with unsorted indexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should work with repeated indexes" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should use `undefined` for nonexistent indexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should flatten `indexes`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should return an empty array when no indexes are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should work with non-index paths" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should work with deep paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should work with a falsey `array` argument when keys are provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.pullAt"/>
  <testcase name="should return `0` or `1` when arguments are not provided" time="0.012" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should support a `min` and `max` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should support not providing a `max` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should support large integer values" time="0.007" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should coerce arguments to numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should support floats" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should support providing a `floating` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.random"/>
  <testcase name="should work with an `end` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should work with `start` and `end` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should work with `start`, `end`, and `step` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should support a `step` of `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should work with a `step` larger than `end`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should work with a negative `step` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should treat falsey `start` arguments as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should coerce arguments to finite numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.range"/>
  <testcase name="should reorder arguments provided to `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should work with repeated indexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should use `undefined` for nonexistent indexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should use `undefined` for non-index values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should not rearrange arguments when no indexes are provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should accept multiple index arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should accept multiple arrays of indexes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should work with fewer indexes than arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should work on functions that have been rearged" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rearg"/>
  <testcase name="should use the first element of a collection as the default `accumulator`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.reduce"/>
  <testcase name="should provide the correct `iteratee` arguments when iterating an array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.reduce"/>
  <testcase name="should provide the correct `iteratee` arguments when iterating an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.reduce"/>
  <testcase name="should use the last element of a collection as the default `accumulator`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.reduceRight"/>
  <testcase name="should provide the correct `iteratee` arguments when iterating an array" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.reduceRight"/>
  <testcase name="should provide the correct `iteratee` arguments when iterating an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.reduceRight"/>
  <testcase name="`_.reduce` should reduce a collection to a single value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduce` should support empty collections without an initial `accumulator` value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduce` should support empty collections with an initial `accumulator` value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduce` should handle an initial `accumulator` value of `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduce` should return `undefined` for empty collections when no `accumulator` is provided (test in IE > 9 and modern browsers)" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduce` should return an unwrapped value when implicityly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduce` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduceRight` should reduce a collection to a single value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduceRight` should support empty collections without an initial `accumulator` value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduceRight` should support empty collections with an initial `accumulator` value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduceRight` should handle an initial `accumulator` value of `undefined`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduceRight` should return `undefined` for empty collections when no `accumulator` is provided (test in IE > 9 and modern browsers)" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduceRight` should return an unwrapped value when implicityly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="`_.reduceRight` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).reduce methods"/>
  <testcase name="should return elements the `predicate` returns falsey for" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.reject"/>
  <testcase name="`_.filter` should not modify the resulting value from within `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.filter` should work with a &quot;_.property&quot; style `predicate`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.filter` should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.filter` should not modify wrapped values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.filter` should work in a lazy chain sequence" time="0.005" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.filter` should provide the correct `predicate` arguments in a lazy chain sequence" time="0.005" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.reject` should not modify the resulting value from within `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.reject` should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.reject` should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.reject` should not modify wrapped values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.reject` should work in a lazy chain sequence" time="0.006" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="`_.reject` should provide the correct `predicate` arguments in a lazy chain sequence" time="0.005" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).filter methods"/>
  <testcase name="should modify the array and return removed elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should provide the correct `predicate` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should work with a &quot;_.matchesProperty&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should preserve holes in arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should treat holes as `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should not mutate the array until all elements to remove are determined" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.remove"/>
  <testcase name="should repeat a string `n` times" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.repeat"/>
  <testcase name="should return an empty string for negative `n` or `n` of `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.repeat"/>
  <testcase name="should coerce `n` to a number" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.repeat"/>
  <testcase name="should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.repeat"/>
  <testcase name="should invoke function values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.result"/>
  <testcase name="should invoke default function values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.result"/>
  <testcase name="should invoke deep property methods with the correct `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.result"/>
  <testcase name="`_.get` should get property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should get deep property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should get a key over a path" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should not coerce array paths to strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should ignore empty brackets" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should handle empty paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should handle complex paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should return `undefined` when `object` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should return `undefined` with deep paths when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should return `undefined` if parts of `path` are missing" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should be able to return `null` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should follow `path` over non-plain objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.get` should return the specified default value for `undefined` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should get property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should get deep property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should get a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should not coerce array paths to strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should ignore empty brackets" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should handle empty paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should handle complex paths" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should return `undefined` when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should return `undefined` with deep paths when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should return `undefined` if parts of `path` are missing" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should be able to return `null` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should follow `path` over non-plain objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="`_.result` should return the specified default value for `undefined` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.get and lodash.result"/>
  <testcase name="should accept a falsey `array` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rest"/>
  <testcase name="should exclude the first element" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rest"/>
  <testcase name="should return an empty when querying empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rest"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rest"/>
  <testcase name="should work in a lazy chain sequence" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rest"/>
  <testcase name="should not execute subsequent iteratees on an empty array in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.rest"/>
  <testcase name="should apply a rest parameter to `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.restParam"/>
  <testcase name="should work with `start`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.restParam"/>
  <testcase name="should treat `start` as `0` for negative or `NaN` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.restParam"/>
  <testcase name="should coerce `start` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.restParam"/>
  <testcase name="should use an empty array when `start` is not reached" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.restParam"/>
  <testcase name="should work on functions with more than three params" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.restParam"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.restParam"/>
  <testcase name="`_.ceil` should return a rounded number without a precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.ceil` should return a rounded number with a precision of `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.ceil` should coerce `precision` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.ceil` should return a rounded number with a positive precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.ceil` should return a rounded number with a negative precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.floor` should return a rounded number without a precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.floor` should return a rounded number with a precision of `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.floor` should coerce `precision` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.floor` should return a rounded number with a positive precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.floor` should return a rounded number with a negative precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.round` should return a rounded number without a precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.round` should return a rounded number with a precision of `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.round` should coerce `precision` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.round` should return a rounded number with a positive precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="`_.round` should return a rounded number with a negative precision" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).round methods"/>
  <testcase name="should not require a fully populated `context` object" time="0.008" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.runInContext"/>
  <testcase name="should use a zeroed `_.uniqueId` counter" time="0.007" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.runInContext"/>
  <testcase name="should return a random element" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return two random elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should contain elements of the collection" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should treat falsey `n` values, except nullish, as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return an empty array when `n` &lt; `1` or `NaN`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return all elements when `n` >= `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should coerce `n` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return `undefined` when sampling an empty array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return an empty array for empty collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should sample an object" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return a wrapped value when chaining and `n` is provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return an unwrapped value when chaining and `n` is not provided" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should use a stored reference to `_.sample` when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sample"/>
  <testcase name="should work with a `customizer` callback" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.setWith"/>
  <testcase name="should work with a `customizer` that returns `undefined`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.setWith"/>
  <testcase name="`_.set` should set property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should set deep property values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should set a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should not coerce array paths to strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should ignore empty brackets" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should handle empty paths" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should handle complex paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should create parts of `path` that are missing" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should not error when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should follow `path` over non-plain objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should not error on paths over primitive values in strict mode" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should not create an array for missing non-index property names that start with numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.set` should not assign values that are the same as their destinations" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should set property values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should set deep property values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should set a key over a path" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should not coerce array paths to strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should ignore empty brackets" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should handle empty paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should handle complex paths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should create parts of `path` that are missing" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should not error when `object` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should follow `path` over non-plain objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should not error on paths over primitive values in strict mode" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should not create an array for missing non-index property names that start with numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="`_.setWith` should not assign values that are the same as their destinations" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).set methods"/>
  <testcase name="should return a new array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.shuffle"/>
  <testcase name="should contain the same elements after a collection is shuffled" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.shuffle"/>
  <testcase name="should shuffle small collections" time="0.021" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.shuffle"/>
  <testcase name="should treat number values for `collection` as empty" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.shuffle"/>
  <testcase name="should return the number of own enumerable properties of an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should return the length of an array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should accept a falsey `object` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should work with `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should work with jQuery/MooTools DOM query collections" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should not treat objects with negative lengths as array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should not treat objects with lengths larger than `MAX_SAFE_INTEGER` as array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should not treat objects with non-number lengths as array-like" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.size"/>
  <testcase name="should use a default `start` of `0` and a default `end` of `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a positive `start`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a `start` >= `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should treat falsey `start` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a negative `start`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a negative `start` &lt;= negative `array.length`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with `start` >= `end`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a positive `end`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a `end` >= `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should treat falsey `end` values, except `undefined`, as `0`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a negative `end`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work with a negative `end` &lt;= negative `array.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should coerce `start` and `end` to integers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should work in a lazy chain sequence" time="0.014" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice"/>
  <testcase name="should return `false` for empty collections" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should return `true` if `predicate` returns truthy for any element in the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should return `false` if `predicate` returns falsey for all elements in the collection" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should return `true` as soon as `predicate` returns truthy" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should work with a &quot;_.property&quot; style `predicate`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should work with a &quot;_.matches&quot; style `predicate`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should use `_.identity` when `predicate` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.some"/>
  <testcase name="should sort in ascending order" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should use `_.identity` when `iteratee` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should work with an object for `collection`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should move `null`, `undefined`, and `NaN` values to the end" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should treat number values for `collection` as empty" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should coerce arrays returned from `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortBy"/>
  <testcase name="should sort multiple properties by specified orders" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortByOrder"/>
  <testcase name="should sort a property in ascending order when its order is not specified" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sortByOrder"/>
  <testcase name="`_.sortBy` should sort mutliple properties in ascending order" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortBy` should support iteratees" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortBy` should perform a stable sort (test in IE > 8, Opera, and V8)" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortBy` should not error on nullish elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortBy` should work as an iteratee for methods like `_.reduce`" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortByOrder` should sort mutliple properties in ascending order" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortByOrder` should support iteratees" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortByOrder` should perform a stable sort (test in IE > 8, Opera, and V8)" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortByOrder` should not error on nullish elements" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortByOrder` should work as an iteratee for methods like `_.reduce`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortBy methods"/>
  <testcase name="`_.sortedIndex` should return the insert index" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedIndex` should work with an array of strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedIndex` should accept a falsey `array` argument and a `value`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedIndex` should align with `_.sortBy`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedLastIndex` should return the insert index" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedLastIndex` should work with an array of strings" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedLastIndex` should accept a falsey `array` argument and a `value`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedLastIndex` should align with `_.sortBy`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndex methods"/>
  <testcase name="`_.sortedIndexBy` should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndexBy methods"/>
  <testcase name="`_.sortedIndexBy` should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndexBy methods"/>
  <testcase name="`_.sortedIndexBy` should support arrays larger than `MAX_ARRAY_LENGTH / 2`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndexBy methods"/>
  <testcase name="`_.sortedLastIndexBy` should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndexBy methods"/>
  <testcase name="`_.sortedLastIndexBy` should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndexBy methods"/>
  <testcase name="`_.sortedLastIndexBy` should support arrays larger than `MAX_ARRAY_LENGTH / 2`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).sortedIndexBy methods"/>
  <testcase name="should spread arguments to `func`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.spread"/>
  <testcase name="should throw a TypeError when receiving a non-array `array` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.spread"/>
  <testcase name="should provide the correct `func` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.spread"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.spread"/>
  <testcase name="should return `true` if a string starts with `target`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="should return `false` if a string does not start with `target`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="should work with a `position` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="should work with `position` >= `string.length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="should treat falsey `position` values as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="should treat a negative `position` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="should coerce `position` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="should return `true` when `target` is an empty string regardless of `position`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith"/>
  <testcase name="`_.startsWith` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith and lodash.endsWith"/>
  <testcase name="`_.startsWith` should coerce `target` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith and lodash.endsWith"/>
  <testcase name="`_.startsWith` should coerce `position` to a number" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith and lodash.endsWith"/>
  <testcase name="`_.endsWith` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith and lodash.endsWith"/>
  <testcase name="`_.endsWith` should coerce `target` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith and lodash.endsWith"/>
  <testcase name="`_.endsWith` should coerce `position` to a number" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.startsWith and lodash.endsWith"/>
  <testcase name="should return the sum of an array of numbers" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sum"/>
  <testcase name="should return `0` when passing empty `array` values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sum"/>
  <testcase name="should coerce values to numbers and `NaN` to `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sum"/>
  <testcase name="should work with an `iteratee` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sumBy"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sumBy"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.sumBy"/>
  <testcase name="should intercept and return the given value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.tap"/>
  <testcase name="should intercept unwrapped values and return wrapped values when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.tap"/>
  <testcase name="should escape values in &quot;escape&quot; delimiters" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should evaluate JavaScript in &quot;evaluate&quot; delimiters" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should interpolate data object properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should support escaped values in &quot;interpolation&quot; delimiters" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with &quot;interpolate&quot; delimiters containing ternary operators" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with &quot;interpolate&quot; delimiters containing global values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with complex &quot;interpolate&quot; delimiters" time="0.007" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should parse ES6 template delimiters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should not reference `_.escape` when &quot;escape&quot; delimiters are not used" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should allow referencing variables declared in &quot;evaluate&quot; delimiters from other delimiters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should support single line comments in &quot;evaluate&quot; delimiters (test production builds)" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with custom delimiters" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with custom delimiters containing special characters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with strings without delimiters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should support the &quot;imports&quot; option" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should support the &quot;variable&quot; options" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should support the legacy `options` param signature" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should use a `with` statement by default" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with `this` references" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with backslashes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with escaped characters in string literals" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should handle \u2028 &amp; \u2029 characters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with statements containing quotes" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work with templates containing newlines and comments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should not error with IE conditional comments enabled (test with development build)" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should tokenize delimiters" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should evaluate delimiters once" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should match delimiters before escaping text" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should resolve nullish values to an empty string" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should parse delimiters without newlines" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should support recursive calls" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should coerce `text` argument to a string" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should not augment the `options` object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should not modify `_.templateSettings` when `options` are provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should not error for non-object `data` and `options` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should expose the source for compiled templates" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should expose the source when a SyntaxError occurs" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should not include sourceURLs in the source" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.template"/>
  <testcase name="should truncate to a length of `30` by default" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should not truncate if `string` is &lt;= `length`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should truncate string the given length" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should support a `omission` option" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should support a `length` option" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should support a `separator` option" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should treat negative `length` as `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should coerce `length` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.trunc"/>
  <testcase name="should throttle a function" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="subsequent calls should return the result of the first call" time="0.08" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should clear timeout when `func` is called" time="0.106" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should not trigger a trailing call when invoked once" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should trigger a call when invoked repeatedly" time="0.337" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should trigger a call when invoked repeatedly and `leading` is `false`" time="0.338" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should apply default options" time="0.142" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should support a `leading` option" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should support a `trailing` option" time="0.27" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="should not update `lastCalled`, at the end of the timeout, when `trailing` is `false`" time="0.205" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.throttle"/>
  <testcase name="_.debounce should not error for non-object `options` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.debounce should have a default `wait` of `0`" time="0.047" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.debounce should invoke `func` with the correct `this` binding" time="0.077" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.debounce supports recursive calls" time="0.271" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.debounce should work if the system time is set backwards" time="0.088" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.debounce should support cancelling delayed calls" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.debounce should reset `lastCalled` after cancelling" time="0.077" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.throttle should not error for non-object `options` values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.throttle should have a default `wait` of `0`" time="0.046" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.throttle should invoke `func` with the correct `this` binding" time="0.077" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.throttle supports recursive calls" time="0.269" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.throttle should work if the system time is set backwards" time="0.089" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.throttle should support cancelling delayed calls" time="0.077" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="_.throttle should reset `lastCalled` after cancelling" time="0.078" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.debounce and lodash.throttle"/>
  <testcase name="should coerce non-finite `n` values to `0`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.times"/>
  <testcase name="should coerce `n` to an integer" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.times"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.times"/>
  <testcase name="should use `_.identity` when `iteratee` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.times"/>
  <testcase name="should return an array of the results of each `iteratee` execution" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.times"/>
  <testcase name="should return an empty array for falsey and negative `n` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.times"/>
  <testcase name="should return a wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.times"/>
  <testcase name="should return the values of objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.toArray"/>
  <testcase name="should work with a string for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.toArray"/>
  <testcase name="should work in a lazy chain sequence" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.toArray"/>
  <testcase name="should return a dense array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should treat array-like objects like arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should return a shallow clone of arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should work with a node list for `collection`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should return a dense array " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should treat array-like objects like arrays " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should return a shallow clone of arrays " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should work with a node list for `collection` " time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.slice and lodash.toArray"/>
  <testcase name="should flatten inherited properties" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.toPlainObject"/>
  <testcase name="should convert `arguments` objects to plain objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.toPlainObject"/>
  <testcase name="should convert arrays to plain objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.toPlainObject"/>
  <testcase name="should create an object with the same `[[Prototype]]` as `object` when `accumulator` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should support an `accumulator` value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should treat sparse arrays as dense" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should work without an `iteratee` argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should check that `object` is an object before using its `[[Prototype]]`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should create an empty object when provided a falsey `object` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should provide the correct `iteratee` arguments when transforming an array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should provide the correct `iteratee` arguments when transforming an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="should create an object from the same realm as `object`" time="0.004" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.transform"/>
  <testcase name="`_.trim` should remove leading and trailing whitespace" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should not remove non-whitespace characters" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should remove leading and trailing `chars`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should coerce `chars` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should return an empty string for empty values and `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should work with nullish or empty string values for `chars`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trim` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should remove leading whitespace" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should not remove non-whitespace characters" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should remove leading `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should coerce `chars` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should return an empty string for empty values and `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should work with nullish or empty string values for `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimLeft` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should remove trailing whitespace" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should not remove non-whitespace characters" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should coerce `string` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should remove trailing `chars`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should coerce `chars` to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should return an empty string for empty values and `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should work with nullish or empty string values for `chars`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="`_.trimRight` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).trim methods"/>
  <testcase name="should unescape entities in order" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unescape"/>
  <testcase name="should unescape the proper entities" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unescape"/>
  <testcase name="should not unescape the &quot;&amp;#x2F;&quot; entity" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unescape"/>
  <testcase name="should handle strings with nothing to unescape" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unescape"/>
  <testcase name="should unescape the same characters escaped by `_.escape`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unescape"/>
  <testcase name="should return the union of the given arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.union"/>
  <testcase name="should not flatten nested arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.union"/>
  <testcase name="should ignore values that are not arrays or `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.union"/>
  <testcase name="should perform an unsorted uniq when used as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniq"/>
  <testcase name="should work with an `iteratee` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="should work with `iteratee` without specifying `isSorted`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="should work with a &quot;_.property&quot; style `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="should work with an array for `iteratee`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="should work with an object for `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="should work with a number for `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="should work with a string for `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqBy"/>
  <testcase name="`_.uniq` should return unique values of an unsorted array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should return unique values of a sorted array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should treat object instances as unique" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should not treat `NaN` as unique" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should work with `isSorted`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should work with large arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should work with large arrays of boolean, `NaN`, and nullish values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should work with large arrays of symbols" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should work with large arrays of well-known symbols" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniq` should distinguish between numbers and numeric strings" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should return unique values of an unsorted array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should return unique values of a sorted array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should treat object instances as unique" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should not treat `NaN` as unique" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should work with `isSorted`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should work with large arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should work with large arrays of boolean, `NaN`, and nullish values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should work with large arrays of symbols" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should work with large arrays of well-known symbols" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="`_.uniqBy` should distinguish between numbers and numeric strings" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).uniq methods"/>
  <testcase name="should generate unique ids" time="0.009" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqueId"/>
  <testcase name="should return a string value when not providing a prefix argument" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqueId"/>
  <testcase name="should coerce the prefix argument to a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.uniqueId"/>
  <testcase name="should unzip arrays combining regrouped elements with `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzipWith"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzipWith"/>
  <testcase name="should perform a basic unzip when `iteratee` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzipWith"/>
  <testcase name="should get the values of an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.values"/>
  <testcase name="should work with an object that has a `length` property" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.values"/>
  <testcase name="should use strict equality to determine the values to reject" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.without"/>
  <testcase name="should remove all occurrences of each value from an array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.without"/>
  <testcase name="should treat latin-1 supplementary letters as words" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.words"/>
  <testcase name="should not treat mathematical operators as words" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.words"/>
  <testcase name="should work as an iteratee for methods like `_.map`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.words"/>
  <testcase name="should work with compound words" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.words"/>
  <testcase name="should work with compound words containing diacritical marks" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.words"/>
  <testcase name="should create a wrapped function" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.wrap"/>
  <testcase name="should provide the correct `wrapper` arguments" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.wrap"/>
  <testcase name="should use `_.identity` when `wrapper` is nullish" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.wrap"/>
  <testcase name="should not set a `this` binding" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.wrap"/>
  <testcase name="should return the symmetric difference of the given arrays" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.xor"/>
  <testcase name="should return an array of unique values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.xor"/>
  <testcase name="should return a new array when a single array is provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.xor"/>
  <testcase name="should ignore individual secondary arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.xor"/>
  <testcase name="should ignore values that are not arrays or `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.xor"/>
  <testcase name="should return a wrapped value when chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.xor"/>
  <testcase name="should work when in a lazy chain sequence before `first` or `last`" time="0.007" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.xor"/>
  <testcase name="should skip falsey elements in a given two dimensional array" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should zip together key/value arrays into an object" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should ignore extra `values`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should accept a two dimensional array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should not assume `keys` is two dimensional if `values` is not provided" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should accept a falsey `array` argument" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should support consuming the return value of `_.pairs`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should work in a lazy chain sequence" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipObject"/>
  <testcase name="should zip arrays combining grouped elements with `iteratee`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipWith"/>
  <testcase name="should provide the correct `iteratee` arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipWith"/>
  <testcase name="should perform a basic zip when `iteratee` is nullish" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.zipWith"/>
  <testcase name="`_.unzip` should work with an empty array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.unzip` should work with 0-tuples" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.unzip` should work with 2-tuples" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.unzip` should work with 3-tuples" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.unzip` should work with tuples of different lengths" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.unzip` should treat falsey values as empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.unzip` should ignore values that are not arrays or `arguments` objects" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.unzip` should support consuming its return value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should work with an empty array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should work with 0-tuples" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should work with 2-tuples" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should work with 3-tuples" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should work with tuples of different lengths" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should treat falsey values as empty arrays" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should ignore values that are not arrays or `arguments` objects" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="`_.zip` should support consuming its return value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash.unzip and lodash.zip"/>
  <testcase name="should execute the chained sequence and returns the wrapped result" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).commit"/>
  <testcase name="should track the `__chain__` value of a wrapper" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).commit"/>
  <testcase name="should concat arrays and values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).concat"/>
  <testcase name="should treat sparse arrays as dense" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).concat"/>
  <testcase name="should return a new wrapped array" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).concat"/>
  <testcase name="should return join all array elements into a string" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).join"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).join"/>
  <testcase name="should clone the chained sequence planting `value` as the wrapped value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).plant"/>
  <testcase name="should remove elements from the end of `array`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).pop"/>
  <testcase name="should append elements to `array`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).push"/>
  <testcase name="should replace the matched pattern" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).replace"/>
  <testcase name="should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).replace"/>
  <testcase name="should return the wrapped reversed `array`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).reverse"/>
  <testcase name="should work in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).reverse"/>
  <testcase name="should be lazy when in a lazy chain sequence" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).reverse"/>
  <testcase name="should work in a hybrid chain sequence" time="0.005" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).reverse"/>
  <testcase name="should track the `__chain__` value of a wrapper" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).reverse"/>
  <testcase name="should remove elements from the front of `array`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).shift"/>
  <testcase name="should return a slice of `array`" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).slice"/>
  <testcase name="should return the wrapped sorted `array`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).sort"/>
  <testcase name="should support removing and inserting elements" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).splice"/>
  <testcase name="should support string split" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).split"/>
  <testcase name="should allow mixed string and array prototype methods" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).split"/>
  <testcase name="should prepend elements to `array`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).unshift"/>
  <testcase name="should return the `toString` result of the wrapped value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).toString"/>
  <testcase name="should execute the chained sequence and extract the unwrapped value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).value"/>
  <testcase name="should return the `valueOf` result of the wrapped value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).value"/>
  <testcase name="should stringify the wrapped value when used by `JSON.stringify`" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).value"/>
  <testcase name="should be aliased" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...).value"/>
  <testcase name="`_(...).push` should return a new wrapper" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return the wrapped modified array"/>
  <testcase name="`_(...).reverse` should return a new wrapper" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return the wrapped modified array"/>
  <testcase name="`_(...).sort` should return a new wrapper" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return the wrapped modified array"/>
  <testcase name="`_(...).unshift` should return a new wrapper" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return the wrapped modified array"/>
  <testcase name="`_(...).concat` should return a new wrapped value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return new wrapped values"/>
  <testcase name="`_(...).slice` should return a new wrapped value" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return new wrapped values"/>
  <testcase name="`_(...).splice` should return a new wrapped value" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return new wrapped values"/>
  <testcase name="`_(...).clone` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).clone` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).every` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).every` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).find` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).find` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).first` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).first` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).has` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).has` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).hasIn` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).hasIn` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).includes` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).includes` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isArguments` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isArguments` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isArray` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isArray` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isBoolean` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isBoolean` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isDate` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isDate` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isElement` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isElement` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isEmpty` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isEmpty` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isEqual` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isEqual` should return a wrapped value when explicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isError` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isError` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isFinite` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isFinite` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isFunction` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isFunction` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNaN` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNaN` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNil` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNil` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNull` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNull` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNumber` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isNumber` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isObject` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isObject` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isPlainObject` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isPlainObject` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isRegExp` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isRegExp` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isString` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isString` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isUndefined` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).isUndefined` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).join` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).join` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).last` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).last` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).max` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).max` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).maxBy` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).maxBy` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).min` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).min` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).minBy` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).minBy` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).parseInt` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).parseInt` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).pop` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).pop` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).shift` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).shift` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).sum` should return an unwrapped value when implicitly chaining" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).sum` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).random` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).random` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).reduce` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).reduce` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).reduceRight` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).reduceRight` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).some` should return an unwrapped value when implicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="`_(...).some` should return a wrapped value when explicitly chaining" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash(...) methods that return unwrapped values"/>
  <testcase name="should work with `arguments` objects" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Arrays&quot; category methods"/>
  <testcase name="should accept falsey primary arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Arrays&quot; category methods"/>
  <testcase name="should accept falsey secondary arguments" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Arrays&quot; category methods"/>
  <testcase name="`_.camelCase` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.capitalize` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.escape` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.kebabCase` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.pad` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.padLeft` should return an empty string for empty values" time="0.001" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.padRight` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.repeat` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.snakeCase` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.trim` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.trimLeft` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.trimRight` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.trunc` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="`_.unescape` should return an empty string for empty values" time="0" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).&quot;Strings&quot; category methods"/>
  <testcase name="should accept falsey arguments" time="0.071" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash methods"/>
  <testcase name="should return an array" time="0.002" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash methods"/>
  <testcase name="should throw an error for falsey arguments" time="0.006" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash methods"/>
  <testcase name="should not contain minified method names (test production builds)" time="0.003" classname="Chrome_48_0_2564_(Windows_8_1_0_0_0).lodash methods"/>
  <system-out>
    <![CDATA[
]]>
  </system-out>
  <system-err/>
</testsuite>