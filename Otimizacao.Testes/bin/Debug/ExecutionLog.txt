2015-09-04 12:10:19.1628|Info|Iniciando os testes
2015-09-04 12:10:19.4909|Info|  Settimeout: id:0, (13) ms
2015-09-04 12:10:19.5221|Info|      Executando timer: id:0, (12:10:19.5221)
2015-09-04 12:10:19.5378|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:19.5534|Info|----------------------------------------
2015-09-04 12:10:19.5534|Info|Arrays
2015-09-04 12:10:19.5534|Info|----------------------------------------
2015-09-04 12:10:19.5534|Info| PASS - first
2015-09-04 12:10:19.5534|Info| PASS - head
2015-09-04 12:10:19.5534|Info| PASS - take
2015-09-04 12:10:19.5534|Info| PASS - rest
2015-09-04 12:10:19.5534|Info| PASS - tail
2015-09-04 12:10:19.5534|Info| PASS - drop
2015-09-04 12:10:19.5534|Info| PASS - initial
2015-09-04 12:10:19.5534|Info| PASS - last
2015-09-04 12:10:19.5534|Info| PASS - compact
2015-09-04 12:10:20.0378|Info| PASS - flatten
2015-09-04 12:10:20.0378|Info| PASS - without
2015-09-04 12:10:20.0378|Info| PASS - sortedIndex
2015-09-04 12:10:20.0378|Info| PASS - uniq
2015-09-04 12:10:20.0378|Info| PASS - unique
2015-09-04 12:10:20.0378|Info| PASS - intersection
2015-09-04 12:10:20.0378|Info| PASS - union
2015-09-04 12:10:20.0378|Info| PASS - difference
2015-09-04 12:10:20.0378|Info| PASS - zip
2015-09-04 12:10:20.0534|Info| PASS - unzip
2015-09-04 12:10:20.0534|Info| PASS - object
2015-09-04 12:10:20.0534|Info| PASS - indexOf
2015-09-04 12:10:20.0534|Info| PASS - indexOf with NaN
2015-09-04 12:10:20.0534|Info| PASS - indexOf with +- 0
2015-09-04 12:10:20.0534|Info| PASS - lastIndexOf
2015-09-04 12:10:20.0534|Info| PASS - lastIndexOf with NaN
2015-09-04 12:10:20.0534|Info| PASS - lastIndexOf with +- 0
2015-09-04 12:10:20.0534|Info| PASS - findIndex
2015-09-04 12:10:20.0534|Info| PASS - findLastIndex
2015-09-04 12:10:20.0534|Info| PASS - range
2015-09-04 12:10:20.0690|Info|----------------------------------------
2015-09-04 12:10:20.0690|Info|Chaining
2015-09-04 12:10:20.0690|Info|----------------------------------------
2015-09-04 12:10:20.0690|Info| PASS - map/flatten/reduce
2015-09-04 12:10:20.0690|Info| PASS - select/reject/sortBy
2015-09-04 12:10:20.0690|Info| PASS - select/reject/sortBy in functional style
2015-09-04 12:10:20.0690|Info| PASS - reverse/concat/unshift/pop/map
2015-09-04 12:10:20.0690|Info| PASS - splice
2015-09-04 12:10:20.0690|Info| PASS - shift
2015-09-04 12:10:20.0690|Info| PASS - pop
2015-09-04 12:10:20.0690|Info| PASS - chaining works in small stages
2015-09-04 12:10:20.0690|Info| PASS - #1562: Engine proxies for chained functions
2015-09-04 12:10:20.0690|Info|----------------------------------------
2015-09-04 12:10:20.0690|Info|Collections
2015-09-04 12:10:20.0690|Info|----------------------------------------
2015-09-04 12:10:20.0690|Info| PASS - each
2015-09-04 12:10:20.0690|Info| PASS - forEach
2015-09-04 12:10:20.0690|Info| PASS - lookupIterator with contexts
2015-09-04 12:10:20.0847|Info| PASS - Iterating objects with sketchy length properties
2015-09-04 12:10:20.0847|Info| PASS - Resistant to collection length and properties changing while iterating
2015-09-04 12:10:20.0847|Info| PASS - map
2015-09-04 12:10:20.0847|Info| PASS - collect
2015-09-04 12:10:20.0847|Info| PASS - reduce
2015-09-04 12:10:20.0847|Info| PASS - foldl
2015-09-04 12:10:20.0847|Info| PASS - reduceRight
2015-09-04 12:10:20.0847|Info| PASS - foldr
2015-09-04 12:10:20.0847|Info| PASS - find
2015-09-04 12:10:20.0847|Info| PASS - detect
2015-09-04 12:10:20.0847|Info| PASS - filter
2015-09-04 12:10:20.0847|Info| PASS - select
2015-09-04 12:10:20.1003|Info| PASS - reject
2015-09-04 12:10:20.1003|Info| PASS - every
2015-09-04 12:10:20.1003|Info| PASS - all
2015-09-04 12:10:20.1003|Info| PASS - some
2015-09-04 12:10:20.1003|Info| PASS - any
2015-09-04 12:10:20.1003|Info| PASS - includes
2015-09-04 12:10:20.1003|Info| PASS - include
2015-09-04 12:10:20.1003|Info| PASS - contains
2015-09-04 12:10:20.1003|Info| PASS - includes with NaN
2015-09-04 12:10:20.1003|Info| PASS - includes with +- 0
2015-09-04 12:10:20.1003|Info| PASS - invoke
2015-09-04 12:10:20.1003|Info| PASS - invoke w/ function reference
2015-09-04 12:10:20.1003|Info| PASS - invoke when strings have a call method
2015-09-04 12:10:20.1003|Info| PASS - pluck
2015-09-04 12:10:20.1003|Info| PASS - where
2015-09-04 12:10:20.1003|Info| PASS - findWhere
2015-09-04 12:10:20.1315|Info| PASS - max
2015-09-04 12:10:20.1628|Info| PASS - min
2015-09-04 12:10:20.1628|Info| PASS - sortBy
2015-09-04 12:10:20.1628|Info| PASS - groupBy
2015-09-04 12:10:20.1628|Info| PASS - indexBy
2015-09-04 12:10:20.1628|Info| PASS - countBy
2015-09-04 12:10:20.1628|Info| PASS - shuffle
2015-09-04 12:10:20.1628|Info| PASS - sample
2015-09-04 12:10:20.1628|Info| PASS - toArray
2015-09-04 12:10:20.1784|Info| PASS - size
2015-09-04 12:10:20.1784|Info| PASS - partition
2015-09-04 12:10:20.1784|Info|----------------------------------------
2015-09-04 12:10:20.1784|Info|Functions
2015-09-04 12:10:20.1784|Info|----------------------------------------
2015-09-04 12:10:20.1784|Info| PASS - bind
2015-09-04 12:10:20.1784|Info| PASS - partial
2015-09-04 12:10:20.1784|Info| PASS - bindAll
2015-09-04 12:10:20.1784|Info| PASS - memoize
2015-09-04 12:10:20.1784|Info|  Settimeout: id:1, (100) ms
2015-09-04 12:10:20.1784|Info|  Settimeout: id:2, (50) ms
2015-09-04 12:10:20.1784|Info|  Settimeout: id:3, (150) ms
2015-09-04 12:10:20.1784|Info|      Encerrado timer: id:0, (12:10:20.1784)
2015-09-04 12:10:20.2409|Info|      Executando timer: id:2, (12:10:20.2409)
2015-09-04 12:10:20.2409|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-09-04 12:10:20.2409|Info|      Encerrado timer: id:2, (12:10:20.2409)
2015-09-04 12:10:20.3034|Info|      Executando timer: id:1, (12:10:20.3034)
2015-09-04 12:10:20.3034|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.3034|Info|      Encerrado timer: id:1, (12:10:20.3034)
2015-09-04 12:10:20.3503|Info|      Executando timer: id:3, (12:10:20.3503)
2015-09-04 12:10:20.3503|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-09-04 12:10:20.3503|Info|  Settimeout: id:4, (13) ms
2015-09-04 12:10:20.3503|Info|      Encerrado timer: id:3, (12:10:20.3503)
2015-09-04 12:10:20.3659|Info|      Executando timer: id:4, (12:10:20.3659)
2015-09-04 12:10:20.3659|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:20.3659|Info| PASS - delay
2015-09-04 12:10:20.3659|Info|  Settimeout: id:5, (1) ms
2015-09-04 12:10:20.3659|Info|  Settimeout: id:6, (50) ms
2015-09-04 12:10:20.3659|Info|      Encerrado timer: id:4, (12:10:20.3659)
2015-09-04 12:10:20.3816|Info|      Executando timer: id:5, (12:10:20.3816)
2015-09-04 12:10:20.3816|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.3816|Info|      Encerrado timer: id:5, (12:10:20.3816)
2015-09-04 12:10:20.4284|Info|      Executando timer: id:6, (12:10:20.4284)
2015-09-04 12:10:20.4284|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.4284|Info|  Settimeout: id:7, (13) ms
2015-09-04 12:10:20.4284|Info|      Encerrado timer: id:6, (12:10:20.4284)
2015-09-04 12:10:20.4441|Info|      Executando timer: id:7, (12:10:20.4441)
2015-09-04 12:10:20.4441|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:20.4441|Info| PASS - defer
2015-09-04 12:10:20.4441|Info|  Settimeout: id:8, (32) ms
2015-09-04 12:10:20.4441|Info|  Settimeout: id:9, (64) ms
2015-09-04 12:10:20.4441|Info|      Encerrado timer: id:7, (12:10:20.4441)
2015-09-04 12:10:20.4909|Info|      Executando timer: id:8, (12:10:20.4909)
2015-09-04 12:10:20.4909|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:20.4909|Info|      Encerrado timer: id:8, (12:10:20.4909)
2015-09-04 12:10:20.5222|Info|      Executando timer: id:9, (12:10:20.5222)
2015-09-04 12:10:20.5222|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.5222|Info|  Settimeout: id:10, (13) ms
2015-09-04 12:10:20.5222|Info|      Encerrado timer: id:9, (12:10:20.5222)
2015-09-04 12:10:20.5378|Info|      Executando timer: id:10, (12:10:20.5378)
2015-09-04 12:10:20.5378|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:20.5378|Info| PASS - throttle
2015-09-04 12:10:20.5378|Info|  Settimeout: id:11, (32) ms
2015-09-04 12:10:20.5378|Info|  Settimeout: id:12, (64) ms
2015-09-04 12:10:20.5378|Info|  Settimeout: id:13, (96) ms
2015-09-04 12:10:20.5378|Info|      Encerrado timer: id:10, (12:10:20.5378)
2015-09-04 12:10:20.5847|Info|      Executando timer: id:11, (12:10:20.5847)
2015-09-04 12:10:20.5847|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:20.5847|Info|      Encerrado timer: id:11, (12:10:20.5847)
2015-09-04 12:10:20.6159|Info|      Executando timer: id:12, (12:10:20.6159)
2015-09-04 12:10:20.6159|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.6159|Info|  Settimeout: id:14, (1) ms
2015-09-04 12:10:20.6159|Info|      Encerrado timer: id:12, (12:10:20.6159)
2015-09-04 12:10:20.6316|Info|      Executando timer: id:14, (12:10:20.6316)
2015-09-04 12:10:20.6316|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:20.6316|Info|      Encerrado timer: id:14, (12:10:20.6316)
2015-09-04 12:10:20.6472|Info|      Executando timer: id:13, (12:10:20.6472)
2015-09-04 12:10:20.6472|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.6472|Info|  Settimeout: id:15, (13) ms
2015-09-04 12:10:20.6472|Info|      Encerrado timer: id:13, (12:10:20.6472)
2015-09-04 12:10:20.6784|Info|      Executando timer: id:15, (12:10:20.6784)
2015-09-04 12:10:20.6784|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:20.6784|Info| PASS - throttle arguments
2015-09-04 12:10:20.6784|Info|  Settimeout: id:16, (64) ms
2015-09-04 12:10:20.6784|Info|      Encerrado timer: id:15, (12:10:20.6784)
2015-09-04 12:10:20.7566|Info|      Executando timer: id:16, (12:10:20.7566)
2015-09-04 12:10:20.7566|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.7566|Info|  Settimeout: id:17, (13) ms
2015-09-04 12:10:20.7566|Info|      Encerrado timer: id:16, (12:10:20.7566)
2015-09-04 12:10:20.7722|Info|      Executando timer: id:17, (12:10:20.7722)
2015-09-04 12:10:20.7722|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:20.7722|Info| PASS - throttle once
2015-09-04 12:10:20.7722|Info|  Settimeout: id:18, (32) ms
2015-09-04 12:10:20.7722|Info|  Settimeout: id:19, (64) ms
2015-09-04 12:10:20.7722|Info|      Encerrado timer: id:17, (12:10:20.7722)
2015-09-04 12:10:20.8191|Info|      Executando timer: id:18, (12:10:20.8191)
2015-09-04 12:10:20.8191|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:20.8191|Info|      Encerrado timer: id:18, (12:10:20.8191)
2015-09-04 12:10:20.8503|Info|      Executando timer: id:19, (12:10:20.8503)
2015-09-04 12:10:20.8503|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.8503|Info|  Settimeout: id:20, (13) ms
2015-09-04 12:10:20.8503|Info|      Encerrado timer: id:19, (12:10:20.8503)
2015-09-04 12:10:20.8816|Info|      Executando timer: id:20, (12:10:20.8816)
2015-09-04 12:10:20.8816|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:20.8816|Info| PASS - throttle twice
2015-09-04 12:10:20.8816|Info|  Settimeout: id:21, (30) ms
2015-09-04 12:10:20.8816|Info|  Settimeout: id:22, (85) ms
2015-09-04 12:10:20.8816|Info|      Encerrado timer: id:20, (12:10:20.8816)
2015-09-04 12:10:20.9287|Info|      Executando timer: id:21, (12:10:20.9287)
2015-09-04 12:10:20.9287|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:20.9287|Info|      Encerrado timer: id:21, (12:10:20.9287)
2015-09-04 12:10:20.9756|Info|      Executando timer: id:22, (12:10:20.9756)
2015-09-04 12:10:20.9756|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:20.9756|Info|  Settimeout: id:23, (13) ms
2015-09-04 12:10:20.9756|Info|      Encerrado timer: id:22, (12:10:20.9756)
2015-09-04 12:10:20.9912|Info|      Executando timer: id:23, (12:10:20.9912)
2015-09-04 12:10:20.9912|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:20.9912|Info| PASS - more throttling
2015-09-04 12:10:20.9912|Info|  Settimeout: id:24, (100) ms
2015-09-04 12:10:20.9912|Info|  Settimeout: id:25, (50) ms
2015-09-04 12:10:20.9912|Info|  Settimeout: id:26, (150) ms
2015-09-04 12:10:20.9912|Info|  Settimeout: id:27, (160) ms
2015-09-04 12:10:20.9912|Info|  Settimeout: id:28, (230) ms
2015-09-04 12:10:20.9912|Info|  Settimeout: id:29, (300) ms
2015-09-04 12:10:20.9912|Info|      Encerrado timer: id:23, (12:10:20.9912)
2015-09-04 12:10:21.0537|Info|      Executando timer: id:25, (12:10:21.0537)
2015-09-04 12:10:21.0537|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.0537|Info|      Encerrado timer: id:25, (12:10:21.0537)
2015-09-04 12:10:21.1006|Info|      Executando timer: id:24, (12:10:21.1006)
2015-09-04 12:10:21.1006|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:21.1006|Info|      Encerrado timer: id:24, (12:10:21.1006)
2015-09-04 12:10:21.1631|Info|      Executando timer: id:27, (12:10:21.1631)
2015-09-04 12:10:21.1631|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.1631|Info|  Settimeout: id:30, (38) ms
2015-09-04 12:10:21.1631|Info|      Encerrado timer: id:27, (12:10:21.1631)
2015-09-04 12:10:21.1631|Info|      Executando timer: id:26, (12:10:21.1631)
2015-09-04 12:10:21.1631|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.1631|Info|      Encerrado timer: id:26, (12:10:21.1631)
2015-09-04 12:10:21.2100|Info|      Executando timer: id:30, (12:10:21.2100)
2015-09-04 12:10:21.2100|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:21.2100|Info|      Encerrado timer: id:30, (12:10:21.2100)
2015-09-04 12:10:21.2412|Info|      Executando timer: id:28, (12:10:21.2412)
2015-09-04 12:10:21.2412|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.2412|Info|  Settimeout: id:31, (69) ms
2015-09-04 12:10:21.2412|Info|      Encerrado timer: id:28, (12:10:21.2412)
2015-09-04 12:10:21.3037|Info|      Executando timer: id:29, (12:10:21.3037)
2015-09-04 12:10:21.3037|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.3037|Info|  Settimeout: id:32, (13) ms
2015-09-04 12:10:21.3037|Info|      Encerrado timer: id:29, (12:10:21.3037)
2015-09-04 12:10:21.3193|Info|      Executando timer: id:31, (12:10:21.3193)
2015-09-04 12:10:21.3193|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:21.3193|Info|      Encerrado timer: id:31, (12:10:21.3193)
2015-09-04 12:10:21.3350|Info|      Executando timer: id:32, (12:10:21.3350)
2015-09-04 12:10:21.3350|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:21.3350|Info| PASS - throttle repeatedly with results
2015-09-04 12:10:21.3350|Info|  Settimeout: id:33, (32) ms
2015-09-04 12:10:21.3818|Info|  Settimeout: id:34, (32) ms
2015-09-04 12:10:21.3974|Info|  Settimeout: id:35, (96) ms
2015-09-04 12:10:21.3974|Info|      Encerrado timer: id:32, (12:10:21.3974)
2015-09-04 12:10:21.4287|Info|      Executando timer: id:34, (12:10:21.4287)
2015-09-04 12:10:21.4287|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:21.4287|Info|      Encerrado timer: id:34, (12:10:21.4287)
2015-09-04 12:10:21.5068|Info|      Executando timer: id:35, (12:10:21.5068)
2015-09-04 12:10:21.5068|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.5068|Info|  Settimeout: id:36, (13) ms
2015-09-04 12:10:21.5068|Info|      Encerrado timer: id:35, (12:10:21.5068)
2015-09-04 12:10:21.5381|Info|      Executando timer: id:36, (12:10:21.5381)
2015-09-04 12:10:21.5381|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:21.5381|Info| PASS - throttle triggers trailing call when invoked repeatedly
2015-09-04 12:10:21.5381|Info|  Settimeout: id:37, (60) ms
2015-09-04 12:10:21.5381|Info|  Settimeout: id:38, (96) ms
2015-09-04 12:10:21.5381|Info|      Encerrado timer: id:36, (12:10:21.5381)
2015-09-04 12:10:21.6162|Info|      Executando timer: id:37, (12:10:21.6162)
2015-09-04 12:10:21.6162|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:21.6162|Info|      Encerrado timer: id:37, (12:10:21.6162)
2015-09-04 12:10:21.6475|Info|      Executando timer: id:38, (12:10:21.6475)
2015-09-04 12:10:21.6475|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.6475|Info|  Settimeout: id:39, (13) ms
2015-09-04 12:10:21.6475|Info|      Encerrado timer: id:38, (12:10:21.6475)
2015-09-04 12:10:21.6631|Info|      Executando timer: id:39, (12:10:21.6631)
2015-09-04 12:10:21.6631|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:21.6631|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-09-04 12:10:21.6631|Info|  Settimeout: id:40, (100) ms
2015-09-04 12:10:21.6631|Info|  Settimeout: id:41, (50) ms
2015-09-04 12:10:21.6631|Info|  Settimeout: id:42, (60) ms
2015-09-04 12:10:21.6631|Info|  Settimeout: id:43, (200) ms
2015-09-04 12:10:21.6631|Info|  Settimeout: id:44, (250) ms
2015-09-04 12:10:21.6631|Info|  Settimeout: id:45, (350) ms
2015-09-04 12:10:21.6631|Info|      Encerrado timer: id:39, (12:10:21.6631)
2015-09-04 12:10:21.7256|Info|      Executando timer: id:41, (12:10:21.7256)
2015-09-04 12:10:21.7256|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.7256|Info|      Encerrado timer: id:41, (12:10:21.7256)
2015-09-04 12:10:21.7412|Info|      Executando timer: id:42, (12:10:21.7412)
2015-09-04 12:10:21.7412|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.7412|Info|      Encerrado timer: id:42, (12:10:21.7412)
2015-09-04 12:10:21.7725|Info|      Executando timer: id:40, (12:10:21.7725)
2015-09-04 12:10:21.7725|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:21.7725|Info|      Encerrado timer: id:40, (12:10:21.7725)
2015-09-04 12:10:21.8818|Info|      Executando timer: id:43, (12:10:21.8818)
2015-09-04 12:10:21.8818|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.8818|Info|  Settimeout: id:46, (100) ms
2015-09-04 12:10:21.8818|Info|      Encerrado timer: id:43, (12:10:21.8840)
2015-09-04 12:10:21.9341|Info|      Executando timer: id:44, (12:10:21.9341)
2015-09-04 12:10:21.9341|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:21.9341|Info|      Encerrado timer: id:44, (12:10:21.9341)
2015-09-04 12:10:21.9966|Info|      Executando timer: id:46, (12:10:21.9966)
2015-09-04 12:10:21.9966|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:21.9966|Info|      Encerrado timer: id:46, (12:10:21.9966)
2015-09-04 12:10:22.0278|Info|      Executando timer: id:45, (12:10:22.0278)
2015-09-04 12:10:22.0278|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:22.0278|Info|  Settimeout: id:47, (13) ms
2015-09-04 12:10:22.0278|Info|      Encerrado timer: id:45, (12:10:22.0278)
2015-09-04 12:10:22.0435|Info|      Executando timer: id:47, (12:10:22.0435)
2015-09-04 12:10:22.0435|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:22.0435|Info| PASS - more throttle does not trigger leading call when leading is set to false
2015-09-04 12:10:22.0435|Info|  Settimeout: id:48, (100) ms
2015-09-04 12:10:22.1528|Info|  Settimeout: id:49, (100) ms
2015-09-04 12:10:22.2622|Info|  Settimeout: id:50, (100) ms
2015-09-04 12:10:22.3715|Info|  Settimeout: id:51, (100) ms
2015-09-04 12:10:22.4028|Info|  Settimeout: id:52, (200) ms
2015-09-04 12:10:22.4028|Info|      Encerrado timer: id:47, (12:10:22.4028)
2015-09-04 12:10:22.4810|Info|      Executando timer: id:51, (12:10:22.4810)
2015-09-04 12:10:22.4810|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:22.4810|Info|      Encerrado timer: id:51, (12:10:22.4810)
2015-09-04 12:10:22.6060|Info|      Executando timer: id:52, (12:10:22.6060)
2015-09-04 12:10:22.6060|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:22.6060|Info|  Settimeout: id:53, (13) ms
2015-09-04 12:10:22.6060|Info|      Encerrado timer: id:52, (12:10:22.6060)
2015-09-04 12:10:22.6372|Info|      Executando timer: id:53, (12:10:22.6372)
2015-09-04 12:10:22.6372|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:22.6372|Info| PASS - one more throttle with leading: false test
2015-09-04 12:10:22.6372|Info|  Settimeout: id:54, (96) ms
2015-09-04 12:10:22.6372|Info|      Encerrado timer: id:53, (12:10:22.6372)
2015-09-04 12:10:22.7466|Info|      Executando timer: id:54, (12:10:22.7466)
2015-09-04 12:10:22.7466|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:22.7466|Info|  Settimeout: id:55, (96) ms
2015-09-04 12:10:22.7466|Info|      Encerrado timer: id:54, (12:10:22.7466)
2015-09-04 12:10:22.8560|Info|      Executando timer: id:55, (12:10:22.8560)
2015-09-04 12:10:22.8560|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:22.8560|Info|  Settimeout: id:56, (13) ms
2015-09-04 12:10:22.8560|Info|      Encerrado timer: id:55, (12:10:22.8560)
2015-09-04 12:10:22.8716|Info|      Executando timer: id:56, (12:10:22.8716)
2015-09-04 12:10:22.8716|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:22.8716|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-09-04 12:10:22.8716|Info|  Settimeout: id:57, (200) ms
2015-09-04 12:10:22.8716|Info|      Encerrado timer: id:56, (12:10:22.8716)
2015-09-04 12:10:23.0747|Info|      Executando timer: id:57, (12:10:23.0747)
2015-09-04 12:10:23.0747|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.0747|Info|  Settimeout: id:58, (13) ms
2015-09-04 12:10:23.0747|Info|      Encerrado timer: id:57, (12:10:23.0747)
2015-09-04 12:10:23.1060|Info|      Executando timer: id:58, (12:10:23.1060)
2015-09-04 12:10:23.1060|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:23.1060|Info| PASS - throttle continues to function after system time is set backwards
2015-09-04 12:10:23.1060|Info|  Settimeout: id:59, (32) ms
2015-09-04 12:10:23.1060|Info|  Settimeout: id:60, (100) ms
2015-09-04 12:10:23.1060|Info|      Encerrado timer: id:58, (12:10:23.1060)
2015-09-04 12:10:23.1528|Info|      Executando timer: id:59, (12:10:23.1528)
2015-09-04 12:10:23.1528|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:23.1528|Info|  Settimeout: id:61, (32) ms
2015-09-04 12:10:23.1528|Info|      Encerrado timer: id:59, (12:10:23.1528)
2015-09-04 12:10:23.1997|Info|      Executando timer: id:61, (12:10:23.1997)
2015-09-04 12:10:23.1997|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:10:23.1997|Info|      Encerrado timer: id:61, (12:10:23.1997)
2015-09-04 12:10:23.2153|Info|      Executando timer: id:60, (12:10:23.2153)
2015-09-04 12:10:23.2153|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.2153|Info|  Settimeout: id:62, (13) ms
2015-09-04 12:10:23.2153|Info|      Encerrado timer: id:60, (12:10:23.2153)
2015-09-04 12:10:23.2466|Info|      Executando timer: id:62, (12:10:23.2466)
2015-09-04 12:10:23.2466|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:23.2466|Info| PASS - throttle re-entrant
2015-09-04 12:10:23.2466|Info|  Settimeout: id:63, (32) ms
2015-09-04 12:10:23.2466|Info|  Settimeout: id:64, (16) ms
2015-09-04 12:10:23.2466|Info|  Settimeout: id:65, (96) ms
2015-09-04 12:10:23.2466|Info|      Encerrado timer: id:62, (12:10:23.2466)
2015-09-04 12:10:23.2778|Info|      Executando timer: id:64, (12:10:23.2778)
2015-09-04 12:10:23.2778|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.2778|Info|      Encerrado timer: id:64, (12:10:23.2778)
2015-09-04 12:10:23.2935|Info|      Executando timer: id:63, (12:10:23.2935)
2015-09-04 12:10:23.2935|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.2935|Info|  Settimeout: id:66, (17) ms
2015-09-04 12:10:23.2935|Info|      Encerrado timer: id:63, (12:10:23.2935)
2015-09-04 12:10:23.3247|Info|      Executando timer: id:66, (12:10:23.3247)
2015-09-04 12:10:23.3247|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.3247|Info|      Encerrado timer: id:66, (12:10:23.3247)
2015-09-04 12:10:23.3560|Info|      Executando timer: id:65, (12:10:23.3560)
2015-09-04 12:10:23.3560|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.3560|Info|  Settimeout: id:67, (13) ms
2015-09-04 12:10:23.3560|Info|      Encerrado timer: id:65, (12:10:23.3560)
2015-09-04 12:10:23.3716|Info|      Executando timer: id:67, (12:10:23.3716)
2015-09-04 12:10:23.3716|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:23.3716|Info| PASS - debounce
2015-09-04 12:10:23.3716|Info|  Settimeout: id:68, (64) ms
2015-09-04 12:10:23.3716|Info|  Settimeout: id:69, (16) ms
2015-09-04 12:10:23.3716|Info|  Settimeout: id:70, (32) ms
2015-09-04 12:10:23.3716|Info|  Settimeout: id:71, (48) ms
2015-09-04 12:10:23.3716|Info|  Settimeout: id:72, (128) ms
2015-09-04 12:10:23.3716|Info|      Encerrado timer: id:67, (12:10:23.3716)
2015-09-04 12:10:23.4028|Info|      Executando timer: id:69, (12:10:23.4028)
2015-09-04 12:10:23.4028|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.4028|Info|      Encerrado timer: id:69, (12:10:23.4028)
2015-09-04 12:10:23.4185|Info|      Executando timer: id:70, (12:10:23.4185)
2015-09-04 12:10:23.4185|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.4185|Info|      Encerrado timer: id:70, (12:10:23.4185)
2015-09-04 12:10:23.4341|Info|      Executando timer: id:71, (12:10:23.4341)
2015-09-04 12:10:23.4341|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.4341|Info|      Encerrado timer: id:71, (12:10:23.4341)
2015-09-04 12:10:23.4497|Info|      Executando timer: id:68, (12:10:23.4497)
2015-09-04 12:10:23.4497|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.4497|Info|  Settimeout: id:73, (48) ms
2015-09-04 12:10:23.4497|Info|      Encerrado timer: id:68, (12:10:23.4497)
2015-09-04 12:10:23.5122|Info|      Executando timer: id:72, (12:10:23.5122)
2015-09-04 12:10:23.5122|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.5122|Info|  Settimeout: id:74, (13) ms
2015-09-04 12:10:23.5122|Info|      Encerrado timer: id:72, (12:10:23.5122)
2015-09-04 12:10:23.5122|Info|      Executando timer: id:73, (12:10:23.5122)
2015-09-04 12:10:23.5122|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.5122|Info|      Encerrado timer: id:73, (12:10:23.5122)
2015-09-04 12:10:23.5278|Info|      Executando timer: id:74, (12:10:23.5278)
2015-09-04 12:10:23.5278|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:23.5278|Info| PASS - debounce asap
2015-09-04 12:10:23.5278|Info|  Settimeout: id:75, (32) ms
2015-09-04 12:10:23.5278|Info|  Settimeout: id:76, (96) ms
2015-09-04 12:10:23.5278|Info|      Encerrado timer: id:74, (12:10:23.5278)
2015-09-04 12:10:23.5747|Info|      Executando timer: id:75, (12:10:23.5747)
2015-09-04 12:10:23.5747|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.5747|Info|      Encerrado timer: id:75, (12:10:23.5747)
2015-09-04 12:10:23.6372|Info|      Executando timer: id:76, (12:10:23.6372)
2015-09-04 12:10:23.6372|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.6372|Info|  Settimeout: id:77, (13) ms
2015-09-04 12:10:23.6372|Info|      Encerrado timer: id:76, (12:10:23.6372)
2015-09-04 12:10:23.6528|Info|      Executando timer: id:77, (12:10:23.6528)
2015-09-04 12:10:23.6528|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:23.6528|Info| PASS - debounce asap recursively
2015-09-04 12:10:23.6528|Info|  Settimeout: id:78, (100) ms
2015-09-04 12:10:23.6528|Info|  Settimeout: id:79, (200) ms
2015-09-04 12:10:23.6528|Info|      Encerrado timer: id:77, (12:10:23.6528)
2015-09-04 12:10:23.7622|Info|      Executando timer: id:78, (12:10:23.7622)
2015-09-04 12:10:23.7622|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.7622|Info|      Encerrado timer: id:78, (12:10:23.7622)
2015-09-04 12:10:23.8716|Info|      Executando timer: id:79, (12:10:23.8716)
2015-09-04 12:10:23.8716|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:23.8716|Info|  Settimeout: id:80, (100) ms
2015-09-04 12:10:23.8716|Info|  Settimeout: id:81, (13) ms
2015-09-04 12:10:23.8716|Info|      Encerrado timer: id:79, (12:10:23.8716)
2015-09-04 12:10:23.9029|Info|      Executando timer: id:81, (12:10:23.9029)
2015-09-04 12:10:23.9029|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:23.9029|Info| PASS - debounce after system time is set backwards
2015-09-04 12:10:23.9029|Info|  Settimeout: id:82, (32) ms
2015-09-04 12:10:23.9029|Info|  Settimeout: id:83, (100) ms
2015-09-04 12:10:23.9029|Info|      Encerrado timer: id:81, (12:10:23.9032)
2015-09-04 12:10:23.9502|Info|      Executando timer: id:82, (12:10:23.9502)
2015-09-04 12:10:23.9502|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.9502|Info|  Settimeout: id:84, (32) ms
2015-09-04 12:10:23.9502|Info|      Encerrado timer: id:82, (12:10:23.9502)
2015-09-04 12:10:23.9814|Info|      Executando timer: id:80, (12:10:23.9814)
2015-09-04 12:10:23.9814|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.9814|Info|      Encerrado timer: id:80, (12:10:23.9814)
2015-09-04 12:10:23.9970|Info|      Executando timer: id:84, (12:10:23.9970)
2015-09-04 12:10:23.9970|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:10:23.9970|Info|      Encerrado timer: id:84, (12:10:23.9970)
2015-09-04 12:10:24.0127|Info|      Executando timer: id:83, (12:10:24.0127)
2015-09-04 12:10:24.0127|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:10:24.0127|Info|  Settimeout: id:85, (13) ms
2015-09-04 12:10:24.0127|Info|      Encerrado timer: id:83, (12:10:24.0127)
2015-09-04 12:10:24.0439|Info|      Executando timer: id:85, (12:10:24.0439)
2015-09-04 12:10:24.0439|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:10:24.0439|Info| PASS - debounce re-entrant
2015-09-04 12:10:24.0439|Info| PASS - once
2015-09-04 12:10:24.0439|Info| PASS - Recursive onced function.
2015-09-04 12:10:24.0439|Info| PASS - wrap
2015-09-04 12:10:24.0439|Info| PASS - negate
2015-09-04 12:10:24.0439|Info| PASS - compose
2015-09-04 12:10:24.0439|Info| PASS - after
2015-09-04 12:10:24.0439|Info| PASS - before
2015-09-04 12:10:24.0439|Info| PASS - iteratee
2015-09-04 12:10:24.0439|Info|----------------------------------------
2015-09-04 12:10:24.0439|Info|Objects
2015-09-04 12:10:24.0439|Info|----------------------------------------
2015-09-04 12:10:24.0439|Info| PASS - keys
2015-09-04 12:10:24.0439|Info| PASS - allKeys
2015-09-04 12:10:24.0439|Info| PASS - values
2015-09-04 12:10:24.0439|Info| PASS - pairs
2015-09-04 12:10:24.0439|Info| PASS - invert
2015-09-04 12:10:24.0439|Info| PASS - functions
2015-09-04 12:10:24.0439|Info| PASS - methods
2015-09-04 12:10:24.0595|Info| PASS - extend
2015-09-04 12:10:24.0595|Info| PASS - extendOwn
2015-09-04 12:10:24.0595|Info| PASS - pick
2015-09-04 12:10:24.0595|Info| PASS - omit
2015-09-04 12:10:24.0595|Info| PASS - defaults
2015-09-04 12:10:24.0595|Info| PASS - clone
2015-09-04 12:10:24.0595|Info| PASS - create
2015-09-04 12:10:24.0595|Info| PASS - isEqual
2015-09-04 12:10:24.0595|Info| PASS - isEmpty
2015-09-04 12:10:24.0595|Info| PASS - isArguments
2015-09-04 12:10:24.0595|Info| PASS - isObject
2015-09-04 12:10:24.0595|Info| PASS - isArray
2015-09-04 12:10:24.0595|Info| PASS - isString
2015-09-04 12:10:24.0751|Info| PASS - isNumber
2015-09-04 12:10:24.0751|Info| PASS - isBoolean
2015-09-04 12:10:24.0751|Info| PASS - isFunction
2015-09-04 12:10:24.0751|Info| FAIL - #1929 Typed Array constructors are functions
2015-09-04 12:10:24.0751|Info|    PASS | EQ | can extract the keys from an object
2015-09-04 12:10:24.0751|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | matches non-enumerable properties
2015-09-04 12:10:24.0751|Info|    PASS | EQ | can extract the allKeys from an object
2015-09-04 12:10:24.0751|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-09-04 12:10:24.0751|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0751|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ok
2015-09-04 12:10:24.0907|Info|    PASS | EQ | matches non-enumerable properties
2015-09-04 12:10:24.0907|Info|    PASS | EQ | should include inherited keys
2015-09-04 12:10:24.0907|Info|    PASS | EQ | should get keys from constructor
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can extract the values from an object
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ... even when one of them is "length"
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can convert an object into pairs
2015-09-04 12:10:24.0907|Info|    PASS | EQ | ... even when one of them is "length"
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can invert an object
2015-09-04 12:10:24.0907|Info|    PASS | EQ | two inverts gets you back where you started
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can invert an object with "length"
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-09-04 12:10:24.0907|Info|    PASS | EQ | also looks up functions on the prototype
2015-09-04 12:10:24.0907|Info|    PASS | EQ | alias for functions
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can extend an object with the attributes of another
2015-09-04 12:10:24.0907|Info|    PASS | EQ | properties in source override destination
2015-09-04 12:10:24.0907|Info|    PASS | EQ | properties not in source don't get overriden
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can extend from multiple source objects
2015-09-04 12:10:24.0907|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-09-04 12:10:24.0907|Info|    PASS | EQ | extend copies undefined values
2015-09-04 12:10:24.0907|Info|    PASS | EQ | extend copies all properties from source
2015-09-04 12:10:24.0907|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-09-04 12:10:24.0907|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-09-04 12:10:24.0907|Info|    PASS | EQ | extending null results in null
2015-09-04 12:10:24.0907|Info|    PASS | OK | extending undefined results in undefined
2015-09-04 12:10:24.0907|Info|    PASS | EQ | can assign an object with the attributes of another
2015-09-04 12:10:24.0907|Info|    PASS | EQ | properties in source override destination
2015-09-04 12:10:24.1064|Info|    PASS | EQ | properties not in source don't get overriden
2015-09-04 12:10:24.1064|Info|    PASS | EQ | can assign from multiple source objects
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assign copies undefined values
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assign copies own properties from source
2015-09-04 12:10:24.1064|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-09-04 12:10:24.1064|Info|    PASS | OK | assigning undefined results in undefined
2015-09-04 12:10:24.1064|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-09-04 12:10:24.1064|Info|    PASS | EQ | can restrict properties to those named
2015-09-04 12:10:24.1064|Info|    PASS | EQ | can restrict properties to those named in an array
2015-09-04 12:10:24.1064|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-09-04 12:10:24.1064|Info|    PASS | EQ | can pick numeric properties
2015-09-04 12:10:24.1064|Info|    PASS | EQ | Called with null/undefined
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | Called with null/undefined
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | can iterate primitives
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1064|Info|    PASS | EQ | can accept a predicate and context
2015-09-04 12:10:24.1064|Info|    PASS | EQ | include prototype props
2015-09-04 12:10:24.1064|Info|    PASS | EQ | function is given context
2015-09-04 12:10:24.1220|Info|    PASS | EQ | does not set own property if property not in object
2015-09-04 12:10:24.1220|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-09-04 12:10:24.1220|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-09-04 12:10:24.1220|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-09-04 12:10:24.1220|Info|    PASS | EQ | can omit a single named property
2015-09-04 12:10:24.1220|Info|    PASS | EQ | can omit several named properties
2015-09-04 12:10:24.1220|Info|    PASS | EQ | can omit properties named in an array
2015-09-04 12:10:24.1220|Info|    PASS | EQ | can omit numeric properties
2015-09-04 12:10:24.1220|Info|    PASS | EQ | non objects return empty object
2015-09-04 12:10:24.1220|Info|    PASS | EQ | null/undefined return empty object
2015-09-04 12:10:24.1220|Info|    PASS | EQ | returns empty object for primitives
2015-09-04 12:10:24.1220|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1220|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1220|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1220|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1220|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1220|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1220|Info|    PASS | EQ | can accept a predicate
2015-09-04 12:10:24.1220|Info|    PASS | EQ | include prototype props
2015-09-04 12:10:24.1220|Info|    PASS | EQ | function is given context
2015-09-04 12:10:24.1220|Info|    PASS | EQ | value exists
2015-09-04 12:10:24.1220|Info|    PASS | EQ | value exists
2015-09-04 12:10:24.1220|Info|    PASS | EQ | default applied
2015-09-04 12:10:24.1220|Info|    PASS | EQ | null isn't overridden
2015-09-04 12:10:24.1220|Info|    PASS | EQ | value exists
2015-09-04 12:10:24.1220|Info|    PASS | EQ | NaN isn't overridden
2015-09-04 12:10:24.1220|Info|    PASS | EQ | new value is added, first one wins
2015-09-04 12:10:24.1220|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-09-04 12:10:24.1220|Info|    PASS | EQ | result is null if destination is null
2015-09-04 12:10:24.1220|Info|    PASS | OK | result is undefined if destination is undefined
2015-09-04 12:10:24.1220|Info|    PASS | EQ | the clone as the attributes of the original
2015-09-04 12:10:24.1220|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-09-04 12:10:24.1220|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-09-04 12:10:24.1220|Info|    PASS | OK | non objects should not be changed by clone
2015-09-04 12:10:24.1376|Info|    PASS | EQ | non objects should not be changed by clone
2015-09-04 12:10:24.1376|Info|    PASS | EQ | non objects should not be changed by clone
2015-09-04 12:10:24.1376|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-09-04 12:10:24.1376|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-09-04 12:10:24.1376|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-09-04 12:10:24.1376|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-09-04 12:10:24.1376|Info|    PASS | EQ | should return new instance of array when array is provided
2015-09-04 12:10:24.1376|Info|    PASS | EQ | object should inherit prototype
2015-09-04 12:10:24.1376|Info|    PASS | EQ | properties should be added to object
2015-09-04 12:10:24.1376|Info|    PASS | EQ | ok
2015-09-04 12:10:24.1376|Info|    PASS | EQ | should only add own properties
2015-09-04 12:10:24.1376|Info|    PASS | EQ | `null` is equal to `null`
2015-09-04 12:10:24.1376|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-09-04 12:10:24.1376|Info|    PASS | EQ | `0` is not equal to `-0`
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-09-04 12:10:24.1376|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Identical string primitives are equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-09-04 12:10:24.1376|Info|    PASS | EQ | String primitives with different values are not equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Identical number primitives are equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-09-04 12:10:24.1376|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-09-04 12:10:24.1376|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-09-04 12:10:24.1533|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-09-04 12:10:24.1533|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-09-04 12:10:24.1533|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Identical boolean primitives are equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-09-04 12:10:24.1533|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | String and number objects with like values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Invalid dates are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-09-04 12:10:24.1533|Info|    PASS | EQ | Flag order is not significant
2015-09-04 12:10:24.1533|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-09-04 12:10:24.1689|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Empty object literals are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Empty array literals are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Object literals and array literals are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Handles sparse arrays as dense
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects of different sizes are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Object instances are equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-09-04 12:10:24.1689|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-09-04 12:10:24.1689|Info|    PASS | EQ | Arrays containing circular references are equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Objects containing circular references are equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Cyclic structures are equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | `isEqual` can be chained
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-09-04 12:10:24.1845|Info|    PASS | EQ | Objects from different constructors are not equal
2015-09-04 12:10:24.1845|Info|    PASS | EQ | [1] is not empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | [] is empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | {one : 1} is not empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | {} is empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | objects with prototype properties are empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | null is empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | undefined is empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | the empty string is empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | but other strings are not
2015-09-04 12:10:24.1845|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-09-04 12:10:24.1845|Info|    PASS | EQ | empty arguments object is empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | non-empty arguments object is not empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | non-enumerable property is not empty
2015-09-04 12:10:24.1845|Info|    PASS | EQ | a string is not an arguments object
2015-09-04 12:10:24.1845|Info|    PASS | EQ | a function is not an arguments object
2015-09-04 12:10:24.1845|Info|    PASS | EQ | but the arguments object is an arguments object
2015-09-04 12:10:24.2001|Info|    PASS | EQ | but not when it's converted into an array
2015-09-04 12:10:24.2001|Info|    PASS | EQ | and not vanilla arrays.
2015-09-04 12:10:24.2001|Info|    PASS | EQ | the arguments object is object
2015-09-04 12:10:24.2001|Info|    PASS | EQ | and arrays
2015-09-04 12:10:24.2001|Info|    PASS | EQ | and functions
2015-09-04 12:10:24.2001|Info|    PASS | EQ | but not null
2015-09-04 12:10:24.2001|Info|    PASS | EQ | and not undefined
2015-09-04 12:10:24.2001|Info|    PASS | EQ | and not string
2015-09-04 12:10:24.2001|Info|    PASS | EQ | and not number
2015-09-04 12:10:24.2001|Info|    PASS | EQ | and not boolean
2015-09-04 12:10:24.2001|Info|    PASS | EQ | but new String()
2015-09-04 12:10:24.2001|Info|    PASS | EQ | undefined vars are not arrays
2015-09-04 12:10:24.2001|Info|    PASS | EQ | the arguments object is not an array
2015-09-04 12:10:24.2001|Info|    PASS | EQ | but arrays are
2015-09-04 12:10:24.2001|Info|    PASS | EQ | but strings are
2015-09-04 12:10:24.2001|Info|    PASS | EQ | string literals are
2015-09-04 12:10:24.2001|Info|    PASS | EQ | so are String objects
2015-09-04 12:10:24.2001|Info|    PASS | EQ | ok
2015-09-04 12:10:24.2001|Info|    PASS | EQ | a string is not a number
2015-09-04 12:10:24.2001|Info|    PASS | EQ | the arguments object is not a number
2015-09-04 12:10:24.2001|Info|    PASS | EQ | undefined is not a number
2015-09-04 12:10:24.2001|Info|    PASS | EQ | but numbers are
2015-09-04 12:10:24.2001|Info|    PASS | EQ | NaN *is* a number
2015-09-04 12:10:24.2001|Info|    PASS | EQ | Infinity is a number
2015-09-04 12:10:24.2001|Info|    PASS | EQ | numeric strings are not numbers
2015-09-04 12:10:24.2001|Info|    PASS | EQ | a number is not a boolean
2015-09-04 12:10:24.2001|Info|    PASS | EQ | a string is not a boolean
2015-09-04 12:10:24.2001|Info|    PASS | EQ | the string "false" is not a boolean
2015-09-04 12:10:24.2001|Info|    PASS | EQ | the string "true" is not a boolean
2015-09-04 12:10:24.2001|Info|    PASS | EQ | the arguments object is not a boolean
2015-09-04 12:10:24.2157|Info|    PASS | EQ | undefined is not a boolean
2015-09-04 12:10:24.2157|Info|    PASS | EQ | NaN is not a boolean
2015-09-04 12:10:24.2157|Info|    PASS | EQ | null is not a boolean
2015-09-04 12:10:24.2157|Info|    PASS | EQ | but true is
2015-09-04 12:10:24.2157|Info|    PASS | EQ | and so is false
2015-09-04 12:10:24.2157|Info|    PASS | EQ | undefined vars are not functions
2015-09-04 12:10:24.2157|Info|    PASS | EQ | arrays are not functions
2015-09-04 12:10:24.2157|Info|    PASS | EQ | strings are not functions
2015-09-04 12:10:24.2157|Info|    PASS | EQ | but functions are
2015-09-04 12:10:24.2157|Info|    PASS | EQ | even anonymous ones
2015-09-04 12:10:24.2157|Info|    FAIL | OK | Died on test #1     at V8Runtime:underscoreTests:2898:5
    at V8Runtime:underscoreTests:3251:2: window is not defined
2015-09-04 12:10:24.2157|Info| PASS - isDate
2015-09-04 12:10:24.2157|Info| PASS - isRegExp
2015-09-04 12:10:24.2157|Info| PASS - isFinite
2015-09-04 12:10:24.2157|Info| PASS - isNaN
2015-09-04 12:10:24.2157|Info| PASS - isNull
2015-09-04 12:10:24.2157|Info| PASS - isUndefined
2015-09-04 12:10:24.2157|Info| PASS - isError
2015-09-04 12:10:24.2157|Info| PASS - tap
2015-09-04 12:10:24.2157|Info| PASS - has
2015-09-04 12:10:24.2157|Info| PASS - isMatch
2015-09-04 12:10:24.2314|Info| PASS - matcher
2015-09-04 12:10:24.2314|Info| PASS - matcher 
2015-09-04 12:10:24.2314|Info| PASS - findKey
2015-09-04 12:10:24.2314|Info| PASS - mapObject
2015-09-04 12:10:24.2314|Info|----------------------------------------
2015-09-04 12:10:24.2314|Info|Utility
2015-09-04 12:10:24.2314|Info|----------------------------------------
2015-09-04 12:10:24.2314|Info| PASS - #750 - Return _ instance.
2015-09-04 12:10:24.2314|Info| PASS - identity
2015-09-04 12:10:24.2314|Info| PASS - constant
2015-09-04 12:10:24.2314|Info| PASS - noop
2015-09-04 12:10:24.2314|Info| PASS - property
2015-09-04 12:10:24.2314|Info| PASS - propertyOf
2015-09-04 12:10:24.2314|Info| PASS - random
2015-09-04 12:10:24.2314|Info| PASS - now
2015-09-04 12:10:24.2470|Info| PASS - uniqueId
2015-09-04 12:10:24.2470|Info| PASS - times
2015-09-04 12:10:24.2470|Info| PASS - mixin
2015-09-04 12:10:24.2470|Info| PASS - _.escape
2015-09-04 12:10:24.2470|Info| PASS - _.unescape
2015-09-04 12:10:24.2470|Info| PASS - _.escape & unescape
2015-09-04 12:10:24.2470|Info| PASS - template
2015-09-04 12:10:24.2470|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-09-04 12:10:24.2470|Info| PASS - _.template handles \u2028 & \u2029
2015-09-04 12:10:24.2470|Info| PASS - result calls functions and returns primitives
2015-09-04 12:10:24.2470|Info| PASS - result returns a default value if object is null or undefined
2015-09-04 12:10:24.2470|Info| PASS - result returns a default value if property of object is missing
2015-09-04 12:10:24.2470|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-09-04 12:10:24.2470|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-09-04 12:10:24.2470|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-09-04 12:10:24.2626|Info| PASS - result fallback can use a function
2015-09-04 12:10:24.2626|Info| PASS - _.templateSettings.variable
2015-09-04 12:10:24.2626|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-09-04 12:10:24.2626|Info| PASS - #556 - undefined template variables.
2015-09-04 12:10:24.2626|Info| PASS - interpolate evaluates code only once.
2015-09-04 12:10:24.2626|Info| PASS - #746 - _.template settings are not modified.
2015-09-04 12:10:24.2626|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-09-04 12:10:24.2626|Info|----------------------------------------
2015-09-04 12:10:24.2626|Info|    PASS: 1373  FAIL: 1  TOTAL: 1374
2015-09-04 12:10:24.2626|Info|    Finished in 4725 milliseconds.
2015-09-04 12:10:24.2626|Info|----------------------------------------
2015-09-04 12:10:24.2626|Info|      Encerrado timer: id:85, (12:10:24.2626)
2015-09-04 12:10:24.2626|Info|Encerrando os testes
2015-09-04 12:10:24.2626|Info|Total:1374, Sucesso: 1373, Falha: 1
2015-09-04 12:10:24.2783|Info| 5 segundos para avaliar o individuo underscore.js
2015-09-04 12:10:24.2783|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at V8Runtime:underscoreTests:2898:5
    at V8Runtime:underscoreTests:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (V8Runtime:underscoreTests:2900:65)
    at Object.Test.run (V8Runtime:Qunit:894:28)
    at V8Runtime:Qunit:1023:11
    at process (V8Runtime:Qunit:583:24)
    at begin (V8Runtime:Qunit:628:2)
    at Array.<anonymous> (V8Runtime:Qunit:643:4)
    at Script Document [173]:1:24
2015-09-04 12:12:29.6048|Info|Iniciando os testes
2015-09-04 12:12:29.9329|Info|  Settimeout: id:0, (13) ms
2015-09-04 12:12:29.9642|Info|      Executando timer: id:0, (12:12:29.9642)
2015-09-04 12:12:29.9798|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:29.9954|Info|----------------------------------------
2015-09-04 12:12:29.9954|Info|Arrays
2015-09-04 12:12:29.9954|Info|----------------------------------------
2015-09-04 12:12:29.9954|Info| PASS - first
2015-09-04 12:12:29.9954|Info| PASS - head
2015-09-04 12:12:29.9954|Info| PASS - take
2015-09-04 12:12:29.9954|Info| PASS - rest
2015-09-04 12:12:29.9954|Info| PASS - tail
2015-09-04 12:12:30.0111|Info| PASS - drop
2015-09-04 12:12:30.0111|Info| PASS - initial
2015-09-04 12:12:30.0111|Info| PASS - last
2015-09-04 12:12:30.0111|Info| PASS - compact
2015-09-04 12:12:30.4798|Info| PASS - flatten
2015-09-04 12:12:30.4798|Info| PASS - without
2015-09-04 12:12:30.4798|Info| PASS - sortedIndex
2015-09-04 12:12:30.4798|Info| PASS - uniq
2015-09-04 12:12:30.4798|Info| PASS - unique
2015-09-04 12:12:30.4954|Info| PASS - intersection
2015-09-04 12:12:30.4954|Info| PASS - union
2015-09-04 12:12:30.4954|Info| PASS - difference
2015-09-04 12:12:30.4954|Info| PASS - zip
2015-09-04 12:12:30.4954|Info| PASS - unzip
2015-09-04 12:12:30.4954|Info| PASS - object
2015-09-04 12:12:30.4954|Info| PASS - indexOf
2015-09-04 12:12:30.4954|Info| PASS - indexOf with NaN
2015-09-04 12:12:30.4954|Info| PASS - indexOf with +- 0
2015-09-04 12:12:30.4954|Info| PASS - lastIndexOf
2015-09-04 12:12:30.4954|Info| PASS - lastIndexOf with NaN
2015-09-04 12:12:30.4954|Info| PASS - lastIndexOf with +- 0
2015-09-04 12:12:30.4954|Info| PASS - findIndex
2015-09-04 12:12:30.5111|Info| PASS - findLastIndex
2015-09-04 12:12:30.5111|Info| PASS - range
2015-09-04 12:12:30.5111|Info|----------------------------------------
2015-09-04 12:12:30.5111|Info|Chaining
2015-09-04 12:12:30.5111|Info|----------------------------------------
2015-09-04 12:12:30.5111|Info| PASS - map/flatten/reduce
2015-09-04 12:12:30.5111|Info| PASS - select/reject/sortBy
2015-09-04 12:12:30.5111|Info| PASS - select/reject/sortBy in functional style
2015-09-04 12:12:30.5111|Info| PASS - reverse/concat/unshift/pop/map
2015-09-04 12:12:30.5111|Info| PASS - splice
2015-09-04 12:12:30.5111|Info| PASS - shift
2015-09-04 12:12:30.5111|Info| PASS - pop
2015-09-04 12:12:30.5111|Info| PASS - chaining works in small stages
2015-09-04 12:12:30.5111|Info| PASS - #1562: Engine proxies for chained functions
2015-09-04 12:12:30.5267|Info|----------------------------------------
2015-09-04 12:12:30.5267|Info|Collections
2015-09-04 12:12:30.5267|Info|----------------------------------------
2015-09-04 12:12:30.5267|Info| PASS - each
2015-09-04 12:12:30.5267|Info| PASS - forEach
2015-09-04 12:12:30.5267|Info| PASS - lookupIterator with contexts
2015-09-04 12:12:30.5267|Info| PASS - Iterating objects with sketchy length properties
2015-09-04 12:12:30.5267|Info| PASS - Resistant to collection length and properties changing while iterating
2015-09-04 12:12:30.5267|Info| PASS - map
2015-09-04 12:12:30.5267|Info| PASS - collect
2015-09-04 12:12:30.5267|Info| PASS - reduce
2015-09-04 12:12:30.5267|Info| PASS - foldl
2015-09-04 12:12:30.5267|Info| PASS - reduceRight
2015-09-04 12:12:30.5423|Info| PASS - foldr
2015-09-04 12:12:30.5423|Info| PASS - find
2015-09-04 12:12:30.5423|Info| PASS - detect
2015-09-04 12:12:30.5423|Info| PASS - filter
2015-09-04 12:12:30.5423|Info| PASS - select
2015-09-04 12:12:30.5423|Info| PASS - reject
2015-09-04 12:12:30.5423|Info| PASS - every
2015-09-04 12:12:30.5423|Info| PASS - all
2015-09-04 12:12:30.5423|Info| PASS - some
2015-09-04 12:12:30.5423|Info| PASS - any
2015-09-04 12:12:30.5423|Info| PASS - includes
2015-09-04 12:12:30.5423|Info| PASS - include
2015-09-04 12:12:30.5423|Info| PASS - contains
2015-09-04 12:12:30.5423|Info| PASS - includes with NaN
2015-09-04 12:12:30.5423|Info| PASS - includes with +- 0
2015-09-04 12:12:30.5423|Info| PASS - invoke
2015-09-04 12:12:30.5580|Info| PASS - invoke w/ function reference
2015-09-04 12:12:30.5580|Info| PASS - invoke when strings have a call method
2015-09-04 12:12:30.5580|Info| PASS - pluck
2015-09-04 12:12:30.5580|Info| PASS - where
2015-09-04 12:12:30.5580|Info| PASS - findWhere
2015-09-04 12:12:30.5892|Info| PASS - max
2015-09-04 12:12:30.6048|Info| PASS - min
2015-09-04 12:12:30.6048|Info| PASS - sortBy
2015-09-04 12:12:30.6048|Info| PASS - groupBy
2015-09-04 12:12:30.6048|Info| PASS - indexBy
2015-09-04 12:12:30.6048|Info| PASS - countBy
2015-09-04 12:12:30.6205|Info| PASS - shuffle
2015-09-04 12:12:30.6205|Info| PASS - sample
2015-09-04 12:12:30.6205|Info| PASS - toArray
2015-09-04 12:12:30.6205|Info| PASS - size
2015-09-04 12:12:30.6205|Info| PASS - partition
2015-09-04 12:12:30.6205|Info|----------------------------------------
2015-09-04 12:12:30.6205|Info|Functions
2015-09-04 12:12:30.6205|Info|----------------------------------------
2015-09-04 12:12:30.6205|Info| PASS - bind
2015-09-04 12:12:30.6205|Info| PASS - partial
2015-09-04 12:12:30.6205|Info| PASS - bindAll
2015-09-04 12:12:30.6205|Info| PASS - memoize
2015-09-04 12:12:30.6205|Info|  Settimeout: id:1, (100) ms
2015-09-04 12:12:30.6205|Info|  Settimeout: id:2, (50) ms
2015-09-04 12:12:30.6205|Info|  Settimeout: id:3, (150) ms
2015-09-04 12:12:30.6361|Info|      Encerrado timer: id:0, (12:12:30.6361)
2015-09-04 12:12:30.6986|Info|      Executando timer: id:2, (12:12:30.6986)
2015-09-04 12:12:30.6986|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-09-04 12:12:30.6986|Info|      Encerrado timer: id:2, (12:12:30.6986)
2015-09-04 12:12:30.7455|Info|      Executando timer: id:1, (12:12:30.7455)
2015-09-04 12:12:30.7455|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:30.7455|Info|      Encerrado timer: id:1, (12:12:30.7455)
2015-09-04 12:12:30.7924|Info|      Executando timer: id:3, (12:12:30.7924)
2015-09-04 12:12:30.7924|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-09-04 12:12:30.7924|Info|  Settimeout: id:4, (13) ms
2015-09-04 12:12:30.7924|Info|      Encerrado timer: id:3, (12:12:30.7924)
2015-09-04 12:12:30.8080|Info|      Executando timer: id:4, (12:12:30.8080)
2015-09-04 12:12:30.8080|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:30.8080|Info| PASS - delay
2015-09-04 12:12:30.8080|Info|  Settimeout: id:5, (1) ms
2015-09-04 12:12:30.8080|Info|  Settimeout: id:6, (50) ms
2015-09-04 12:12:30.8080|Info|      Encerrado timer: id:4, (12:12:30.8080)
2015-09-04 12:12:30.8236|Info|      Executando timer: id:5, (12:12:30.8236)
2015-09-04 12:12:30.8236|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:30.8236|Info|      Encerrado timer: id:5, (12:12:30.8236)
2015-09-04 12:12:30.8705|Info|      Executando timer: id:6, (12:12:30.8705)
2015-09-04 12:12:30.8705|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:30.8705|Info|  Settimeout: id:7, (13) ms
2015-09-04 12:12:30.8705|Info|      Encerrado timer: id:6, (12:12:30.8705)
2015-09-04 12:12:30.9017|Info|      Executando timer: id:7, (12:12:30.9017)
2015-09-04 12:12:30.9017|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:30.9017|Info| PASS - defer
2015-09-04 12:12:30.9017|Info|  Settimeout: id:8, (32) ms
2015-09-04 12:12:30.9017|Info|  Settimeout: id:9, (64) ms
2015-09-04 12:12:30.9017|Info|      Encerrado timer: id:7, (12:12:30.9017)
2015-09-04 12:12:30.9486|Info|      Executando timer: id:8, (12:12:30.9486)
2015-09-04 12:12:30.9486|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:30.9486|Info|      Encerrado timer: id:8, (12:12:30.9486)
2015-09-04 12:12:30.9799|Info|      Executando timer: id:9, (12:12:30.9799)
2015-09-04 12:12:30.9799|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:30.9799|Info|  Settimeout: id:10, (13) ms
2015-09-04 12:12:30.9799|Info|      Encerrado timer: id:9, (12:12:30.9799)
2015-09-04 12:12:30.9955|Info|      Executando timer: id:10, (12:12:30.9955)
2015-09-04 12:12:30.9955|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:30.9955|Info| PASS - throttle
2015-09-04 12:12:30.9955|Info|  Settimeout: id:11, (32) ms
2015-09-04 12:12:30.9955|Info|  Settimeout: id:12, (64) ms
2015-09-04 12:12:30.9955|Info|  Settimeout: id:13, (96) ms
2015-09-04 12:12:30.9955|Info|      Encerrado timer: id:10, (12:12:30.9955)
2015-09-04 12:12:31.0424|Info|      Executando timer: id:11, (12:12:31.0424)
2015-09-04 12:12:31.0424|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.0424|Info|      Encerrado timer: id:11, (12:12:31.0424)
2015-09-04 12:12:31.0736|Info|      Executando timer: id:12, (12:12:31.0736)
2015-09-04 12:12:31.0736|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.0736|Info|  Settimeout: id:14, (1) ms
2015-09-04 12:12:31.0736|Info|      Encerrado timer: id:12, (12:12:31.0736)
2015-09-04 12:12:31.0892|Info|      Executando timer: id:14, (12:12:31.0892)
2015-09-04 12:12:31.0892|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.0892|Info|      Encerrado timer: id:14, (12:12:31.0892)
2015-09-04 12:12:31.1049|Info|      Executando timer: id:13, (12:12:31.1049)
2015-09-04 12:12:31.1049|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.1049|Info|  Settimeout: id:15, (13) ms
2015-09-04 12:12:31.1049|Info|      Encerrado timer: id:13, (12:12:31.1049)
2015-09-04 12:12:31.1361|Info|      Executando timer: id:15, (12:12:31.1361)
2015-09-04 12:12:31.1361|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:31.1361|Info| PASS - throttle arguments
2015-09-04 12:12:31.1361|Info|  Settimeout: id:16, (64) ms
2015-09-04 12:12:31.1361|Info|      Encerrado timer: id:15, (12:12:31.1361)
2015-09-04 12:12:31.2144|Info|      Executando timer: id:16, (12:12:31.2144)
2015-09-04 12:12:31.2144|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.2144|Info|  Settimeout: id:17, (13) ms
2015-09-04 12:12:31.2144|Info|      Encerrado timer: id:16, (12:12:31.2144)
2015-09-04 12:12:31.2301|Info|      Executando timer: id:17, (12:12:31.2301)
2015-09-04 12:12:31.2301|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:31.2301|Info| PASS - throttle once
2015-09-04 12:12:31.2301|Info|  Settimeout: id:18, (32) ms
2015-09-04 12:12:31.2301|Info|  Settimeout: id:19, (64) ms
2015-09-04 12:12:31.2301|Info|      Encerrado timer: id:17, (12:12:31.2301)
2015-09-04 12:12:31.2769|Info|      Executando timer: id:18, (12:12:31.2769)
2015-09-04 12:12:31.2769|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.2769|Info|      Encerrado timer: id:18, (12:12:31.2769)
2015-09-04 12:12:31.3082|Info|      Executando timer: id:19, (12:12:31.3082)
2015-09-04 12:12:31.3082|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.3082|Info|  Settimeout: id:20, (13) ms
2015-09-04 12:12:31.3082|Info|      Encerrado timer: id:19, (12:12:31.3082)
2015-09-04 12:12:31.3394|Info|      Executando timer: id:20, (12:12:31.3394)
2015-09-04 12:12:31.3394|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:31.3394|Info| PASS - throttle twice
2015-09-04 12:12:31.3394|Info|  Settimeout: id:21, (30) ms
2015-09-04 12:12:31.3394|Info|  Settimeout: id:22, (85) ms
2015-09-04 12:12:31.3394|Info|      Encerrado timer: id:20, (12:12:31.3394)
2015-09-04 12:12:31.3863|Info|      Executando timer: id:21, (12:12:31.3863)
2015-09-04 12:12:31.3863|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.3863|Info|      Encerrado timer: id:21, (12:12:31.3863)
2015-09-04 12:12:31.4332|Info|      Executando timer: id:22, (12:12:31.4332)
2015-09-04 12:12:31.4332|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.4332|Info|  Settimeout: id:23, (13) ms
2015-09-04 12:12:31.4332|Info|      Encerrado timer: id:22, (12:12:31.4332)
2015-09-04 12:12:31.4488|Info|      Executando timer: id:23, (12:12:31.4488)
2015-09-04 12:12:31.4488|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:31.4488|Info| PASS - more throttling
2015-09-04 12:12:31.4488|Info|  Settimeout: id:24, (100) ms
2015-09-04 12:12:31.4488|Info|  Settimeout: id:25, (50) ms
2015-09-04 12:12:31.4488|Info|  Settimeout: id:26, (150) ms
2015-09-04 12:12:31.4488|Info|  Settimeout: id:27, (160) ms
2015-09-04 12:12:31.4488|Info|  Settimeout: id:28, (230) ms
2015-09-04 12:12:31.4488|Info|  Settimeout: id:29, (300) ms
2015-09-04 12:12:31.4488|Info|      Encerrado timer: id:23, (12:12:31.4488)
2015-09-04 12:12:31.5113|Info|      Executando timer: id:25, (12:12:31.5113)
2015-09-04 12:12:31.5113|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.5113|Info|      Encerrado timer: id:25, (12:12:31.5113)
2015-09-04 12:12:31.5582|Info|      Executando timer: id:24, (12:12:31.5582)
2015-09-04 12:12:31.5582|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.5582|Info|      Encerrado timer: id:24, (12:12:31.5582)
2015-09-04 12:12:31.6051|Info|      Executando timer: id:26, (12:12:31.6051)
2015-09-04 12:12:31.6051|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.6051|Info|  Settimeout: id:30, (53) ms
2015-09-04 12:12:31.6051|Info|      Encerrado timer: id:26, (12:12:31.6051)
2015-09-04 12:12:31.6207|Info|      Executando timer: id:27, (12:12:31.6207)
2015-09-04 12:12:31.6207|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.6207|Info|      Encerrado timer: id:27, (12:12:31.6207)
2015-09-04 12:12:31.6676|Info|      Executando timer: id:30, (12:12:31.6676)
2015-09-04 12:12:31.6676|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.6676|Info|      Encerrado timer: id:30, (12:12:31.6676)
2015-09-04 12:12:31.6988|Info|      Executando timer: id:28, (12:12:31.6988)
2015-09-04 12:12:31.6988|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.6988|Info|  Settimeout: id:31, (69) ms
2015-09-04 12:12:31.6988|Info|      Encerrado timer: id:28, (12:12:31.6988)
2015-09-04 12:12:31.7613|Info|      Executando timer: id:29, (12:12:31.7613)
2015-09-04 12:12:31.7613|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.7613|Info|  Settimeout: id:32, (13) ms
2015-09-04 12:12:31.7613|Info|      Encerrado timer: id:29, (12:12:31.7613)
2015-09-04 12:12:31.7770|Info|      Executando timer: id:31, (12:12:31.7770)
2015-09-04 12:12:31.7770|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.7770|Info|      Encerrado timer: id:31, (12:12:31.7770)
2015-09-04 12:12:31.7926|Info|      Executando timer: id:32, (12:12:31.7926)
2015-09-04 12:12:31.7926|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:31.7926|Info| PASS - throttle repeatedly with results
2015-09-04 12:12:31.7926|Info|  Settimeout: id:33, (32) ms
2015-09-04 12:12:31.8394|Info|  Settimeout: id:34, (32) ms
2015-09-04 12:12:31.8550|Info|  Settimeout: id:35, (96) ms
2015-09-04 12:12:31.8550|Info|      Encerrado timer: id:32, (12:12:31.8550)
2015-09-04 12:12:31.8863|Info|      Executando timer: id:34, (12:12:31.8863)
2015-09-04 12:12:31.8863|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:31.8863|Info|      Encerrado timer: id:34, (12:12:31.8863)
2015-09-04 12:12:31.9645|Info|      Executando timer: id:35, (12:12:31.9645)
2015-09-04 12:12:31.9645|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:31.9645|Info|  Settimeout: id:36, (13) ms
2015-09-04 12:12:31.9645|Info|      Encerrado timer: id:35, (12:12:31.9645)
2015-09-04 12:12:31.9957|Info|      Executando timer: id:36, (12:12:31.9957)
2015-09-04 12:12:31.9957|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:31.9957|Info| PASS - throttle triggers trailing call when invoked repeatedly
2015-09-04 12:12:31.9957|Info|  Settimeout: id:37, (60) ms
2015-09-04 12:12:31.9957|Info|  Settimeout: id:38, (96) ms
2015-09-04 12:12:31.9957|Info|      Encerrado timer: id:36, (12:12:31.9957)
2015-09-04 12:12:32.0738|Info|      Executando timer: id:37, (12:12:32.0738)
2015-09-04 12:12:32.0738|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:32.0738|Info|      Encerrado timer: id:37, (12:12:32.0738)
2015-09-04 12:12:32.1051|Info|      Executando timer: id:38, (12:12:32.1051)
2015-09-04 12:12:32.1051|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:32.1051|Info|  Settimeout: id:39, (13) ms
2015-09-04 12:12:32.1051|Info|      Encerrado timer: id:38, (12:12:32.1051)
2015-09-04 12:12:32.1207|Info|      Executando timer: id:39, (12:12:32.1207)
2015-09-04 12:12:32.1207|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:32.1207|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-09-04 12:12:32.1207|Info|  Settimeout: id:40, (100) ms
2015-09-04 12:12:32.1207|Info|  Settimeout: id:41, (50) ms
2015-09-04 12:12:32.1207|Info|  Settimeout: id:42, (60) ms
2015-09-04 12:12:32.1207|Info|  Settimeout: id:43, (200) ms
2015-09-04 12:12:32.1207|Info|  Settimeout: id:44, (250) ms
2015-09-04 12:12:32.1207|Info|  Settimeout: id:45, (350) ms
2015-09-04 12:12:32.1207|Info|      Encerrado timer: id:39, (12:12:32.1207)
2015-09-04 12:12:32.1832|Info|      Executando timer: id:41, (12:12:32.1832)
2015-09-04 12:12:32.1832|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:32.1832|Info|      Encerrado timer: id:41, (12:12:32.1832)
2015-09-04 12:12:32.1988|Info|      Executando timer: id:42, (12:12:32.1988)
2015-09-04 12:12:32.1988|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:32.1988|Info|      Encerrado timer: id:42, (12:12:32.1988)
2015-09-04 12:12:32.2301|Info|      Executando timer: id:40, (12:12:32.2301)
2015-09-04 12:12:32.2301|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:32.2301|Info|      Encerrado timer: id:40, (12:12:32.2301)
2015-09-04 12:12:32.3395|Info|      Executando timer: id:43, (12:12:32.3395)
2015-09-04 12:12:32.3395|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:32.3395|Info|  Settimeout: id:46, (100) ms
2015-09-04 12:12:32.3395|Info|      Encerrado timer: id:43, (12:12:32.3395)
2015-09-04 12:12:32.3863|Info|      Executando timer: id:44, (12:12:32.3863)
2015-09-04 12:12:32.3863|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:32.3863|Info|      Encerrado timer: id:44, (12:12:32.3863)
2015-09-04 12:12:32.4488|Info|      Executando timer: id:46, (12:12:32.4488)
2015-09-04 12:12:32.4488|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:32.4488|Info|      Encerrado timer: id:46, (12:12:32.4488)
2015-09-04 12:12:32.4801|Info|      Executando timer: id:45, (12:12:32.4801)
2015-09-04 12:12:32.4801|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:32.4801|Info|  Settimeout: id:47, (13) ms
2015-09-04 12:12:32.4801|Info|      Encerrado timer: id:45, (12:12:32.4801)
2015-09-04 12:12:32.4957|Info|      Executando timer: id:47, (12:12:32.4957)
2015-09-04 12:12:32.4957|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:32.4957|Info| PASS - more throttle does not trigger leading call when leading is set to false
2015-09-04 12:12:32.4957|Info|  Settimeout: id:48, (100) ms
2015-09-04 12:12:32.6051|Info|  Settimeout: id:49, (100) ms
2015-09-04 12:12:32.7144|Info|  Settimeout: id:50, (100) ms
2015-09-04 12:12:32.8238|Info|  Settimeout: id:51, (100) ms
2015-09-04 12:12:32.8551|Info|  Settimeout: id:52, (200) ms
2015-09-04 12:12:32.8551|Info|      Encerrado timer: id:47, (12:12:32.8551)
2015-09-04 12:12:32.9332|Info|      Executando timer: id:51, (12:12:32.9332)
2015-09-04 12:12:32.9332|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:32.9332|Info|      Encerrado timer: id:51, (12:12:32.9332)
2015-09-04 12:12:33.0582|Info|      Executando timer: id:52, (12:12:33.0582)
2015-09-04 12:12:33.0582|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.0582|Info|  Settimeout: id:53, (13) ms
2015-09-04 12:12:33.0582|Info|      Encerrado timer: id:52, (12:12:33.0582)
2015-09-04 12:12:33.0894|Info|      Executando timer: id:53, (12:12:33.0894)
2015-09-04 12:12:33.0894|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:33.0894|Info| PASS - one more throttle with leading: false test
2015-09-04 12:12:33.0894|Info|  Settimeout: id:54, (96) ms
2015-09-04 12:12:33.0894|Info|      Encerrado timer: id:53, (12:12:33.0894)
2015-09-04 12:12:33.1991|Info|      Executando timer: id:54, (12:12:33.1991)
2015-09-04 12:12:33.1991|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.1991|Info|  Settimeout: id:55, (96) ms
2015-09-04 12:12:33.1991|Info|      Encerrado timer: id:54, (12:12:33.1991)
2015-09-04 12:12:33.3085|Info|      Executando timer: id:55, (12:12:33.3085)
2015-09-04 12:12:33.3085|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.3085|Info|  Settimeout: id:56, (13) ms
2015-09-04 12:12:33.3085|Info|      Encerrado timer: id:55, (12:12:33.3085)
2015-09-04 12:12:33.3241|Info|      Executando timer: id:56, (12:12:33.3241)
2015-09-04 12:12:33.3241|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:33.3241|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-09-04 12:12:33.3241|Info|  Settimeout: id:57, (200) ms
2015-09-04 12:12:33.3241|Info|      Encerrado timer: id:56, (12:12:33.3241)
2015-09-04 12:12:33.5273|Info|      Executando timer: id:57, (12:12:33.5273)
2015-09-04 12:12:33.5273|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.5273|Info|  Settimeout: id:58, (13) ms
2015-09-04 12:12:33.5273|Info|      Encerrado timer: id:57, (12:12:33.5273)
2015-09-04 12:12:33.5585|Info|      Executando timer: id:58, (12:12:33.5585)
2015-09-04 12:12:33.5585|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:33.5585|Info| PASS - throttle continues to function after system time is set backwards
2015-09-04 12:12:33.5585|Info|  Settimeout: id:59, (32) ms
2015-09-04 12:12:33.5585|Info|  Settimeout: id:60, (100) ms
2015-09-04 12:12:33.5585|Info|      Encerrado timer: id:58, (12:12:33.5585)
2015-09-04 12:12:33.6054|Info|      Executando timer: id:59, (12:12:33.6054)
2015-09-04 12:12:33.6054|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:33.6054|Info|  Settimeout: id:61, (32) ms
2015-09-04 12:12:33.6054|Info|      Encerrado timer: id:59, (12:12:33.6054)
2015-09-04 12:12:33.6522|Info|      Executando timer: id:61, (12:12:33.6522)
2015-09-04 12:12:33.6522|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:33.6522|Info|      Encerrado timer: id:61, (12:12:33.6522)
2015-09-04 12:12:33.6679|Info|      Executando timer: id:60, (12:12:33.6679)
2015-09-04 12:12:33.6679|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.6679|Info|  Settimeout: id:62, (13) ms
2015-09-04 12:12:33.6679|Info|      Encerrado timer: id:60, (12:12:33.6679)
2015-09-04 12:12:33.6835|Info|      Executando timer: id:62, (12:12:33.6835)
2015-09-04 12:12:33.6835|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:33.6835|Info| PASS - throttle re-entrant
2015-09-04 12:12:33.6835|Info|  Settimeout: id:63, (32) ms
2015-09-04 12:12:33.6835|Info|  Settimeout: id:64, (16) ms
2015-09-04 12:12:33.6835|Info|  Settimeout: id:65, (96) ms
2015-09-04 12:12:33.6835|Info|      Encerrado timer: id:62, (12:12:33.6835)
2015-09-04 12:12:33.7148|Info|      Executando timer: id:64, (12:12:33.7148)
2015-09-04 12:12:33.7148|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.7148|Info|      Encerrado timer: id:64, (12:12:33.7148)
2015-09-04 12:12:33.7304|Info|      Executando timer: id:63, (12:12:33.7304)
2015-09-04 12:12:33.7304|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:33.7304|Info|  Settimeout: id:66, (16) ms
2015-09-04 12:12:33.7304|Info|      Encerrado timer: id:63, (12:12:33.7304)
2015-09-04 12:12:33.7616|Info|      Executando timer: id:66, (12:12:33.7616)
2015-09-04 12:12:33.7616|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:33.7616|Info|      Encerrado timer: id:66, (12:12:33.7616)
2015-09-04 12:12:33.7929|Info|      Executando timer: id:65, (12:12:33.7929)
2015-09-04 12:12:33.7929|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.7929|Info|  Settimeout: id:67, (13) ms
2015-09-04 12:12:33.7929|Info|      Encerrado timer: id:65, (12:12:33.7929)
2015-09-04 12:12:33.8085|Info|      Executando timer: id:67, (12:12:33.8085)
2015-09-04 12:12:33.8085|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:33.8085|Info| PASS - debounce
2015-09-04 12:12:33.8085|Info|  Settimeout: id:68, (64) ms
2015-09-04 12:12:33.8085|Info|  Settimeout: id:69, (16) ms
2015-09-04 12:12:33.8085|Info|  Settimeout: id:70, (32) ms
2015-09-04 12:12:33.8085|Info|  Settimeout: id:71, (48) ms
2015-09-04 12:12:33.8085|Info|  Settimeout: id:72, (128) ms
2015-09-04 12:12:33.8085|Info|      Encerrado timer: id:67, (12:12:33.8085)
2015-09-04 12:12:33.8398|Info|      Executando timer: id:69, (12:12:33.8398)
2015-09-04 12:12:33.8398|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.8398|Info|      Encerrado timer: id:69, (12:12:33.8398)
2015-09-04 12:12:33.8554|Info|      Executando timer: id:70, (12:12:33.8554)
2015-09-04 12:12:33.8554|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.8554|Info|      Encerrado timer: id:70, (12:12:33.8554)
2015-09-04 12:12:33.8710|Info|      Executando timer: id:71, (12:12:33.8710)
2015-09-04 12:12:33.8710|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.8710|Info|      Encerrado timer: id:71, (12:12:33.8710)
2015-09-04 12:12:33.8866|Info|      Executando timer: id:68, (12:12:33.8866)
2015-09-04 12:12:33.8866|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:33.8866|Info|  Settimeout: id:73, (48) ms
2015-09-04 12:12:33.8866|Info|      Encerrado timer: id:68, (12:12:33.8866)
2015-09-04 12:12:33.9491|Info|      Executando timer: id:72, (12:12:33.9491)
2015-09-04 12:12:33.9491|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:33.9491|Info|  Settimeout: id:74, (13) ms
2015-09-04 12:12:33.9491|Info|      Encerrado timer: id:72, (12:12:33.9491)
2015-09-04 12:12:33.9491|Info|      Executando timer: id:73, (12:12:33.9491)
2015-09-04 12:12:33.9491|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:33.9491|Info|      Encerrado timer: id:73, (12:12:33.9491)
2015-09-04 12:12:33.9804|Info|      Executando timer: id:74, (12:12:33.9804)
2015-09-04 12:12:33.9804|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:33.9804|Info| PASS - debounce asap
2015-09-04 12:12:33.9804|Info|  Settimeout: id:75, (32) ms
2015-09-04 12:12:33.9804|Info|  Settimeout: id:76, (96) ms
2015-09-04 12:12:33.9804|Info|      Encerrado timer: id:74, (12:12:33.9804)
2015-09-04 12:12:34.0273|Info|      Executando timer: id:75, (12:12:34.0273)
2015-09-04 12:12:34.0273|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:34.0273|Info|      Encerrado timer: id:75, (12:12:34.0273)
2015-09-04 12:12:34.0898|Info|      Executando timer: id:76, (12:12:34.0898)
2015-09-04 12:12:34.0898|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:34.0898|Info|  Settimeout: id:77, (13) ms
2015-09-04 12:12:34.0898|Info|      Encerrado timer: id:76, (12:12:34.0898)
2015-09-04 12:12:34.1054|Info|      Executando timer: id:77, (12:12:34.1054)
2015-09-04 12:12:34.1054|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:34.1054|Info| PASS - debounce asap recursively
2015-09-04 12:12:34.1054|Info|  Settimeout: id:78, (100) ms
2015-09-04 12:12:34.1054|Info|  Settimeout: id:79, (200) ms
2015-09-04 12:12:34.1054|Info|      Encerrado timer: id:77, (12:12:34.1054)
2015-09-04 12:12:34.2148|Info|      Executando timer: id:78, (12:12:34.2148)
2015-09-04 12:12:34.2148|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:34.2148|Info|      Encerrado timer: id:78, (12:12:34.2148)
2015-09-04 12:12:34.3241|Info|      Executando timer: id:79, (12:12:34.3241)
2015-09-04 12:12:34.3241|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:34.3241|Info|  Settimeout: id:80, (100) ms
2015-09-04 12:12:34.3241|Info|  Settimeout: id:81, (13) ms
2015-09-04 12:12:34.3241|Info|      Encerrado timer: id:79, (12:12:34.3241)
2015-09-04 12:12:34.3554|Info|      Executando timer: id:81, (12:12:34.3554)
2015-09-04 12:12:34.3554|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:34.3554|Info| PASS - debounce after system time is set backwards
2015-09-04 12:12:34.3554|Info|  Settimeout: id:82, (32) ms
2015-09-04 12:12:34.3554|Info|  Settimeout: id:83, (100) ms
2015-09-04 12:12:34.3554|Info|      Encerrado timer: id:81, (12:12:34.3554)
2015-09-04 12:12:34.4022|Info|      Executando timer: id:82, (12:12:34.4022)
2015-09-04 12:12:34.4022|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:34.4022|Info|  Settimeout: id:84, (32) ms
2015-09-04 12:12:34.4022|Info|      Encerrado timer: id:82, (12:12:34.4022)
2015-09-04 12:12:34.4335|Info|      Executando timer: id:80, (12:12:34.4335)
2015-09-04 12:12:34.4335|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:34.4335|Info|      Encerrado timer: id:80, (12:12:34.4335)
2015-09-04 12:12:34.4491|Info|      Executando timer: id:84, (12:12:34.4491)
2015-09-04 12:12:34.4491|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:34.4491|Info|      Encerrado timer: id:84, (12:12:34.4491)
2015-09-04 12:12:34.4648|Info|      Executando timer: id:83, (12:12:34.4648)
2015-09-04 12:12:34.4648|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:34.4648|Info|  Settimeout: id:85, (13) ms
2015-09-04 12:12:34.4648|Info|      Encerrado timer: id:83, (12:12:34.4648)
2015-09-04 12:12:34.4960|Info|      Executando timer: id:85, (12:12:34.4960)
2015-09-04 12:12:34.4960|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:34.4960|Info| PASS - debounce re-entrant
2015-09-04 12:12:34.4960|Info| PASS - once
2015-09-04 12:12:34.4960|Info| PASS - Recursive onced function.
2015-09-04 12:12:34.4960|Info| PASS - wrap
2015-09-04 12:12:34.4960|Info| PASS - negate
2015-09-04 12:12:34.4960|Info| PASS - compose
2015-09-04 12:12:34.4960|Info| PASS - after
2015-09-04 12:12:34.4960|Info| PASS - before
2015-09-04 12:12:34.4960|Info| PASS - iteratee
2015-09-04 12:12:34.4960|Info|----------------------------------------
2015-09-04 12:12:34.4960|Info|Objects
2015-09-04 12:12:34.4960|Info|----------------------------------------
2015-09-04 12:12:34.4960|Info| PASS - keys
2015-09-04 12:12:34.4960|Info| PASS - allKeys
2015-09-04 12:12:34.4960|Info| PASS - values
2015-09-04 12:12:34.4960|Info| PASS - pairs
2015-09-04 12:12:34.4960|Info| PASS - invert
2015-09-04 12:12:34.4960|Info| PASS - functions
2015-09-04 12:12:34.5116|Info| PASS - methods
2015-09-04 12:12:34.5116|Info| PASS - extend
2015-09-04 12:12:34.5116|Info| PASS - extendOwn
2015-09-04 12:12:34.5116|Info| PASS - pick
2015-09-04 12:12:34.5116|Info| PASS - omit
2015-09-04 12:12:34.5116|Info| PASS - defaults
2015-09-04 12:12:34.5116|Info| PASS - clone
2015-09-04 12:12:34.5116|Info| PASS - create
2015-09-04 12:12:34.5116|Info| PASS - isEqual
2015-09-04 12:12:34.5116|Info| PASS - isEmpty
2015-09-04 12:12:34.5116|Info| PASS - isArguments
2015-09-04 12:12:34.5116|Info| PASS - isObject
2015-09-04 12:12:34.5116|Info| PASS - isArray
2015-09-04 12:12:34.5272|Info| PASS - isString
2015-09-04 12:12:34.5272|Info| PASS - isNumber
2015-09-04 12:12:34.5272|Info| PASS - isBoolean
2015-09-04 12:12:34.5272|Info| PASS - isFunction
2015-09-04 12:12:34.5272|Info| PASS - #1929 Typed Array constructors are functions
2015-09-04 12:12:34.5272|Info| PASS - isDate
2015-09-04 12:12:34.5272|Info| PASS - isRegExp
2015-09-04 12:12:34.5272|Info| PASS - isFinite
2015-09-04 12:12:34.5272|Info| PASS - isNaN
2015-09-04 12:12:34.5272|Info| PASS - isNull
2015-09-04 12:12:34.5272|Info| PASS - isUndefined
2015-09-04 12:12:34.5272|Info| PASS - isError
2015-09-04 12:12:34.5272|Info| PASS - tap
2015-09-04 12:12:34.5272|Info| PASS - has
2015-09-04 12:12:34.5272|Info| PASS - isMatch
2015-09-04 12:12:34.5272|Info| PASS - matcher
2015-09-04 12:12:34.5429|Info| PASS - matcher 
2015-09-04 12:12:34.5429|Info| PASS - findKey
2015-09-04 12:12:34.5429|Info| PASS - mapObject
2015-09-04 12:12:34.5429|Info|----------------------------------------
2015-09-04 12:12:34.5429|Info|Utility
2015-09-04 12:12:34.5429|Info|----------------------------------------
2015-09-04 12:12:34.5429|Info| PASS - #750 - Return _ instance.
2015-09-04 12:12:34.5429|Info| PASS - identity
2015-09-04 12:12:34.5429|Info| PASS - constant
2015-09-04 12:12:34.5429|Info| PASS - noop
2015-09-04 12:12:34.5429|Info| PASS - property
2015-09-04 12:12:34.5429|Info| PASS - propertyOf
2015-09-04 12:12:34.5429|Info| PASS - random
2015-09-04 12:12:34.5429|Info| PASS - now
2015-09-04 12:12:34.5429|Info| PASS - uniqueId
2015-09-04 12:12:34.5429|Info| PASS - times
2015-09-04 12:12:34.5429|Info| PASS - mixin
2015-09-04 12:12:34.5585|Info| PASS - _.escape
2015-09-04 12:12:34.5585|Info| PASS - _.unescape
2015-09-04 12:12:34.5585|Info| PASS - _.escape & unescape
2015-09-04 12:12:34.5585|Info| PASS - template
2015-09-04 12:12:34.5585|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-09-04 12:12:34.5585|Info| PASS - _.template handles \u2028 & \u2029
2015-09-04 12:12:34.5585|Info| PASS - result calls functions and returns primitives
2015-09-04 12:12:34.5585|Info| PASS - result returns a default value if object is null or undefined
2015-09-04 12:12:34.5585|Info| PASS - result returns a default value if property of object is missing
2015-09-04 12:12:34.5585|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-09-04 12:12:34.5585|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-09-04 12:12:34.5585|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-09-04 12:12:34.5585|Info| PASS - result fallback can use a function
2015-09-04 12:12:34.5585|Info| PASS - _.templateSettings.variable
2015-09-04 12:12:34.5585|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-09-04 12:12:34.5585|Info| PASS - #556 - undefined template variables.
2015-09-04 12:12:34.5741|Info| PASS - interpolate evaluates code only once.
2015-09-04 12:12:34.5741|Info| PASS - #746 - _.template settings are not modified.
2015-09-04 12:12:34.5741|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-09-04 12:12:34.5741|Info|----------------------------------------
2015-09-04 12:12:34.5741|Info|    PASS: 1382  FAIL: 0  TOTAL: 1382
2015-09-04 12:12:34.5741|Info|    Finished in 4594 milliseconds.
2015-09-04 12:12:34.5741|Info|----------------------------------------
2015-09-04 12:12:34.5741|Info|      Encerrado timer: id:85, (12:12:34.5741)
2015-09-04 12:12:34.5741|Info|Encerrando os testes
2015-09-04 12:12:34.5741|Info|Total:1382, Sucesso: 1382, Falha: 0
2015-09-04 12:12:34.5741|Info| 5 segundos para avaliar o individuo underscore.js
2015-09-04 12:12:41.2051|Info|Iniciando os testes
2015-09-04 12:12:41.5332|Info|  Settimeout: id:0, (13) ms
2015-09-04 12:12:41.5645|Info|      Executando timer: id:0, (12:12:41.5645)
2015-09-04 12:12:41.5801|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:41.5957|Info|  Settimeout: id:1, (13) ms
2015-09-04 12:12:41.5957|Info|      Encerrado timer: id:0, (12:12:41.5957)
2015-09-04 12:12:41.6270|Info|      Executando timer: id:1, (12:12:41.6270)
2015-09-04 12:12:41.6270|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:41.6738|Info|  Settimeout: id:2, (32) ms
2015-09-04 12:12:41.6895|Info|  Settimeout: id:3, (96) ms
2015-09-04 12:12:41.6895|Info|      Encerrado timer: id:1, (12:12:41.6895)
2015-09-04 12:12:41.7364|Info|      Executando timer: id:2, (12:12:41.7364)
2015-09-04 12:12:41.7364|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:41.7364|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:41.7364|Info|      Encerrado timer: id:2, (12:12:41.7364)
2015-09-04 12:12:41.7989|Info|      Executando timer: id:3, (12:12:41.7989)
2015-09-04 12:12:41.7989|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-09-04 12:12:41.7989|Info|  Settimeout: id:4, (13) ms
2015-09-04 12:12:41.7989|Info|      Encerrado timer: id:3, (12:12:41.7989)
2015-09-04 12:12:41.8145|Info|      Executando timer: id:4, (12:12:41.8145)
2015-09-04 12:12:41.8145|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:41.8145|Info|  Settimeout: id:5, (32) ms
2015-09-04 12:12:41.8145|Info|  Settimeout: id:6, (64) ms
2015-09-04 12:12:41.8145|Info|  Settimeout: id:7, (128) ms
2015-09-04 12:12:41.8145|Info|      Encerrado timer: id:4, (12:12:41.8145)
2015-09-04 12:12:41.8614|Info|      Executando timer: id:5, (12:12:41.8614)
2015-09-04 12:12:41.8614|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:41.8614|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:41.8614|Info|      Encerrado timer: id:5, (12:12:41.8614)
2015-09-04 12:12:41.8926|Info|      Executando timer: id:6, (12:12:41.8926)
2015-09-04 12:12:41.8926|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-09-04 12:12:41.8926|Info|  Settimeout: id:8, (32) ms
2015-09-04 12:12:41.8926|Info|      Encerrado timer: id:6, (12:12:41.8926)
2015-09-04 12:12:41.9395|Info|      Executando timer: id:8, (12:12:41.9395)
2015-09-04 12:12:41.9395|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:41.9395|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:41.9395|Info|      Encerrado timer: id:8, (12:12:41.9395)
2015-09-04 12:12:41.9551|Info|      Executando timer: id:7, (12:12:41.9551)
2015-09-04 12:12:41.9551|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-09-04 12:12:41.9551|Info|  Settimeout: id:9, (32) ms
2015-09-04 12:12:41.9551|Info|  Settimeout: id:10, (13) ms
2015-09-04 12:12:41.9551|Info|      Encerrado timer: id:7, (12:12:41.9551)
2015-09-04 12:12:41.9864|Info|      Executando timer: id:10, (12:12:41.9864)
2015-09-04 12:12:41.9864|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:41.9864|Info|  Settimeout: id:11, (32) ms
2015-09-04 12:12:41.9864|Info|  Settimeout: id:12, (64) ms
2015-09-04 12:12:41.9864|Info|      Encerrado timer: id:10, (12:12:41.9864)
2015-09-04 12:12:42.0020|Info|      Executando timer: id:9, (12:12:42.0020)
2015-09-04 12:12:42.0020|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.0020|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.0020|Info|      Encerrado timer: id:9, (12:12:42.0020)
2015-09-04 12:12:42.0333|Info|      Executando timer: id:11, (12:12:42.0333)
2015-09-04 12:12:42.0333|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.0333|Info|      Encerrado timer: id:11, (12:12:42.0333)
2015-09-04 12:12:42.0645|Info|      Executando timer: id:12, (12:12:42.0645)
2015-09-04 12:12:42.0645|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-09-04 12:12:42.0645|Info|  Settimeout: id:13, (32) ms
2015-09-04 12:12:42.0645|Info|  Settimeout: id:14, (13) ms
2015-09-04 12:12:42.0645|Info|      Encerrado timer: id:12, (12:12:42.0645)
2015-09-04 12:12:42.0958|Info|      Executando timer: id:14, (12:12:42.0958)
2015-09-04 12:12:42.0958|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:42.0958|Info|  Settimeout: id:15, (32) ms
2015-09-04 12:12:42.0958|Info|  Settimeout: id:16, (64) ms
2015-09-04 12:12:42.0958|Info|      Encerrado timer: id:14, (12:12:42.0958)
2015-09-04 12:12:42.1114|Info|      Executando timer: id:13, (12:12:42.1114)
2015-09-04 12:12:42.1114|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.1114|Info|      Encerrado timer: id:13, (12:12:42.1114)
2015-09-04 12:12:42.1426|Info|      Executando timer: id:15, (12:12:42.1426)
2015-09-04 12:12:42.1426|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.1426|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.1426|Info|      Encerrado timer: id:15, (12:12:42.1426)
2015-09-04 12:12:42.1739|Info|      Executando timer: id:16, (12:12:42.1739)
2015-09-04 12:12:42.1739|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-09-04 12:12:42.1739|Info|  Settimeout: id:17, (13) ms
2015-09-04 12:12:42.1739|Info|      Encerrado timer: id:16, (12:12:42.1739)
2015-09-04 12:12:42.2051|Info|      Executando timer: id:17, (12:12:42.2051)
2015-09-04 12:12:42.2051|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:42.2051|Info|  Settimeout: id:18, (32) ms
2015-09-04 12:12:42.2051|Info|  Settimeout: id:19, (32) ms
2015-09-04 12:12:42.2051|Info|  Settimeout: id:20, (32) ms
2015-09-04 12:12:42.2051|Info|  Settimeout: id:21, (64) ms
2015-09-04 12:12:42.2051|Info|      Encerrado timer: id:17, (12:12:42.2051)
2015-09-04 12:12:42.2520|Info|      Executando timer: id:19, (12:12:42.2520)
2015-09-04 12:12:42.2520|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.2520|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.2520|Info|      Encerrado timer: id:19, (12:12:42.2520)
2015-09-04 12:12:42.2520|Info|      Executando timer: id:20, (12:12:42.2520)
2015-09-04 12:12:42.2520|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.2520|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.2520|Info|      Encerrado timer: id:20, (12:12:42.2520)
2015-09-04 12:12:42.2520|Info|      Executando timer: id:18, (12:12:42.2520)
2015-09-04 12:12:42.2520|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.2520|Info|      Encerrado timer: id:18, (12:12:42.2520)
2015-09-04 12:12:42.2833|Info|      Executando timer: id:21, (12:12:42.2833)
2015-09-04 12:12:42.2833|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-09-04 12:12:42.2833|Info|  Settimeout: id:22, (32) ms
2015-09-04 12:12:42.2833|Info|  Settimeout: id:23, (13) ms
2015-09-04 12:12:42.2833|Info|      Encerrado timer: id:21, (12:12:42.2833)
2015-09-04 12:12:42.3145|Info|      Executando timer: id:23, (12:12:42.3145)
2015-09-04 12:12:42.3145|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:42.3145|Info|  Settimeout: id:24, (32) ms
2015-09-04 12:12:42.3145|Info|  Settimeout: id:25, (32) ms
2015-09-04 12:12:42.3145|Info|  Settimeout: id:26, (64) ms
2015-09-04 12:12:42.3145|Info|      Encerrado timer: id:23, (12:12:42.3145)
2015-09-04 12:12:42.3301|Info|      Executando timer: id:22, (12:12:42.3301)
2015-09-04 12:12:42.3301|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.3301|Info|      Encerrado timer: id:22, (12:12:42.3301)
2015-09-04 12:12:42.3614|Info|      Executando timer: id:25, (12:12:42.3614)
2015-09-04 12:12:42.3614|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.3614|Info|      Encerrado timer: id:25, (12:12:42.3614)
2015-09-04 12:12:42.3614|Info|      Executando timer: id:24, (12:12:42.3614)
2015-09-04 12:12:42.3614|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.3614|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.3614|Info|      Encerrado timer: id:24, (12:12:42.3614)
2015-09-04 12:12:42.3926|Info|      Executando timer: id:26, (12:12:42.3926)
2015-09-04 12:12:42.3926|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-09-04 12:12:42.3926|Info|  Settimeout: id:27, (13) ms
2015-09-04 12:12:42.3926|Info|      Encerrado timer: id:26, (12:12:42.3926)
2015-09-04 12:12:42.4083|Info|      Executando timer: id:27, (12:12:42.4083)
2015-09-04 12:12:42.4083|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:42.4083|Info|  Settimeout: id:28, (128) ms
2015-09-04 12:12:42.4083|Info|  Settimeout: id:29, (64) ms
2015-09-04 12:12:42.4083|Info|  Settimeout: id:30, (96) ms
2015-09-04 12:12:42.5489|Info|  Settimeout: id:31, (128) ms
2015-09-04 12:12:42.5489|Info|  Settimeout: id:32, (64) ms
2015-09-04 12:12:42.6895|Info|  Settimeout: id:33, (128) ms
2015-09-04 12:12:42.6895|Info|  Settimeout: id:34, (64) ms
2015-09-04 12:12:42.7363|Info|  Settimeout: id:35, (1) ms
2015-09-04 12:12:42.7363|Info|      Encerrado timer: id:27, (12:12:42.7363)
2015-09-04 12:12:42.7363|Info|      Executando timer: id:30, (12:12:42.7363)
2015-09-04 12:12:42.7363|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.7363|Info|  Settimeout: id:36, (96) ms
2015-09-04 12:12:42.7363|Info|      Encerrado timer: id:30, (12:12:42.7363)
2015-09-04 12:12:42.7520|Info|      Executando timer: id:35, (12:12:42.7520)
2015-09-04 12:12:42.7520|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-09-04 12:12:42.7520|Info|  Settimeout: id:37, (13) ms
2015-09-04 12:12:42.7520|Info|      Encerrado timer: id:35, (12:12:42.7520)
2015-09-04 12:12:42.7676|Info|      Executando timer: id:37, (12:12:42.7676)
2015-09-04 12:12:42.8301|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:42.8301|Info|  Settimeout: id:38, (64) ms
2015-09-04 12:12:42.8301|Info|  Settimeout: id:39, (32) ms
2015-09-04 12:12:42.8301|Info|  Settimeout: id:40, (128) ms
2015-09-04 12:12:42.8301|Info|      Encerrado timer: id:37, (12:12:42.8301)
2015-09-04 12:12:42.8301|Info|      Executando timer: id:34, (12:12:42.8301)
2015-09-04 12:12:42.8301|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.8301|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.8301|Info|      Encerrado timer: id:34, (12:12:42.8301)
2015-09-04 12:12:42.8458|Info|      Executando timer: id:36, (12:12:42.8458)
2015-09-04 12:12:42.8458|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.8458|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.8458|Info|      Encerrado timer: id:36, (12:12:42.8458)
2015-09-04 12:12:42.8770|Info|      Executando timer: id:39, (12:12:42.8770)
2015-09-04 12:12:42.8770|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:42.8770|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:42.8770|Info|      Encerrado timer: id:39, (12:12:42.8770)
2015-09-04 12:12:42.9708|Info|      Executando timer: id:40, (12:12:42.9708)
2015-09-04 12:12:42.9708|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-09-04 12:12:42.9708|Info|  Settimeout: id:41, (13) ms
2015-09-04 12:12:42.9708|Info|      Encerrado timer: id:40, (12:12:42.9708)
2015-09-04 12:12:42.9864|Info|      Executando timer: id:41, (12:12:42.9864)
2015-09-04 12:12:42.9864|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:42.9864|Info|  Settimeout: id:42, (32) ms
2015-09-04 12:12:42.9864|Info|  Settimeout: id:43, (64) ms
2015-09-04 12:12:43.0645|Info|  Settimeout: id:44, (64) ms
2015-09-04 12:12:43.0645|Info|      Encerrado timer: id:41, (12:12:43.0645)
2015-09-04 12:12:43.1427|Info|      Executando timer: id:44, (12:12:43.1427)
2015-09-04 12:12:43.1427|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-09-04 12:12:43.1427|Info|  Settimeout: id:45, (13) ms
2015-09-04 12:12:43.1427|Info|      Encerrado timer: id:44, (12:12:43.1427)
2015-09-04 12:12:43.1583|Info|      Executando timer: id:45, (12:12:43.1583)
2015-09-04 12:12:43.1583|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:43.1583|Info|  Settimeout: id:46, (1) ms
2015-09-04 12:12:43.1583|Info|  Settimeout: id:47, (32) ms
2015-09-04 12:12:43.1583|Info|      Encerrado timer: id:45, (12:12:43.1583)
2015-09-04 12:12:43.1739|Info|      Executando timer: id:46, (12:12:43.1739)
2015-09-04 12:12:43.1739|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-09-04 12:12:43.1739|Info|      Encerrado timer: id:46, (12:12:43.1739)
2015-09-04 12:12:43.2053|Info|      Executando timer: id:47, (12:12:43.2053)
2015-09-04 12:12:43.2053|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-09-04 12:12:43.2053|Info|  Settimeout: id:48, (13) ms
2015-09-04 12:12:43.2053|Info|      Encerrado timer: id:47, (12:12:43.2053)
2015-09-04 12:12:43.2209|Info|      Executando timer: id:48, (12:12:43.2209)
2015-09-04 12:12:43.2209|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:43.2209|Info|  Settimeout: id:49, (1) ms
2015-09-04 12:12:43.2209|Info|  Settimeout: id:50, (32) ms
2015-09-04 12:12:43.2209|Info|      Encerrado timer: id:48, (12:12:43.2209)
2015-09-04 12:12:43.2365|Info|      Executando timer: id:49, (12:12:43.2365)
2015-09-04 12:12:43.2365|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-09-04 12:12:43.2365|Info|      Encerrado timer: id:49, (12:12:43.2365)
2015-09-04 12:12:43.2678|Info|      Executando timer: id:50, (12:12:43.2678)
2015-09-04 12:12:43.2678|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-09-04 12:12:43.2678|Info|  Settimeout: id:51, (13) ms
2015-09-04 12:12:43.2678|Info|      Encerrado timer: id:50, (12:12:43.2678)
2015-09-04 12:12:43.2990|Info|      Executando timer: id:51, (12:12:43.2990)
2015-09-04 12:12:43.2990|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:43.2990|Info|  Settimeout: id:52, (1) ms
2015-09-04 12:12:43.2990|Info|  Settimeout: id:53, (32) ms
2015-09-04 12:12:43.2990|Info|      Encerrado timer: id:51, (12:12:43.2990)
2015-09-04 12:12:43.3459|Info|      Executando timer: id:53, (12:12:43.3459)
2015-09-04 12:12:43.3459|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-09-04 12:12:43.3459|Info|  Settimeout: id:54, (13) ms
2015-09-04 12:12:43.3459|Info|      Encerrado timer: id:53, (12:12:43.3459)
2015-09-04 12:12:43.3772|Info|      Executando timer: id:54, (12:12:43.3772)
2015-09-04 12:12:43.3772|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:43.3772|Info|  Settimeout: id:55, (32) ms
2015-09-04 12:12:43.3772|Info|  Settimeout: id:56, (1) ms
2015-09-04 12:12:43.3772|Info|  Settimeout: id:57, (64) ms
2015-09-04 12:12:43.3772|Info|      Encerrado timer: id:54, (12:12:43.3772)
2015-09-04 12:12:43.3928|Info|      Executando timer: id:56, (12:12:43.3928)
2015-09-04 12:12:43.3928|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-09-04 12:12:43.3928|Info|      Encerrado timer: id:56, (12:12:43.3928)
2015-09-04 12:12:43.4240|Info|      Executando timer: id:55, (12:12:43.4240)
2015-09-04 12:12:43.4240|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-09-04 12:12:43.4240|Info|      Encerrado timer: id:55, (12:12:43.4240)
2015-09-04 12:12:43.4553|Info|      Executando timer: id:57, (12:12:43.4553)
2015-09-04 12:12:43.4553|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-09-04 12:12:43.4553|Info|  Settimeout: id:58, (13) ms
2015-09-04 12:12:43.4553|Info|      Encerrado timer: id:57, (12:12:43.4553)
2015-09-04 12:12:43.4709|Info|      Executando timer: id:58, (12:12:43.4709)
2015-09-04 12:12:43.4709|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:43.4709|Info|  Settimeout: id:59, (32) ms
2015-09-04 12:12:43.4709|Info|  Settimeout: id:60, (64) ms
2015-09-04 12:12:43.4709|Info|      Encerrado timer: id:58, (12:12:43.4709)
2015-09-04 12:12:43.5178|Info|      Executando timer: id:59, (12:12:43.5178)
2015-09-04 12:12:43.5178|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-09-04 12:12:43.5178|Info|      Encerrado timer: id:59, (12:12:43.5178)
2015-09-04 12:12:43.5490|Info|      Executando timer: id:60, (12:12:43.5490)
2015-09-04 12:12:43.5490|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-09-04 12:12:43.5490|Info|  Settimeout: id:61, (13) ms
2015-09-04 12:12:43.5490|Info|      Encerrado timer: id:60, (12:12:43.5490)
2015-09-04 12:12:43.5803|Info|      Executando timer: id:61, (12:12:43.5803)
2015-09-04 12:12:43.5803|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:43.5803|Info|  Settimeout: id:62, (32) ms
2015-09-04 12:12:43.5803|Info|  Settimeout: id:63, (64) ms
2015-09-04 12:12:43.5803|Info|      Encerrado timer: id:61, (12:12:43.5803)
2015-09-04 12:12:43.6584|Info|      Executando timer: id:63, (12:12:43.6584)
2015-09-04 12:12:43.6584|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-09-04 12:12:43.6584|Info|  Settimeout: id:64, (13) ms
2015-09-04 12:12:43.6584|Info|      Encerrado timer: id:63, (12:12:43.6584)
2015-09-04 12:12:43.6740|Info|      Executando timer: id:64, (12:12:43.6740)
2015-09-04 12:12:43.6740|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:45.4506|Info|  Settimeout: id:65, (13) ms
2015-09-04 12:12:45.4506|Info|      Encerrado timer: id:64, (12:12:45.4506)
2015-09-04 12:12:45.4819|Info|      Executando timer: id:65, (12:12:45.4819)
2015-09-04 12:12:45.4819|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-09-04 12:12:45.5443|Info|----------------------------------------
2015-09-04 12:12:45.5443|Info|lodash.isNil
2015-09-04 12:12:45.5443|Info|----------------------------------------
2015-09-04 12:12:45.5443|Info| FAIL - should work with nulls from another realm
2015-09-04 12:12:45.5443|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-09-04 12:12:45.7631|Info|  Settimeout: id:66, (32) ms
2015-09-04 12:12:45.7631|Info|      Encerrado timer: id:65, (12:12:45.7631)
2015-09-04 12:12:45.8100|Info|      Executando timer: id:66, (12:12:45.8100)
2015-09-04 12:12:45.8100|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-09-04 12:12:45.8100|Info|  Settimeout: id:67, (13) ms
2015-09-04 12:12:45.8100|Info|      Encerrado timer: id:66, (12:12:45.8100)
2015-09-04 12:12:45.8256|Info|      Executando timer: id:67, (12:12:45.8256)
2015-09-04 12:12:45.8256|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:45.9350|Info|  Settimeout: id:68, (32) ms
2015-09-04 12:12:45.9350|Info|  Settimeout: id:69, (64) ms
2015-09-04 12:12:45.9350|Info|      Encerrado timer: id:67, (12:12:45.9350)
2015-09-04 12:12:45.9819|Info|      Executando timer: id:68, (12:12:45.9819)
2015-09-04 12:12:45.9819|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:45.9819|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:45.9819|Info|      Encerrado timer: id:68, (12:12:45.9819)
2015-09-04 12:12:46.0131|Info|      Executando timer: id:69, (12:12:46.0131)
2015-09-04 12:12:46.0131|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-09-04 12:12:46.0131|Info|  Settimeout: id:70, (13) ms
2015-09-04 12:12:46.0131|Info|      Encerrado timer: id:69, (12:12:46.0131)
2015-09-04 12:12:46.0444|Info|      Executando timer: id:70, (12:12:46.0444)
2015-09-04 12:12:46.0444|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:46.0444|Info|  Settimeout: id:71, (32) ms
2015-09-04 12:12:46.0444|Info|  Settimeout: id:72, (64) ms
2015-09-04 12:12:46.0444|Info|      Encerrado timer: id:70, (12:12:46.0444)
2015-09-04 12:12:46.0913|Info|      Executando timer: id:71, (12:12:46.0913)
2015-09-04 12:12:46.0913|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:46.0913|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:46.0913|Info|      Encerrado timer: id:71, (12:12:46.0913)
2015-09-04 12:12:46.1225|Info|      Executando timer: id:72, (12:12:46.1225)
2015-09-04 12:12:46.1225|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-09-04 12:12:46.1225|Info|  Settimeout: id:73, (1) ms
2015-09-04 12:12:46.1225|Info|  Settimeout: id:74, (13) ms
2015-09-04 12:12:46.1225|Info|      Encerrado timer: id:72, (12:12:46.1225)
2015-09-04 12:12:46.1381|Info|      Executando timer: id:73, (12:12:46.1381)
2015-09-04 12:12:46.1381|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:46.1381|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:46.1381|Info|      Encerrado timer: id:73, (12:12:46.1381)
2015-09-04 12:12:46.1538|Info|      Executando timer: id:74, (12:12:46.1538)
2015-09-04 12:12:46.1538|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:46.1538|Info|  Settimeout: id:75, (32) ms
2015-09-04 12:12:46.1538|Info|  Settimeout: id:76, (64) ms
2015-09-04 12:12:46.1538|Info|      Encerrado timer: id:74, (12:12:46.1538)
2015-09-04 12:12:46.2007|Info|      Executando timer: id:75, (12:12:46.2006)
2015-09-04 12:12:46.2007|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:46.2007|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:46.2007|Info|      Encerrado timer: id:75, (12:12:46.2009)
2015-09-04 12:12:46.2322|Info|      Executando timer: id:76, (12:12:46.2322)
2015-09-04 12:12:46.2322|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-09-04 12:12:46.2322|Info|  Settimeout: id:77, (13) ms
2015-09-04 12:12:46.2322|Info|      Encerrado timer: id:76, (12:12:46.2322)
2015-09-04 12:12:46.2478|Info|      Executando timer: id:77, (12:12:46.2478)
2015-09-04 12:12:46.2478|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:46.2478|Info|  Settimeout: id:78, (64) ms
2015-09-04 12:12:46.2478|Info|      Encerrado timer: id:77, (12:12:46.2478)
2015-09-04 12:12:46.3260|Info|      Executando timer: id:78, (12:12:46.3260)
2015-09-04 12:12:46.3260|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-09-04 12:12:46.3260|Info|  Settimeout: id:79, (13) ms
2015-09-04 12:12:46.3260|Info|      Encerrado timer: id:78, (12:12:46.3260)
2015-09-04 12:12:46.3416|Info|      Executando timer: id:79, (12:12:46.3416)
2015-09-04 12:12:46.3416|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:46.3416|Info|  Settimeout: id:80, (32) ms
2015-09-04 12:12:46.3884|Info|  Settimeout: id:81, (32) ms
2015-09-04 12:12:46.4353|Info|  Settimeout: id:82, (32) ms
2015-09-04 12:12:46.4822|Info|  Settimeout: id:83, (32) ms
2015-09-04 12:12:46.5290|Info|  Settimeout: id:84, (32) ms
2015-09-04 12:12:46.5603|Info|  Settimeout: id:85, (32) ms
2015-09-04 12:12:46.6072|Info|  Settimeout: id:86, (32) ms
2015-09-04 12:12:46.6540|Info|  Settimeout: id:87, (32) ms
2015-09-04 12:12:46.6697|Info|  Settimeout: id:88, (1) ms
2015-09-04 12:12:46.6697|Info|      Encerrado timer: id:79, (12:12:46.6697)
2015-09-04 12:12:46.6853|Info|      Executando timer: id:88, (12:12:46.6853)
2015-09-04 12:12:46.6853|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-09-04 12:12:46.6853|Info|  Settimeout: id:89, (13) ms
2015-09-04 12:12:46.6853|Info|      Encerrado timer: id:88, (12:12:46.6853)
2015-09-04 12:12:46.7010|Info|      Executando timer: id:87, (12:12:46.7010)
2015-09-04 12:12:46.7010|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:46.7010|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:46.7010|Info|      Encerrado timer: id:87, (12:12:46.7010)
2015-09-04 12:12:46.7010|Info|      Executando timer: id:89, (12:12:46.7010)
2015-09-04 12:12:46.7010|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:46.7010|Info|  Settimeout: id:90, (32) ms
2015-09-04 12:12:46.7322|Info|  Settimeout: id:91, (32) ms
2015-09-04 12:12:46.7791|Info|  Settimeout: id:92, (32) ms
2015-09-04 12:12:46.8259|Info|  Settimeout: id:93, (32) ms
2015-09-04 12:12:46.8572|Info|  Settimeout: id:94, (32) ms
2015-09-04 12:12:46.9041|Info|  Settimeout: id:95, (32) ms
2015-09-04 12:12:46.9509|Info|  Settimeout: id:96, (32) ms
2015-09-04 12:12:46.9822|Info|  Settimeout: id:97, (32) ms
2015-09-04 12:12:47.0291|Info|  Settimeout: id:98, (1) ms
2015-09-04 12:12:47.0291|Info|      Encerrado timer: id:89, (12:12:47.0291)
2015-09-04 12:12:47.0291|Info|      Executando timer: id:97, (12:12:47.0291)
2015-09-04 12:12:47.0291|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:47.0291|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:47.0291|Info|      Encerrado timer: id:97, (12:12:47.0291)
2015-09-04 12:12:47.0447|Info|      Executando timer: id:98, (12:12:47.0447)
2015-09-04 12:12:47.0447|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-09-04 12:12:47.0447|Info|  Settimeout: id:99, (13) ms
2015-09-04 12:12:47.0447|Info|      Encerrado timer: id:98, (12:12:47.0447)
2015-09-04 12:12:47.0604|Info|      Executando timer: id:99, (12:12:47.0604)
2015-09-04 12:12:47.0604|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:47.0604|Info|  Settimeout: id:100, (32) ms
2015-09-04 12:12:47.0604|Info|  Settimeout: id:101, (128) ms
2015-09-04 12:12:47.0604|Info|      Encerrado timer: id:99, (12:12:47.0604)
2015-09-04 12:12:47.1072|Info|      Executando timer: id:100, (12:12:47.1072)
2015-09-04 12:12:47.1072|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:47.1072|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:47.1072|Info|      Encerrado timer: id:100, (12:12:47.1072)
2015-09-04 12:12:47.2010|Info|      Executando timer: id:101, (12:12:47.2010)
2015-09-04 12:12:47.2010|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-09-04 12:12:47.2010|Info|  Settimeout: id:102, (13) ms
2015-09-04 12:12:47.2010|Info|      Encerrado timer: id:101, (12:12:47.2010)
2015-09-04 12:12:47.2166|Info|      Executando timer: id:102, (12:12:47.2166)
2015-09-04 12:12:47.2166|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:47.2166|Info|  Settimeout: id:103, (32) ms
2015-09-04 12:12:47.2166|Info|  Settimeout: id:104, (64) ms
2015-09-04 12:12:47.2166|Info|  Settimeout: id:105, (64) ms
2015-09-04 12:12:47.2166|Info|  Settimeout: id:106, (256) ms
2015-09-04 12:12:47.2166|Info|      Encerrado timer: id:102, (12:12:47.2166)
2015-09-04 12:12:47.2635|Info|      Executando timer: id:103, (12:12:47.2635)
2015-09-04 12:12:47.2635|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:47.2635|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:47.2635|Info|      Encerrado timer: id:103, (12:12:47.2635)
2015-09-04 12:12:47.2947|Info|      Executando timer: id:104, (12:12:47.2947)
2015-09-04 12:12:47.2947|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:47.2947|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:47.2947|Info|      Encerrado timer: id:104, (12:12:47.2947)
2015-09-04 12:12:47.2947|Info|      Executando timer: id:105, (12:12:47.2947)
2015-09-04 12:12:47.2947|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:47.2947|Info|      Encerrado timer: id:105, (12:12:47.2947)
2015-09-04 12:12:47.4822|Info|      Executando timer: id:106, (12:12:47.4822)
2015-09-04 12:12:47.4822|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-09-04 12:12:47.4822|Info|  Settimeout: id:107, (13) ms
2015-09-04 12:12:47.4822|Info|      Encerrado timer: id:106, (12:12:47.4822)
2015-09-04 12:12:47.4979|Info|      Executando timer: id:107, (12:12:47.4979)
2015-09-04 12:12:47.4979|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:47.4979|Info|  Settimeout: id:108, (64) ms
2015-09-04 12:12:47.4979|Info|  Settimeout: id:109, (96) ms
2015-09-04 12:12:47.4979|Info|  Settimeout: id:110, (192) ms
2015-09-04 12:12:47.4979|Info|      Encerrado timer: id:107, (12:12:47.4979)
2015-09-04 12:12:47.5760|Info|      Executando timer: id:108, (12:12:47.5760)
2015-09-04 12:12:47.5760|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:47.5760|Info|      Encerrado timer: id:108, (12:12:47.5760)
2015-09-04 12:12:47.6072|Info|      Executando timer: id:109, (12:12:47.6072)
2015-09-04 12:12:47.6072|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-09-04 12:12:47.6072|Info|  Settimeout: id:111, (64) ms
2015-09-04 12:12:47.6072|Info|      Encerrado timer: id:109, (12:12:47.6072)
2015-09-04 12:12:47.6854|Info|      Executando timer: id:111, (12:12:47.6854)
2015-09-04 12:12:47.6854|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:47.6854|Info|      Encerrado timer: id:111, (12:12:47.6854)
2015-09-04 12:12:47.7010|Info|      Executando timer: id:110, (12:12:47.7010)
2015-09-04 12:12:47.7010|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-09-04 12:12:47.7010|Info|  Settimeout: id:112, (13) ms
2015-09-04 12:12:47.7010|Info|      Encerrado timer: id:110, (12:12:47.7010)
2015-09-04 12:12:47.7166|Info|      Executando timer: id:112, (12:12:47.7166)
2015-09-04 12:12:47.7166|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:47.7166|Info|  Settimeout: id:113, (0) ms
2015-09-04 12:12:47.7166|Info|  Settimeout: id:114, (32) ms
2015-09-04 12:12:47.7166|Info|      Encerrado timer: id:112, (12:12:47.7166)
2015-09-04 12:12:47.7166|Info|      Executando timer: id:113, (12:12:47.7166)
2015-09-04 12:12:47.7166|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:47.7166|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:47.7166|Info|      Encerrado timer: id:113, (12:12:47.7166)
2015-09-04 12:12:47.7635|Info|      Executando timer: id:114, (12:12:47.7635)
2015-09-04 12:12:47.7635|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-09-04 12:12:47.7635|Info|  Settimeout: id:115, (0) ms
2015-09-04 12:12:47.7635|Info|  Settimeout: id:116, (13) ms
2015-09-04 12:12:47.7635|Info|      Encerrado timer: id:114, (12:12:47.7635)
2015-09-04 12:12:47.7635|Info|      Executando timer: id:115, (12:12:47.7635)
2015-09-04 12:12:47.7635|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:47.7635|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:47.7635|Info|      Encerrado timer: id:115, (12:12:47.7635)
2015-09-04 12:12:47.7947|Info|      Executando timer: id:116, (12:12:47.7947)
2015-09-04 12:12:47.7947|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:47.7947|Info|  Settimeout: id:117, (32) ms
2015-09-04 12:12:47.7947|Info|  Settimeout: id:118, (64) ms
2015-09-04 12:12:47.7947|Info|      Encerrado timer: id:116, (12:12:47.7947)
2015-09-04 12:12:47.8416|Info|      Executando timer: id:117, (12:12:47.8416)
2015-09-04 12:12:47.8416|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:47.8416|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:47.8416|Info|      Encerrado timer: id:117, (12:12:47.8416)
2015-09-04 12:12:47.8729|Info|      Executando timer: id:118, (12:12:47.8729)
2015-09-04 12:12:47.8729|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-09-04 12:12:47.8729|Info|  Settimeout: id:119, (13) ms
2015-09-04 12:12:47.8729|Info|      Encerrado timer: id:118, (12:12:47.8729)
2015-09-04 12:12:47.9041|Info|      Executando timer: id:119, (12:12:47.9041)
2015-09-04 12:12:47.9041|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:47.9041|Info|  Settimeout: id:120, (32) ms
2015-09-04 12:12:47.9041|Info|  Settimeout: id:121, (256) ms
2015-09-04 12:12:47.9041|Info|      Encerrado timer: id:119, (12:12:47.9041)
2015-09-04 12:12:47.9510|Info|      Executando timer: id:120, (12:12:47.9510)
2015-09-04 12:12:47.9510|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:47.9510|Info|  Settimeout: id:122, (32) ms
2015-09-04 12:12:47.9510|Info|!timeoutId && !maxTimeoutId false
2015-09-04 12:12:47.9510|Info|      Encerrado timer: id:120, (12:12:47.9510)
2015-09-04 12:12:47.9979|Info|      Executando timer: id:122, (12:12:47.9979)
2015-09-04 12:12:47.9979|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:47.9979|Info|  Settimeout: id:123, (32) ms
2015-09-04 12:12:47.9979|Info|!timeoutId && !maxTimeoutId false
2015-09-04 12:12:47.9979|Info|      Encerrado timer: id:122, (12:12:47.9979)
2015-09-04 12:12:48.0447|Info|      Executando timer: id:123, (12:12:48.0447)
2015-09-04 12:12:48.0447|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:48.0447|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:48.0447|Info|      Encerrado timer: id:123, (12:12:48.0447)
2015-09-04 12:12:48.1697|Info|      Executando timer: id:121, (12:12:48.1697)
2015-09-04 12:12:48.1697|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-09-04 12:12:48.1697|Info|  Settimeout: id:124, (13) ms
2015-09-04 12:12:48.1697|Info|      Encerrado timer: id:121, (12:12:48.1697)
2015-09-04 12:12:48.2011|Info|      Executando timer: id:124, (12:12:48.2011)
2015-09-04 12:12:48.2011|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:48.2011|Info|  Settimeout: id:125, (32) ms
2015-09-04 12:12:48.2011|Info|  Settimeout: id:126, (64) ms
2015-09-04 12:12:48.2011|Info|      Encerrado timer: id:124, (12:12:48.2011)
2015-09-04 12:12:48.2480|Info|      Executando timer: id:125, (12:12:48.2480)
2015-09-04 12:12:48.2480|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:48.2480|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:48.2480|Info|      Encerrado timer: id:125, (12:12:48.2480)
2015-09-04 12:12:48.2793|Info|      Executando timer: id:126, (12:12:48.2793)
2015-09-04 12:12:48.2793|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-09-04 12:12:48.3105|Info|  Settimeout: id:127, (32) ms
2015-09-04 12:12:48.3105|Info|  Settimeout: id:128, (13) ms
2015-09-04 12:12:48.3105|Info|      Encerrado timer: id:126, (12:12:48.3105)
2015-09-04 12:12:48.3418|Info|      Executando timer: id:128, (12:12:48.3418)
2015-09-04 12:12:48.3418|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:48.3418|Info|  Settimeout: id:129, (32) ms
2015-09-04 12:12:48.3418|Info|  Settimeout: id:130, (64) ms
2015-09-04 12:12:48.3418|Info|      Encerrado timer: id:128, (12:12:48.3418)
2015-09-04 12:12:48.3574|Info|      Executando timer: id:127, (12:12:48.3574)
2015-09-04 12:12:48.3574|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:48.3574|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:48.3574|Info|      Encerrado timer: id:127, (12:12:48.3574)
2015-09-04 12:12:48.4199|Info|      Executando timer: id:130, (12:12:48.4199)
2015-09-04 12:12:48.4199|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-09-04 12:12:48.4199|Info|  Settimeout: id:131, (13) ms
2015-09-04 12:12:48.4199|Info|      Encerrado timer: id:130, (12:12:48.4199)
2015-09-04 12:12:48.4512|Info|      Executando timer: id:131, (12:12:48.4512)
2015-09-04 12:12:48.4512|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:48.4512|Info|  Settimeout: id:132, (32) ms
2015-09-04 12:12:48.4512|Info|  Settimeout: id:133, (32) ms
2015-09-04 12:12:48.4512|Info|  Settimeout: id:134, (64) ms
2015-09-04 12:12:48.4512|Info|      Encerrado timer: id:131, (12:12:48.4512)
2015-09-04 12:12:48.4980|Info|      Executando timer: id:133, (12:12:48.4980)
2015-09-04 12:12:48.4980|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-09-04 12:12:48.4980|Info|      Encerrado timer: id:133, (12:12:48.4980)
2015-09-04 12:12:48.5293|Info|      Executando timer: id:134, (12:12:48.5293)
2015-09-04 12:12:48.5293|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-09-04 12:12:48.5293|Info|  Settimeout: id:135, (13) ms
2015-09-04 12:12:48.5293|Info|      Encerrado timer: id:134, (12:12:48.5293)
2015-09-04 12:12:48.5449|Info|      Executando timer: id:135, (12:12:48.5449)
2015-09-04 12:12:48.5449|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:48.5449|Info|  Settimeout: id:136, (32) ms
2015-09-04 12:12:48.5449|Info|      Encerrado timer: id:135, (12:12:48.5449)
2015-09-04 12:12:48.5918|Info|      Executando timer: id:136, (12:12:48.5918)
2015-09-04 12:12:48.5918|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-09-04 12:12:48.5918|Info|  Settimeout: id:137, (13) ms
2015-09-04 12:12:48.5918|Info|      Encerrado timer: id:136, (12:12:48.5918)
2015-09-04 12:12:48.6074|Info|      Executando timer: id:137, (12:12:48.6074)
2015-09-04 12:12:48.6074|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:48.6074|Info|  Settimeout: id:138, (32) ms
2015-09-04 12:12:48.6074|Info|  Settimeout: id:139, (64) ms
2015-09-04 12:12:48.6074|Info|      Encerrado timer: id:137, (12:12:48.6074)
2015-09-04 12:12:48.6543|Info|      Executando timer: id:138, (12:12:48.6543)
2015-09-04 12:12:48.6543|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:48.6543|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:48.6543|Info|      Encerrado timer: id:138, (12:12:48.6543)
2015-09-04 12:12:48.6855|Info|      Executando timer: id:139, (12:12:48.6855)
2015-09-04 12:12:48.6855|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-09-04 12:12:48.6855|Info|  Settimeout: id:140, (13) ms
2015-09-04 12:12:48.6855|Info|      Encerrado timer: id:139, (12:12:48.6855)
2015-09-04 12:12:48.7012|Info|      Executando timer: id:140, (12:12:48.7012)
2015-09-04 12:12:48.7012|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:48.7012|Info|  Settimeout: id:141, (32) ms
2015-09-04 12:12:48.7012|Info|  Settimeout: id:142, (256) ms
2015-09-04 12:12:48.7012|Info|      Encerrado timer: id:140, (12:12:48.7012)
2015-09-04 12:12:48.7480|Info|      Executando timer: id:141, (12:12:48.7480)
2015-09-04 12:12:48.7480|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:48.7480|Info|  Settimeout: id:143, (32) ms
2015-09-04 12:12:48.7480|Info|!timeoutId && !maxTimeoutId false
2015-09-04 12:12:48.7480|Info|      Encerrado timer: id:141, (12:12:48.7480)
2015-09-04 12:12:48.7949|Info|      Executando timer: id:143, (12:12:48.7949)
2015-09-04 12:12:48.7949|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-09-04 12:12:48.7949|Info|!timeoutId && !maxTimeoutId true
2015-09-04 12:12:48.7949|Info|      Encerrado timer: id:143, (12:12:48.7949)
2015-09-04 12:12:48.9668|Info|      Executando timer: id:142, (12:12:48.9668)
2015-09-04 12:12:48.9668|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-09-04 12:12:48.9668|Info|  Settimeout: id:144, (13) ms
2015-09-04 12:12:48.9668|Info|      Encerrado timer: id:142, (12:12:48.9668)
2015-09-04 12:12:48.9980|Info|      Executando timer: id:144, (12:12:48.9980)
2015-09-04 12:12:48.9980|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:48.9980|Info|  Settimeout: id:145, (64) ms
2015-09-04 12:12:48.9980|Info|      Encerrado timer: id:144, (12:12:48.9980)
2015-09-04 12:12:49.0762|Info|      Executando timer: id:145, (12:12:49.0762)
2015-09-04 12:12:49.0762|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-09-04 12:12:49.0762|Info|  Settimeout: id:146, (13) ms
2015-09-04 12:12:49.0762|Info|      Encerrado timer: id:145, (12:12:49.0762)
2015-09-04 12:12:49.0918|Info|      Executando timer: id:146, (12:12:49.0918)
2015-09-04 12:12:49.0918|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:49.0918|Info|  Settimeout: id:147, (32) ms
2015-09-04 12:12:49.0918|Info|  Settimeout: id:148, (64) ms
2015-09-04 12:12:49.0918|Info|      Encerrado timer: id:146, (12:12:49.0918)
2015-09-04 12:12:49.1699|Info|      Executando timer: id:148, (12:12:49.1699)
2015-09-04 12:12:49.1699|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-09-04 12:12:49.1699|Info|  Settimeout: id:149, (13) ms
2015-09-04 12:12:49.1699|Info|      Encerrado timer: id:148, (12:12:49.1699)
2015-09-04 12:12:49.1855|Info|      Executando timer: id:149, (12:12:49.1855)
2015-09-04 12:12:49.1855|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:49.1855|Info|  Settimeout: id:150, (64) ms
2015-09-04 12:12:49.1855|Info|      Encerrado timer: id:149, (12:12:49.1855)
2015-09-04 12:12:49.2637|Info|      Executando timer: id:150, (12:12:49.2637)
2015-09-04 12:12:49.2637|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-09-04 12:12:49.2637|Info|  Settimeout: id:151, (13) ms
2015-09-04 12:12:49.2637|Info|      Encerrado timer: id:150, (12:12:49.2637)
2015-09-04 12:12:49.2794|Info|      Executando timer: id:151, (12:12:49.2794)
2015-09-04 12:12:49.2794|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:49.3887|Info|----------------------------------------
2015-09-04 12:12:49.3887|Info|    PASS: 4450  FAIL: 1  TOTAL: 4451
2015-09-04 12:12:49.3887|Info|    Finished in 7808 milliseconds.
2015-09-04 12:12:49.3887|Info|----------------------------------------
2015-09-04 12:12:49.4043|Info|      Encerrado timer: id:151, (12:12:49.4043)
2015-09-04 12:12:49.4043|Info|Encerrando os testes
2015-09-04 12:12:49.4043|Info|Total:4451, Sucesso: 4450, Falha: 1
2015-09-04 12:12:49.4043|Info| 8 segundos para avaliar o individuo lodash.js
2015-09-04 12:12:49.4043|Info|FAILED: lodash.isNil: should work with nulls from another realm: Expected 2 assertions, but 1 were run, ,     at V8Runtime:lodashTest:7765:5
    at V8Runtime:lodashTest:7774:4
    at V8Runtime:lodashTest:17424:3
2015-09-04 12:12:54.6245|Info|Iniciando os testes
2015-09-04 12:12:55.0441|Info|  Settimeout: id:0, (13) ms
2015-09-04 12:12:55.0624|Info|      Executando timer: id:0, (12:12:55.0624)
2015-09-04 12:12:55.0780|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:55.0936|Info|----------------------------------------
2015-09-04 12:12:55.0936|Info|Arrays
2015-09-04 12:12:55.0936|Info|----------------------------------------
2015-09-04 12:12:55.0936|Info| PASS - first
2015-09-04 12:12:55.0936|Info| PASS - head
2015-09-04 12:12:55.0936|Info| PASS - take
2015-09-04 12:12:55.0936|Info| PASS - rest
2015-09-04 12:12:55.0936|Info| PASS - tail
2015-09-04 12:12:55.1092|Info| PASS - drop
2015-09-04 12:12:55.1092|Info| PASS - initial
2015-09-04 12:12:55.1092|Info| PASS - last
2015-09-04 12:12:55.1092|Info| PASS - compact
2015-09-04 12:12:55.7356|Info| PASS - flatten
2015-09-04 12:12:55.7356|Info| PASS - without
2015-09-04 12:12:55.7356|Info| PASS - sortedIndex
2015-09-04 12:12:55.7356|Info| PASS - uniq
2015-09-04 12:12:55.7356|Info| PASS - unique
2015-09-04 12:12:55.7356|Info| PASS - intersection
2015-09-04 12:12:55.7356|Info| PASS - union
2015-09-04 12:12:55.7356|Info| PASS - difference
2015-09-04 12:12:55.7356|Info| PASS - zip
2015-09-04 12:12:55.7356|Info| PASS - unzip
2015-09-04 12:12:55.7356|Info| PASS - object
2015-09-04 12:12:55.7356|Info| PASS - indexOf
2015-09-04 12:12:55.7512|Info| PASS - indexOf with NaN
2015-09-04 12:12:55.7512|Info| PASS - indexOf with +- 0
2015-09-04 12:12:55.7512|Info| PASS - lastIndexOf
2015-09-04 12:12:55.7512|Info| PASS - lastIndexOf with NaN
2015-09-04 12:12:55.7512|Info| PASS - lastIndexOf with +- 0
2015-09-04 12:12:55.7512|Info| PASS - findIndex
2015-09-04 12:12:55.7512|Info| PASS - findLastIndex
2015-09-04 12:12:55.7512|Info| PASS - range
2015-09-04 12:12:55.7512|Info|----------------------------------------
2015-09-04 12:12:55.7512|Info|Chaining
2015-09-04 12:12:55.7512|Info|----------------------------------------
2015-09-04 12:12:55.7512|Info| PASS - map/flatten/reduce
2015-09-04 12:12:55.7512|Info| PASS - select/reject/sortBy
2015-09-04 12:12:55.7512|Info| PASS - select/reject/sortBy in functional style
2015-09-04 12:12:55.7512|Info| PASS - reverse/concat/unshift/pop/map
2015-09-04 12:12:55.7512|Info| PASS - splice
2015-09-04 12:12:55.7512|Info| PASS - shift
2015-09-04 12:12:55.7668|Info| PASS - pop
2015-09-04 12:12:55.7668|Info| PASS - chaining works in small stages
2015-09-04 12:12:55.7668|Info| PASS - #1562: Engine proxies for chained functions
2015-09-04 12:12:55.7668|Info|----------------------------------------
2015-09-04 12:12:55.7668|Info|Collections
2015-09-04 12:12:55.7668|Info|----------------------------------------
2015-09-04 12:12:55.7668|Info| PASS - each
2015-09-04 12:12:55.7668|Info| PASS - forEach
2015-09-04 12:12:55.7668|Info| PASS - lookupIterator with contexts
2015-09-04 12:12:55.7825|Info| PASS - Iterating objects with sketchy length properties
2015-09-04 12:12:55.7825|Info| PASS - Resistant to collection length and properties changing while iterating
2015-09-04 12:12:55.7825|Info| PASS - map
2015-09-04 12:12:55.7825|Info| PASS - collect
2015-09-04 12:12:55.7825|Info| PASS - reduce
2015-09-04 12:12:55.7825|Info| PASS - foldl
2015-09-04 12:12:55.7825|Info| PASS - reduceRight
2015-09-04 12:12:55.7825|Info| PASS - foldr
2015-09-04 12:12:55.7825|Info| PASS - find
2015-09-04 12:12:55.7825|Info| PASS - detect
2015-09-04 12:12:55.7825|Info| PASS - filter
2015-09-04 12:12:55.7825|Info| PASS - select
2015-09-04 12:12:55.7981|Info| PASS - reject
2015-09-04 12:12:55.7981|Info| PASS - every
2015-09-04 12:12:55.7981|Info| PASS - all
2015-09-04 12:12:55.7981|Info| PASS - some
2015-09-04 12:12:55.7981|Info| PASS - any
2015-09-04 12:12:55.7981|Info| PASS - includes
2015-09-04 12:12:55.7981|Info| PASS - include
2015-09-04 12:12:55.7981|Info| PASS - contains
2015-09-04 12:12:55.7981|Info| PASS - includes with NaN
2015-09-04 12:12:55.7981|Info| PASS - includes with +- 0
2015-09-04 12:12:55.7981|Info| PASS - invoke
2015-09-04 12:12:55.7981|Info| PASS - invoke w/ function reference
2015-09-04 12:12:55.7981|Info| PASS - invoke when strings have a call method
2015-09-04 12:12:55.7981|Info| PASS - pluck
2015-09-04 12:12:55.7981|Info| PASS - where
2015-09-04 12:12:55.7981|Info| PASS - findWhere
2015-09-04 12:12:55.8450|Info| PASS - max
2015-09-04 12:12:55.8762|Info| PASS - min
2015-09-04 12:12:55.8762|Info| PASS - sortBy
2015-09-04 12:12:55.8762|Info| PASS - groupBy
2015-09-04 12:12:55.8762|Info| PASS - indexBy
2015-09-04 12:12:55.8762|Info| PASS - countBy
2015-09-04 12:12:55.8918|Info| PASS - shuffle
2015-09-04 12:12:55.8918|Info| PASS - sample
2015-09-04 12:12:55.8918|Info| PASS - toArray
2015-09-04 12:12:55.8918|Info| PASS - size
2015-09-04 12:12:55.8918|Info| PASS - partition
2015-09-04 12:12:55.8918|Info|----------------------------------------
2015-09-04 12:12:55.8918|Info|Functions
2015-09-04 12:12:55.8918|Info|----------------------------------------
2015-09-04 12:12:55.8918|Info| PASS - bind
2015-09-04 12:12:55.8918|Info| PASS - partial
2015-09-04 12:12:55.8918|Info| PASS - bindAll
2015-09-04 12:12:55.8918|Info| PASS - memoize
2015-09-04 12:12:55.9075|Info|  Settimeout: id:1, (100) ms
2015-09-04 12:12:55.9075|Info|  Settimeout: id:2, (50) ms
2015-09-04 12:12:55.9075|Info|  Settimeout: id:3, (150) ms
2015-09-04 12:12:55.9075|Info|      Encerrado timer: id:0, (12:12:55.9075)
2015-09-04 12:12:55.9700|Info|      Executando timer: id:2, (12:12:55.9700)
2015-09-04 12:12:55.9700|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-09-04 12:12:55.9700|Info|      Encerrado timer: id:2, (12:12:55.9700)
2015-09-04 12:12:56.0169|Info|      Executando timer: id:1, (12:12:56.0169)
2015-09-04 12:12:56.0169|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.0169|Info|      Encerrado timer: id:1, (12:12:56.0169)
2015-09-04 12:12:56.0637|Info|      Executando timer: id:3, (12:12:56.0637)
2015-09-04 12:12:56.0637|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-09-04 12:12:56.0637|Info|  Settimeout: id:4, (13) ms
2015-09-04 12:12:56.0637|Info|      Encerrado timer: id:3, (12:12:56.0637)
2015-09-04 12:12:56.0950|Info|      Executando timer: id:4, (12:12:56.0950)
2015-09-04 12:12:56.0950|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:56.0950|Info| PASS - delay
2015-09-04 12:12:56.0950|Info|  Settimeout: id:5, (1) ms
2015-09-04 12:12:56.0950|Info|  Settimeout: id:6, (50) ms
2015-09-04 12:12:56.0950|Info|      Encerrado timer: id:4, (12:12:56.0950)
2015-09-04 12:12:56.1106|Info|      Executando timer: id:5, (12:12:56.1106)
2015-09-04 12:12:56.1106|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.1106|Info|      Encerrado timer: id:5, (12:12:56.1106)
2015-09-04 12:12:56.1575|Info|      Executando timer: id:6, (12:12:56.1575)
2015-09-04 12:12:56.1575|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.1575|Info|  Settimeout: id:7, (13) ms
2015-09-04 12:12:56.1575|Info|      Encerrado timer: id:6, (12:12:56.1575)
2015-09-04 12:12:56.1887|Info|      Executando timer: id:7, (12:12:56.1887)
2015-09-04 12:12:56.1887|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:56.1887|Info| PASS - defer
2015-09-04 12:12:56.1887|Info|  Settimeout: id:8, (32) ms
2015-09-04 12:12:56.1887|Info|  Settimeout: id:9, (64) ms
2015-09-04 12:12:56.1887|Info|      Encerrado timer: id:7, (12:12:56.1887)
2015-09-04 12:12:56.2356|Info|      Executando timer: id:8, (12:12:56.2356)
2015-09-04 12:12:56.2356|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:56.2356|Info|      Encerrado timer: id:8, (12:12:56.2356)
2015-09-04 12:12:56.2669|Info|      Executando timer: id:9, (12:12:56.2669)
2015-09-04 12:12:56.3919|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.3919|Info|  Settimeout: id:10, (13) ms
2015-09-04 12:12:56.3919|Info|      Encerrado timer: id:9, (12:12:56.3919)
2015-09-04 12:12:56.4231|Info|      Executando timer: id:10, (12:12:56.4231)
2015-09-04 12:12:56.4231|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:56.4231|Info| PASS - throttle
2015-09-04 12:12:56.4231|Info|  Settimeout: id:11, (32) ms
2015-09-04 12:12:56.4231|Info|  Settimeout: id:12, (64) ms
2015-09-04 12:12:56.4231|Info|  Settimeout: id:13, (96) ms
2015-09-04 12:12:56.4231|Info|      Encerrado timer: id:10, (12:12:56.4231)
2015-09-04 12:12:56.4679|Info|      Executando timer: id:11, (12:12:56.4679)
2015-09-04 12:12:56.4679|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:56.4679|Info|      Encerrado timer: id:11, (12:12:56.4679)
2015-09-04 12:12:56.4992|Info|      Executando timer: id:12, (12:12:56.4992)
2015-09-04 12:12:56.4992|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.4992|Info|  Settimeout: id:14, (1) ms
2015-09-04 12:12:56.4992|Info|      Encerrado timer: id:12, (12:12:56.4992)
2015-09-04 12:12:56.5148|Info|      Executando timer: id:14, (12:12:56.5148)
2015-09-04 12:12:56.5148|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:56.5148|Info|      Encerrado timer: id:14, (12:12:56.5148)
2015-09-04 12:12:56.5304|Info|      Executando timer: id:13, (12:12:56.5304)
2015-09-04 12:12:56.5304|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.5304|Info|  Settimeout: id:15, (13) ms
2015-09-04 12:12:56.5304|Info|      Encerrado timer: id:13, (12:12:56.5304)
2015-09-04 12:12:56.5460|Info|      Executando timer: id:15, (12:12:56.5460)
2015-09-04 12:12:56.5460|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:56.5460|Info| PASS - throttle arguments
2015-09-04 12:12:56.5460|Info|  Settimeout: id:16, (64) ms
2015-09-04 12:12:56.5460|Info|      Encerrado timer: id:15, (12:12:56.5460)
2015-09-04 12:12:56.6242|Info|      Executando timer: id:16, (12:12:56.6242)
2015-09-04 12:12:56.6242|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.6242|Info|  Settimeout: id:17, (13) ms
2015-09-04 12:12:56.6242|Info|      Encerrado timer: id:16, (12:12:56.6242)
2015-09-04 12:12:56.6554|Info|      Executando timer: id:17, (12:12:56.6554)
2015-09-04 12:12:56.6554|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:56.6554|Info| PASS - throttle once
2015-09-04 12:12:56.6554|Info|  Settimeout: id:18, (32) ms
2015-09-04 12:12:56.6554|Info|  Settimeout: id:19, (64) ms
2015-09-04 12:12:56.6554|Info|      Encerrado timer: id:17, (12:12:56.6554)
2015-09-04 12:12:56.7023|Info|      Executando timer: id:18, (12:12:56.7023)
2015-09-04 12:12:56.7023|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:56.7023|Info|      Encerrado timer: id:18, (12:12:56.7023)
2015-09-04 12:12:56.7335|Info|      Executando timer: id:19, (12:12:56.7335)
2015-09-04 12:12:56.7335|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.7335|Info|  Settimeout: id:20, (13) ms
2015-09-04 12:12:56.7335|Info|      Encerrado timer: id:19, (12:12:56.7335)
2015-09-04 12:12:56.7648|Info|      Executando timer: id:20, (12:12:56.7648)
2015-09-04 12:12:56.7648|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:56.7648|Info| PASS - throttle twice
2015-09-04 12:12:56.7648|Info|  Settimeout: id:21, (30) ms
2015-09-04 12:12:56.7648|Info|  Settimeout: id:22, (85) ms
2015-09-04 12:12:56.7648|Info|      Encerrado timer: id:20, (12:12:56.7648)
2015-09-04 12:12:56.8117|Info|      Executando timer: id:21, (12:12:56.8117)
2015-09-04 12:12:56.8117|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:56.8117|Info|      Encerrado timer: id:21, (12:12:56.8117)
2015-09-04 12:12:56.8585|Info|      Executando timer: id:22, (12:12:56.8585)
2015-09-04 12:12:56.8585|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.8585|Info|  Settimeout: id:23, (13) ms
2015-09-04 12:12:56.8585|Info|      Encerrado timer: id:22, (12:12:56.8585)
2015-09-04 12:12:56.8898|Info|      Executando timer: id:23, (12:12:56.8898)
2015-09-04 12:12:56.8898|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:56.8898|Info| PASS - more throttling
2015-09-04 12:12:56.8898|Info|  Settimeout: id:24, (100) ms
2015-09-04 12:12:56.8898|Info|  Settimeout: id:25, (50) ms
2015-09-04 12:12:56.8898|Info|  Settimeout: id:26, (150) ms
2015-09-04 12:12:56.8898|Info|  Settimeout: id:27, (160) ms
2015-09-04 12:12:56.8898|Info|  Settimeout: id:28, (230) ms
2015-09-04 12:12:56.8898|Info|  Settimeout: id:29, (300) ms
2015-09-04 12:12:56.8898|Info|      Encerrado timer: id:23, (12:12:56.8898)
2015-09-04 12:12:56.9523|Info|      Executando timer: id:25, (12:12:56.9523)
2015-09-04 12:12:56.9523|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:56.9523|Info|      Encerrado timer: id:25, (12:12:56.9523)
2015-09-04 12:12:56.9992|Info|      Executando timer: id:24, (12:12:56.9992)
2015-09-04 12:12:56.9992|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:56.9992|Info|      Encerrado timer: id:24, (12:12:56.9992)
2015-09-04 12:12:57.0617|Info|      Executando timer: id:26, (12:12:57.0617)
2015-09-04 12:12:57.0617|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.0617|Info|  Settimeout: id:30, (37) ms
2015-09-04 12:12:57.0617|Info|      Encerrado timer: id:26, (12:12:57.0617)
2015-09-04 12:12:57.0617|Info|      Executando timer: id:27, (12:12:57.0617)
2015-09-04 12:12:57.0617|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.0617|Info|      Encerrado timer: id:27, (12:12:57.0617)
2015-09-04 12:12:57.1085|Info|      Executando timer: id:30, (12:12:57.1085)
2015-09-04 12:12:57.1085|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:57.1085|Info|      Encerrado timer: id:30, (12:12:57.1085)
2015-09-04 12:12:57.1398|Info|      Executando timer: id:28, (12:12:57.1398)
2015-09-04 12:12:57.1398|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.1398|Info|  Settimeout: id:31, (69) ms
2015-09-04 12:12:57.1398|Info|      Encerrado timer: id:28, (12:12:57.1398)
2015-09-04 12:12:57.2023|Info|      Executando timer: id:29, (12:12:57.2023)
2015-09-04 12:12:57.2023|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.2023|Info|  Settimeout: id:32, (13) ms
2015-09-04 12:12:57.2023|Info|      Encerrado timer: id:29, (12:12:57.2023)
2015-09-04 12:12:57.2180|Info|      Executando timer: id:31, (12:12:57.2180)
2015-09-04 12:12:57.2180|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:57.2180|Info|      Encerrado timer: id:31, (12:12:57.2180)
2015-09-04 12:12:57.2335|Info|      Executando timer: id:32, (12:12:57.2335)
2015-09-04 12:12:57.2335|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:57.2335|Info| PASS - throttle repeatedly with results
2015-09-04 12:12:57.2335|Info|  Settimeout: id:33, (32) ms
2015-09-04 12:12:57.2724|Info|  Settimeout: id:34, (31) ms
2015-09-04 12:12:57.2724|Info|  Settimeout: id:35, (96) ms
2015-09-04 12:12:57.2724|Info|      Encerrado timer: id:32, (12:12:57.2824)
2015-09-04 12:12:57.3054|Info|      Executando timer: id:34, (12:12:57.3054)
2015-09-04 12:12:57.3054|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:57.3054|Info|      Encerrado timer: id:34, (12:12:57.3074)
2015-09-04 12:12:57.3795|Info|      Executando timer: id:35, (12:12:57.3795)
2015-09-04 12:12:57.3795|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.3795|Info|  Settimeout: id:36, (13) ms
2015-09-04 12:12:57.3795|Info|      Encerrado timer: id:35, (12:12:57.3825)
2015-09-04 12:12:57.3955|Info|      Executando timer: id:36, (12:12:57.3955)
2015-09-04 12:12:57.3955|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:57.3955|Info| PASS - throttle triggers trailing call when invoked repeatedly
2015-09-04 12:12:57.3955|Info|  Settimeout: id:37, (60) ms
2015-09-04 12:12:57.3955|Info|  Settimeout: id:38, (96) ms
2015-09-04 12:12:57.3955|Info|      Encerrado timer: id:36, (12:12:57.3995)
2015-09-04 12:12:57.4595|Info|      Executando timer: id:37, (12:12:57.4595)
2015-09-04 12:12:57.4595|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:57.4595|Info|      Encerrado timer: id:37, (12:12:57.4615)
2015-09-04 12:12:57.4965|Info|      Executando timer: id:38, (12:12:57.4965)
2015-09-04 12:12:57.4965|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.4965|Info|  Settimeout: id:39, (13) ms
2015-09-04 12:12:57.4965|Info|      Encerrado timer: id:38, (12:12:57.4985)
2015-09-04 12:12:57.5126|Info|      Executando timer: id:39, (12:12:57.5126)
2015-09-04 12:12:57.5126|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:57.5126|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-09-04 12:12:57.5126|Info|  Settimeout: id:40, (100) ms
2015-09-04 12:12:57.5126|Info|  Settimeout: id:41, (50) ms
2015-09-04 12:12:57.5216|Info|  Settimeout: id:42, (60) ms
2015-09-04 12:12:57.5216|Info|  Settimeout: id:43, (200) ms
2015-09-04 12:12:57.5216|Info|  Settimeout: id:44, (250) ms
2015-09-04 12:12:57.5216|Info|  Settimeout: id:45, (350) ms
2015-09-04 12:12:57.5216|Info|      Encerrado timer: id:39, (12:12:57.5256)
2015-09-04 12:12:57.5726|Info|      Executando timer: id:41, (12:12:57.5726)
2015-09-04 12:12:57.5726|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.5726|Info|      Encerrado timer: id:41, (12:12:57.5736)
2015-09-04 12:12:57.5836|Info|      Executando timer: id:42, (12:12:57.5836)
2015-09-04 12:12:57.5836|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.5836|Info|      Encerrado timer: id:42, (12:12:57.5846)
2015-09-04 12:12:57.6166|Info|      Executando timer: id:40, (12:12:57.6166)
2015-09-04 12:12:57.6166|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:57.6166|Info|      Encerrado timer: id:40, (12:12:57.6176)
2015-09-04 12:12:57.7247|Info|      Executando timer: id:43, (12:12:57.7247)
2015-09-04 12:12:57.7247|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.7247|Info|  Settimeout: id:46, (100) ms
2015-09-04 12:12:57.7247|Info|      Encerrado timer: id:43, (12:12:57.7277)
2015-09-04 12:12:57.7757|Info|      Executando timer: id:44, (12:12:57.7757)
2015-09-04 12:12:57.7757|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.7757|Info|      Encerrado timer: id:44, (12:12:57.7777)
2015-09-04 12:12:57.8288|Info|      Executando timer: id:46, (12:12:57.8288)
2015-09-04 12:12:57.8288|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:57.8288|Info|      Encerrado timer: id:46, (12:12:57.8308)
2015-09-04 12:12:57.8845|Info|      Executando timer: id:45, (12:12:57.8845)
2015-09-04 12:12:57.8845|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:57.8845|Info|  Settimeout: id:47, (13) ms
2015-09-04 12:12:57.8845|Info|      Encerrado timer: id:45, (12:12:57.8845)
2015-09-04 12:12:57.9158|Info|      Executando timer: id:47, (12:12:57.9158)
2015-09-04 12:12:57.9158|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:57.9158|Info| PASS - more throttle does not trigger leading call when leading is set to false
2015-09-04 12:12:57.9158|Info|  Settimeout: id:48, (100) ms
2015-09-04 12:12:58.0252|Info|  Settimeout: id:49, (100) ms
2015-09-04 12:12:58.1345|Info|  Settimeout: id:50, (100) ms
2015-09-04 12:12:58.2439|Info|  Settimeout: id:51, (100) ms
2015-09-04 12:12:58.2752|Info|  Settimeout: id:52, (200) ms
2015-09-04 12:12:58.2752|Info|      Encerrado timer: id:47, (12:12:58.2752)
2015-09-04 12:12:58.3533|Info|      Executando timer: id:51, (12:12:58.3533)
2015-09-04 12:12:58.3533|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:58.3533|Info|      Encerrado timer: id:51, (12:12:58.3533)
2015-09-04 12:12:58.4783|Info|      Executando timer: id:52, (12:12:58.4783)
2015-09-04 12:12:58.4783|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:58.4783|Info|  Settimeout: id:53, (13) ms
2015-09-04 12:12:58.4783|Info|      Encerrado timer: id:52, (12:12:58.4783)
2015-09-04 12:12:58.5095|Info|      Executando timer: id:53, (12:12:58.5095)
2015-09-04 12:12:58.5095|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:58.5095|Info| PASS - one more throttle with leading: false test
2015-09-04 12:12:58.5095|Info|  Settimeout: id:54, (96) ms
2015-09-04 12:12:58.5095|Info|      Encerrado timer: id:53, (12:12:58.5095)
2015-09-04 12:12:58.6189|Info|      Executando timer: id:54, (12:12:58.6189)
2015-09-04 12:12:58.6189|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:58.6189|Info|  Settimeout: id:55, (96) ms
2015-09-04 12:12:58.6189|Info|      Encerrado timer: id:54, (12:12:58.6189)
2015-09-04 12:12:58.7283|Info|      Executando timer: id:55, (12:12:58.7283)
2015-09-04 12:12:58.7283|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:58.7283|Info|  Settimeout: id:56, (13) ms
2015-09-04 12:12:58.7283|Info|      Encerrado timer: id:55, (12:12:58.7283)
2015-09-04 12:12:58.7595|Info|      Executando timer: id:56, (12:12:58.7595)
2015-09-04 12:12:58.7595|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:58.7595|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-09-04 12:12:58.7595|Info|  Settimeout: id:57, (200) ms
2015-09-04 12:12:58.7595|Info|      Encerrado timer: id:56, (12:12:58.7595)
2015-09-04 12:12:58.9783|Info|      Executando timer: id:57, (12:12:58.9783)
2015-09-04 12:12:58.9783|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:58.9783|Info|  Settimeout: id:58, (13) ms
2015-09-04 12:12:58.9783|Info|      Encerrado timer: id:57, (12:12:58.9783)
2015-09-04 12:12:59.0095|Info|      Executando timer: id:58, (12:12:59.0095)
2015-09-04 12:12:59.0095|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:59.0095|Info| PASS - throttle continues to function after system time is set backwards
2015-09-04 12:12:59.0095|Info|  Settimeout: id:59, (32) ms
2015-09-04 12:12:59.0095|Info|  Settimeout: id:60, (100) ms
2015-09-04 12:12:59.0095|Info|      Encerrado timer: id:58, (12:12:59.0095)
2015-09-04 12:12:59.0564|Info|      Executando timer: id:59, (12:12:59.0564)
2015-09-04 12:12:59.0564|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:59.0564|Info|  Settimeout: id:61, (32) ms
2015-09-04 12:12:59.0564|Info|      Encerrado timer: id:59, (12:12:59.0564)
2015-09-04 12:12:59.1033|Info|      Executando timer: id:61, (12:12:59.1033)
2015-09-04 12:12:59.1033|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-09-04 12:12:59.1033|Info|      Encerrado timer: id:61, (12:12:59.1033)
2015-09-04 12:12:59.1189|Info|      Executando timer: id:60, (12:12:59.1189)
2015-09-04 12:12:59.1189|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:59.1189|Info|  Settimeout: id:62, (13) ms
2015-09-04 12:12:59.1189|Info|      Encerrado timer: id:60, (12:12:59.1189)
2015-09-04 12:12:59.1502|Info|      Executando timer: id:62, (12:12:59.1502)
2015-09-04 12:12:59.1502|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:59.1502|Info| PASS - throttle re-entrant
2015-09-04 12:12:59.1502|Info|  Settimeout: id:63, (32) ms
2015-09-04 12:12:59.1502|Info|  Settimeout: id:64, (16) ms
2015-09-04 12:12:59.1502|Info|  Settimeout: id:65, (96) ms
2015-09-04 12:12:59.1502|Info|      Encerrado timer: id:62, (12:12:59.1502)
2015-09-04 12:12:59.1814|Info|      Executando timer: id:64, (12:12:59.1814)
2015-09-04 12:12:59.1814|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:59.1814|Info|      Encerrado timer: id:64, (12:12:59.1814)
2015-09-04 12:12:59.1971|Info|      Executando timer: id:63, (12:12:59.1971)
2015-09-04 12:12:59.1971|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:59.1971|Info|  Settimeout: id:66, (17) ms
2015-09-04 12:12:59.1971|Info|      Encerrado timer: id:63, (12:12:59.1971)
2015-09-04 12:12:59.2283|Info|      Executando timer: id:66, (12:12:59.2283)
2015-09-04 12:12:59.2283|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:59.2283|Info|      Encerrado timer: id:66, (12:12:59.2283)
2015-09-04 12:12:59.2622|Info|      Executando timer: id:65, (12:12:59.2622)
2015-09-04 12:12:59.2622|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:59.2622|Info|  Settimeout: id:67, (13) ms
2015-09-04 12:12:59.2622|Info|      Encerrado timer: id:65, (12:12:59.2622)
2015-09-04 12:12:59.2934|Info|      Executando timer: id:67, (12:12:59.2934)
2015-09-04 12:12:59.2934|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:59.2934|Info| PASS - debounce
2015-09-04 12:12:59.2934|Info|  Settimeout: id:68, (64) ms
2015-09-04 12:12:59.2934|Info|  Settimeout: id:69, (16) ms
2015-09-04 12:12:59.2934|Info|  Settimeout: id:70, (32) ms
2015-09-04 12:12:59.2934|Info|  Settimeout: id:71, (48) ms
2015-09-04 12:12:59.2934|Info|  Settimeout: id:72, (128) ms
2015-09-04 12:12:59.2934|Info|      Encerrado timer: id:67, (12:12:59.2934)
2015-09-04 12:12:59.3247|Info|      Executando timer: id:69, (12:12:59.3247)
2015-09-04 12:12:59.3247|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:59.3247|Info|      Encerrado timer: id:69, (12:12:59.3247)
2015-09-04 12:12:59.3403|Info|      Executando timer: id:70, (12:12:59.3403)
2015-09-04 12:12:59.3403|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:59.3403|Info|      Encerrado timer: id:70, (12:12:59.3403)
2015-09-04 12:12:59.3559|Info|      Executando timer: id:71, (12:12:59.3559)
2015-09-04 12:12:59.3559|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:59.3559|Info|      Encerrado timer: id:71, (12:12:59.3559)
2015-09-04 12:12:59.3716|Info|      Executando timer: id:68, (12:12:59.3716)
2015-09-04 12:12:59.3716|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:59.3716|Info|  Settimeout: id:73, (48) ms
2015-09-04 12:12:59.3716|Info|      Encerrado timer: id:68, (12:12:59.3716)
2015-09-04 12:12:59.4341|Info|      Executando timer: id:73, (12:12:59.4341)
2015-09-04 12:12:59.4341|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:59.4341|Info|      Encerrado timer: id:73, (12:12:59.4341)
2015-09-04 12:12:59.4341|Info|      Executando timer: id:72, (12:12:59.4341)
2015-09-04 12:12:59.4341|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-09-04 12:12:59.4341|Info|  Settimeout: id:74, (13) ms
2015-09-04 12:12:59.4341|Info|      Encerrado timer: id:72, (12:12:59.4341)
2015-09-04 12:12:59.4653|Info|      Executando timer: id:74, (12:12:59.4653)
2015-09-04 12:12:59.4653|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-09-04 12:12:59.4653|Info| PASS - debounce asap
2015-09-04 12:12:59.4653|Info|  Settimeout: id:75, (32) ms
2015-09-04 12:12:59.4653|Info|  Settimeout: id:76, (96) ms
2015-09-04 12:12:59.4653|Info|      Encerrado timer: id:74, (12:12:59.4653)
2015-09-04 12:12:59.5122|Info|      Executando timer: id:75, (12:12:59.5122)
2015-09-04 12:12:59.5122|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-09-04 12:12:59.5122|Info|      Encerrado timer: id:75, (12:12:59.5122)
