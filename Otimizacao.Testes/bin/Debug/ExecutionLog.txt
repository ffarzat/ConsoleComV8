2015-08-22 13:17:17.2917|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:17:17.8161|Info|      Executando timer: id:0, (13:17:17.8161)
2015-08-22 13:17:17.9412|Info|Iniciando os testes
2015-08-22 13:17:17.9592|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:17:17.9592|Info|  Settimeout: id:1, (500) ms
2015-08-22 13:17:18.0153|Info|      Encerrado timer: id:0, (13:17:18.0153)
2015-08-22 13:17:18.0153|Info|  Settimeout: id:2, (13) ms
2015-08-22 13:17:18.0303|Info|      Executando timer: id:2, (13:17:18.0303)
2015-08-22 13:17:18.0673|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.1213|Info|  Settimeout: id:3, (13) ms
2015-08-22 13:17:18.1734|Info|      Encerrado timer: id:2, (13:17:18.1734)
2015-08-22 13:17:18.1784|Info|      Executando timer: id:3, (13:17:18.1784)
2015-08-22 13:17:18.1784|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.2714|Info|  Settimeout: id:4, (32) ms
2015-08-22 13:17:18.3225|Info|  Settimeout: id:5, (96) ms
2015-08-22 13:17:18.3736|Info|      Encerrado timer: id:3, (13:17:18.3736)
2015-08-22 13:17:18.3736|Info|      Executando timer: id:4, (13:17:18.3745)
2015-08-22 13:17:18.3865|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.3865|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.3865|Info|      Encerrado timer: id:4, (13:17:18.3915)
2015-08-22 13:17:18.4206|Info|      Executando timer: id:5, (13:17:18.4206)
2015-08-22 13:17:18.4206|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:18.4206|Info|  Settimeout: id:6, (13) ms
2015-08-22 13:17:18.4766|Info|      Encerrado timer: id:5, (13:17:18.4766)
2015-08-22 13:17:18.4766|Info|      Executando timer: id:6, (13:17:18.4776)
2015-08-22 13:17:18.4766|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.4766|Info|  Settimeout: id:7, (32) ms
2015-08-22 13:17:18.5336|Info|  Settimeout: id:8, (64) ms
2015-08-22 13:17:18.5867|Info|  Settimeout: id:9, (128) ms
2015-08-22 13:17:18.6557|Info|      Encerrado timer: id:6, (13:17:18.6557)
2015-08-22 13:17:18.6557|Info|      Executando timer: id:1, (13:17:18.6567)
2015-08-22 13:17:18.6557|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 13:17:18.6627|Info|      Encerrado timer: id:1, (13:17:18.6617)
2015-08-22 13:17:18.6627|Info|      Executando timer: id:7, (13:17:18.6637)
2015-08-22 13:17:18.6627|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.6627|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.6627|Info|      Encerrado timer: id:7, (13:17:18.6707)
2015-08-22 13:17:18.6627|Info|      Executando timer: id:8, (13:17:18.6727)
2015-08-22 13:17:18.6627|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-22 13:17:18.6787|Info|  Settimeout: id:10, (32) ms
2015-08-22 13:17:18.7308|Info|      Encerrado timer: id:8, (13:17:18.7308)
2015-08-22 13:17:18.7308|Info|      Executando timer: id:10, (13:17:18.7318)
2015-08-22 13:17:18.7308|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.7438|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.7438|Info|      Encerrado timer: id:10, (13:17:18.7448)
2015-08-22 13:17:18.7438|Info|      Executando timer: id:9, (13:17:18.7458)
2015-08-22 13:17:18.7438|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-22 13:17:18.7438|Info|  Settimeout: id:11, (32) ms
2015-08-22 13:17:18.8009|Info|  Settimeout: id:12, (13) ms
2015-08-22 13:17:18.8529|Info|      Encerrado timer: id:9, (13:17:18.8529)
2015-08-22 13:17:18.8529|Info|      Executando timer: id:11, (13:17:18.8548)
2015-08-22 13:17:18.8529|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.8529|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.8529|Info|      Encerrado timer: id:11, (13:17:18.8618)
2015-08-22 13:17:18.8529|Info|      Executando timer: id:12, (13:17:18.8629)
2015-08-22 13:17:18.8659|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.8659|Info|  Settimeout: id:13, (32) ms
2015-08-22 13:17:18.9229|Info|  Settimeout: id:14, (64) ms
2015-08-22 13:17:18.9749|Info|      Encerrado timer: id:12, (13:17:18.9749)
2015-08-22 13:17:18.9749|Info|      Executando timer: id:13, (13:17:18.9769)
2015-08-22 13:17:18.9749|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.9749|Info|      Encerrado timer: id:13, (13:17:18.9819)
2015-08-22 13:17:18.9900|Info|      Executando timer: id:14, (13:17:18.9900)
2015-08-22 13:17:18.9900|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-22 13:17:18.9900|Info|  Settimeout: id:15, (32) ms
2015-08-22 13:17:19.0500|Info|  Settimeout: id:16, (13) ms
2015-08-22 13:17:19.1021|Info|      Encerrado timer: id:14, (13:17:19.1021)
2015-08-22 13:17:19.1021|Info|      Executando timer: id:15, (13:17:19.1030)
2015-08-22 13:17:19.1021|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.1021|Info|      Encerrado timer: id:15, (13:17:19.1060)
2015-08-22 13:17:19.1021|Info|      Executando timer: id:16, (13:17:19.1070)
2015-08-22 13:17:19.1021|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.1021|Info|  Settimeout: id:17, (32) ms
2015-08-22 13:17:19.1621|Info|  Settimeout: id:18, (64) ms
2015-08-22 13:17:19.2132|Info|      Encerrado timer: id:16, (13:17:19.2132)
2015-08-22 13:17:19.2132|Info|      Executando timer: id:17, (13:17:19.2141)
2015-08-22 13:17:19.2132|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.2132|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.2132|Info|      Encerrado timer: id:17, (13:17:19.2201)
2015-08-22 13:17:19.2281|Info|      Executando timer: id:18, (13:17:19.2281)
2015-08-22 13:17:19.2281|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:19.2281|Info|  Settimeout: id:19, (13) ms
2015-08-22 13:17:19.2862|Info|      Encerrado timer: id:18, (13:17:19.2862)
2015-08-22 13:17:19.2862|Info|      Executando timer: id:19, (13:17:19.2882)
2015-08-22 13:17:19.2862|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.2862|Info|  Settimeout: id:20, (32) ms
2015-08-22 13:17:19.3472|Info|  Settimeout: id:21, (32) ms
2015-08-22 13:17:19.3992|Info|  Settimeout: id:22, (32) ms
2015-08-22 13:17:19.4513|Info|  Settimeout: id:23, (64) ms
2015-08-22 13:17:19.5034|Info|      Encerrado timer: id:19, (13:17:19.5034)
2015-08-22 13:17:19.5053|Info|      Executando timer: id:20, (13:17:19.5053)
2015-08-22 13:17:19.5053|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.5053|Info|      Encerrado timer: id:20, (13:17:19.5103)
2015-08-22 13:17:19.5213|Info|      Executando timer: id:21, (13:17:19.5213)
2015-08-22 13:17:19.5213|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.5213|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.5213|Info|      Encerrado timer: id:21, (13:17:19.5313)
2015-08-22 13:17:19.5213|Info|      Executando timer: id:22, (13:17:19.5333)
2015-08-22 13:17:19.5364|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.5364|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.5364|Info|      Encerrado timer: id:22, (13:17:19.5403)
2015-08-22 13:17:19.5364|Info|      Executando timer: id:23, (13:17:19.5413)
2015-08-22 13:17:19.5364|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-22 13:17:19.5543|Info|  Settimeout: id:24, (32) ms
2015-08-22 13:17:19.6064|Info|  Settimeout: id:25, (13) ms
2015-08-22 13:17:19.6575|Info|      Encerrado timer: id:23, (13:17:19.6575)
2015-08-22 13:17:19.6575|Info|      Executando timer: id:24, (13:17:19.6584)
2015-08-22 13:17:19.6575|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.6614|Info|      Encerrado timer: id:24, (13:17:19.6614)
2015-08-22 13:17:19.6614|Info|      Executando timer: id:25, (13:17:19.6624)
2015-08-22 13:17:19.6614|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.6614|Info|  Settimeout: id:26, (32) ms
2015-08-22 13:17:19.7175|Info|  Settimeout: id:27, (32) ms
2015-08-22 13:17:19.7695|Info|  Settimeout: id:28, (64) ms
2015-08-22 13:17:19.8206|Info|      Encerrado timer: id:25, (13:17:19.8206)
2015-08-22 13:17:19.8206|Info|      Executando timer: id:26, (13:17:19.8225)
2015-08-22 13:17:19.8206|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.8206|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.8206|Info|      Encerrado timer: id:26, (13:17:19.8305)
2015-08-22 13:17:19.8206|Info|      Executando timer: id:27, (13:17:19.8315)
2015-08-22 13:17:19.8355|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.8355|Info|      Encerrado timer: id:27, (13:17:19.8385)
2015-08-22 13:17:19.8355|Info|      Executando timer: id:28, (13:17:19.8405)
2015-08-22 13:17:19.8355|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-22 13:17:19.8355|Info|  Settimeout: id:29, (13) ms
2015-08-22 13:17:19.8996|Info|      Encerrado timer: id:28, (13:17:19.8996)
2015-08-22 13:17:19.8996|Info|      Executando timer: id:29, (13:17:19.9006)
2015-08-22 13:17:19.8996|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.8996|Info|  Settimeout: id:30, (128) ms
2015-08-22 13:17:19.9567|Info|  Settimeout: id:31, (64) ms
2015-08-22 13:17:20.0107|Info|  Settimeout: id:32, (96) ms
2015-08-22 13:17:20.0647|Info|  Settimeout: id:33, (128) ms
2015-08-22 13:17:20.1167|Info|  Settimeout: id:34, (64) ms
2015-08-22 13:17:20.1938|Info|  Settimeout: id:35, (128) ms
2015-08-22 13:17:20.2478|Info|  Settimeout: id:36, (64) ms
2015-08-22 13:17:20.3009|Info|  Settimeout: id:37, (1) ms
2015-08-22 13:17:20.3520|Info|      Encerrado timer: id:29, (13:17:20.3520)
2015-08-22 13:17:20.3520|Info|      Executando timer: id:32, (13:17:20.3529)
2015-08-22 13:17:20.3520|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:20.3669|Info|  Settimeout: id:38, (32) ms
2015-08-22 13:17:20.4200|Info|      Encerrado timer: id:32, (13:17:20.4200)
2015-08-22 13:17:20.4200|Info|      Executando timer: id:37, (13:17:20.4220)
2015-08-22 13:17:20.4200|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-22 13:17:20.4280|Info|  Settimeout: id:39, (13) ms
2015-08-22 13:17:20.4801|Info|      Encerrado timer: id:37, (13:17:20.4801)
2015-08-22 13:17:20.4801|Info|      Executando timer: id:36, (13:17:20.4820)
2015-08-22 13:17:20.4801|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:20.4801|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:20.4801|Info|      Encerrado timer: id:36, (13:17:20.4890)
2015-08-22 13:17:20.4910|Info|      Executando timer: id:38, (13:17:20.4910)
2015-08-22 13:17:20.4910|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:20.4910|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:20.4910|Info|      Encerrado timer: id:38, (13:17:20.4980)
2015-08-22 13:17:20.4910|Info|      Executando timer: id:39, (13:17:20.5000)
2015-08-22 13:17:20.4910|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:20.5060|Info|  Settimeout: id:40, (64) ms
2015-08-22 13:17:20.5581|Info|  Settimeout: id:41, (32) ms
2015-08-22 13:17:20.6101|Info|  Settimeout: id:42, (128) ms
2015-08-22 13:17:20.6622|Info|      Encerrado timer: id:39, (13:17:20.6622)
2015-08-22 13:17:20.6622|Info|      Executando timer: id:40, (13:17:20.6631)
2015-08-22 13:17:20.6622|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:20.6622|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:20.6622|Info|      Encerrado timer: id:40, (13:17:20.6691)
2015-08-22 13:17:20.7412|Info|      Executando timer: id:42, (13:17:20.7412)
2015-08-22 13:17:20.7412|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:20.7412|Info|  Settimeout: id:43, (13) ms
2015-08-22 13:17:20.8003|Info|      Encerrado timer: id:42, (13:17:20.8003)
2015-08-22 13:17:20.8003|Info|      Executando timer: id:43, (13:17:20.8012)
2015-08-22 13:17:20.8022|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:20.8022|Info|  Settimeout: id:44, (32) ms
2015-08-22 13:17:20.8553|Info|  Settimeout: id:45, (13) ms
2015-08-22 13:17:20.9083|Info|  Settimeout: id:46, (64) ms
2015-08-22 13:17:20.9594|Info|      Encerrado timer: id:43, (13:17:20.9594)
2015-08-22 13:17:20.9744|Info|      Executando timer: id:46, (13:17:20.9744)
2015-08-22 13:17:20.9744|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-22 13:17:20.9744|Info|  Settimeout: id:47, (13) ms
2015-08-22 13:17:21.0344|Info|      Encerrado timer: id:46, (13:17:21.0344)
2015-08-22 13:17:21.0344|Info|      Executando timer: id:47, (13:17:21.0354)
2015-08-22 13:17:21.0374|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.0374|Info|  Settimeout: id:48, (1) ms
2015-08-22 13:17:21.0995|Info|  Settimeout: id:49, (32) ms
2015-08-22 13:17:21.1505|Info|      Encerrado timer: id:47, (13:17:21.1505)
2015-08-22 13:17:21.1505|Info|      Executando timer: id:48, (13:17:21.1525)
2015-08-22 13:17:21.1505|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.1505|Info|      Encerrado timer: id:48, (13:17:21.1565)
2015-08-22 13:17:21.1505|Info|      Executando timer: id:49, (13:17:21.1585)
2015-08-22 13:17:21.1615|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:21.1615|Info|  Settimeout: id:50, (13) ms
2015-08-22 13:17:21.2165|Info|      Encerrado timer: id:49, (13:17:21.2165)
2015-08-22 13:17:21.2235|Info|      Executando timer: id:50, (13:17:21.2235)
2015-08-22 13:17:21.2235|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.2235|Info|  Settimeout: id:51, (1) ms
2015-08-22 13:17:21.2826|Info|  Settimeout: id:52, (32) ms
2015-08-22 13:17:21.3347|Info|      Encerrado timer: id:50, (13:17:21.3347)
2015-08-22 13:17:21.3347|Info|      Executando timer: id:51, (13:17:21.3356)
2015-08-22 13:17:21.3347|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.3347|Info|      Encerrado timer: id:51, (13:17:21.3386)
2015-08-22 13:17:21.3347|Info|      Executando timer: id:52, (13:17:21.3396)
2015-08-22 13:17:21.3347|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 13:17:21.3347|Info|  Settimeout: id:53, (13) ms
2015-08-22 13:17:21.3947|Info|      Encerrado timer: id:52, (13:17:21.3947)
2015-08-22 13:17:21.3957|Info|      Executando timer: id:53, (13:17:21.3957)
2015-08-22 13:17:21.3957|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.3957|Info|  Settimeout: id:54, (1) ms
2015-08-22 13:17:21.4507|Info|  Settimeout: id:55, (32) ms
2015-08-22 13:17:21.5017|Info|      Encerrado timer: id:53, (13:17:21.5017)
2015-08-22 13:17:21.5017|Info|      Executando timer: id:55, (13:17:21.5037)
2015-08-22 13:17:21.5057|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:21.5057|Info|  Settimeout: id:56, (13) ms
2015-08-22 13:17:21.5618|Info|      Encerrado timer: id:55, (13:17:21.5618)
2015-08-22 13:17:21.5618|Info|      Executando timer: id:56, (13:17:21.5628)
2015-08-22 13:17:21.5618|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.5618|Info|  Settimeout: id:57, (32) ms
2015-08-22 13:17:21.6198|Info|  Settimeout: id:58, (1) ms
2015-08-22 13:17:21.6728|Info|  Settimeout: id:59, (64) ms
2015-08-22 13:17:21.7260|Info|      Encerrado timer: id:56, (13:17:21.7260)
2015-08-22 13:17:21.7260|Info|      Executando timer: id:57, (13:17:21.7280)
2015-08-22 13:17:21.7260|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.7260|Info|      Encerrado timer: id:57, (13:17:21.7335)
2015-08-22 13:17:21.7260|Info|      Executando timer: id:58, (13:17:21.7350)
2015-08-22 13:17:21.7395|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:21.7395|Info|      Encerrado timer: id:58, (13:17:21.7455)
2015-08-22 13:17:21.7395|Info|      Executando timer: id:59, (13:17:21.7470)
2015-08-22 13:17:21.7395|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:21.7395|Info|  Settimeout: id:60, (13) ms
2015-08-22 13:17:21.8023|Info|      Encerrado timer: id:59, (13:17:21.8023)
2015-08-22 13:17:21.8023|Info|      Executando timer: id:60, (13:17:21.8033)
2015-08-22 13:17:21.8023|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.8023|Info|  Settimeout: id:61, (32) ms
2015-08-22 13:17:21.8583|Info|  Settimeout: id:62, (64) ms
2015-08-22 13:17:21.9093|Info|      Encerrado timer: id:60, (13:17:21.9093)
2015-08-22 13:17:21.9093|Info|      Executando timer: id:61, (13:17:21.9093)
2015-08-22 13:17:21.9093|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.9113|Info|      Encerrado timer: id:61, (13:17:21.9113)
2015-08-22 13:17:21.9113|Info|      Executando timer: id:62, (13:17:21.9244)
2015-08-22 13:17:21.9273|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 13:17:21.9273|Info|  Settimeout: id:63, (13) ms
2015-08-22 13:17:21.9834|Info|      Encerrado timer: id:62, (13:17:21.9834)
2015-08-22 13:17:21.9834|Info|      Executando timer: id:63, (13:17:21.9843)
2015-08-22 13:17:21.9834|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.9834|Info|  Settimeout: id:64, (32) ms
2015-08-22 13:17:22.0414|Info|  Settimeout: id:65, (64) ms
2015-08-22 13:17:22.0935|Info|      Encerrado timer: id:63, (13:17:22.0935)
2015-08-22 13:17:22.1085|Info|      Executando timer: id:65, (13:17:22.1085)
2015-08-22 13:17:22.1085|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:22.1144|Info|  Settimeout: id:66, (13) ms
2015-08-22 13:17:22.1665|Info|      Encerrado timer: id:65, (13:17:22.1665)
2015-08-22 13:17:22.1665|Info|      Executando timer: id:66, (13:17:22.1675)
2015-08-22 13:17:22.1665|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:23.7106|Info|  Settimeout: id:67, (13) ms
2015-08-22 13:17:23.7617|Info|      Encerrado timer: id:66, (13:17:23.7617)
2015-08-22 13:17:23.7617|Info|      Executando timer: id:67, (13:17:23.7617)
2015-08-22 13:17:23.7617|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 13:17:23.8517|Info|----------------------------------------
2015-08-22 13:17:23.8517|Info|lodash.isNil
2015-08-22 13:17:23.8517|Info|----------------------------------------
2015-08-22 13:17:23.8517|Info| FAIL - should work with nulls from another realm
2015-08-22 13:17:23.8517|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-08-22 13:17:23.9908|Info|  Settimeout: id:68, (32) ms
2015-08-22 13:17:24.0408|Info|      Encerrado timer: id:67, (13:17:24.0408)
2015-08-22 13:17:24.0408|Info|      Executando timer: id:68, (13:17:24.0418)
2015-08-22 13:17:24.0408|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-08-22 13:17:24.0408|Info|  Settimeout: id:69, (13) ms
2015-08-22 13:17:24.0949|Info|      Encerrado timer: id:68, (13:17:24.0949)
2015-08-22 13:17:24.1889|Info|      Executando timer: id:69, (13:17:24.1889)
2015-08-22 13:17:24.1889|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.3810|Info|  Settimeout: id:70, (32) ms
2015-08-22 13:17:24.4321|Info|  Settimeout: id:71, (64) ms
2015-08-22 13:17:24.4832|Info|      Encerrado timer: id:69, (13:17:24.4832)
2015-08-22 13:17:24.4981|Info|      Executando timer: id:71, (13:17:24.4981)
2015-08-22 13:17:24.4981|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:24.5071|Info|  Settimeout: id:72, (13) ms
2015-08-22 13:17:24.5592|Info|      Encerrado timer: id:71, (13:17:24.5592)
2015-08-22 13:17:24.5592|Info|      Executando timer: id:72, (13:17:24.5592)
2015-08-22 13:17:24.5592|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.5592|Info|  Settimeout: id:73, (32) ms
2015-08-22 13:17:24.6123|Info|  Settimeout: id:74, (64) ms
2015-08-22 13:17:24.6633|Info|      Encerrado timer: id:72, (13:17:24.6633)
2015-08-22 13:17:24.6633|Info|      Executando timer: id:73, (13:17:24.6652)
2015-08-22 13:17:24.6633|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:24.6633|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:24.6633|Info|      Encerrado timer: id:73, (13:17:24.6742)
2015-08-22 13:17:24.6783|Info|      Executando timer: id:74, (13:17:24.6783)
2015-08-22 13:17:24.6783|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:24.6783|Info|  Settimeout: id:75, (18) ms
2015-08-22 13:17:24.7413|Info|  Settimeout: id:76, (13) ms
2015-08-22 13:17:24.7934|Info|      Encerrado timer: id:74, (13:17:24.7934)
2015-08-22 13:17:24.7934|Info|      Executando timer: id:76, (13:17:24.7943)
2015-08-22 13:17:24.7934|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.8083|Info|  Settimeout: id:77, (32) ms
2015-08-22 13:17:24.8604|Info|  Settimeout: id:78, (64) ms
2015-08-22 13:17:24.9115|Info|      Encerrado timer: id:76, (13:17:24.9115)
2015-08-22 13:17:24.9115|Info|      Executando timer: id:78, (13:17:24.9265)
2015-08-22 13:17:24.9284|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:24.9284|Info|  Settimeout: id:79, (13) ms
2015-08-22 13:17:24.9815|Info|      Encerrado timer: id:78, (13:17:24.9815)
2015-08-22 13:17:24.9815|Info|      Executando timer: id:79, (13:17:24.9835)
2015-08-22 13:17:24.9815|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.9905|Info|  Settimeout: id:80, (64) ms
2015-08-22 13:17:25.0426|Info|      Encerrado timer: id:79, (13:17:25.0426)
2015-08-22 13:17:25.0575|Info|      Executando timer: id:80, (13:17:25.0575)
2015-08-22 13:17:25.0575|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:25.0575|Info|  Settimeout: id:81, (13) ms
2015-08-22 13:17:25.1116|Info|      Encerrado timer: id:80, (13:17:25.1116)
2015-08-22 13:17:25.1116|Info|      Executando timer: id:81, (13:17:25.1126)
2015-08-22 13:17:25.1116|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:25.1156|Info|  Settimeout: id:82, (32) ms
2015-08-22 13:17:25.1686|Info|  Settimeout: id:83, (31) ms
2015-08-22 13:17:25.2217|Info|  Settimeout: id:84, (32) ms
2015-08-22 13:17:25.2737|Info|  Settimeout: id:85, (32) ms
2015-08-22 13:17:25.3257|Info|  Settimeout: id:86, (32) ms
2015-08-22 13:17:25.3798|Info|  Settimeout: id:87, (32) ms
2015-08-22 13:17:25.4328|Info|  Settimeout: id:88, (31) ms
2015-08-22 13:17:25.4869|Info|  Settimeout: id:89, (1) ms
2015-08-22 13:17:25.5389|Info|      Encerrado timer: id:81, (13:17:25.5389)
2015-08-22 13:17:25.5389|Info|      Executando timer: id:88, (13:17:25.5409)
2015-08-22 13:17:25.5389|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:25.5389|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:25.5389|Info|      Encerrado timer: id:88, (13:17:25.5509)
2015-08-22 13:17:25.5529|Info|      Executando timer: id:89, (13:17:25.5529)
2015-08-22 13:17:25.5529|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 13:17:25.5529|Info|  Settimeout: id:90, (13) ms
2015-08-22 13:17:25.6120|Info|      Encerrado timer: id:89, (13:17:25.6120)
2015-08-22 13:17:25.6120|Info|      Executando timer: id:90, (13:17:25.6129)
2015-08-22 13:17:25.6120|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:25.6159|Info|  Settimeout: id:91, (32) ms
2015-08-22 13:17:25.6690|Info|  Settimeout: id:92, (32) ms
2015-08-22 13:17:25.7220|Info|  Settimeout: id:93, (32) ms
2015-08-22 13:17:25.7730|Info|  Settimeout: id:94, (32) ms
2015-08-22 13:17:25.8251|Info|  Settimeout: id:95, (32) ms
2015-08-22 13:17:25.8762|Info|  Settimeout: id:96, (32) ms
2015-08-22 13:17:25.9291|Info|  Settimeout: id:97, (32) ms
2015-08-22 13:17:25.9822|Info|  Settimeout: id:98, (1) ms
2015-08-22 13:17:26.0433|Info|      Encerrado timer: id:90, (13:17:26.0433)
2015-08-22 13:17:26.0433|Info|      Executando timer: id:97, (13:17:26.0442)
2015-08-22 13:17:26.0433|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.0433|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.0433|Info|      Encerrado timer: id:97, (13:17:26.0462)
2015-08-22 13:17:26.0433|Info|      Executando timer: id:98, (13:17:26.0472)
2015-08-22 13:17:26.0433|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 13:17:26.0433|Info|  Settimeout: id:99, (13) ms
2015-08-22 13:17:26.1013|Info|      Encerrado timer: id:98, (13:17:26.1013)
2015-08-22 13:17:26.1013|Info|      Executando timer: id:99, (13:17:26.1013)
2015-08-22 13:17:26.1013|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:26.1013|Info|  Settimeout: id:100, (32) ms
2015-08-22 13:17:26.1554|Info|  Settimeout: id:101, (128) ms
2015-08-22 13:17:26.2074|Info|      Encerrado timer: id:99, (13:17:26.2074)
2015-08-22 13:17:26.2093|Info|      Executando timer: id:100, (13:17:26.2093)
2015-08-22 13:17:26.2093|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.2093|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.2093|Info|      Encerrado timer: id:100, (13:17:26.2163)
2015-08-22 13:17:26.2864|Info|      Executando timer: id:101, (13:17:26.2864)
2015-08-22 13:17:26.2864|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:26.2864|Info|  Settimeout: id:102, (13) ms
2015-08-22 13:17:26.3465|Info|      Encerrado timer: id:101, (13:17:26.3465)
2015-08-22 13:17:26.3465|Info|      Executando timer: id:102, (13:17:26.3484)
2015-08-22 13:17:26.3514|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:26.3514|Info|  Settimeout: id:103, (32) ms
2015-08-22 13:17:26.4105|Info|  Settimeout: id:104, (64) ms
2015-08-22 13:17:26.4635|Info|  Settimeout: id:105, (64) ms
2015-08-22 13:17:26.5146|Info|  Settimeout: id:106, (256) ms
2015-08-22 13:17:26.5656|Info|      Encerrado timer: id:102, (13:17:26.5656)
2015-08-22 13:17:26.5656|Info|      Executando timer: id:103, (13:17:26.5666)
2015-08-22 13:17:26.5676|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.5676|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.5676|Info|      Encerrado timer: id:103, (13:17:26.5716)
2015-08-22 13:17:26.5676|Info|      Executando timer: id:104, (13:17:26.5726)
2015-08-22 13:17:26.5676|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.5676|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.5676|Info|      Encerrado timer: id:104, (13:17:26.5806)
2015-08-22 13:17:26.5676|Info|      Executando timer: id:105, (13:17:26.5816)
2015-08-22 13:17:26.5846|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.5846|Info|      Encerrado timer: id:105, (13:17:26.5876)
2015-08-22 13:17:26.7728|Info|      Executando timer: id:106, (13:17:26.7728)
2015-08-22 13:17:26.7728|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:26.7728|Info|  Settimeout: id:107, (13) ms
2015-08-22 13:17:26.8288|Info|      Encerrado timer: id:106, (13:17:26.8288)
2015-08-22 13:17:26.8288|Info|      Executando timer: id:107, (13:17:26.8288)
2015-08-22 13:17:26.8288|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:26.8288|Info|  Settimeout: id:108, (64) ms
2015-08-22 13:17:26.8828|Info|  Settimeout: id:109, (96) ms
2015-08-22 13:17:26.9359|Info|  Settimeout: id:110, (192) ms
2015-08-22 13:17:26.9879|Info|      Encerrado timer: id:107, (13:17:26.9879)
2015-08-22 13:17:26.9879|Info|      Executando timer: id:108, (13:17:26.9889)
2015-08-22 13:17:26.9909|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.9909|Info|      Encerrado timer: id:108, (13:17:26.9929)
2015-08-22 13:17:26.9909|Info|      Executando timer: id:109, (13:17:26.9939)
2015-08-22 13:17:26.9909|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-08-22 13:17:26.9909|Info|  Settimeout: id:111, (64) ms
2015-08-22 13:17:27.0550|Info|      Encerrado timer: id:109, (13:17:27.0550)
2015-08-22 13:17:27.0700|Info|      Executando timer: id:111, (13:17:27.0700)
2015-08-22 13:17:27.0700|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:27.0700|Info|      Encerrado timer: id:111, (13:17:27.0750)
2015-08-22 13:17:27.1310|Info|      Executando timer: id:110, (13:17:27.1310)
2015-08-22 13:17:27.1310|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-08-22 13:17:27.1310|Info|  Settimeout: id:112, (13) ms
2015-08-22 13:17:27.1901|Info|      Encerrado timer: id:110, (13:17:27.1901)
2015-08-22 13:17:27.1901|Info|      Executando timer: id:112, (13:17:27.1911)
2015-08-22 13:17:27.1901|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:27.1950|Info|  Settimeout: id:113, (0) ms
2015-08-22 13:17:27.2461|Info|  Settimeout: id:114, (32) ms
2015-08-22 13:17:27.2971|Info|      Encerrado timer: id:112, (13:17:27.2971)
2015-08-22 13:17:27.2971|Info|      Executando timer: id:113, (13:17:27.2981)
2015-08-22 13:17:27.2971|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.3051|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.3051|Info|      Encerrado timer: id:113, (13:17:27.3061)
2015-08-22 13:17:27.3051|Info|      Executando timer: id:114, (13:17:27.3081)
2015-08-22 13:17:27.3051|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:27.3051|Info|  Settimeout: id:115, (0) ms
2015-08-22 13:17:27.3672|Info|  Settimeout: id:116, (13) ms
2015-08-22 13:17:27.4192|Info|      Encerrado timer: id:114, (13:17:27.4192)
2015-08-22 13:17:27.4192|Info|      Executando timer: id:115, (13:17:27.4202)
2015-08-22 13:17:27.4192|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.4192|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.4192|Info|      Encerrado timer: id:115, (13:17:27.4232)
2015-08-22 13:17:27.4192|Info|      Executando timer: id:116, (13:17:27.4242)
2015-08-22 13:17:27.4192|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:27.4282|Info|  Settimeout: id:117, (32) ms
2015-08-22 13:17:27.4793|Info|  Settimeout: id:118, (64) ms
2015-08-22 13:17:27.5303|Info|      Encerrado timer: id:116, (13:17:27.5303)
2015-08-22 13:17:27.5303|Info|      Executando timer: id:117, (13:17:27.5323)
2015-08-22 13:17:27.5303|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.5383|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.5383|Info|      Encerrado timer: id:117, (13:17:27.5403)
2015-08-22 13:17:27.5383|Info|      Executando timer: id:118, (13:17:27.5453)
2015-08-22 13:17:27.5583|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 13:17:27.5583|Info|  Settimeout: id:119, (13) ms
2015-08-22 13:17:27.6154|Info|      Encerrado timer: id:118, (13:17:27.6154)
2015-08-22 13:17:27.6154|Info|      Executando timer: id:119, (13:17:27.6173)
2015-08-22 13:17:27.6154|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:27.6154|Info|  Settimeout: id:120, (32) ms
2015-08-22 13:17:27.6784|Info|  Settimeout: id:121, (256) ms
2015-08-22 13:17:27.7304|Info|      Encerrado timer: id:119, (13:17:27.7304)
2015-08-22 13:17:27.7304|Info|      Executando timer: id:120, (13:17:27.7324)
2015-08-22 13:17:27.7304|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.7404|Info|  Settimeout: id:122, (32) ms
2015-08-22 13:17:27.7935|Info|!timeoutId && !maxTimeoutId false
2015-08-22 13:17:27.7935|Info|      Encerrado timer: id:120, (13:17:27.7965)
2015-08-22 13:17:27.7935|Info|      Executando timer: id:122, (13:17:27.7985)
2015-08-22 13:17:27.7935|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.8025|Info|  Settimeout: id:123, (32) ms
2015-08-22 13:17:27.8546|Info|!timeoutId && !maxTimeoutId false
2015-08-22 13:17:27.8546|Info|      Encerrado timer: id:122, (13:17:27.8555)
2015-08-22 13:17:27.8546|Info|      Executando timer: id:123, (13:17:27.8555)
2015-08-22 13:17:27.8546|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.8546|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.8546|Info|      Encerrado timer: id:123, (13:17:27.8585)
2015-08-22 13:17:27.9376|Info|      Executando timer: id:121, (13:17:27.9376)
2015-08-22 13:17:27.9376|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 13:17:27.9376|Info|  Settimeout: id:124, (13) ms
2015-08-22 13:17:27.9907|Info|      Encerrado timer: id:121, (13:17:27.9907)
2015-08-22 13:17:27.9907|Info|      Executando timer: id:124, (13:17:27.9916)
2015-08-22 13:17:27.9907|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.0076|Info|  Settimeout: id:125, (32) ms
2015-08-22 13:17:28.0597|Info|  Settimeout: id:126, (64) ms
2015-08-22 13:17:28.1117|Info|      Encerrado timer: id:124, (13:17:28.1117)
2015-08-22 13:17:28.1117|Info|      Executando timer: id:125, (13:17:28.1137)
2015-08-22 13:17:28.1167|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:28.1167|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:28.1167|Info|      Encerrado timer: id:125, (13:17:28.1227)
2015-08-22 13:17:28.1167|Info|      Executando timer: id:126, (13:17:28.1268)
2015-08-22 13:17:28.1167|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:28.1327|Info|  Settimeout: id:127, (32) ms
2015-08-22 13:17:28.1857|Info|  Settimeout: id:128, (13) ms
2015-08-22 13:17:28.2378|Info|      Encerrado timer: id:126, (13:17:28.2378)
2015-08-22 13:17:28.2378|Info|      Executando timer: id:127, (13:17:28.2388)
2015-08-22 13:17:28.2398|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:28.2398|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:28.2398|Info|      Encerrado timer: id:127, (13:17:28.2428)
2015-08-22 13:17:28.2398|Info|      Executando timer: id:128, (13:17:28.2428)
2015-08-22 13:17:28.2398|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.2398|Info|  Settimeout: id:129, (32) ms
2015-08-22 13:17:28.2988|Info|  Settimeout: id:130, (64) ms
2015-08-22 13:17:28.3529|Info|      Encerrado timer: id:128, (13:17:28.3529)
2015-08-22 13:17:28.3679|Info|      Executando timer: id:130, (13:17:28.3679)
2015-08-22 13:17:28.3679|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 13:17:28.3679|Info|  Settimeout: id:131, (13) ms
2015-08-22 13:17:28.4210|Info|      Encerrado timer: id:130, (13:17:28.4210)
2015-08-22 13:17:28.4210|Info|      Executando timer: id:131, (13:17:28.4210)
2015-08-22 13:17:28.4210|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.4210|Info|  Settimeout: id:132, (32) ms
2015-08-22 13:17:28.4760|Info|  Settimeout: id:133, (32) ms
2015-08-22 13:17:28.5280|Info|  Settimeout: id:134, (64) ms
2015-08-22 13:17:28.5791|Info|      Encerrado timer: id:131, (13:17:28.5791)
2015-08-22 13:17:28.5791|Info|      Executando timer: id:133, (13:17:28.5810)
2015-08-22 13:17:28.5841|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:28.5841|Info|      Encerrado timer: id:133, (13:17:28.5860)
2015-08-22 13:17:28.5841|Info|      Executando timer: id:134, (13:17:28.5941)
2015-08-22 13:17:28.5841|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:28.6010|Info|  Settimeout: id:135, (13) ms
2015-08-22 13:17:28.6531|Info|      Encerrado timer: id:134, (13:17:28.6531)
2015-08-22 13:17:28.6531|Info|      Executando timer: id:135, (13:17:28.6541)
2015-08-22 13:17:28.6531|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.6531|Info|  Settimeout: id:136, (32) ms
2015-08-22 13:17:28.7101|Info|      Encerrado timer: id:135, (13:17:28.7101)
2015-08-22 13:17:28.7101|Info|      Executando timer: id:136, (13:17:28.7111)
2015-08-22 13:17:28.7101|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:28.7101|Info|  Settimeout: id:137, (13) ms
2015-08-22 13:17:28.7662|Info|      Encerrado timer: id:136, (13:17:28.7662)
2015-08-22 13:17:28.7662|Info|      Executando timer: id:137, (13:17:28.7682)
2015-08-22 13:17:28.7662|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.7722|Info|  Settimeout: id:138, (32) ms
2015-08-22 13:17:28.8242|Info|  Settimeout: id:139, (64) ms
2015-08-22 13:17:28.8762|Info|      Encerrado timer: id:137, (13:17:28.8762)
2015-08-22 13:17:28.8762|Info|      Executando timer: id:138, (13:17:28.8782)
2015-08-22 13:17:28.8802|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:28.8802|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:28.8802|Info|      Encerrado timer: id:138, (13:17:28.8823)
2015-08-22 13:17:28.8802|Info|      Executando timer: id:139, (13:17:28.8913)
2015-08-22 13:17:28.8802|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 13:17:28.8802|Info|  Settimeout: id:140, (13) ms
2015-08-22 13:17:28.9443|Info|      Encerrado timer: id:139, (13:17:28.9443)
2015-08-22 13:17:28.9443|Info|      Executando timer: id:140, (13:17:28.9463)
2015-08-22 13:17:28.9443|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.9653|Info|  Settimeout: id:141, (32) ms
2015-08-22 13:17:29.0183|Info|  Settimeout: id:142, (256) ms
2015-08-22 13:17:29.0704|Info|      Encerrado timer: id:140, (13:17:29.0704)
2015-08-22 13:17:29.0704|Info|      Executando timer: id:141, (13:17:29.0724)
2015-08-22 13:17:29.0704|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:29.0704|Info|  Settimeout: id:143, (32) ms
2015-08-22 13:17:29.1325|Info|!timeoutId && !maxTimeoutId false
2015-08-22 13:17:29.1325|Info|      Encerrado timer: id:141, (13:17:29.1334)
2015-08-22 13:17:29.1325|Info|      Executando timer: id:143, (13:17:29.1344)
2015-08-22 13:17:29.1325|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:29.1325|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:29.1325|Info|      Encerrado timer: id:143, (13:17:29.1384)
2015-08-22 13:17:29.2776|Info|      Executando timer: id:142, (13:17:29.2776)
2015-08-22 13:17:29.2776|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 13:17:29.2776|Info|  Settimeout: id:144, (13) ms
2015-08-22 13:17:29.3366|Info|      Encerrado timer: id:142, (13:17:29.3366)
2015-08-22 13:17:29.3366|Info|      Executando timer: id:144, (13:17:29.3386)
2015-08-22 13:17:29.3366|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.3616|Info|  Settimeout: id:145, (64) ms
2015-08-22 13:17:29.4126|Info|      Encerrado timer: id:144, (13:17:29.4126)
2015-08-22 13:17:29.4277|Info|      Executando timer: id:145, (13:17:29.4277)
2015-08-22 13:17:29.4277|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:29.4277|Info|  Settimeout: id:146, (13) ms
2015-08-22 13:17:29.4837|Info|      Encerrado timer: id:145, (13:17:29.4837)
2015-08-22 13:17:29.4837|Info|      Executando timer: id:146, (13:17:29.4847)
2015-08-22 13:17:29.4837|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.4897|Info|  Settimeout: id:147, (32) ms
2015-08-22 13:17:29.5418|Info|  Settimeout: id:148, (64) ms
2015-08-22 13:17:29.5927|Info|      Encerrado timer: id:146, (13:17:29.5927)
2015-08-22 13:17:29.6078|Info|      Executando timer: id:148, (13:17:29.6078)
2015-08-22 13:17:29.6078|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 13:17:29.6078|Info|  Settimeout: id:149, (13) ms
2015-08-22 13:17:29.6658|Info|      Encerrado timer: id:148, (13:17:29.6658)
2015-08-22 13:17:29.6658|Info|      Executando timer: id:149, (13:17:29.6678)
2015-08-22 13:17:29.6658|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.6658|Info|  Settimeout: id:150, (64) ms
2015-08-22 13:17:29.7279|Info|      Encerrado timer: id:149, (13:17:29.7279)
2015-08-22 13:17:29.7428|Info|      Executando timer: id:150, (13:17:29.7428)
2015-08-22 13:17:29.7428|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:29.7428|Info|  Settimeout: id:151, (13) ms
2015-08-22 13:17:29.7969|Info|      Encerrado timer: id:150, (13:17:29.7969)
2015-08-22 13:17:29.7969|Info|      Executando timer: id:151, (13:17:29.7979)
2015-08-22 13:17:29.7969|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.9190|Info|  Settimeout: id:152, (32) ms
2015-08-22 13:17:29.9700|Info|  Settimeout: id:153, (1) ms
2015-08-22 13:17:30.0220|Info|  Settimeout: id:154, (64) ms
2015-08-22 13:17:30.0741|Info|      Encerrado timer: id:151, (13:17:30.0741)
2015-08-22 13:17:30.0741|Info|      Executando timer: id:152, (13:17:30.0771)
2015-08-22 13:17:30.0741|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:30.0741|Info|      Encerrado timer: id:152, (13:17:30.0821)
2015-08-22 13:17:30.0841|Info|      Executando timer: id:153, (13:17:30.0841)
2015-08-22 13:17:30.0841|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:30.0841|Info|      Encerrado timer: id:153, (13:17:30.0921)
2015-08-22 13:17:30.0841|Info|      Executando timer: id:154, (13:17:30.0951)
2015-08-22 13:17:30.0841|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:30.1001|Info|  Settimeout: id:155, (13) ms
2015-08-22 13:17:30.1522|Info|      Encerrado timer: id:154, (13:17:30.1522)
2015-08-22 13:17:30.1522|Info|      Executando timer: id:155, (13:17:30.1522)
2015-08-22 13:17:30.1522|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.1522|Info|  Settimeout: id:156, (32) ms
2015-08-22 13:17:30.2052|Info|  Settimeout: id:157, (64) ms
2015-08-22 13:17:30.2563|Info|      Encerrado timer: id:155, (13:17:30.2563)
2015-08-22 13:17:30.2713|Info|      Executando timer: id:157, (13:17:30.2713)
2015-08-22 13:17:30.2713|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:30.2713|Info|  Settimeout: id:158, (13) ms
2015-08-22 13:17:30.3243|Info|      Encerrado timer: id:157, (13:17:30.3243)
2015-08-22 13:17:30.3243|Info|      Executando timer: id:158, (13:17:30.3253)
2015-08-22 13:17:30.3243|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.3243|Info|  Settimeout: id:159, (32) ms
2015-08-22 13:17:30.3813|Info|  Settimeout: id:160, (64) ms
2015-08-22 13:17:30.4334|Info|      Encerrado timer: id:158, (13:17:30.4334)
2015-08-22 13:17:30.4334|Info|      Executando timer: id:159, (13:17:30.4343)
2015-08-22 13:17:30.4334|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:30.4334|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:30.4334|Info|      Encerrado timer: id:159, (13:17:30.4373)
2015-08-22 13:17:30.4474|Info|      Executando timer: id:160, (13:17:30.4474)
2015-08-22 13:17:30.4474|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:30.4474|Info|  Settimeout: id:161, (18) ms
2015-08-22 13:17:30.5044|Info|  Settimeout: id:162, (13) ms
2015-08-22 13:17:30.5565|Info|      Encerrado timer: id:160, (13:17:30.5565)
2015-08-22 13:17:30.5565|Info|      Executando timer: id:162, (13:17:30.5584)
2015-08-22 13:17:30.5565|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.5565|Info|  Settimeout: id:163, (32) ms
2015-08-22 13:17:30.6165|Info|  Settimeout: id:164, (1) ms
2015-08-22 13:17:30.6686|Info|  Settimeout: id:165, (64) ms
2015-08-22 13:17:30.7196|Info|      Encerrado timer: id:162, (13:17:30.7196)
2015-08-22 13:17:30.7196|Info|      Executando timer: id:163, (13:17:30.7196)
2015-08-22 13:17:30.7196|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:30.7196|Info|      Encerrado timer: id:163, (13:17:30.7225)
2015-08-22 13:17:30.7196|Info|      Executando timer: id:164, (13:17:30.7225)
2015-08-22 13:17:30.7235|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:30.7235|Info|      Encerrado timer: id:164, (13:17:30.7255)
2015-08-22 13:17:30.7235|Info|      Executando timer: id:165, (13:17:30.7346)
2015-08-22 13:17:30.7396|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:30.7396|Info|  Settimeout: id:166, (13) ms
2015-08-22 13:17:30.7916|Info|      Encerrado timer: id:165, (13:17:30.7916)
2015-08-22 13:17:30.7916|Info|      Executando timer: id:166, (13:17:30.7926)
2015-08-22 13:17:30.7916|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.7916|Info|  Settimeout: id:167, (32) ms
2015-08-22 13:17:30.8526|Info|  Settimeout: id:168, (64) ms
2015-08-22 13:17:30.9047|Info|      Encerrado timer: id:166, (13:17:30.9047)
2015-08-22 13:17:30.9197|Info|      Executando timer: id:168, (13:17:30.9197)
2015-08-22 13:17:30.9197|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:30.9287|Info|  Settimeout: id:169, (13) ms
2015-08-22 13:17:30.9808|Info|      Encerrado timer: id:168, (13:17:30.9808)
2015-08-22 13:17:30.9808|Info|      Executando timer: id:169, (13:17:30.9828)
2015-08-22 13:17:30.9808|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.9907|Info|  Settimeout: id:170, (32) ms
2015-08-22 13:17:31.0528|Info|  Settimeout: id:171, (64) ms
2015-08-22 13:17:31.1048|Info|      Encerrado timer: id:169, (13:17:31.1048)
2015-08-22 13:17:31.1048|Info|      Executando timer: id:170, (13:17:31.1068)
2015-08-22 13:17:31.1048|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:31.1048|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:31.1048|Info|      Encerrado timer: id:170, (13:17:31.1138)
2015-08-22 13:17:31.1199|Info|      Executando timer: id:171, (13:17:31.1199)
2015-08-22 13:17:31.1199|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:31.1199|Info|  Settimeout: id:172, (18) ms
2015-08-22 13:17:31.1819|Info|  Settimeout: id:173, (13) ms
2015-08-22 13:17:31.2349|Info|      Encerrado timer: id:171, (13:17:31.2349)
2015-08-22 13:17:31.2349|Info|      Executando timer: id:173, (13:17:31.2369)
2015-08-22 13:17:31.2349|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.2429|Info|  Settimeout: id:174, (32) ms
2015-08-22 13:17:31.2950|Info|  Settimeout: id:175, (1) ms
2015-08-22 13:17:31.3470|Info|  Settimeout: id:176, (64) ms
2015-08-22 13:17:31.3980|Info|      Encerrado timer: id:173, (13:17:31.3980)
2015-08-22 13:17:31.3980|Info|      Executando timer: id:174, (13:17:31.3980)
2015-08-22 13:17:31.3980|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:31.3980|Info|      Encerrado timer: id:174, (13:17:31.4010)
2015-08-22 13:17:31.3980|Info|      Executando timer: id:175, (13:17:31.4020)
2015-08-22 13:17:31.3980|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:31.3980|Info|      Encerrado timer: id:175, (13:17:31.4050)
2015-08-22 13:17:31.4130|Info|      Executando timer: id:176, (13:17:31.4130)
2015-08-22 13:17:31.4130|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:31.4130|Info|  Settimeout: id:177, (13) ms
2015-08-22 13:17:31.4661|Info|      Encerrado timer: id:176, (13:17:31.4661)
2015-08-22 13:17:31.4661|Info|      Executando timer: id:177, (13:17:31.4671)
2015-08-22 13:17:31.4661|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.4661|Info|  Settimeout: id:178, (32) ms
2015-08-22 13:17:31.5271|Info|  Settimeout: id:179, (64) ms
2015-08-22 13:17:31.5812|Info|      Encerrado timer: id:177, (13:17:31.5812)
2015-08-22 13:17:31.5962|Info|      Executando timer: id:179, (13:17:31.5962)
2015-08-22 13:17:31.5962|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:31.5992|Info|  Settimeout: id:180, (13) ms
2015-08-22 13:17:31.6503|Info|      Encerrado timer: id:179, (13:17:31.6503)
2015-08-22 13:17:31.6503|Info|      Executando timer: id:180, (13:17:31.6512)
2015-08-22 13:17:31.6503|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.6503|Info|  Settimeout: id:181, (32) ms
2015-08-22 13:17:31.7102|Info|  Settimeout: id:182, (64) ms
2015-08-22 13:17:31.7613|Info|      Encerrado timer: id:180, (13:17:31.7613)
2015-08-22 13:17:31.7613|Info|      Executando timer: id:181, (13:17:31.7623)
2015-08-22 13:17:31.7613|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:31.7613|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:31.7613|Info|      Encerrado timer: id:181, (13:17:31.7683)
2015-08-22 13:17:31.7763|Info|      Executando timer: id:182, (13:17:31.7763)
2015-08-22 13:17:31.7763|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:31.7763|Info|  Settimeout: id:183, (16) ms
2015-08-22 13:17:31.8353|Info|  Settimeout: id:184, (13) ms
2015-08-22 13:17:31.8864|Info|      Encerrado timer: id:182, (13:17:31.8864)
2015-08-22 13:17:31.8864|Info|      Executando timer: id:184, (13:17:31.8884)
2015-08-22 13:17:31.8864|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.8964|Info|  Settimeout: id:185, (32) ms
2015-08-22 13:17:31.9515|Info|  Settimeout: id:186, (1) ms
2015-08-22 13:17:32.0035|Info|  Settimeout: id:187, (64) ms
2015-08-22 13:17:32.0555|Info|      Encerrado timer: id:184, (13:17:32.0555)
2015-08-22 13:17:32.0555|Info|      Executando timer: id:185, (13:17:32.0565)
2015-08-22 13:17:32.0555|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:32.0555|Info|      Encerrado timer: id:185, (13:17:32.0595)
2015-08-22 13:17:32.0555|Info|      Executando timer: id:186, (13:17:32.0605)
2015-08-22 13:17:32.0555|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:32.0555|Info|      Encerrado timer: id:186, (13:17:32.0625)
2015-08-22 13:17:32.0705|Info|      Executando timer: id:187, (13:17:32.0705)
2015-08-22 13:17:32.0705|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:32.0705|Info|  Settimeout: id:188, (13) ms
2015-08-22 13:17:32.1236|Info|      Encerrado timer: id:187, (13:17:32.1236)
2015-08-22 13:17:32.1236|Info|      Executando timer: id:188, (13:17:32.1245)
2015-08-22 13:17:32.1236|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.1236|Info|  Settimeout: id:189, (32) ms
2015-08-22 13:17:32.1796|Info|  Settimeout: id:190, (64) ms
2015-08-22 13:17:32.2307|Info|      Encerrado timer: id:188, (13:17:32.2307)
2015-08-22 13:17:32.2456|Info|      Executando timer: id:190, (13:17:32.2456)
2015-08-22 13:17:32.2456|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:32.2456|Info|  Settimeout: id:191, (13) ms
2015-08-22 13:17:32.3047|Info|      Encerrado timer: id:190, (13:17:32.3047)
2015-08-22 13:17:32.3047|Info|      Executando timer: id:191, (13:17:32.3057)
2015-08-22 13:17:32.3047|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.3047|Info|  Settimeout: id:192, (32) ms
2015-08-22 13:17:32.3597|Info|  Settimeout: id:193, (64) ms
2015-08-22 13:17:32.4118|Info|      Encerrado timer: id:191, (13:17:32.4118)
2015-08-22 13:17:32.4118|Info|      Executando timer: id:192, (13:17:32.4137)
2015-08-22 13:17:32.4118|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:32.4118|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:32.4118|Info|      Encerrado timer: id:192, (13:17:32.4207)
2015-08-22 13:17:32.4268|Info|      Executando timer: id:193, (13:17:32.4268)
2015-08-22 13:17:32.4268|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:32.4268|Info|  Settimeout: id:194, (18) ms
2015-08-22 13:17:32.4888|Info|  Settimeout: id:195, (13) ms
2015-08-22 13:17:32.5398|Info|      Encerrado timer: id:193, (13:17:32.5398)
2015-08-22 13:17:32.5398|Info|      Executando timer: id:195, (13:17:32.5408)
2015-08-22 13:17:32.5398|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.5398|Info|  Settimeout: id:196, (32) ms
2015-08-22 13:17:32.5969|Info|  Settimeout: id:197, (1) ms
2015-08-22 13:17:32.6480|Info|  Settimeout: id:198, (64) ms
2015-08-22 13:17:32.7000|Info|      Encerrado timer: id:195, (13:17:32.7000)
2015-08-22 13:17:32.7000|Info|      Executando timer: id:196, (13:17:32.7020)
2015-08-22 13:17:32.7000|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:32.7080|Info|      Encerrado timer: id:196, (13:17:32.7080)
2015-08-22 13:17:32.7080|Info|      Executando timer: id:197, (13:17:32.7100)
2015-08-22 13:17:32.7080|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:32.7080|Info|      Encerrado timer: id:197, (13:17:32.7180)
2015-08-22 13:17:32.7080|Info|      Executando timer: id:198, (13:17:32.7210)
2015-08-22 13:17:32.7080|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:32.7270|Info|  Settimeout: id:199, (13) ms
2015-08-22 13:17:32.7790|Info|      Encerrado timer: id:198, (13:17:32.7790)
2015-08-22 13:17:32.7790|Info|      Executando timer: id:199, (13:17:32.7800)
2015-08-22 13:17:32.7790|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.7790|Info|  Settimeout: id:200, (32) ms
2015-08-22 13:17:32.8340|Info|  Settimeout: id:201, (64) ms
2015-08-22 13:17:32.8851|Info|      Encerrado timer: id:199, (13:17:32.8851)
2015-08-22 13:17:32.8991|Info|      Executando timer: id:201, (13:17:32.8991)
2015-08-22 13:17:32.8991|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:32.8991|Info|  Settimeout: id:202, (13) ms
2015-08-22 13:17:32.9532|Info|      Encerrado timer: id:201, (13:17:32.9532)
2015-08-22 13:17:32.9532|Info|      Executando timer: id:202, (13:17:32.9551)
2015-08-22 13:17:32.9532|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.9612|Info|  Settimeout: id:203, (32) ms
2015-08-22 13:17:33.0132|Info|  Settimeout: id:204, (64) ms
2015-08-22 13:17:33.0653|Info|      Encerrado timer: id:202, (13:17:33.0653)
2015-08-22 13:17:33.0653|Info|      Executando timer: id:203, (13:17:33.0672)
2015-08-22 13:17:33.0692|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:33.0692|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:33.0692|Info|      Encerrado timer: id:203, (13:17:33.0752)
2015-08-22 13:17:33.0692|Info|      Executando timer: id:204, (13:17:33.0803)
2015-08-22 13:17:33.0832|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:33.0832|Info|  Settimeout: id:205, (19) ms
2015-08-22 13:17:33.1423|Info|  Settimeout: id:206, (13) ms
2015-08-22 13:17:33.1933|Info|      Encerrado timer: id:204, (13:17:33.1933)
2015-08-22 13:17:33.1933|Info|      Executando timer: id:206, (13:17:33.1943)
2015-08-22 13:17:33.1933|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.1933|Info|  Settimeout: id:207, (32) ms
2015-08-22 13:17:33.2514|Info|  Settimeout: id:208, (1) ms
2015-08-22 13:17:33.3034|Info|  Settimeout: id:209, (64) ms
2015-08-22 13:17:33.3555|Info|      Encerrado timer: id:206, (13:17:33.3555)
2015-08-22 13:17:33.3555|Info|      Executando timer: id:207, (13:17:33.3564)
2015-08-22 13:17:33.3555|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:33.3555|Info|      Encerrado timer: id:207, (13:17:33.3614)
2015-08-22 13:17:33.3555|Info|      Executando timer: id:208, (13:17:33.3634)
2015-08-22 13:17:33.3654|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:33.3654|Info|      Encerrado timer: id:208, (13:17:33.3684)
2015-08-22 13:17:33.3654|Info|      Executando timer: id:209, (13:17:33.3704)
2015-08-22 13:17:33.3654|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:33.3654|Info|  Settimeout: id:210, (13) ms
2015-08-22 13:17:33.4255|Info|      Encerrado timer: id:209, (13:17:33.4255)
2015-08-22 13:17:33.4255|Info|      Executando timer: id:210, (13:17:33.4265)
2015-08-22 13:17:33.4275|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.4275|Info|  Settimeout: id:211, (32) ms
2015-08-22 13:17:33.4815|Info|  Settimeout: id:212, (64) ms
2015-08-22 13:17:33.5335|Info|      Encerrado timer: id:210, (13:17:33.5335)
2015-08-22 13:17:33.5486|Info|      Executando timer: id:212, (13:17:33.5486)
2015-08-22 13:17:33.5486|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:33.5546|Info|  Settimeout: id:213, (13) ms
2015-08-22 13:17:33.6056|Info|      Encerrado timer: id:212, (13:17:33.6056)
2015-08-22 13:17:33.6056|Info|      Executando timer: id:213, (13:17:33.6066)
2015-08-22 13:17:33.6056|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.6056|Info|  Settimeout: id:214, (32) ms
2015-08-22 13:17:33.6627|Info|  Settimeout: id:215, (64) ms
2015-08-22 13:17:33.7137|Info|      Encerrado timer: id:213, (13:17:33.7137)
2015-08-22 13:17:33.7137|Info|      Executando timer: id:214, (13:17:33.7157)
2015-08-22 13:17:33.7137|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:33.7137|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:33.7137|Info|      Encerrado timer: id:214, (13:17:33.7227)
2015-08-22 13:17:33.7287|Info|      Executando timer: id:215, (13:17:33.7287)
2015-08-22 13:17:33.7287|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:33.7287|Info|  Settimeout: id:216, (17) ms
2015-08-22 13:17:33.7907|Info|  Settimeout: id:217, (13) ms
2015-08-22 13:17:33.8418|Info|      Encerrado timer: id:215, (13:17:33.8418)
2015-08-22 13:17:33.8418|Info|      Executando timer: id:217, (13:17:33.8428)
2015-08-22 13:17:33.8418|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.8418|Info|  Settimeout: id:218, (32) ms
2015-08-22 13:17:33.8968|Info|  Settimeout: id:219, (1) ms
2015-08-22 13:17:33.9479|Info|  Settimeout: id:220, (64) ms
2015-08-22 13:17:33.9989|Info|      Encerrado timer: id:217, (13:17:33.9989)
2015-08-22 13:17:33.9989|Info|      Executando timer: id:218, (13:17:33.9989)
2015-08-22 13:17:33.9989|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:33.9989|Info|      Encerrado timer: id:218, (13:17:34.0009)
2015-08-22 13:17:33.9989|Info|      Executando timer: id:219, (13:17:34.0019)
2015-08-22 13:17:33.9989|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:33.9989|Info|      Encerrado timer: id:219, (13:17:34.0039)
2015-08-22 13:17:34.0139|Info|      Executando timer: id:220, (13:17:34.0139)
2015-08-22 13:17:34.0139|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:34.0139|Info|  Settimeout: id:221, (13) ms
2015-08-22 13:17:34.0680|Info|      Encerrado timer: id:220, (13:17:34.0680)
2015-08-22 13:17:34.0680|Info|      Executando timer: id:221, (13:17:34.0680)
2015-08-22 13:17:34.0680|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.0680|Info|  Settimeout: id:222, (32) ms
2015-08-22 13:17:34.1210|Info|  Settimeout: id:223, (64) ms
2015-08-22 13:17:34.1720|Info|      Encerrado timer: id:221, (13:17:34.1720)
2015-08-22 13:17:34.1871|Info|      Executando timer: id:223, (13:17:34.1871)
2015-08-22 13:17:34.1871|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:34.1871|Info|  Settimeout: id:224, (13) ms
2015-08-22 13:17:34.2411|Info|      Encerrado timer: id:223, (13:17:34.2411)
2015-08-22 13:17:34.2411|Info|      Executando timer: id:224, (13:17:34.2411)
2015-08-22 13:17:34.2411|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.2411|Info|  Settimeout: id:225, (32) ms
2015-08-22 13:17:34.2951|Info|  Settimeout: id:226, (64) ms
2015-08-22 13:17:34.3492|Info|      Encerrado timer: id:224, (13:17:34.3492)
2015-08-22 13:17:34.3492|Info|      Executando timer: id:225, (13:17:34.3511)
2015-08-22 13:17:34.3492|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:34.3492|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:34.3492|Info|      Encerrado timer: id:225, (13:17:34.3581)
2015-08-22 13:17:34.3642|Info|      Executando timer: id:226, (13:17:34.3642)
2015-08-22 13:17:34.3642|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:34.3642|Info|  Settimeout: id:227, (19) ms
2015-08-22 13:17:34.4262|Info|  Settimeout: id:228, (13) ms
2015-08-22 13:17:34.4773|Info|      Encerrado timer: id:226, (13:17:34.4773)
2015-08-22 13:17:34.4773|Info|      Executando timer: id:228, (13:17:34.4773)
2015-08-22 13:17:34.4773|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.4773|Info|  Settimeout: id:229, (32) ms
2015-08-22 13:17:34.5323|Info|  Settimeout: id:230, (1) ms
2015-08-22 13:17:34.5893|Info|  Settimeout: id:231, (64) ms
2015-08-22 13:17:34.6413|Info|      Encerrado timer: id:228, (13:17:34.6413)
2015-08-22 13:17:34.6413|Info|      Executando timer: id:229, (13:17:34.6423)
2015-08-22 13:17:34.6413|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:34.6413|Info|      Encerrado timer: id:229, (13:17:34.6443)
2015-08-22 13:17:34.6413|Info|      Executando timer: id:230, (13:17:34.6443)
2015-08-22 13:17:34.6463|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:34.6463|Info|      Encerrado timer: id:230, (13:17:34.6483)
2015-08-22 13:17:34.6463|Info|      Executando timer: id:231, (13:17:34.6563)
2015-08-22 13:17:34.6463|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:34.6463|Info|  Settimeout: id:232, (13) ms
2015-08-22 13:17:34.7104|Info|      Encerrado timer: id:231, (13:17:34.7104)
2015-08-22 13:17:34.7104|Info|      Executando timer: id:232, (13:17:34.7114)
2015-08-22 13:17:34.7104|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.7104|Info|  Settimeout: id:233, (32) ms
2015-08-22 13:17:34.7684|Info|  Settimeout: id:234, (64) ms
2015-08-22 13:17:34.8195|Info|      Encerrado timer: id:232, (13:17:34.8195)
2015-08-22 13:17:34.8345|Info|      Executando timer: id:234, (13:17:34.8345)
2015-08-22 13:17:34.8345|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:34.8345|Info|  Settimeout: id:235, (13) ms
2015-08-22 13:17:34.8945|Info|      Encerrado timer: id:234, (13:17:34.8945)
2015-08-22 13:17:34.8955|Info|      Executando timer: id:235, (13:17:34.8955)
2015-08-22 13:17:34.8955|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.8955|Info|  Settimeout: id:236, (32) ms
2015-08-22 13:17:34.9506|Info|  Settimeout: id:237, (64) ms
2015-08-22 13:17:35.0106|Info|      Encerrado timer: id:235, (13:17:35.0106)
2015-08-22 13:17:35.0106|Info|      Executando timer: id:236, (13:17:35.0136)
2015-08-22 13:17:35.0106|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:35.0106|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:35.0206|Info|      Encerrado timer: id:236, (13:17:35.0206)
2015-08-22 13:17:35.0206|Info|      Executando timer: id:237, (13:17:35.0257)
2015-08-22 13:17:35.0206|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:35.0206|Info|  Settimeout: id:238, (19) ms
2015-08-22 13:17:35.0866|Info|  Settimeout: id:239, (13) ms
2015-08-22 13:17:35.1397|Info|      Encerrado timer: id:237, (13:17:35.1397)
2015-08-22 13:17:35.1397|Info|      Executando timer: id:239, (13:17:35.1407)
2015-08-22 13:17:35.1397|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.1457|Info|  Settimeout: id:240, (32) ms
2015-08-22 13:17:35.1978|Info|  Settimeout: id:241, (1) ms
2015-08-22 13:17:35.2508|Info|  Settimeout: id:242, (64) ms
2015-08-22 13:17:35.3028|Info|      Encerrado timer: id:239, (13:17:35.3028)
2015-08-22 13:17:35.3028|Info|      Executando timer: id:240, (13:17:35.3048)
2015-08-22 13:17:35.3028|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:35.3028|Info|      Encerrado timer: id:240, (13:17:35.3108)
2015-08-22 13:17:35.3028|Info|      Executando timer: id:241, (13:17:35.3118)
2015-08-22 13:17:35.3028|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:35.3238|Info|      Encerrado timer: id:241, (13:17:35.3238)
2015-08-22 13:17:35.3238|Info|      Executando timer: id:242, (13:17:35.3268)
2015-08-22 13:17:35.3238|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:35.3238|Info|  Settimeout: id:243, (13) ms
2015-08-22 13:17:35.3819|Info|      Encerrado timer: id:242, (13:17:35.3819)
2015-08-22 13:17:35.3819|Info|      Executando timer: id:243, (13:17:35.3829)
2015-08-22 13:17:35.3819|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.3819|Info|  Settimeout: id:244, (32) ms
2015-08-22 13:17:35.4379|Info|  Settimeout: id:245, (64) ms
2015-08-22 13:17:35.4920|Info|      Encerrado timer: id:243, (13:17:35.4920)
2015-08-22 13:17:35.5070|Info|      Executando timer: id:245, (13:17:35.5070)
2015-08-22 13:17:35.5070|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:35.5070|Info|  Settimeout: id:246, (13) ms
2015-08-22 13:17:35.5670|Info|      Encerrado timer: id:245, (13:17:35.5670)
2015-08-22 13:17:35.5680|Info|      Executando timer: id:246, (13:17:35.5680)
2015-08-22 13:17:35.5680|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.5680|Info|  Settimeout: id:247, (32) ms
2015-08-22 13:17:35.6231|Info|  Settimeout: id:248, (64) ms
2015-08-22 13:17:35.6741|Info|      Encerrado timer: id:246, (13:17:35.6741)
2015-08-22 13:17:35.6741|Info|      Executando timer: id:247, (13:17:35.6751)
2015-08-22 13:17:35.6781|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:35.6781|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:35.6781|Info|      Encerrado timer: id:247, (13:17:35.6801)
2015-08-22 13:17:35.6781|Info|      Executando timer: id:248, (13:17:35.6891)
2015-08-22 13:17:35.6781|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:35.6961|Info|  Settimeout: id:249, (17) ms
2015-08-22 13:17:35.7501|Info|  Settimeout: id:250, (13) ms
2015-08-22 13:17:35.8012|Info|      Encerrado timer: id:248, (13:17:35.8012)
2015-08-22 13:17:35.8031|Info|      Executando timer: id:250, (13:17:35.8031)
2015-08-22 13:17:35.8031|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.8031|Info|  Settimeout: id:251, (32) ms
2015-08-22 13:17:35.8622|Info|  Settimeout: id:252, (1) ms
2015-08-22 13:17:35.9143|Info|  Settimeout: id:253, (64) ms
2015-08-22 13:17:35.9653|Info|      Encerrado timer: id:250, (13:17:35.9653)
2015-08-22 13:17:35.9653|Info|      Executando timer: id:251, (13:17:35.9673)
2015-08-22 13:17:35.9653|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:35.9653|Info|      Encerrado timer: id:251, (13:17:35.9723)
2015-08-22 13:17:35.9653|Info|      Executando timer: id:252, (13:17:35.9733)
2015-08-22 13:17:35.9763|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:35.9763|Info|      Encerrado timer: id:252, (13:17:35.9813)
2015-08-22 13:17:35.9763|Info|      Executando timer: id:253, (13:17:35.9843)
2015-08-22 13:17:35.9763|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:35.9893|Info|  Settimeout: id:254, (13) ms
2015-08-22 13:17:36.0403|Info|      Encerrado timer: id:253, (13:17:36.0403)
2015-08-22 13:17:36.0403|Info|      Executando timer: id:254, (13:17:36.0433)
2015-08-22 13:17:36.0403|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:36.0403|Info|----------------------------------------
2015-08-22 13:17:36.0403|Info|lodash.delay
2015-08-22 13:17:36.0403|Info|----------------------------------------
2015-08-22 13:17:36.0533|Info| FAIL - should delay `func` execution
2015-08-22 13:17:36.0533|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 13:17:36.0533|Info|  Settimeout: id:255, (32) ms
2015-08-22 13:17:36.1114|Info|  Settimeout: id:256, (64) ms
2015-08-22 13:17:36.1624|Info|      Encerrado timer: id:254, (13:17:36.1624)
2015-08-22 13:17:36.1774|Info|      Executando timer: id:256, (13:17:36.1774)
2015-08-22 13:17:36.1774|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:36.1774|Info|  Settimeout: id:257, (13) ms
2015-08-22 13:17:36.2315|Info|      Encerrado timer: id:256, (13:17:36.2315)
2015-08-22 13:17:36.2315|Info|      Executando timer: id:257, (13:17:36.2325)
2015-08-22 13:17:36.2315|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:36.2315|Info|----------------------------------------
2015-08-22 13:17:36.2405|Info|lodash.throttle
2015-08-22 13:17:36.2405|Info|----------------------------------------
2015-08-22 13:17:36.2405|Info| FAIL - should throttle a function
2015-08-22 13:17:36.2405|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 13:17:36.2405|Info|  Settimeout: id:258, (32) ms
2015-08-22 13:17:36.3025|Info|  Settimeout: id:259, (64) ms
2015-08-22 13:17:36.3586|Info|      Encerrado timer: id:257, (13:17:36.3586)
2015-08-22 13:17:36.3586|Info|      Executando timer: id:258, (13:17:36.3595)
2015-08-22 13:17:36.3586|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:36.3646|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:36.3646|Info|      Encerrado timer: id:258, (13:17:36.3665)
2015-08-22 13:17:36.3646|Info|      Executando timer: id:259, (13:17:36.3736)
2015-08-22 13:17:36.3646|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:36.3646|Info|  Settimeout: id:260, (18) ms
2015-08-22 13:17:36.4336|Info|  Settimeout: id:261, (13) ms
2015-08-22 13:17:36.4856|Info|      Encerrado timer: id:259, (13:17:36.4856)
2015-08-22 13:17:36.4856|Info|      Executando timer: id:261, (13:17:36.4876)
2015-08-22 13:17:36.4917|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:36.4917|Info| FAIL - subsequent calls should return the result of the first call
2015-08-22 13:17:36.4917|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 13:17:36.4917|Info|    FAIL | EQ | ok | Expected: y, Actual: y
2015-08-22 13:17:36.4917|Info|----------------------------------------
2015-08-22 13:17:36.5057|Info|    PASS: 4447  FAIL: 4  TOTAL: 4451
2015-08-22 13:17:36.5057|Info|    Finished in 18433 milliseconds.
2015-08-22 13:17:36.5057|Info|----------------------------------------
2015-08-22 13:17:36.5437|Info|      Encerrado timer: id:261, (13:17:36.5437)
2015-08-22 13:17:36.5437|Info|Encerrando os testes
2015-08-22 13:17:36.5437|Info|Total:4451, Sucesso: 4447, Falha: 4
2015-08-22 13:17:36.5437|Info|19 segundos para avaliar o individuo lodash.js
2015-08-22 13:17:36.5437|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [113]:1:24
2015-08-22 13:17:36.5437|Info|FAILED: lodash.isNil: should work with nulls from another realm: Expected 2 assertions, but 1 were run, ,     at Script Document [12]:7765:5
    at Script Document [12]:7774:4
    at Script Document [12]:17424:3
2015-08-22 13:17:36.5437|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [135]:1:24
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [141]:1:24
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [265]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [271]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [277]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [283]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [289]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [295]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [301]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [307]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [313]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [319]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [325]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [331]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [337]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [343]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [349]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [355]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [361]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [367]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [373]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [379]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [385]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [391]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [397]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [403]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [409]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [415]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [421]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [427]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [433]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [439]:1:25
2015-08-22 13:20:32.2253|Info|Iniciando os testes
2015-08-22 13:20:32.5535|Info|  Settimeout: id:0, (13) ms
2015-08-22 13:20:32.5716|Info|      Executando timer: id:0, (13:20:32.5716)
2015-08-22 13:20:32.6246|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:20:33.6293|Info|  Settimeout: id:1, (13) ms
2015-08-22 13:20:33.6794|Info|      Encerrado timer: id:0, (13:20:33.6794)
2015-08-22 13:20:33.6794|Info|      Executando timer: id:1, (13:20:33.6863)
2015-08-22 13:20:33.6943|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 13:20:34.6961|Info|  Settimeout: id:2, (13) ms
2015-08-22 13:20:34.7471|Info|      Encerrado timer: id:1, (13:20:34.7471)
2015-08-22 13:20:34.7471|Info|      Executando timer: id:2, (13:20:34.7471)
2015-08-22 13:20:34.7471|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 13:20:34.9562|Info|      Encerrado timer: id:2, (13:20:34.9562)
2015-08-22 13:20:34.9562|Info|Encerrando os testes
2015-08-22 13:20:34.9583|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-22 13:20:34.9583|Info|3 segundos para avaliar o individuo global.js
2015-08-22 13:20:38.6329|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:20:39.1582|Info|      Executando timer: id:0, (13:20:39.1582)
2015-08-22 13:20:39.2833|Info|Iniciando os testes
2015-08-22 13:20:39.3013|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:20:39.3053|Info|  Settimeout: id:1, (13) ms
2015-08-22 13:20:54.9431|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:20:55.4675|Info|      Executando timer: id:0, (13:20:55.4675)
2015-08-22 13:20:55.5355|Info|Iniciando os testes
2015-08-22 13:20:55.5536|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:20:55.5536|Info|  Settimeout: id:1, (13) ms
2015-08-22 13:22:01.8119|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:22:02.3373|Info|      Executando timer: id:0, (13:22:02.3373)
2015-08-22 13:22:02.4364|Info|Iniciando os testes
2015-08-22 13:22:02.4554|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:22:02.4594|Info|  Settimeout: id:1, (500) ms
2015-08-22 13:22:02.5105|Info|      Encerrado timer: id:0, (13:22:02.5105)
2015-08-22 13:22:02.5105|Info|  Settimeout: id:2, (13) ms
2015-08-22 13:22:02.5255|Info|      Executando timer: id:2, (13:22:02.5255)
2015-08-22 13:22:02.5615|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:02.5845|Info|  Settimeout: id:3, (13) ms
2015-08-22 13:22:02.6365|Info|      Encerrado timer: id:2, (13:22:02.6365)
2015-08-22 13:22:02.6365|Info|      Executando timer: id:3, (13:22:02.6425)
2015-08-22 13:22:02.6455|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:02.7406|Info|  Settimeout: id:4, (32) ms
2015-08-22 13:22:02.7916|Info|  Settimeout: id:5, (96) ms
2015-08-22 13:22:02.8427|Info|      Encerrado timer: id:3, (13:22:02.8427)
2015-08-22 13:22:02.8427|Info|      Executando timer: id:4, (13:22:02.8446)
2015-08-22 13:22:02.8597|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:02.8597|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:02.8657|Info|      Encerrado timer: id:4, (13:22:02.8657)
2015-08-22 13:22:02.8897|Info|      Executando timer: id:5, (13:22:02.8897)
2015-08-22 13:22:02.8897|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:22:02.8897|Info|  Settimeout: id:6, (13) ms
2015-08-22 13:22:02.9438|Info|      Encerrado timer: id:5, (13:22:02.9438)
2015-08-22 13:22:02.9438|Info|      Executando timer: id:6, (13:22:02.9477)
2015-08-22 13:22:02.9438|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:02.9438|Info|  Settimeout: id:7, (32) ms
2015-08-22 13:22:03.0018|Info|  Settimeout: id:8, (64) ms
2015-08-22 13:22:03.0539|Info|  Settimeout: id:9, (128) ms
2015-08-22 13:22:03.1058|Info|      Encerrado timer: id:6, (13:22:03.1058)
2015-08-22 13:22:03.1058|Info|      Executando timer: id:1, (13:22:03.1068)
2015-08-22 13:22:03.1058|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 13:22:03.1058|Info|      Encerrado timer: id:1, (13:22:03.1108)
2015-08-22 13:22:03.1058|Info|      Executando timer: id:7, (13:22:03.1118)
2015-08-22 13:22:03.1058|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.1168|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.1168|Info|      Encerrado timer: id:7, (13:22:03.1178)
2015-08-22 13:22:03.1168|Info|      Executando timer: id:8, (13:22:03.1188)
2015-08-22 13:22:03.1168|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-22 13:22:03.1168|Info|  Settimeout: id:10, (32) ms
2015-08-22 13:22:03.1739|Info|      Encerrado timer: id:8, (13:22:03.1739)
2015-08-22 13:22:03.1739|Info|      Executando timer: id:10, (13:22:03.1749)
2015-08-22 13:22:03.1779|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.1779|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.1779|Info|      Encerrado timer: id:10, (13:22:03.1819)
2015-08-22 13:22:03.1779|Info|      Executando timer: id:9, (13:22:03.1849)
2015-08-22 13:22:03.1779|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-22 13:22:03.1779|Info|  Settimeout: id:11, (32) ms
2015-08-22 13:22:03.2409|Info|  Settimeout: id:12, (13) ms
2015-08-22 13:22:03.2920|Info|      Encerrado timer: id:9, (13:22:03.2920)
2015-08-22 13:22:03.2920|Info|      Executando timer: id:11, (13:22:03.2930)
2015-08-22 13:22:03.2920|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.2920|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.2920|Info|      Encerrado timer: id:11, (13:22:03.2980)
2015-08-22 13:22:03.2920|Info|      Executando timer: id:12, (13:22:03.2990)
2015-08-22 13:22:03.2920|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:03.3050|Info|  Settimeout: id:13, (32) ms
2015-08-22 13:22:03.3570|Info|  Settimeout: id:14, (64) ms
2015-08-22 13:22:03.4081|Info|      Encerrado timer: id:12, (13:22:03.4081)
2015-08-22 13:22:03.4081|Info|      Executando timer: id:13, (13:22:03.4090)
2015-08-22 13:22:03.4111|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.4111|Info|      Encerrado timer: id:13, (13:22:03.4120)
2015-08-22 13:22:03.4111|Info|      Executando timer: id:14, (13:22:03.4231)
2015-08-22 13:22:03.4111|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-22 13:22:03.4271|Info|  Settimeout: id:15, (32) ms
2015-08-22 13:22:03.4791|Info|  Settimeout: id:16, (13) ms
2015-08-22 13:22:03.5302|Info|      Encerrado timer: id:14, (13:22:03.5302)
2015-08-22 13:22:03.5302|Info|      Executando timer: id:15, (13:22:03.5321)
2015-08-22 13:22:03.5302|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.5362|Info|      Encerrado timer: id:15, (13:22:03.5362)
2015-08-22 13:22:03.5362|Info|      Executando timer: id:16, (13:22:03.5382)
2015-08-22 13:22:03.5362|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:03.5362|Info|  Settimeout: id:17, (32) ms
2015-08-22 13:22:03.5982|Info|  Settimeout: id:18, (64) ms
2015-08-22 13:22:03.6503|Info|      Encerrado timer: id:16, (13:22:03.6503)
2015-08-22 13:22:03.6503|Info|      Executando timer: id:17, (13:22:03.6522)
2015-08-22 13:22:03.6503|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.6503|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.6503|Info|      Encerrado timer: id:17, (13:22:03.6602)
2015-08-22 13:22:03.6653|Info|      Executando timer: id:18, (13:22:03.6653)
2015-08-22 13:22:03.6653|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:22:03.6653|Info|  Settimeout: id:19, (13) ms
2015-08-22 13:22:03.7253|Info|      Encerrado timer: id:18, (13:22:03.7253)
2015-08-22 13:22:03.7253|Info|      Executando timer: id:19, (13:22:03.7263)
2015-08-22 13:22:03.7253|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:03.7253|Info|  Settimeout: id:20, (32) ms
2015-08-22 13:22:03.7873|Info|  Settimeout: id:21, (32) ms
2015-08-22 13:22:03.8393|Info|  Settimeout: id:22, (32) ms
2015-08-22 13:22:03.8914|Info|  Settimeout: id:23, (64) ms
2015-08-22 13:22:03.9434|Info|      Encerrado timer: id:19, (13:22:03.9434)
2015-08-22 13:22:03.9434|Info|      Executando timer: id:20, (13:22:03.9454)
2015-08-22 13:22:03.9434|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.9434|Info|      Encerrado timer: id:20, (13:22:03.9504)
2015-08-22 13:22:03.9434|Info|      Executando timer: id:21, (13:22:03.9514)
2015-08-22 13:22:03.9434|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.9434|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.9434|Info|      Encerrado timer: id:21, (13:22:03.9564)
2015-08-22 13:22:03.9434|Info|      Executando timer: id:22, (13:22:03.9574)
2015-08-22 13:22:03.9604|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.9604|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.9604|Info|      Encerrado timer: id:22, (13:22:03.9634)
2015-08-22 13:22:03.9604|Info|      Executando timer: id:23, (13:22:03.9644)
2015-08-22 13:22:03.9604|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-22 13:22:03.9754|Info|  Settimeout: id:24, (32) ms
2015-08-22 13:22:04.0265|Info|  Settimeout: id:25, (13) ms
2015-08-22 13:22:04.0776|Info|      Encerrado timer: id:23, (13:22:04.0776)
2015-08-22 13:22:04.0776|Info|      Executando timer: id:24, (13:22:04.0776)
2015-08-22 13:22:04.0776|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.0776|Info|      Encerrado timer: id:24, (13:22:04.0795)
2015-08-22 13:22:04.0776|Info|      Executando timer: id:25, (13:22:04.0805)
2015-08-22 13:22:04.0776|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:04.0776|Info|  Settimeout: id:26, (32) ms
2015-08-22 13:22:04.1336|Info|  Settimeout: id:27, (32) ms
2015-08-22 13:22:04.1876|Info|  Settimeout: id:28, (64) ms
2015-08-22 13:22:04.2387|Info|      Encerrado timer: id:25, (13:22:04.2387)
2015-08-22 13:22:04.2397|Info|      Executando timer: id:26, (13:22:04.2397)
2015-08-22 13:22:04.2397|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.2397|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:04.2397|Info|      Encerrado timer: id:26, (13:22:04.2437)
2015-08-22 13:22:04.2397|Info|      Executando timer: id:27, (13:22:04.2447)
2015-08-22 13:22:04.2397|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.2397|Info|      Encerrado timer: id:27, (13:22:04.2476)
2015-08-22 13:22:04.2397|Info|      Executando timer: id:28, (13:22:04.2537)
2015-08-22 13:22:04.2556|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-22 13:22:04.2556|Info|  Settimeout: id:29, (13) ms
2015-08-22 13:22:04.3097|Info|      Encerrado timer: id:28, (13:22:04.3097)
2015-08-22 13:22:04.3097|Info|      Executando timer: id:29, (13:22:04.3107)
2015-08-22 13:22:04.3097|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:04.3097|Info|  Settimeout: id:30, (128) ms
2015-08-22 13:22:04.3667|Info|  Settimeout: id:31, (64) ms
2015-08-22 13:22:04.4198|Info|  Settimeout: id:32, (96) ms
2015-08-22 13:22:04.4738|Info|  Settimeout: id:33, (128) ms
2015-08-22 13:22:04.5249|Info|  Settimeout: id:34, (64) ms
2015-08-22 13:22:04.6019|Info|  Settimeout: id:35, (128) ms
2015-08-22 13:22:04.6530|Info|  Settimeout: id:36, (64) ms
2015-08-22 13:22:04.7050|Info|  Settimeout: id:37, (1) ms
2015-08-22 13:22:04.7570|Info|      Encerrado timer: id:29, (13:22:04.7570)
2015-08-22 13:22:04.7570|Info|      Executando timer: id:32, (13:22:04.7580)
2015-08-22 13:22:04.7570|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.7570|Info|  Settimeout: id:38, (40) ms
2015-08-22 13:22:04.8131|Info|      Encerrado timer: id:32, (13:22:04.8131)
2015-08-22 13:22:04.8131|Info|      Executando timer: id:37, (13:22:04.8140)
2015-08-22 13:22:04.8131|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-22 13:22:04.8131|Info|  Settimeout: id:39, (13) ms
2015-08-22 13:22:04.8671|Info|      Encerrado timer: id:37, (13:22:04.8671)
2015-08-22 13:22:04.8671|Info|      Executando timer: id:36, (13:22:04.8681)
2015-08-22 13:22:04.8671|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.8671|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:04.8671|Info|      Encerrado timer: id:36, (13:22:04.8701)
2015-08-22 13:22:04.8671|Info|      Executando timer: id:38, (13:22:04.8711)
2015-08-22 13:22:04.8671|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.8671|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:04.8671|Info|      Encerrado timer: id:38, (13:22:04.8731)
2015-08-22 13:22:04.8671|Info|      Executando timer: id:39, (13:22:04.8741)
2015-08-22 13:22:04.8671|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:04.8671|Info|  Settimeout: id:40, (64) ms
2015-08-22 13:22:04.9272|Info|  Settimeout: id:41, (32) ms
2015-08-22 13:22:04.9802|Info|  Settimeout: id:42, (128) ms
2015-08-22 13:22:05.0322|Info|      Encerrado timer: id:39, (13:22:05.0322)
2015-08-22 13:22:05.0322|Info|      Executando timer: id:40, (13:22:05.0342)
2015-08-22 13:22:05.0372|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:22:05.0372|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:05.0372|Info|      Encerrado timer: id:40, (13:22:05.0442)
2015-08-22 13:22:05.1113|Info|      Executando timer: id:42, (13:22:05.1113)
2015-08-22 13:22:05.1113|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:22:05.1143|Info|  Settimeout: id:43, (13) ms
2015-08-22 13:22:05.1653|Info|      Encerrado timer: id:42, (13:22:05.1653)
2015-08-22 13:22:05.1653|Info|      Executando timer: id:43, (13:22:05.1673)
2015-08-22 13:22:05.1653|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.1653|Info|  Settimeout: id:44, (32) ms
2015-08-22 13:22:05.2274|Info|  Settimeout: id:45, (11) ms
2015-08-22 13:22:05.2814|Info|  Settimeout: id:46, (64) ms
2015-08-22 13:22:05.3334|Info|      Encerrado timer: id:43, (13:22:05.3334)
2015-08-22 13:22:05.3334|Info|      Executando timer: id:46, (13:22:05.3484)
2015-08-22 13:22:05.3515|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-22 13:22:05.3515|Info|  Settimeout: id:47, (13) ms
2015-08-22 13:22:05.4065|Info|      Encerrado timer: id:46, (13:22:05.4065)
2015-08-22 13:22:05.4065|Info|      Executando timer: id:47, (13:22:05.4085)
2015-08-22 13:22:05.4065|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.4275|Info|  Settimeout: id:48, (1) ms
2015-08-22 13:22:05.4805|Info|  Settimeout: id:49, (32) ms
2015-08-22 13:22:05.5326|Info|      Encerrado timer: id:47, (13:22:05.5326)
2015-08-22 13:22:05.5326|Info|      Executando timer: id:48, (13:22:05.5336)
2015-08-22 13:22:05.5326|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:22:05.5366|Info|      Encerrado timer: id:48, (13:22:05.5366)
2015-08-22 13:22:05.5366|Info|      Executando timer: id:49, (13:22:05.5376)
2015-08-22 13:22:05.5366|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:22:05.5366|Info|  Settimeout: id:50, (13) ms
2015-08-22 13:22:05.5926|Info|      Encerrado timer: id:49, (13:22:05.5926)
2015-08-22 13:22:05.5926|Info|      Executando timer: id:50, (13:22:05.5936)
2015-08-22 13:22:05.5926|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.5926|Info|  Settimeout: id:51, (1) ms
2015-08-22 13:22:05.6487|Info|  Settimeout: id:52, (32) ms
2015-08-22 13:22:05.6997|Info|      Encerrado timer: id:50, (13:22:05.6997)
2015-08-22 13:22:05.6997|Info|      Executando timer: id:51, (13:22:05.7037)
2015-08-22 13:22:05.6997|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:22:05.6997|Info|      Encerrado timer: id:51, (13:22:05.7077)
2015-08-22 13:22:05.7087|Info|      Executando timer: id:52, (13:22:05.7087)
2015-08-22 13:22:05.7087|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 13:22:05.7087|Info|  Settimeout: id:53, (13) ms
2015-08-22 13:22:05.7647|Info|      Encerrado timer: id:52, (13:22:05.7647)
2015-08-22 13:22:05.7647|Info|      Executando timer: id:53, (13:22:05.7657)
2015-08-22 13:22:05.7647|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.7747|Info|  Settimeout: id:54, (1) ms
2015-08-22 13:22:05.8278|Info|  Settimeout: id:55, (32) ms
2015-08-22 13:22:05.8789|Info|      Encerrado timer: id:53, (13:22:05.8789)
2015-08-22 13:22:05.8808|Info|      Executando timer: id:55, (13:22:05.8808)
2015-08-22 13:22:05.8808|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:22:05.8808|Info|  Settimeout: id:56, (13) ms
2015-08-22 13:22:05.9388|Info|      Encerrado timer: id:55, (13:22:05.9388)
2015-08-22 13:22:05.9388|Info|      Executando timer: id:56, (13:22:05.9388)
2015-08-22 13:22:05.9388|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.9388|Info|  Settimeout: id:57, (32) ms
2015-08-22 13:22:05.9929|Info|  Settimeout: id:58, (1) ms
2015-08-22 13:22:06.0439|Info|  Settimeout: id:59, (64) ms
2015-08-22 13:22:06.0949|Info|      Encerrado timer: id:56, (13:22:06.0949)
2015-08-22 13:22:06.0949|Info|      Executando timer: id:57, (13:22:06.0949)
2015-08-22 13:22:06.0949|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:22:06.0949|Info|      Encerrado timer: id:57, (13:22:06.0970)
2015-08-22 13:22:06.0949|Info|      Executando timer: id:58, (13:22:06.0970)
2015-08-22 13:22:06.0990|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:22:06.0990|Info|      Encerrado timer: id:58, (13:22:06.1020)
2015-08-22 15:15:44.2208|Info|Iniciando os testes
2015-08-22 15:15:46.4804|Info|Encerrando os testes
2015-08-22 15:15:46.4804|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-22 15:15:46.4804|Info|2 segundos para avaliar o individuo global.js
2015-08-22 15:15:51.4689|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:15:51.9953|Info|      Executando timer: id:0, (15:15:51.9953)
2015-08-22 15:15:52.1184|Info|Iniciando os testes
2015-08-22 15:15:52.1374|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 15:15:52.1374|Info|  Settimeout: id:1, (500) ms
2015-08-22 15:15:52.1934|Info|      Encerrado timer: id:0, (15:15:52.1934)
2015-08-22 15:15:52.1934|Info|  Settimeout: id:2, (13) ms
2015-08-22 15:15:52.2084|Info|      Executando timer: id:2, (15:15:52.2084)
2015-08-22 15:15:52.2445|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.2815|Info|  Settimeout: id:3, (13) ms
2015-08-22 15:15:52.3336|Info|      Encerrado timer: id:2, (15:15:52.3336)
2015-08-22 15:15:52.3336|Info|      Executando timer: id:3, (15:15:52.3365)
2015-08-22 15:15:52.3336|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.4196|Info|  Settimeout: id:4, (32) ms
2015-08-22 15:15:52.4707|Info|  Settimeout: id:5, (96) ms
2015-08-22 15:15:52.5217|Info|      Encerrado timer: id:3, (15:15:52.5217)
2015-08-22 15:15:52.5217|Info|      Executando timer: id:4, (15:15:52.5217)
2015-08-22 15:15:52.5217|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.5217|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.5217|Info|      Encerrado timer: id:4, (15:15:52.5286)
2015-08-22 15:15:52.5687|Info|      Executando timer: id:5, (15:15:52.5687)
2015-08-22 15:15:52.5687|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:52.5687|Info|  Settimeout: id:6, (13) ms
2015-08-22 15:15:52.6208|Info|      Encerrado timer: id:5, (15:15:52.6208)
2015-08-22 15:15:52.6208|Info|      Executando timer: id:6, (15:15:52.6217)
2015-08-22 15:15:52.6208|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.6208|Info|  Settimeout: id:7, (32) ms
2015-08-22 15:15:52.6788|Info|  Settimeout: id:8, (64) ms
2015-08-22 15:15:52.7308|Info|  Settimeout: id:9, (128) ms
2015-08-22 15:15:52.7829|Info|      Encerrado timer: id:6, (15:15:52.7829)
2015-08-22 15:15:52.7829|Info|      Executando timer: id:1, (15:15:52.7849)
2015-08-22 15:15:52.7869|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 15:15:52.7869|Info|      Encerrado timer: id:1, (15:15:52.7898)
2015-08-22 15:15:52.7869|Info|      Executando timer: id:7, (15:15:52.7918)
2015-08-22 15:15:52.7869|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.7869|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.7869|Info|      Encerrado timer: id:7, (15:15:52.7998)
2015-08-22 15:15:52.7869|Info|      Executando timer: id:8, (15:15:52.8008)
2015-08-22 15:15:52.8038|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-22 15:15:52.8038|Info|  Settimeout: id:10, (32) ms
2015-08-22 15:15:52.8599|Info|      Encerrado timer: id:8, (15:15:52.8599)
2015-08-22 15:15:52.8599|Info|      Executando timer: id:10, (15:15:52.8619)
2015-08-22 15:15:52.8649|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.8649|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.8649|Info|      Encerrado timer: id:10, (15:15:52.8709)
2015-08-22 15:15:52.8649|Info|      Executando timer: id:9, (15:15:52.8719)
2015-08-22 15:15:52.8649|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-22 15:15:52.8809|Info|  Settimeout: id:11, (32) ms
2015-08-22 15:15:52.9330|Info|  Settimeout: id:12, (13) ms
2015-08-22 15:15:52.9840|Info|      Encerrado timer: id:9, (15:15:52.9840)
2015-08-22 15:15:52.9840|Info|      Executando timer: id:11, (15:15:52.9840)
2015-08-22 15:15:52.9840|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.9840|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.9840|Info|      Encerrado timer: id:11, (15:15:52.9870)
2015-08-22 15:15:52.9840|Info|      Executando timer: id:12, (15:15:52.9880)
2015-08-22 15:15:52.9840|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.9900|Info|  Settimeout: id:13, (32) ms
2015-08-22 15:15:53.0410|Info|  Settimeout: id:14, (64) ms
2015-08-22 15:15:53.0921|Info|      Encerrado timer: id:12, (15:15:53.0921)
2015-08-22 15:15:53.0921|Info|      Executando timer: id:13, (15:15:53.0921)
2015-08-22 15:15:53.0921|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.0921|Info|      Encerrado timer: id:13, (15:15:53.0941)
2015-08-22 15:15:53.1071|Info|      Executando timer: id:14, (15:15:53.1071)
2015-08-22 15:15:53.1071|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-22 15:15:53.1071|Info|  Settimeout: id:15, (32) ms
2015-08-22 15:15:53.1601|Info|  Settimeout: id:16, (13) ms
2015-08-22 15:15:53.2111|Info|      Encerrado timer: id:14, (15:15:53.2111)
2015-08-22 15:15:53.2111|Info|      Executando timer: id:15, (15:15:53.2111)
2015-08-22 15:15:53.2111|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.2111|Info|      Encerrado timer: id:15, (15:15:53.2131)
2015-08-22 15:15:53.2111|Info|      Executando timer: id:16, (15:15:53.2141)
2015-08-22 15:15:53.2111|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.2111|Info|  Settimeout: id:17, (32) ms
2015-08-22 15:15:53.2672|Info|  Settimeout: id:18, (64) ms
2015-08-22 15:15:53.3183|Info|      Encerrado timer: id:16, (15:15:53.3183)
2015-08-22 15:15:53.3183|Info|      Executando timer: id:17, (15:15:53.3192)
2015-08-22 15:15:53.3183|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.3183|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.3183|Info|      Encerrado timer: id:17, (15:15:53.3222)
2015-08-22 15:15:53.3333|Info|      Executando timer: id:18, (15:15:53.3333)
2015-08-22 15:15:53.3333|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:53.3333|Info|  Settimeout: id:19, (13) ms
2015-08-22 15:15:53.3863|Info|      Encerrado timer: id:18, (15:15:53.3863)
2015-08-22 15:15:53.3863|Info|      Executando timer: id:19, (15:15:53.3863)
2015-08-22 15:15:53.3863|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.3863|Info|  Settimeout: id:20, (32) ms
2015-08-22 15:15:53.4413|Info|  Settimeout: id:21, (32) ms
2015-08-22 15:15:53.4933|Info|  Settimeout: id:22, (32) ms
2015-08-22 15:15:53.5464|Info|  Settimeout: id:23, (64) ms
2015-08-22 15:15:53.5984|Info|      Encerrado timer: id:19, (15:15:53.5984)
2015-08-22 15:15:53.5994|Info|      Executando timer: id:20, (15:15:53.5994)
2015-08-22 15:15:53.5994|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.5994|Info|      Encerrado timer: id:20, (15:15:53.6124)
2015-08-22 15:15:53.5994|Info|      Executando timer: id:21, (15:15:53.6134)
2015-08-22 15:15:53.6154|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.6154|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.6154|Info|      Encerrado timer: id:21, (15:15:53.6174)
2015-08-22 15:15:53.6154|Info|      Executando timer: id:22, (15:15:53.6184)
2015-08-22 15:15:53.6154|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.6154|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.6154|Info|      Encerrado timer: id:22, (15:15:53.6214)
2015-08-22 15:15:53.6154|Info|      Executando timer: id:23, (15:15:53.6224)
2015-08-22 15:15:53.6154|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-22 15:15:53.6304|Info|  Settimeout: id:24, (32) ms
2015-08-22 15:15:53.6815|Info|  Settimeout: id:25, (13) ms
2015-08-22 15:15:53.7326|Info|      Encerrado timer: id:23, (15:15:53.7326)
2015-08-22 15:15:53.7326|Info|      Executando timer: id:24, (15:15:53.7345)
2015-08-22 15:15:53.7326|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.7326|Info|      Encerrado timer: id:24, (15:15:53.7385)
2015-08-22 15:15:53.7405|Info|      Executando timer: id:25, (15:15:53.7405)
2015-08-22 15:15:53.7405|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.7405|Info|  Settimeout: id:26, (32) ms
2015-08-22 15:15:53.8016|Info|  Settimeout: id:27, (32) ms
2015-08-22 15:15:53.8546|Info|  Settimeout: id:28, (64) ms
2015-08-22 15:15:53.9067|Info|      Encerrado timer: id:25, (15:15:53.9067)
2015-08-22 15:15:53.9067|Info|      Executando timer: id:26, (15:15:53.9076)
2015-08-22 15:15:53.9116|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.9116|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.9116|Info|      Encerrado timer: id:26, (15:15:53.9176)
2015-08-22 15:15:53.9116|Info|      Executando timer: id:27, (15:15:53.9196)
2015-08-22 15:15:53.9116|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.9116|Info|      Encerrado timer: id:27, (15:15:53.9246)
2015-08-22 15:15:53.9266|Info|      Executando timer: id:28, (15:15:53.9266)
2015-08-22 15:15:53.9266|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-22 15:15:53.9266|Info|  Settimeout: id:29, (13) ms
2015-08-22 15:15:53.9867|Info|      Encerrado timer: id:28, (15:15:53.9867)
2015-08-22 15:15:53.9867|Info|      Executando timer: id:29, (15:15:53.9877)
2015-08-22 15:15:53.9897|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.9897|Info|  Settimeout: id:30, (128) ms
2015-08-22 15:15:54.0427|Info|  Settimeout: id:31, (64) ms
2015-08-22 15:15:54.0938|Info|  Settimeout: id:32, (96) ms
2015-08-22 15:15:54.1478|Info|  Settimeout: id:33, (128) ms
2015-08-22 15:15:54.1999|Info|  Settimeout: id:34, (64) ms
2015-08-22 15:15:54.2779|Info|  Settimeout: id:35, (128) ms
2015-08-22 15:15:54.3290|Info|  Settimeout: id:36, (64) ms
2015-08-22 15:15:54.3820|Info|  Settimeout: id:37, (1) ms
2015-08-22 15:15:54.4340|Info|      Encerrado timer: id:29, (15:15:54.4340)
2015-08-22 15:15:54.4340|Info|      Executando timer: id:32, (15:15:54.4360)
2015-08-22 15:15:54.4340|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:54.4440|Info|  Settimeout: id:38, (36) ms
2015-08-22 15:15:54.4961|Info|      Encerrado timer: id:32, (15:15:54.4961)
2015-08-22 15:15:54.4961|Info|      Executando timer: id:37, (15:15:54.4980)
2015-08-22 15:15:54.4961|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-22 15:15:54.5051|Info|  Settimeout: id:39, (13) ms
2015-08-22 15:15:54.5571|Info|      Encerrado timer: id:37, (15:15:54.5571)
2015-08-22 15:15:54.5571|Info|      Executando timer: id:36, (15:15:54.5571)
2015-08-22 15:15:54.5571|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:54.5571|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:54.5571|Info|      Encerrado timer: id:36, (15:15:54.5601)
2015-08-22 15:15:54.5571|Info|      Executando timer: id:38, (15:15:54.5611)
2015-08-22 15:15:54.5571|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:54.5571|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:54.5571|Info|      Encerrado timer: id:38, (15:15:54.5631)
2015-08-22 15:15:54.5571|Info|      Executando timer: id:39, (15:15:54.5641)
2015-08-22 15:15:54.5571|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:54.5571|Info|  Settimeout: id:40, (64) ms
2015-08-22 15:15:54.6162|Info|  Settimeout: id:41, (32) ms
2015-08-22 15:15:54.6682|Info|  Settimeout: id:42, (128) ms
2015-08-22 15:15:54.7203|Info|      Encerrado timer: id:39, (15:15:54.7203)
2015-08-22 15:15:54.7203|Info|      Executando timer: id:40, (15:15:54.7222)
2015-08-22 15:15:54.7252|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:54.7252|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:54.7252|Info|      Encerrado timer: id:40, (15:15:54.7322)
2015-08-22 15:15:54.7993|Info|      Executando timer: id:42, (15:15:54.7993)
2015-08-22 15:15:54.8133|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:54.8133|Info|  Settimeout: id:43, (13) ms
2015-08-22 15:15:54.8664|Info|      Encerrado timer: id:42, (15:15:54.8664)
2015-08-22 15:15:54.8664|Info|      Executando timer: id:43, (15:15:54.8673)
2015-08-22 15:15:54.8664|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:54.8664|Info|  Settimeout: id:44, (32) ms
2015-08-22 15:15:54.9224|Info|  Settimeout: id:45, (12) ms
2015-08-22 15:15:54.9744|Info|  Settimeout: id:46, (64) ms
2015-08-22 15:15:55.0254|Info|      Encerrado timer: id:43, (15:15:55.0254)
2015-08-22 15:15:55.0404|Info|      Executando timer: id:46, (15:15:55.0404)
2015-08-22 15:15:55.0404|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-22 15:15:55.0404|Info|  Settimeout: id:47, (13) ms
2015-08-22 15:15:55.0995|Info|      Encerrado timer: id:46, (15:15:55.0995)
2015-08-22 15:15:55.0995|Info|      Executando timer: id:47, (15:15:55.1005)
2015-08-22 15:15:55.0995|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.1155|Info|  Settimeout: id:48, (1) ms
2015-08-22 15:15:55.1675|Info|  Settimeout: id:49, (32) ms
2015-08-22 15:15:55.2186|Info|      Encerrado timer: id:47, (15:15:55.2186)
2015-08-22 15:15:55.2186|Info|      Executando timer: id:48, (15:15:55.2186)
2015-08-22 15:15:55.2186|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.2186|Info|      Encerrado timer: id:48, (15:15:55.2206)
2015-08-22 15:15:55.2186|Info|      Executando timer: id:49, (15:15:55.2206)
2015-08-22 15:15:55.2186|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:55.2186|Info|  Settimeout: id:50, (13) ms
2015-08-22 15:15:55.2736|Info|      Encerrado timer: id:49, (15:15:55.2736)
2015-08-22 15:15:55.2736|Info|      Executando timer: id:50, (15:15:55.2736)
2015-08-22 15:15:55.2736|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.2736|Info|  Settimeout: id:51, (1) ms
2015-08-22 15:15:55.3267|Info|  Settimeout: id:52, (32) ms
2015-08-22 15:15:55.3777|Info|      Encerrado timer: id:50, (15:15:55.3777)
2015-08-22 15:15:55.3777|Info|      Executando timer: id:51, (15:15:55.3777)
2015-08-22 15:15:55.3777|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.3777|Info|      Encerrado timer: id:51, (15:15:55.3797)
2015-08-22 15:15:55.3777|Info|      Executando timer: id:52, (15:15:55.3797)
2015-08-22 15:15:55.3807|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 15:15:55.3807|Info|  Settimeout: id:53, (13) ms
2015-08-22 15:15:55.4327|Info|      Encerrado timer: id:52, (15:15:55.4327)
2015-08-22 15:15:55.4327|Info|      Executando timer: id:53, (15:15:55.4327)
2015-08-22 15:15:55.4327|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.4327|Info|  Settimeout: id:54, (1) ms
2015-08-22 15:15:55.4858|Info|  Settimeout: id:55, (32) ms
2015-08-22 15:15:55.5368|Info|      Encerrado timer: id:53, (15:15:55.5368)
2015-08-22 15:15:55.5368|Info|      Executando timer: id:55, (15:15:55.5388)
2015-08-22 15:15:55.5368|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:55.5368|Info|  Settimeout: id:56, (13) ms
2015-08-22 15:15:55.5989|Info|      Encerrado timer: id:55, (15:15:55.5989)
2015-08-22 15:15:55.5989|Info|      Executando timer: id:56, (15:15:55.5998)
2015-08-22 15:15:55.5989|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.5989|Info|  Settimeout: id:57, (32) ms
2015-08-22 15:15:55.6549|Info|  Settimeout: id:58, (1) ms
2015-08-22 15:15:55.7120|Info|  Settimeout: id:59, (64) ms
2015-08-22 15:15:55.7630|Info|      Encerrado timer: id:56, (15:15:55.7630)
2015-08-22 15:15:55.7630|Info|      Executando timer: id:57, (15:15:55.7630)
2015-08-22 15:15:55.7630|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.7630|Info|      Encerrado timer: id:57, (15:15:55.7649)
2015-08-22 15:15:55.7630|Info|      Executando timer: id:58, (15:15:55.7660)
2015-08-22 15:15:55.7630|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:15:55.7630|Info|      Encerrado timer: id:58, (15:15:55.7699)
2015-08-22 15:15:55.7780|Info|      Executando timer: id:59, (15:15:55.7780)
2015-08-22 15:15:55.7780|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:55.7780|Info|  Settimeout: id:60, (13) ms
2015-08-22 15:15:55.8310|Info|      Encerrado timer: id:59, (15:15:55.8310)
2015-08-22 15:15:55.8330|Info|      Executando timer: id:60, (15:15:55.8330)
2015-08-22 15:15:55.8330|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.8330|Info|  Settimeout: id:61, (32) ms
2015-08-22 15:15:55.8931|Info|  Settimeout: id:62, (64) ms
2015-08-22 15:15:55.9451|Info|      Encerrado timer: id:60, (15:15:55.9451)
2015-08-22 15:15:55.9451|Info|      Executando timer: id:61, (15:15:55.9471)
2015-08-22 15:15:55.9451|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.9451|Info|      Encerrado timer: id:61, (15:15:55.9521)
2015-08-22 15:15:55.9601|Info|      Executando timer: id:62, (15:15:55.9601)
2015-08-22 15:15:55.9601|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 15:15:55.9601|Info|  Settimeout: id:63, (13) ms
2015-08-22 15:15:56.0162|Info|      Encerrado timer: id:62, (15:15:56.0162)
2015-08-22 15:15:56.0162|Info|      Executando timer: id:63, (15:15:56.0162)
2015-08-22 15:15:56.0162|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:56.0162|Info|  Settimeout: id:64, (32) ms
2015-08-22 15:15:56.0702|Info|  Settimeout: id:65, (64) ms
2015-08-22 15:15:56.1213|Info|      Encerrado timer: id:63, (15:15:56.1213)
2015-08-22 15:15:56.1362|Info|      Executando timer: id:65, (15:15:56.1362)
2015-08-22 15:15:56.1362|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:56.1362|Info|  Settimeout: id:66, (13) ms
2015-08-22 15:15:56.1973|Info|      Encerrado timer: id:65, (15:15:56.1973)
2015-08-22 15:15:56.1973|Info|      Executando timer: id:66, (15:15:56.1983)
2015-08-22 15:15:56.1973|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:57.8034|Info|  Settimeout: id:67, (13) ms
2015-08-22 15:15:57.8535|Info|      Encerrado timer: id:66, (15:15:57.8535)
2015-08-22 15:15:57.8535|Info|      Executando timer: id:67, (15:15:57.8535)
2015-08-22 15:15:57.8535|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 15:15:57.9465|Info|----------------------------------------
2015-08-22 15:15:57.9465|Info|lodash.isNil
2015-08-22 15:15:57.9465|Info|----------------------------------------
2015-08-22 15:15:57.9465|Info| FAIL - should work with nulls from another realm
2015-08-22 15:15:57.9465|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-08-22 15:15:58.0906|Info|  Settimeout: id:68, (32) ms
2015-08-22 15:15:58.1407|Info|      Encerrado timer: id:67, (15:15:58.1407)
2015-08-22 15:15:58.1407|Info|      Executando timer: id:68, (15:15:58.1407)
2015-08-22 15:15:58.1407|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-08-22 15:15:58.1407|Info|  Settimeout: id:69, (13) ms
2015-08-22 15:15:58.1937|Info|      Encerrado timer: id:68, (15:15:58.1937)
2015-08-22 15:15:58.1937|Info|      Executando timer: id:69, (15:15:58.1937)
2015-08-22 15:15:58.1937|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.3568|Info|  Settimeout: id:70, (32) ms
2015-08-22 15:15:58.4079|Info|  Settimeout: id:71, (64) ms
2015-08-22 15:15:58.4589|Info|      Encerrado timer: id:69, (15:15:58.4589)
2015-08-22 15:15:58.4739|Info|      Executando timer: id:71, (15:15:58.4739)
2015-08-22 15:15:58.4739|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:15:58.4739|Info|  Settimeout: id:72, (13) ms
2015-08-22 15:15:58.5349|Info|      Encerrado timer: id:71, (15:15:58.5349)
2015-08-22 15:15:58.5349|Info|      Executando timer: id:72, (15:15:58.5349)
2015-08-22 15:15:58.5349|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.5379|Info|  Settimeout: id:73, (32) ms
2015-08-22 15:15:58.5879|Info|  Settimeout: id:74, (64) ms
2015-08-22 15:15:58.6390|Info|      Encerrado timer: id:72, (15:15:58.6390)
2015-08-22 15:15:58.6390|Info|      Executando timer: id:73, (15:15:58.6390)
2015-08-22 15:15:58.6390|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:58.6390|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:58.6390|Info|      Encerrado timer: id:73, (15:15:58.6420)
2015-08-22 15:15:58.6540|Info|      Executando timer: id:74, (15:15:58.6540)
2015-08-22 15:15:58.6540|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:15:58.6540|Info|  Settimeout: id:75, (18) ms
2015-08-22 15:15:58.7070|Info|  Settimeout: id:76, (13) ms
2015-08-22 15:15:58.7581|Info|      Encerrado timer: id:74, (15:15:58.7581)
2015-08-22 15:15:58.7581|Info|      Executando timer: id:76, (15:15:58.7581)
2015-08-22 15:15:58.7581|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.7581|Info|  Settimeout: id:77, (32) ms
2015-08-22 15:15:58.8191|Info|  Settimeout: id:78, (64) ms
2015-08-22 15:15:58.8702|Info|      Encerrado timer: id:76, (15:15:58.8702)
2015-08-22 15:15:58.8852|Info|      Executando timer: id:78, (15:15:58.8852)
2015-08-22 15:15:58.8852|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:15:58.8852|Info|  Settimeout: id:79, (13) ms
2015-08-22 15:15:58.9432|Info|      Encerrado timer: id:78, (15:15:58.9432)
2015-08-22 15:15:58.9432|Info|      Executando timer: id:79, (15:15:58.9442)
2015-08-22 15:15:58.9432|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.9432|Info|  Settimeout: id:80, (64) ms
2015-08-22 15:15:59.0063|Info|      Encerrado timer: id:79, (15:15:59.0063)
2015-08-22 15:15:59.0063|Info|      Executando timer: id:80, (15:15:59.0203)
2015-08-22 15:15:59.0223|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:59.0223|Info|  Settimeout: id:81, (13) ms
2015-08-22 15:15:59.0764|Info|      Encerrado timer: id:80, (15:15:59.0764)
2015-08-22 15:15:59.0764|Info|      Executando timer: id:81, (15:15:59.0773)
2015-08-22 15:15:59.0764|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:59.0764|Info|  Settimeout: id:82, (32) ms
2015-08-22 15:15:59.1333|Info|  Settimeout: id:83, (32) ms
2015-08-22 15:15:59.1854|Info|  Settimeout: id:84, (32) ms
2015-08-22 15:15:59.2365|Info|  Settimeout: id:85, (32) ms
2015-08-22 15:15:59.2884|Info|  Settimeout: id:86, (32) ms
2015-08-22 15:15:59.3415|Info|  Settimeout: id:87, (31) ms
2015-08-22 15:15:59.3945|Info|  Settimeout: id:88, (32) ms
2015-08-22 15:15:59.4456|Info|  Settimeout: id:89, (1) ms
2015-08-22 15:15:59.4966|Info|      Encerrado timer: id:81, (15:15:59.4966)
2015-08-22 15:15:59.4966|Info|      Executando timer: id:88, (15:15:59.4966)
2015-08-22 15:15:59.4966|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:59.4966|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:59.4966|Info|      Encerrado timer: id:88, (15:15:59.4996)
2015-08-22 15:15:59.4966|Info|      Executando timer: id:89, (15:15:59.5006)
2015-08-22 15:15:59.4966|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 15:15:59.4966|Info|  Settimeout: id:90, (13) ms
2015-08-22 15:15:59.5527|Info|      Encerrado timer: id:89, (15:15:59.5527)
2015-08-22 15:15:59.5527|Info|      Executando timer: id:90, (15:15:59.5536)
2015-08-22 15:15:59.5527|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:59.5527|Info|  Settimeout: id:91, (32) ms
2015-08-22 15:15:59.6107|Info|  Settimeout: id:92, (32) ms
2015-08-22 15:15:59.6628|Info|  Settimeout: id:93, (32) ms
2015-08-22 15:15:59.7148|Info|  Settimeout: id:94, (32) ms
2015-08-22 15:15:59.7668|Info|  Settimeout: id:95, (32) ms
2015-08-22 15:15:59.8188|Info|  Settimeout: id:96, (32) ms
2015-08-22 15:15:59.8709|Info|  Settimeout: id:97, (32) ms
2015-08-22 15:15:59.9229|Info|  Settimeout: id:98, (1) ms
2015-08-22 15:15:59.9760|Info|      Encerrado timer: id:90, (15:15:59.9760)
2015-08-22 15:15:59.9760|Info|      Executando timer: id:97, (15:15:59.9770)
2015-08-22 15:15:59.9760|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:59.9760|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:59.9760|Info|      Encerrado timer: id:97, (15:15:59.9819)
2015-08-22 15:15:59.9760|Info|      Executando timer: id:98, (15:15:59.9819)
2015-08-22 15:15:59.9760|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 15:15:59.9760|Info|  Settimeout: id:99, (13) ms
2015-08-22 15:16:00.0380|Info|      Encerrado timer: id:98, (15:16:00.0380)
2015-08-22 15:16:00.0380|Info|      Executando timer: id:99, (15:16:00.0390)
2015-08-22 15:16:00.0380|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:00.0380|Info|  Settimeout: id:100, (32) ms
2015-08-22 15:16:00.0951|Info|  Settimeout: id:101, (128) ms
2015-08-22 15:16:00.1471|Info|      Encerrado timer: id:99, (15:16:00.1471)
2015-08-22 15:16:00.1471|Info|      Executando timer: id:100, (15:16:00.1491)
2015-08-22 15:16:00.1471|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.1471|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:00.1471|Info|      Encerrado timer: id:100, (15:16:00.1541)
2015-08-22 15:16:00.2252|Info|      Executando timer: id:101, (15:16:00.2252)
2015-08-22 15:16:00.2252|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:16:00.2252|Info|  Settimeout: id:102, (13) ms
2015-08-22 15:16:00.2831|Info|      Encerrado timer: id:101, (15:16:00.2831)
2015-08-22 15:16:00.2831|Info|      Executando timer: id:102, (15:16:00.2842)
2015-08-22 15:16:00.2831|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:00.2872|Info|  Settimeout: id:103, (32) ms
2015-08-22 15:16:00.3402|Info|  Settimeout: id:104, (64) ms
2015-08-22 15:16:00.3913|Info|  Settimeout: id:105, (64) ms
2015-08-22 15:16:00.4423|Info|  Settimeout: id:106, (256) ms
2015-08-22 15:16:00.4944|Info|      Encerrado timer: id:102, (15:16:00.4944)
2015-08-22 15:16:00.4944|Info|      Executando timer: id:103, (15:16:00.4963)
2015-08-22 15:16:00.4944|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.4944|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:00.4944|Info|      Encerrado timer: id:103, (15:16:00.5033)
2015-08-22 15:16:00.5053|Info|      Executando timer: id:104, (15:16:00.5053)
2015-08-22 15:16:00.5053|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.5053|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:00.5053|Info|      Encerrado timer: id:104, (15:16:00.5143)
2015-08-22 15:16:00.5053|Info|      Executando timer: id:105, (15:16:00.5163)
2015-08-22 15:16:00.5053|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.5213|Info|      Encerrado timer: id:105, (15:16:00.5203)
2015-08-22 15:16:00.7005|Info|      Executando timer: id:106, (15:16:00.7005)
2015-08-22 15:16:00.7005|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-08-22 15:16:00.7005|Info|  Settimeout: id:107, (13) ms
2015-08-22 15:16:00.7565|Info|      Encerrado timer: id:106, (15:16:00.7565)
2015-08-22 15:16:00.7565|Info|      Executando timer: id:107, (15:16:00.7575)
2015-08-22 15:16:00.7565|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:00.7565|Info|  Settimeout: id:108, (64) ms
2015-08-22 15:16:00.8136|Info|  Settimeout: id:109, (96) ms
2015-08-22 15:16:00.8656|Info|  Settimeout: id:110, (192) ms
2015-08-22 15:16:00.9176|Info|      Encerrado timer: id:107, (15:16:00.9176)
2015-08-22 15:16:00.9176|Info|      Executando timer: id:108, (15:16:00.9176)
2015-08-22 15:16:00.9176|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.9176|Info|      Encerrado timer: id:108, (15:16:00.9196)
2015-08-22 15:16:00.9176|Info|      Executando timer: id:109, (15:16:00.9206)
2015-08-22 15:16:00.9176|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-08-22 15:16:00.9176|Info|  Settimeout: id:111, (64) ms
2015-08-22 15:16:00.9746|Info|      Encerrado timer: id:109, (15:16:00.9746)
2015-08-22 15:16:00.9897|Info|      Executando timer: id:111, (15:16:00.9897)
2015-08-22 15:16:00.9897|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.9897|Info|      Encerrado timer: id:111, (15:16:00.9907)
2015-08-22 15:16:01.0607|Info|      Executando timer: id:110, (15:16:01.0607)
2015-08-22 15:16:01.0607|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-08-22 15:16:01.0687|Info|  Settimeout: id:112, (13) ms
2015-08-22 15:16:01.1238|Info|      Encerrado timer: id:110, (15:16:01.1238)
2015-08-22 15:16:01.1238|Info|      Executando timer: id:112, (15:16:01.1248)
2015-08-22 15:16:01.1238|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.1238|Info|  Settimeout: id:113, (0) ms
2015-08-22 15:16:01.1798|Info|  Settimeout: id:114, (32) ms
2015-08-22 15:16:01.2318|Info|      Encerrado timer: id:112, (15:16:01.2318)
2015-08-22 15:16:01.2318|Info|      Executando timer: id:113, (15:16:01.2338)
2015-08-22 15:16:01.2318|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.2409|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.2409|Info|      Encerrado timer: id:113, (15:16:01.2418)
2015-08-22 15:16:01.2409|Info|      Executando timer: id:114, (15:16:01.2439)
2015-08-22 15:16:01.2409|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:01.2409|Info|  Settimeout: id:115, (0) ms
2015-08-22 15:16:01.3029|Info|  Settimeout: id:116, (13) ms
2015-08-22 15:16:01.3550|Info|      Encerrado timer: id:114, (15:16:01.3550)
2015-08-22 15:16:01.3550|Info|      Executando timer: id:115, (15:16:01.3559)
2015-08-22 15:16:01.3550|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.3550|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.3550|Info|      Encerrado timer: id:115, (15:16:01.3599)
2015-08-22 15:16:01.3550|Info|      Executando timer: id:116, (15:16:01.3609)
2015-08-22 15:16:01.3550|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.3649|Info|  Settimeout: id:117, (32) ms
2015-08-22 15:16:01.4160|Info|  Settimeout: id:118, (64) ms
2015-08-22 15:16:01.4670|Info|      Encerrado timer: id:116, (15:16:01.4670)
2015-08-22 15:16:01.4670|Info|      Executando timer: id:117, (15:16:01.4680)
2015-08-22 15:16:01.4670|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.4740|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.4740|Info|      Encerrado timer: id:117, (15:16:01.4760)
2015-08-22 15:16:01.4740|Info|      Executando timer: id:118, (15:16:01.4820)
2015-08-22 15:16:01.4740|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 15:16:01.4740|Info|  Settimeout: id:119, (13) ms
2015-08-22 15:16:01.5381|Info|      Encerrado timer: id:118, (15:16:01.5381)
2015-08-22 15:16:01.5381|Info|      Executando timer: id:119, (15:16:01.5390)
2015-08-22 15:16:01.5381|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.5381|Info|  Settimeout: id:120, (32) ms
2015-08-22 15:16:01.5941|Info|  Settimeout: id:121, (256) ms
2015-08-22 15:16:01.6462|Info|      Encerrado timer: id:119, (15:16:01.6462)
2015-08-22 15:16:01.6462|Info|      Executando timer: id:120, (15:16:01.6471)
2015-08-22 15:16:01.6462|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.6462|Info|  Settimeout: id:122, (32) ms
2015-08-22 15:16:01.7022|Info|!timeoutId && !maxTimeoutId false
2015-08-22 15:16:01.7022|Info|      Encerrado timer: id:120, (15:16:01.7032)
2015-08-22 15:16:01.7022|Info|      Executando timer: id:122, (15:16:01.7042)
2015-08-22 15:16:01.7022|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.7022|Info|  Settimeout: id:123, (32) ms
2015-08-22 15:16:01.7562|Info|!timeoutId && !maxTimeoutId false
2015-08-22 15:16:01.7562|Info|      Encerrado timer: id:122, (15:16:01.7572)
2015-08-22 15:16:01.7562|Info|      Executando timer: id:123, (15:16:01.7572)
2015-08-22 15:16:01.7562|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.7562|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.7562|Info|      Encerrado timer: id:123, (15:16:01.7592)
2015-08-22 15:16:01.8523|Info|      Executando timer: id:121, (15:16:01.8523)
2015-08-22 15:16:01.8523|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 15:16:01.8523|Info|  Settimeout: id:124, (13) ms
2015-08-22 15:16:01.9104|Info|      Encerrado timer: id:121, (15:16:01.9104)
2015-08-22 15:16:01.9113|Info|      Executando timer: id:124, (15:16:01.9113)
2015-08-22 15:16:01.9113|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.9313|Info|  Settimeout: id:125, (32) ms
2015-08-22 15:16:01.9844|Info|  Settimeout: id:126, (64) ms
2015-08-22 15:16:02.0355|Info|      Encerrado timer: id:124, (15:16:02.0355)
2015-08-22 15:16:02.0374|Info|      Executando timer: id:125, (15:16:02.0374)
2015-08-22 15:16:02.0374|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:02.0374|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:02.0374|Info|      Encerrado timer: id:125, (15:16:02.0454)
2015-08-22 15:16:02.0374|Info|      Executando timer: id:126, (15:16:02.0504)
2015-08-22 15:16:02.0534|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:02.0534|Info|  Settimeout: id:127, (32) ms
2015-08-22 15:16:02.1215|Info|  Settimeout: id:128, (13) ms
2015-08-22 15:16:02.1725|Info|      Encerrado timer: id:126, (15:16:02.1725)
2015-08-22 15:16:02.1725|Info|      Executando timer: id:127, (15:16:02.1725)
2015-08-22 15:16:02.1725|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:02.1725|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:02.1725|Info|      Encerrado timer: id:127, (15:16:02.1755)
2015-08-22 15:16:02.1725|Info|      Executando timer: id:128, (15:16:02.1755)
2015-08-22 15:16:02.1725|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.1775|Info|  Settimeout: id:129, (32) ms
2015-08-22 15:16:02.2286|Info|  Settimeout: id:130, (64) ms
2015-08-22 15:16:02.2796|Info|      Encerrado timer: id:128, (15:16:02.2796)
2015-08-22 15:16:02.2946|Info|      Executando timer: id:130, (15:16:02.2946)
2015-08-22 15:16:02.2946|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 15:16:02.2946|Info|  Settimeout: id:131, (13) ms
2015-08-22 15:16:02.3467|Info|      Encerrado timer: id:130, (15:16:02.3467)
2015-08-22 15:16:02.3486|Info|      Executando timer: id:131, (15:16:02.3486)
2015-08-22 15:16:02.3486|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.3486|Info|  Settimeout: id:132, (32) ms
2015-08-22 15:16:02.4097|Info|  Settimeout: id:133, (32) ms
2015-08-22 15:16:02.4617|Info|  Settimeout: id:134, (64) ms
2015-08-22 15:16:02.5138|Info|      Encerrado timer: id:131, (15:16:02.5138)
2015-08-22 15:16:02.5138|Info|      Executando timer: id:133, (15:16:02.5148)
2015-08-22 15:16:02.5138|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:02.5138|Info|      Encerrado timer: id:133, (15:16:02.5167)
2015-08-22 15:16:02.5278|Info|      Executando timer: id:134, (15:16:02.5278)
2015-08-22 15:16:02.5278|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:16:02.5278|Info|  Settimeout: id:135, (13) ms
2015-08-22 15:16:02.5858|Info|      Encerrado timer: id:134, (15:16:02.5858)
2015-08-22 15:16:02.5858|Info|      Executando timer: id:135, (15:16:02.5878)
2015-08-22 15:16:02.5858|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.5858|Info|  Settimeout: id:136, (32) ms
2015-08-22 15:16:02.6479|Info|      Encerrado timer: id:135, (15:16:02.6479)
2015-08-22 15:16:02.6479|Info|      Executando timer: id:136, (15:16:02.6488)
2015-08-22 15:16:02.6479|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:02.6479|Info|  Settimeout: id:137, (13) ms
2015-08-22 15:16:02.7019|Info|      Encerrado timer: id:136, (15:16:02.7019)
2015-08-22 15:16:02.7019|Info|      Executando timer: id:137, (15:16:02.7039)
2015-08-22 15:16:02.7019|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.7109|Info|  Settimeout: id:138, (32) ms
2015-08-22 15:16:02.7629|Info|  Settimeout: id:139, (64) ms
2015-08-22 15:16:02.8150|Info|      Encerrado timer: id:137, (15:16:02.8150)
2015-08-22 15:16:02.8150|Info|      Executando timer: id:138, (15:16:02.8160)
2015-08-22 15:16:02.8150|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:02.8190|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:02.8190|Info|      Encerrado timer: id:138, (15:16:02.8200)
2015-08-22 15:16:02.8190|Info|      Executando timer: id:139, (15:16:02.8300)
2015-08-22 15:16:02.8370|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 15:16:02.8370|Info|  Settimeout: id:140, (13) ms
2015-08-22 15:16:02.8951|Info|      Encerrado timer: id:139, (15:16:02.8951)
2015-08-22 15:16:02.8960|Info|      Executando timer: id:140, (15:16:02.8960)
2015-08-22 15:16:02.8960|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.8960|Info|  Settimeout: id:141, (32) ms
2015-08-22 15:16:02.9500|Info|  Settimeout: id:142, (256) ms
2015-08-22 15:16:03.0021|Info|      Encerrado timer: id:140, (15:16:03.0021)
2015-08-22 15:16:03.0021|Info|      Executando timer: id:141, (15:16:03.0031)
2015-08-22 15:16:03.0051|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:03.0051|Info|  Settimeout: id:143, (32) ms
2015-08-22 15:16:03.0582|Info|!timeoutId && !maxTimeoutId false
2015-08-22 15:16:03.0582|Info|      Encerrado timer: id:141, (15:16:03.0591)
2015-08-22 15:16:03.0582|Info|      Executando timer: id:143, (15:16:03.0601)
2015-08-22 15:16:03.0582|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:03.0582|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:03.0582|Info|      Encerrado timer: id:143, (15:16:03.0652)
2015-08-22 15:16:03.2083|Info|      Executando timer: id:142, (15:16:03.2083)
2015-08-22 15:16:03.2083|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 15:16:03.2083|Info|  Settimeout: id:144, (13) ms
2015-08-22 15:16:03.2673|Info|      Encerrado timer: id:142, (15:16:03.2673)
2015-08-22 15:16:03.2673|Info|      Executando timer: id:144, (15:16:03.2693)
2015-08-22 15:16:03.2723|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.2993|Info|  Settimeout: id:145, (64) ms
2015-08-22 15:16:03.3513|Info|      Encerrado timer: id:144, (15:16:03.3513)
2015-08-22 15:16:03.3663|Info|      Executando timer: id:145, (15:16:03.3663)
2015-08-22 15:16:03.3663|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:03.3663|Info|  Settimeout: id:146, (13) ms
2015-08-22 15:16:03.4244|Info|      Encerrado timer: id:145, (15:16:03.4244)
2015-08-22 15:16:03.4244|Info|      Executando timer: id:146, (15:16:03.4244)
2015-08-22 15:16:03.4244|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.4274|Info|  Settimeout: id:147, (32) ms
2015-08-22 15:16:03.4785|Info|  Settimeout: id:148, (64) ms
2015-08-22 15:16:03.5295|Info|      Encerrado timer: id:146, (15:16:03.5295)
2015-08-22 15:16:03.5445|Info|      Executando timer: id:148, (15:16:03.5445)
2015-08-22 15:16:03.5445|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 15:16:03.5445|Info|  Settimeout: id:149, (13) ms
2015-08-22 15:16:03.6036|Info|      Encerrado timer: id:148, (15:16:03.6036)
2015-08-22 15:16:03.6036|Info|      Executando timer: id:149, (15:16:03.6045)
2015-08-22 15:16:03.6036|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.6036|Info|  Settimeout: id:150, (64) ms
2015-08-22 15:16:03.6595|Info|      Encerrado timer: id:149, (15:16:03.6595)
2015-08-22 15:16:03.6746|Info|      Executando timer: id:150, (15:16:03.6746)
2015-08-22 15:16:03.6826|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:16:03.6826|Info|  Settimeout: id:151, (13) ms
2015-08-22 15:16:03.7367|Info|      Encerrado timer: id:150, (15:16:03.7367)
2015-08-22 15:16:03.7367|Info|      Executando timer: id:151, (15:16:03.7367)
2015-08-22 15:16:03.7367|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.8477|Info|  Settimeout: id:152, (32) ms
2015-08-22 15:16:03.8987|Info|  Settimeout: id:153, (1) ms
2015-08-22 15:16:03.9508|Info|  Settimeout: id:154, (64) ms
2015-08-22 15:16:04.0018|Info|      Encerrado timer: id:151, (15:16:04.0018)
2015-08-22 15:16:04.0018|Info|      Executando timer: id:152, (15:16:04.0028)
2015-08-22 15:16:04.0018|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:04.0048|Info|      Encerrado timer: id:152, (15:16:04.0048)
2015-08-22 15:16:04.0048|Info|      Executando timer: id:153, (15:16:04.0048)
2015-08-22 15:16:04.0048|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:04.0048|Info|      Encerrado timer: id:153, (15:16:04.0078)
2015-08-22 15:16:04.0048|Info|      Executando timer: id:154, (15:16:04.0169)
2015-08-22 15:16:04.0048|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:04.0048|Info|  Settimeout: id:155, (13) ms
2015-08-22 15:16:04.0689|Info|      Encerrado timer: id:154, (15:16:04.0689)
2015-08-22 15:16:04.0689|Info|      Executando timer: id:155, (15:16:04.0689)
2015-08-22 15:16:04.0689|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.0689|Info|  Settimeout: id:156, (32) ms
2015-08-22 15:16:04.1249|Info|  Settimeout: id:157, (64) ms
2015-08-22 15:16:04.1880|Info|      Encerrado timer: id:155, (15:16:04.1880)
2015-08-22 15:16:04.2030|Info|      Executando timer: id:157, (15:16:04.2030)
2015-08-22 15:16:04.2030|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:04.2079|Info|  Settimeout: id:158, (13) ms
2015-08-22 15:16:04.2590|Info|      Encerrado timer: id:157, (15:16:04.2590)
2015-08-22 15:16:04.2590|Info|      Executando timer: id:158, (15:16:04.2600)
2015-08-22 15:16:04.2590|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.2590|Info|  Settimeout: id:159, (32) ms
2015-08-22 15:16:04.3180|Info|  Settimeout: id:160, (64) ms
2015-08-22 15:16:04.3691|Info|      Encerrado timer: id:158, (15:16:04.3691)
2015-08-22 15:16:04.3691|Info|      Executando timer: id:159, (15:16:04.3691)
2015-08-22 15:16:04.3691|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:04.3691|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:04.3691|Info|      Encerrado timer: id:159, (15:16:04.3721)
2015-08-22 15:16:04.3841|Info|      Executando timer: id:160, (15:16:04.3841)
2015-08-22 15:16:04.3841|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:04.3841|Info|  Settimeout: id:161, (18) ms
2015-08-22 15:16:04.4411|Info|  Settimeout: id:162, (13) ms
2015-08-22 15:16:04.4932|Info|      Encerrado timer: id:160, (15:16:04.4932)
2015-08-22 15:16:04.4932|Info|      Executando timer: id:162, (15:16:04.4932)
2015-08-22 15:16:04.4932|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.4932|Info|  Settimeout: id:163, (32) ms
2015-08-22 15:16:04.5472|Info|  Settimeout: id:164, (1) ms
2015-08-22 15:16:04.6003|Info|  Settimeout: id:165, (64) ms
2015-08-22 15:16:04.6513|Info|      Encerrado timer: id:162, (15:16:04.6513)
2015-08-22 15:16:04.6513|Info|      Executando timer: id:163, (15:16:04.6513)
2015-08-22 15:16:04.6513|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:04.6513|Info|      Encerrado timer: id:163, (15:16:04.6553)
2015-08-22 15:16:04.6513|Info|      Executando timer: id:164, (15:16:04.6573)
2015-08-22 15:16:04.6513|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:04.6643|Info|      Encerrado timer: id:164, (15:16:04.6643)
2015-08-22 15:16:04.6643|Info|      Executando timer: id:165, (15:16:04.6663)
2015-08-22 15:16:04.6643|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:04.6643|Info|  Settimeout: id:166, (13) ms
2015-08-22 15:16:04.7244|Info|      Encerrado timer: id:165, (15:16:04.7244)
2015-08-22 15:16:04.7244|Info|      Executando timer: id:166, (15:16:04.7253)
2015-08-22 15:16:04.7244|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.7393|Info|  Settimeout: id:167, (32) ms
2015-08-22 15:16:04.7924|Info|  Settimeout: id:168, (64) ms
2015-08-22 15:16:04.8464|Info|      Encerrado timer: id:166, (15:16:04.8464)
2015-08-22 15:16:04.8615|Info|      Executando timer: id:168, (15:16:04.8615)
2015-08-22 15:16:04.8615|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:04.8615|Info|  Settimeout: id:169, (13) ms
2015-08-22 15:16:04.9144|Info|      Encerrado timer: id:168, (15:16:04.9144)
2015-08-22 15:16:04.9144|Info|      Executando timer: id:169, (15:16:04.9144)
2015-08-22 15:16:04.9144|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.9144|Info|  Settimeout: id:170, (32) ms
2015-08-22 15:16:04.9705|Info|  Settimeout: id:171, (64) ms
2015-08-22 15:16:05.0236|Info|      Encerrado timer: id:169, (15:16:05.0236)
2015-08-22 15:16:05.0236|Info|      Executando timer: id:170, (15:16:05.0245)
2015-08-22 15:16:05.0236|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:05.0236|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:05.0236|Info|      Encerrado timer: id:170, (15:16:05.0285)
2015-08-22 15:16:05.0386|Info|      Executando timer: id:171, (15:16:05.0386)
2015-08-22 15:16:05.0386|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:05.0386|Info|  Settimeout: id:172, (18) ms
2015-08-22 15:16:05.0946|Info|  Settimeout: id:173, (13) ms
2015-08-22 15:16:05.1457|Info|      Encerrado timer: id:171, (15:16:05.1457)
2015-08-22 15:16:05.1457|Info|      Executando timer: id:173, (15:16:05.1457)
2015-08-22 15:16:05.1457|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.1457|Info|  Settimeout: id:174, (32) ms
2015-08-22 15:16:05.1996|Info|  Settimeout: id:175, (1) ms
2015-08-22 15:16:05.2527|Info|  Settimeout: id:176, (64) ms
2015-08-22 15:16:05.3048|Info|      Encerrado timer: id:173, (15:16:05.3048)
2015-08-22 15:16:05.3048|Info|      Executando timer: id:174, (15:16:05.3057)
2015-08-22 15:16:05.3048|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:05.3048|Info|      Encerrado timer: id:174, (15:16:05.3087)
2015-08-22 15:16:05.3048|Info|      Executando timer: id:175, (15:16:05.3097)
2015-08-22 15:16:05.3048|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:05.3048|Info|      Encerrado timer: id:175, (15:16:05.3137)
2015-08-22 15:16:05.3198|Info|      Executando timer: id:176, (15:16:05.3198)
2015-08-22 15:16:05.3198|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:05.3198|Info|  Settimeout: id:177, (13) ms
2015-08-22 15:16:05.3738|Info|      Encerrado timer: id:176, (15:16:05.3738)
2015-08-22 15:16:05.3738|Info|      Executando timer: id:177, (15:16:05.3748)
2015-08-22 15:16:05.3738|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.3738|Info|  Settimeout: id:178, (32) ms
2015-08-22 15:16:05.4308|Info|  Settimeout: id:179, (64) ms
2015-08-22 15:16:05.4829|Info|      Encerrado timer: id:177, (15:16:05.4829)
2015-08-22 15:16:05.4979|Info|      Executando timer: id:179, (15:16:05.4979)
2015-08-22 15:16:05.4979|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:05.5249|Info|  Settimeout: id:180, (13) ms
2015-08-22 15:16:05.5759|Info|      Encerrado timer: id:179, (15:16:05.5759)
2015-08-22 15:16:05.5759|Info|      Executando timer: id:180, (15:16:05.5759)
2015-08-22 15:16:05.5759|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.5759|Info|  Settimeout: id:181, (32) ms
2015-08-22 15:16:05.6300|Info|  Settimeout: id:182, (64) ms
2015-08-22 15:16:05.6810|Info|      Encerrado timer: id:180, (15:16:05.6810)
2015-08-22 15:16:05.6810|Info|      Executando timer: id:181, (15:16:05.6830)
2015-08-22 15:16:05.6810|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:05.6810|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:05.6810|Info|      Encerrado timer: id:181, (15:16:05.6900)
2015-08-22 15:16:05.6960|Info|      Executando timer: id:182, (15:16:05.6960)
2015-08-22 15:16:05.6960|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:05.6960|Info|  Settimeout: id:183, (19) ms
2015-08-22 15:16:05.7560|Info|  Settimeout: id:184, (13) ms
2015-08-22 15:16:05.8081|Info|      Encerrado timer: id:182, (15:16:05.8081)
2015-08-22 15:16:05.8081|Info|      Executando timer: id:184, (15:16:05.8091)
2015-08-22 15:16:05.8081|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.8081|Info|  Settimeout: id:185, (32) ms
2015-08-22 15:16:05.8652|Info|  Settimeout: id:186, (1) ms
2015-08-22 15:16:05.9162|Info|  Settimeout: id:187, (64) ms
2015-08-22 15:16:05.9672|Info|      Encerrado timer: id:184, (15:16:05.9672)
2015-08-22 15:16:05.9672|Info|      Executando timer: id:185, (15:16:05.9672)
2015-08-22 15:16:05.9672|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:05.9672|Info|      Encerrado timer: id:185, (15:16:05.9702)
2015-08-22 15:16:05.9672|Info|      Executando timer: id:186, (15:16:05.9712)
2015-08-22 15:16:05.9672|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:05.9672|Info|      Encerrado timer: id:186, (15:16:05.9732)
2015-08-22 15:16:05.9822|Info|      Executando timer: id:187, (15:16:05.9822)
2015-08-22 15:16:05.9822|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:05.9822|Info|  Settimeout: id:188, (13) ms
2015-08-22 15:16:06.0362|Info|      Encerrado timer: id:187, (15:16:06.0362)
2015-08-22 15:16:06.0362|Info|      Executando timer: id:188, (15:16:06.0362)
2015-08-22 15:16:06.0362|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.0362|Info|  Settimeout: id:189, (32) ms
2015-08-22 15:16:06.0893|Info|  Settimeout: id:190, (64) ms
2015-08-22 15:16:06.1413|Info|      Encerrado timer: id:188, (15:16:06.1413)
2015-08-22 15:16:06.1553|Info|      Executando timer: id:190, (15:16:06.1553)
2015-08-22 15:16:06.1553|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:06.1613|Info|  Settimeout: id:191, (13) ms
2015-08-22 15:16:06.2164|Info|      Encerrado timer: id:190, (15:16:06.2164)
2015-08-22 15:16:06.2164|Info|      Executando timer: id:191, (15:16:06.2164)
2015-08-22 15:16:06.2164|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.2164|Info|  Settimeout: id:192, (32) ms
2015-08-22 15:16:06.2705|Info|  Settimeout: id:193, (64) ms
2015-08-22 15:16:06.3215|Info|      Encerrado timer: id:191, (15:16:06.3215)
2015-08-22 15:16:06.3215|Info|      Executando timer: id:192, (15:16:06.3224)
2015-08-22 15:16:06.3215|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:06.3215|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:06.3215|Info|      Encerrado timer: id:192, (15:16:06.3284)
2015-08-22 15:16:06.3365|Info|      Executando timer: id:193, (15:16:06.3365)
2015-08-22 15:16:06.3365|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:06.3365|Info|  Settimeout: id:194, (19) ms
2015-08-22 15:16:06.3965|Info|  Settimeout: id:195, (13) ms
2015-08-22 15:16:06.4486|Info|      Encerrado timer: id:193, (15:16:06.4486)
2015-08-22 15:16:06.4486|Info|      Executando timer: id:195, (15:16:06.4505)
2015-08-22 15:16:06.4486|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.4486|Info|  Settimeout: id:196, (32) ms
2015-08-22 15:16:06.5106|Info|  Settimeout: id:197, (1) ms
2015-08-22 15:16:06.5636|Info|  Settimeout: id:198, (64) ms
2015-08-22 15:16:06.6156|Info|      Encerrado timer: id:195, (15:16:06.6156)
2015-08-22 15:16:06.6156|Info|      Executando timer: id:196, (15:16:06.6166)
2015-08-22 15:16:06.6156|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:06.6156|Info|      Encerrado timer: id:196, (15:16:06.6237)
2015-08-22 15:16:06.6156|Info|      Executando timer: id:197, (15:16:06.6247)
2015-08-22 15:16:06.6156|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:06.6337|Info|      Encerrado timer: id:197, (15:16:06.6337)
2015-08-22 15:16:06.6337|Info|      Executando timer: id:198, (15:16:06.6367)
2015-08-22 15:16:06.6337|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:06.6337|Info|  Settimeout: id:199, (13) ms
2015-08-22 15:16:06.6958|Info|      Encerrado timer: id:198, (15:16:06.6958)
2015-08-22 15:16:06.6958|Info|      Executando timer: id:199, (15:16:06.6967)
2015-08-22 15:16:06.6958|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.6958|Info|  Settimeout: id:200, (32) ms
2015-08-22 15:16:06.7498|Info|  Settimeout: id:201, (64) ms
2015-08-22 15:16:06.8018|Info|      Encerrado timer: id:199, (15:16:06.8018)
2015-08-22 15:16:06.8018|Info|      Executando timer: id:201, (15:16:06.8158)
2015-08-22 15:16:06.8018|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:06.8258|Info|  Settimeout: id:202, (13) ms
2015-08-22 15:16:06.8769|Info|      Encerrado timer: id:201, (15:16:06.8769)
2015-08-22 15:16:06.8769|Info|      Executando timer: id:202, (15:16:06.8769)
2015-08-22 15:16:06.8769|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.8798|Info|  Settimeout: id:203, (32) ms
2015-08-22 15:16:06.9299|Info|  Settimeout: id:204, (64) ms
2015-08-22 15:16:06.9809|Info|      Encerrado timer: id:202, (15:16:06.9809)
2015-08-22 15:16:06.9809|Info|      Executando timer: id:203, (15:16:06.9829)
2015-08-22 15:16:06.9809|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:06.9809|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:06.9899|Info|      Encerrado timer: id:203, (15:16:06.9899)
2015-08-22 15:16:06.9899|Info|      Executando timer: id:204, (15:16:06.9960)
2015-08-22 15:16:06.9899|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:06.9899|Info|  Settimeout: id:205, (21) ms
2015-08-22 15:16:07.0500|Info|  Settimeout: id:206, (13) ms
2015-08-22 15:16:07.1010|Info|      Encerrado timer: id:204, (15:16:07.1010)
2015-08-22 15:16:07.1010|Info|      Executando timer: id:206, (15:16:07.1010)
2015-08-22 15:16:07.1010|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.1010|Info|  Settimeout: id:207, (32) ms
2015-08-22 15:16:07.1540|Info|  Settimeout: id:208, (1) ms
2015-08-22 15:16:07.2061|Info|  Settimeout: id:209, (64) ms
2015-08-22 15:16:07.2582|Info|      Encerrado timer: id:206, (15:16:07.2582)
2015-08-22 15:16:07.2582|Info|      Executando timer: id:207, (15:16:07.2591)
2015-08-22 15:16:07.2582|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:07.3031|Info|      Encerrado timer: id:207, (15:16:07.3031)
2015-08-22 15:16:07.3031|Info|      Executando timer: id:208, (15:16:07.3041)
2015-08-22 15:16:07.3031|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:07.3031|Info|      Encerrado timer: id:208, (15:16:07.3071)
2015-08-22 15:16:07.3031|Info|      Executando timer: id:209, (15:16:07.3081)
2015-08-22 15:16:07.3031|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:07.3031|Info|  Settimeout: id:210, (13) ms
2015-08-22 15:16:07.3612|Info|      Encerrado timer: id:209, (15:16:07.3612)
2015-08-22 15:16:07.3612|Info|      Executando timer: id:210, (15:16:07.3612)
2015-08-22 15:16:07.3612|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.3642|Info|  Settimeout: id:211, (32) ms
2015-08-22 15:16:07.4162|Info|  Settimeout: id:212, (64) ms
2015-08-22 15:16:07.4673|Info|      Encerrado timer: id:210, (15:16:07.4673)
2015-08-22 15:16:07.4823|Info|      Executando timer: id:212, (15:16:07.4823)
2015-08-22 15:16:07.4823|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:07.4903|Info|  Settimeout: id:213, (13) ms
2015-08-22 15:16:07.5433|Info|      Encerrado timer: id:212, (15:16:07.5433)
2015-08-22 15:16:07.5433|Info|      Executando timer: id:213, (15:16:07.5453)
2015-08-22 15:16:07.5433|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.5433|Info|  Settimeout: id:214, (32) ms
2015-08-22 15:16:07.6064|Info|  Settimeout: id:215, (64) ms
2015-08-22 15:16:07.6584|Info|      Encerrado timer: id:213, (15:16:07.6584)
2015-08-22 15:16:07.6584|Info|      Executando timer: id:214, (15:16:07.6594)
2015-08-22 15:16:07.6584|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:07.6614|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:07.6614|Info|      Encerrado timer: id:214, (15:16:07.6624)
2015-08-22 15:16:07.6614|Info|      Executando timer: id:215, (15:16:07.6735)
2015-08-22 15:16:07.6614|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:07.6614|Info|  Settimeout: id:216, (18) ms
2015-08-22 15:16:07.7284|Info|  Settimeout: id:217, (13) ms
2015-08-22 15:16:07.7795|Info|      Encerrado timer: id:215, (15:16:07.7795)
2015-08-22 15:16:07.7795|Info|      Executando timer: id:217, (15:16:07.7805)
2015-08-22 15:16:07.7795|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.7795|Info|  Settimeout: id:218, (32) ms
2015-08-22 15:16:07.8336|Info|  Settimeout: id:219, (1) ms
2015-08-22 15:16:07.8846|Info|  Settimeout: id:220, (64) ms
2015-08-22 15:16:07.9356|Info|      Encerrado timer: id:217, (15:16:07.9356)
2015-08-22 15:16:07.9356|Info|      Executando timer: id:218, (15:16:07.9376)
2015-08-22 15:16:07.9356|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:07.9356|Info|      Encerrado timer: id:218, (15:16:07.9416)
2015-08-22 15:16:07.9436|Info|      Executando timer: id:219, (15:16:07.9436)
2015-08-22 15:16:07.9436|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:07.9436|Info|      Encerrado timer: id:219, (15:16:07.9526)
2015-08-22 15:16:07.9436|Info|      Executando timer: id:220, (15:16:07.9536)
2015-08-22 15:16:07.9436|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:07.9436|Info|  Settimeout: id:221, (13) ms
2015-08-22 15:16:08.0077|Info|      Encerrado timer: id:220, (15:16:08.0077)
2015-08-22 15:16:08.0077|Info|      Executando timer: id:221, (15:16:08.0077)
2015-08-22 15:16:08.0077|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.0077|Info|  Settimeout: id:222, (32) ms
2015-08-22 15:16:08.0607|Info|  Settimeout: id:223, (64) ms
2015-08-22 15:16:08.1118|Info|      Encerrado timer: id:221, (15:16:08.1118)
2015-08-22 15:16:08.1268|Info|      Executando timer: id:223, (15:16:08.1268)
2015-08-22 15:16:08.1268|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:08.1268|Info|  Settimeout: id:224, (13) ms
2015-08-22 15:16:08.1798|Info|      Encerrado timer: id:223, (15:16:08.1798)
2015-08-22 15:16:08.1798|Info|      Executando timer: id:224, (15:16:08.1808)
2015-08-22 15:16:08.1798|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.1798|Info|  Settimeout: id:225, (32) ms
2015-08-22 15:16:08.2398|Info|  Settimeout: id:226, (64) ms
2015-08-22 15:16:08.2919|Info|      Encerrado timer: id:224, (15:16:08.2919)
2015-08-22 15:16:08.2919|Info|      Executando timer: id:225, (15:16:08.2928)
2015-08-22 15:16:08.2919|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:08.2919|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:08.2919|Info|      Encerrado timer: id:225, (15:16:08.2958)
2015-08-22 15:16:08.3069|Info|      Executando timer: id:226, (15:16:08.3069)
2015-08-22 15:16:08.3069|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:08.3069|Info|  Settimeout: id:227, (18) ms
2015-08-22 15:16:08.3609|Info|  Settimeout: id:228, (13) ms
2015-08-22 15:16:08.4119|Info|      Encerrado timer: id:226, (15:16:08.4119)
2015-08-22 15:16:08.4119|Info|      Executando timer: id:228, (15:16:08.4129)
2015-08-22 15:16:08.4119|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.4119|Info|  Settimeout: id:229, (32) ms
2015-08-22 15:16:08.4670|Info|  Settimeout: id:230, (1) ms
2015-08-22 15:16:08.5180|Info|  Settimeout: id:231, (64) ms
2015-08-22 15:16:08.5691|Info|      Encerrado timer: id:228, (15:16:08.5691)
2015-08-22 15:16:08.5691|Info|      Executando timer: id:229, (15:16:08.5700)
2015-08-22 15:16:08.5691|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:08.5691|Info|      Encerrado timer: id:229, (15:16:08.5720)
2015-08-22 15:16:08.5691|Info|      Executando timer: id:230, (15:16:08.5720)
2015-08-22 15:16:08.5691|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:08.5691|Info|      Encerrado timer: id:230, (15:16:08.5760)
2015-08-22 15:16:08.5841|Info|      Executando timer: id:231, (15:16:08.5841)
2015-08-22 15:16:08.5841|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:08.5841|Info|  Settimeout: id:232, (13) ms
2015-08-22 15:16:08.6371|Info|      Encerrado timer: id:231, (15:16:08.6371)
2015-08-22 15:16:08.6371|Info|      Executando timer: id:232, (15:16:08.6381)
2015-08-22 15:16:08.6371|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.6371|Info|  Settimeout: id:233, (32) ms
2015-08-22 15:16:08.6922|Info|  Settimeout: id:234, (64) ms
2015-08-22 15:16:08.7432|Info|      Encerrado timer: id:232, (15:16:08.7432)
2015-08-22 15:16:08.7582|Info|      Executando timer: id:234, (15:16:08.7582)
2015-08-22 15:16:08.7582|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:08.7582|Info|  Settimeout: id:235, (13) ms
2015-08-22 15:16:08.8153|Info|      Encerrado timer: id:234, (15:16:08.8153)
2015-08-22 15:16:08.8153|Info|      Executando timer: id:235, (15:16:08.8162)
2015-08-22 15:16:08.8153|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.8182|Info|  Settimeout: id:236, (32) ms
2015-08-22 15:16:08.8692|Info|  Settimeout: id:237, (64) ms
2015-08-22 15:16:08.9203|Info|      Encerrado timer: id:235, (15:16:08.9203)
2015-08-22 15:16:08.9203|Info|      Executando timer: id:236, (15:16:08.9213)
2015-08-22 15:16:08.9203|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:08.9203|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:08.9203|Info|      Encerrado timer: id:236, (15:16:08.9243)
2015-08-22 15:16:08.9353|Info|      Executando timer: id:237, (15:16:08.9353)
2015-08-22 15:16:08.9353|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:08.9353|Info|  Settimeout: id:238, (18) ms
2015-08-22 15:16:08.9903|Info|  Settimeout: id:239, (13) ms
2015-08-22 15:16:09.0414|Info|      Encerrado timer: id:237, (15:16:09.0414)
2015-08-22 15:16:09.0414|Info|      Executando timer: id:239, (15:16:09.0424)
2015-08-22 15:16:09.0414|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.0554|Info|  Settimeout: id:240, (32) ms
2015-08-22 15:16:09.1064|Info|  Settimeout: id:241, (1) ms
2015-08-22 15:16:09.1575|Info|  Settimeout: id:242, (64) ms
2015-08-22 15:16:09.2095|Info|      Encerrado timer: id:239, (15:16:09.2095)
2015-08-22 15:16:09.2095|Info|      Executando timer: id:240, (15:16:09.2115)
2015-08-22 15:16:09.2095|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:09.2095|Info|      Encerrado timer: id:240, (15:16:09.2165)
2015-08-22 15:16:09.2095|Info|      Executando timer: id:241, (15:16:09.2185)
2015-08-22 15:16:09.2095|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:09.2325|Info|      Encerrado timer: id:241, (15:16:09.2325)
2015-08-22 15:16:09.2325|Info|      Executando timer: id:242, (15:16:09.2355)
2015-08-22 15:16:09.2325|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:09.2425|Info|  Settimeout: id:243, (13) ms
2015-08-22 15:16:09.2926|Info|      Encerrado timer: id:242, (15:16:09.2926)
2015-08-22 15:16:09.2926|Info|      Executando timer: id:243, (15:16:09.2936)
2015-08-22 15:16:09.2926|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.2926|Info|  Settimeout: id:244, (32) ms
2015-08-22 15:16:09.3476|Info|  Settimeout: id:245, (64) ms
2015-08-22 15:16:09.3987|Info|      Encerrado timer: id:243, (15:16:09.3987)
2015-08-22 15:16:09.4137|Info|      Executando timer: id:245, (15:16:09.4137)
2015-08-22 15:16:09.4137|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:09.4137|Info|  Settimeout: id:246, (13) ms
2015-08-22 15:16:09.4687|Info|      Encerrado timer: id:245, (15:16:09.4687)
2015-08-22 15:16:09.4687|Info|      Executando timer: id:246, (15:16:09.4697)
2015-08-22 15:16:09.4687|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.4737|Info|  Settimeout: id:247, (32) ms
2015-08-22 15:16:09.5247|Info|  Settimeout: id:248, (64) ms
2015-08-22 15:16:09.5758|Info|      Encerrado timer: id:246, (15:16:09.5758)
2015-08-22 15:16:09.5758|Info|      Executando timer: id:247, (15:16:09.5758)
2015-08-22 15:16:09.5758|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:09.5758|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:09.5758|Info|      Encerrado timer: id:247, (15:16:09.5788)
2015-08-22 15:16:09.5908|Info|      Executando timer: id:248, (15:16:09.5908)
2015-08-22 15:16:09.5908|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:09.5908|Info|  Settimeout: id:249, (18) ms
2015-08-22 15:16:09.6468|Info|  Settimeout: id:250, (13) ms
2015-08-22 15:16:09.6979|Info|      Encerrado timer: id:248, (15:16:09.6979)
2015-08-22 15:16:09.6979|Info|      Executando timer: id:250, (15:16:09.6988)
2015-08-22 15:16:09.6979|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.6979|Info|  Settimeout: id:251, (32) ms
2015-08-22 15:16:09.7569|Info|  Settimeout: id:252, (1) ms
2015-08-22 15:16:09.8079|Info|  Settimeout: id:253, (64) ms
2015-08-22 15:16:09.8600|Info|      Encerrado timer: id:250, (15:16:09.8600)
2015-08-22 15:16:09.8600|Info|      Executando timer: id:251, (15:16:09.8620)
2015-08-22 15:16:09.8650|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:09.8650|Info|      Encerrado timer: id:251, (15:16:09.8670)
2015-08-22 15:16:09.8650|Info|      Executando timer: id:252, (15:16:09.8680)
2015-08-22 15:16:09.8650|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:09.8870|Info|      Encerrado timer: id:252, (15:16:09.8870)
2015-08-22 15:16:09.8870|Info|      Executando timer: id:253, (15:16:09.8910)
2015-08-22 15:16:09.8870|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:09.8980|Info|  Settimeout: id:254, (13) ms
2015-08-22 15:16:09.9501|Info|      Encerrado timer: id:253, (15:16:09.9501)
2015-08-22 15:16:09.9501|Info|      Executando timer: id:254, (15:16:09.9510)
2015-08-22 15:16:09.9501|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.9501|Info|----------------------------------------
2015-08-22 15:16:09.9501|Info|lodash.delay
2015-08-22 15:16:09.9501|Info|----------------------------------------
2015-08-22 15:16:09.9580|Info| FAIL - should delay `func` execution
2015-08-22 15:16:09.9580|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:16:09.9580|Info|  Settimeout: id:255, (32) ms
2015-08-22 15:16:10.0131|Info|  Settimeout: id:256, (64) ms
2015-08-22 15:16:10.0651|Info|      Encerrado timer: id:254, (15:16:10.0651)
2015-08-22 15:16:10.0801|Info|      Executando timer: id:256, (15:16:10.0801)
2015-08-22 15:16:10.0831|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:10.0831|Info|  Settimeout: id:257, (13) ms
2015-08-22 15:16:10.1412|Info|      Encerrado timer: id:256, (15:16:10.1412)
2015-08-22 15:16:10.1412|Info|      Executando timer: id:257, (15:16:10.1432)
2015-08-22 15:16:10.1462|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:10.1462|Info|----------------------------------------
2015-08-22 15:16:10.1462|Info|lodash.throttle
2015-08-22 15:16:10.1462|Info|----------------------------------------
2015-08-22 15:16:10.1462|Info| FAIL - should throttle a function
2015-08-22 15:16:10.1462|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:16:10.1462|Info|  Settimeout: id:258, (32) ms
2015-08-22 15:16:10.2062|Info|  Settimeout: id:259, (64) ms
2015-08-22 15:16:10.2572|Info|      Encerrado timer: id:257, (15:16:10.2572)
2015-08-22 15:16:10.2572|Info|      Executando timer: id:258, (15:16:10.2572)
2015-08-22 15:16:10.2572|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:10.2572|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:10.2572|Info|      Encerrado timer: id:258, (15:16:10.2602)
2015-08-22 15:16:10.2722|Info|      Executando timer: id:259, (15:16:10.2722)
2015-08-22 15:16:10.2722|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:10.2722|Info|  Settimeout: id:260, (18) ms
2015-08-22 15:16:10.3283|Info|  Settimeout: id:261, (13) ms
2015-08-22 15:16:10.3803|Info|      Encerrado timer: id:259, (15:16:10.3803)
2015-08-22 15:16:10.3803|Info|      Executando timer: id:261, (15:16:10.3823)
2015-08-22 15:16:10.3803|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:10.3803|Info| FAIL - subsequent calls should return the result of the first call
2015-08-22 15:16:10.3803|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:16:10.3803|Info|    FAIL | EQ | ok | Expected: y, Actual: y
2015-08-22 15:16:10.3983|Info|----------------------------------------
2015-08-22 15:16:10.3983|Info|    PASS: 4447  FAIL: 4  TOTAL: 4451
2015-08-22 15:16:10.3983|Info|    Finished in 18151 milliseconds.
2015-08-22 15:16:10.3983|Info|----------------------------------------
2015-08-22 15:16:10.4364|Info|      Encerrado timer: id:261, (15:16:10.4364)
2015-08-22 15:16:10.4364|Info|Encerrando os testes
2015-08-22 15:16:10.4364|Info|Total:4451, Sucesso: 4447, Falha: 4
2015-08-22 15:16:10.4364|Info|19 segundos para avaliar o individuo lodash.js
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [113]:1:24
2015-08-22 15:16:10.4424|Info|FAILED: lodash.isNil: should work with nulls from another realm: Expected 2 assertions, but 1 were run, ,     at Script Document [12]:7765:5
    at Script Document [12]:7774:4
    at Script Document [12]:17424:3
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [135]:1:24
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [141]:1:24
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [265]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [271]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [277]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [283]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [289]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [295]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [301]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [307]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [313]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [319]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [325]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [331]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [337]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [343]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [349]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [355]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [361]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [367]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [373]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [379]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [385]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [391]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [397]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [403]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [409]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [415]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [421]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [427]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [433]:1:25
2015-08-22 15:16:10.4584|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [439]:1:25
2015-08-22 15:16:34.5175|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:16:57.6949|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:17:19.0811|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:17:44.6539|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:19:41.4744|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:19:41.5985|Info|Iniciando os testes
2015-08-22 15:19:41.5985|Info|  Settimeout: id:1, (13) ms
2015-08-22 15:19:41.6185|Info|      Executando timer: id:1, (15:19:41.6185)
2015-08-22 15:19:41.6716|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:41.6856|Info|----------------------------------------
2015-08-22 15:19:41.6856|Info|Arrays
2015-08-22 15:19:41.6856|Info|----------------------------------------
2015-08-22 15:19:41.6926|Info| PASS - first
2015-08-22 15:19:41.6926|Info| PASS - head
2015-08-22 15:19:41.6926|Info| PASS - take
2015-08-22 15:19:41.6926|Info| PASS - rest
2015-08-22 15:19:41.6926|Info| PASS - tail
2015-08-22 15:19:41.6926|Info| PASS - drop
2015-08-22 15:19:41.6926|Info| PASS - initial
2015-08-22 15:19:41.6926|Info| PASS - last
2015-08-22 15:19:41.6926|Info| PASS - compact
2015-08-22 15:19:41.8617|Info| PASS - flatten
2015-08-22 15:19:41.8617|Info| PASS - without
2015-08-22 15:19:41.8647|Info| PASS - sortedIndex
2015-08-22 15:19:41.8647|Info| PASS - uniq
2015-08-22 15:19:41.8647|Info| PASS - unique
2015-08-22 15:19:41.8647|Info| PASS - intersection
2015-08-22 15:19:41.8647|Info| PASS - union
2015-08-22 15:19:41.8647|Info| PASS - difference
2015-08-22 15:19:41.8647|Info| PASS - zip
2015-08-22 15:19:41.8647|Info| PASS - unzip
2015-08-22 15:19:41.8647|Info| PASS - object
2015-08-22 15:19:41.8647|Info| PASS - indexOf
2015-08-22 15:19:41.8647|Info| PASS - indexOf with NaN
2015-08-22 15:19:41.8807|Info| PASS - indexOf with +- 0
2015-08-22 15:19:41.8807|Info| PASS - lastIndexOf
2015-08-22 15:19:41.8807|Info| PASS - lastIndexOf with NaN
2015-08-22 15:19:41.8807|Info| PASS - lastIndexOf with +- 0
2015-08-22 15:19:41.8807|Info| PASS - findIndex
2015-08-22 15:19:41.8807|Info| PASS - findLastIndex
2015-08-22 15:19:41.8807|Info| PASS - range
2015-08-22 15:19:41.8807|Info|----------------------------------------
2015-08-22 15:19:41.8807|Info|Chaining
2015-08-22 15:19:41.8807|Info|----------------------------------------
2015-08-22 15:19:41.8807|Info| PASS - map/flatten/reduce
2015-08-22 15:19:41.8807|Info| PASS - select/reject/sortBy
2015-08-22 15:19:41.8957|Info| PASS - select/reject/sortBy in functional style
2015-08-22 15:19:41.8957|Info| PASS - reverse/concat/unshift/pop/map
2015-08-22 15:19:41.8957|Info| PASS - splice
2015-08-22 15:19:41.8957|Info| PASS - shift
2015-08-22 15:19:41.8957|Info| PASS - pop
2015-08-22 15:19:41.8957|Info| PASS - chaining works in small stages
2015-08-22 15:19:41.8957|Info| PASS - #1562: Engine proxies for chained functions
2015-08-22 15:19:41.8957|Info|----------------------------------------
2015-08-22 15:19:41.8957|Info|Collections
2015-08-22 15:19:41.8957|Info|----------------------------------------
2015-08-22 15:19:41.8957|Info| PASS - each
2015-08-22 15:19:41.8957|Info| PASS - forEach
2015-08-22 15:19:41.8957|Info| PASS - lookupIterator with contexts
2015-08-22 15:19:41.9157|Info| PASS - Iterating objects with sketchy length properties
2015-08-22 15:19:41.9157|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-22 15:19:41.9157|Info| PASS - map
2015-08-22 15:19:41.9157|Info| PASS - collect
2015-08-22 15:19:41.9157|Info| PASS - reduce
2015-08-22 15:19:41.9157|Info| PASS - foldl
2015-08-22 15:19:41.9157|Info| PASS - reduceRight
2015-08-22 15:19:41.9267|Info| PASS - foldr
2015-08-22 15:19:41.9267|Info| PASS - find
2015-08-22 15:19:41.9267|Info| PASS - detect
2015-08-22 15:19:41.9267|Info| PASS - filter
2015-08-22 15:19:41.9267|Info| PASS - select
2015-08-22 15:19:41.9267|Info| PASS - reject
2015-08-22 15:19:41.9267|Info| PASS - every
2015-08-22 15:19:41.9267|Info| PASS - all
2015-08-22 15:19:41.9267|Info| PASS - some
2015-08-22 15:19:41.9267|Info| PASS - any
2015-08-22 15:19:41.9267|Info| PASS - includes
2015-08-22 15:19:41.9267|Info| PASS - include
2015-08-22 15:19:41.9267|Info| PASS - contains
2015-08-22 15:19:41.9428|Info| PASS - includes with NaN
2015-08-22 15:19:41.9428|Info| PASS - includes with +- 0
2015-08-22 15:19:41.9428|Info| PASS - invoke
2015-08-22 15:19:41.9428|Info| PASS - invoke w/ function reference
2015-08-22 15:19:41.9428|Info| PASS - invoke when strings have a call method
2015-08-22 15:19:41.9428|Info| PASS - pluck
2015-08-22 15:19:41.9428|Info| PASS - where
2015-08-22 15:19:41.9428|Info| PASS - findWhere
2015-08-22 15:19:41.9608|Info| PASS - max
2015-08-22 15:19:41.9608|Info| PASS - min
2015-08-22 15:19:41.9608|Info| PASS - sortBy
2015-08-22 15:19:41.9608|Info| PASS - groupBy
2015-08-22 15:19:41.9608|Info| PASS - indexBy
2015-08-22 15:19:41.9778|Info| PASS - countBy
2015-08-22 15:19:41.9778|Info| PASS - shuffle
2015-08-22 15:19:41.9778|Info| PASS - sample
2015-08-22 15:19:41.9778|Info| PASS - toArray
2015-08-22 15:19:41.9778|Info| PASS - size
2015-08-22 15:19:41.9778|Info| PASS - partition
2015-08-22 15:19:41.9778|Info|----------------------------------------
2015-08-22 15:19:41.9778|Info|Functions
2015-08-22 15:19:41.9778|Info|----------------------------------------
2015-08-22 15:19:41.9778|Info| PASS - bind
2015-08-22 15:19:41.9898|Info| PASS - partial
2015-08-22 15:19:41.9898|Info| PASS - bindAll
2015-08-22 15:19:41.9898|Info| PASS - memoize
2015-08-22 15:19:41.9898|Info|  Settimeout: id:2, (100) ms
2015-08-22 15:19:42.0459|Info|  Settimeout: id:3, (50) ms
2015-08-22 15:19:42.0979|Info|  Settimeout: id:4, (150) ms
2015-08-22 15:19:42.1500|Info|      Encerrado timer: id:1, (15:19:42.1500)
2015-08-22 15:19:42.1500|Info|      Executando timer: id:0, (15:19:42.1539)
2015-08-22 15:19:42.1500|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 15:19:42.1500|Info|  Settimeout: id:5, (500) ms
2015-08-22 15:19:42.2080|Info|      Encerrado timer: id:0, (15:19:42.2080)
2015-08-22 15:19:42.2080|Info|      Executando timer: id:2, (15:19:42.2080)
2015-08-22 15:19:42.2080|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.2080|Info|      Encerrado timer: id:2, (15:19:42.2099)
2015-08-22 15:19:42.2080|Info|      Executando timer: id:3, (15:19:42.2109)
2015-08-22 15:19:42.2080|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:42.2080|Info|      Encerrado timer: id:3, (15:19:42.2140)
2015-08-22 15:19:42.2510|Info|      Executando timer: id:4, (15:19:42.2510)
2015-08-22 15:19:42.2510|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:42.2570|Info|  Settimeout: id:6, (13) ms
2015-08-22 15:19:42.3091|Info|      Encerrado timer: id:4, (15:19:42.3091)
2015-08-22 15:19:42.3091|Info|      Executando timer: id:6, (15:19:42.3110)
2015-08-22 15:19:42.3091|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.3190|Info|  Settimeout: id:7, (1) ms
2015-08-22 15:19:42.3731|Info|  Settimeout: id:8, (50) ms
2015-08-22 15:19:42.4252|Info|      Encerrado timer: id:6, (15:19:42.4252)
2015-08-22 15:19:42.4252|Info|      Executando timer: id:7, (15:19:42.4261)
2015-08-22 15:19:42.4271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.4271|Info|      Encerrado timer: id:7, (15:19:42.4281)
2015-08-22 15:19:42.4271|Info|      Executando timer: id:8, (15:19:42.4291)
2015-08-22 15:19:42.4271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.4271|Info|  Settimeout: id:9, (13) ms
2015-08-22 15:19:42.4832|Info|      Encerrado timer: id:8, (15:19:42.4832)
2015-08-22 15:19:42.4832|Info|      Executando timer: id:9, (15:19:42.4852)
2015-08-22 15:19:42.4832|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.4911|Info| PASS - defer
2015-08-22 15:19:42.4911|Info|  Settimeout: id:10, (32) ms
2015-08-22 15:19:42.5502|Info|  Settimeout: id:11, (64) ms
2015-08-22 15:19:42.6022|Info|      Encerrado timer: id:9, (15:19:42.6022)
2015-08-22 15:19:42.6022|Info|      Executando timer: id:10, (15:19:42.6032)
2015-08-22 15:19:42.6022|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:42.6022|Info|      Encerrado timer: id:10, (15:19:42.6072)
2015-08-22 15:19:42.6172|Info|      Executando timer: id:11, (15:19:42.6172)
2015-08-22 15:19:42.6172|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.6172|Info|  Settimeout: id:12, (13) ms
2015-08-22 15:19:42.6733|Info|      Encerrado timer: id:11, (15:19:42.6733)
2015-08-22 15:19:42.6733|Info|      Executando timer: id:12, (15:19:42.6743)
2015-08-22 15:19:42.6733|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.6733|Info| PASS - throttle
2015-08-22 15:19:42.6783|Info|  Settimeout: id:13, (32) ms
2015-08-22 15:19:42.7334|Info|  Settimeout: id:14, (64) ms
2015-08-22 15:19:42.7874|Info|  Settimeout: id:15, (96) ms
2015-08-22 15:19:42.8395|Info|      Encerrado timer: id:12, (15:19:42.8395)
2015-08-22 15:19:42.8395|Info|      Executando timer: id:5, (15:19:42.8414)
2015-08-22 15:19:42.8395|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 15:19:42.8395|Info|      Encerrado timer: id:5, (15:19:42.8444)
2015-08-22 15:19:42.8395|Info|      Executando timer: id:13, (15:19:42.8444)
2015-08-22 15:19:42.8395|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:42.8395|Info|      Encerrado timer: id:13, (15:19:42.8474)
2015-08-22 15:19:42.8395|Info|      Executando timer: id:14, (15:19:42.8474)
2015-08-22 15:19:42.8494|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.8494|Info|  Settimeout: id:16, (29) ms
2015-08-22 15:19:42.9015|Info|      Encerrado timer: id:14, (15:19:42.9015)
2015-08-22 15:19:42.9015|Info|      Executando timer: id:16, (15:19:42.9025)
2015-08-22 15:19:42.9015|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:42.9015|Info|      Encerrado timer: id:16, (15:19:42.9044)
2015-08-22 15:19:42.9015|Info|      Executando timer: id:15, (15:19:42.9055)
2015-08-22 15:19:42.9015|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.9015|Info|  Settimeout: id:17, (13) ms
2015-08-22 15:19:42.9585|Info|      Encerrado timer: id:15, (15:19:42.9585)
2015-08-22 15:19:42.9585|Info|      Executando timer: id:17, (15:19:42.9595)
2015-08-22 15:19:42.9585|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.9585|Info| PASS - throttle arguments
2015-08-22 15:19:42.9585|Info|  Settimeout: id:18, (64) ms
2015-08-22 15:19:43.0186|Info|      Encerrado timer: id:17, (15:19:43.0186)
2015-08-22 15:19:43.0336|Info|      Executando timer: id:18, (15:19:43.0336)
2015-08-22 15:19:43.0336|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.0365|Info|  Settimeout: id:19, (13) ms
2015-08-22 15:19:43.0886|Info|      Encerrado timer: id:18, (15:19:43.0886)
2015-08-22 15:19:43.0886|Info|      Executando timer: id:19, (15:19:43.0906)
2015-08-22 15:19:43.0886|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:43.0886|Info| PASS - throttle once
2015-08-22 15:19:43.0996|Info|  Settimeout: id:20, (32) ms
2015-08-22 15:19:43.1526|Info|  Settimeout: id:21, (64) ms
2015-08-22 15:19:43.2047|Info|      Encerrado timer: id:19, (15:19:43.2047)
2015-08-22 15:19:43.2047|Info|      Executando timer: id:20, (15:19:43.2067)
2015-08-22 15:19:43.2097|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.2097|Info|      Encerrado timer: id:20, (15:19:43.2117)
2015-08-22 15:19:43.2097|Info|      Executando timer: id:21, (15:19:43.2197)
2015-08-22 15:19:43.2097|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.2257|Info|  Settimeout: id:22, (13) ms
2015-08-22 15:19:43.2788|Info|      Encerrado timer: id:21, (15:19:43.2788)
2015-08-22 15:19:43.2788|Info|      Executando timer: id:22, (15:19:43.2797)
2015-08-22 15:19:43.2788|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:43.2788|Info| PASS - throttle twice
2015-08-22 15:19:43.2788|Info|  Settimeout: id:23, (30) ms
2015-08-22 15:19:43.3377|Info|  Settimeout: id:24, (85) ms
2015-08-22 15:19:43.3888|Info|      Encerrado timer: id:22, (15:19:43.3888)
2015-08-22 15:19:43.3888|Info|      Executando timer: id:23, (15:19:43.3898)
2015-08-22 15:19:43.3888|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.3888|Info|      Encerrado timer: id:23, (15:19:43.3928)
2015-08-22 15:19:43.4249|Info|      Executando timer: id:24, (15:19:43.4249)
2015-08-22 15:19:43.4249|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.4278|Info|  Settimeout: id:25, (13) ms
2015-08-22 15:19:43.4799|Info|      Encerrado timer: id:24, (15:19:43.4799)
2015-08-22 15:19:43.4799|Info|      Executando timer: id:25, (15:19:43.4809)
2015-08-22 15:19:43.4799|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:43.4799|Info| PASS - more throttling
2015-08-22 15:19:43.4799|Info|  Settimeout: id:26, (100) ms
2015-08-22 15:19:43.5379|Info|  Settimeout: id:27, (50) ms
2015-08-22 15:19:43.5889|Info|  Settimeout: id:28, (150) ms
2015-08-22 15:19:43.6400|Info|  Settimeout: id:29, (160) ms
2015-08-22 15:19:43.6930|Info|  Settimeout: id:30, (230) ms
2015-08-22 15:19:43.7460|Info|  Settimeout: id:31, (300) ms
2015-08-22 15:19:43.7991|Info|      Encerrado timer: id:25, (15:19:43.7991)
2015-08-22 15:19:43.7991|Info|      Executando timer: id:26, (15:19:43.8001)
2015-08-22 15:19:43.8021|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.8021|Info|      Encerrado timer: id:26, (15:19:43.8031)
2015-08-22 15:19:43.8021|Info|      Executando timer: id:27, (15:19:43.8041)
2015-08-22 15:19:43.8021|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.8021|Info|  Settimeout: id:32, (95) ms
2015-08-22 15:19:43.8602|Info|      Encerrado timer: id:27, (15:19:43.8602)
2015-08-22 15:19:43.8602|Info|      Executando timer: id:28, (15:19:43.8611)
2015-08-22 15:19:43.8602|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.8641|Info|      Encerrado timer: id:28, (15:19:43.8641)
2015-08-22 15:19:43.8641|Info|      Executando timer: id:29, (15:19:43.8651)
2015-08-22 15:19:43.8641|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.8641|Info|      Encerrado timer: id:29, (15:19:43.8681)
2015-08-22 15:19:43.9062|Info|      Executando timer: id:32, (15:19:43.9062)
2015-08-22 15:19:43.9062|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.9062|Info|      Encerrado timer: id:32, (15:19:43.9092)
2015-08-22 15:19:43.9262|Info|      Executando timer: id:30, (15:19:43.9262)
2015-08-22 15:19:43.9272|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.9272|Info|  Settimeout: id:33, (81) ms
2015-08-22 15:19:43.9812|Info|      Encerrado timer: id:30, (15:19:43.9812)
2015-08-22 15:19:44.0122|Info|      Executando timer: id:33, (15:19:44.0122)
2015-08-22 15:19:44.0122|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.0122|Info|      Encerrado timer: id:33, (15:19:44.0192)
2015-08-22 15:19:44.0503|Info|      Executando timer: id:31, (15:19:44.0503)
2015-08-22 15:19:44.0503|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.0533|Info|  Settimeout: id:34, (13) ms
2015-08-22 15:19:44.1043|Info|      Encerrado timer: id:31, (15:19:44.1043)
2015-08-22 15:19:44.1043|Info|      Executando timer: id:34, (15:19:44.1063)
2015-08-22 15:19:44.1043|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:44.1043|Info|  Settimeout: id:35, (32) ms
2015-08-22 15:19:44.1673|Info|  Settimeout: id:36, (96) ms
2015-08-22 15:19:44.2194|Info|      Encerrado timer: id:34, (15:19:44.2194)
2015-08-22 15:19:44.2194|Info|      Executando timer: id:35, (15:19:44.2204)
2015-08-22 15:19:44.2194|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.2244|Info|      Encerrado timer: id:35, (15:19:44.2244)
2015-08-22 15:19:44.2664|Info|      Executando timer: id:36, (15:19:44.2664)
2015-08-22 15:19:44.2664|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.2734|Info|  Settimeout: id:37, (13) ms
2015-08-22 15:19:44.3255|Info|      Encerrado timer: id:36, (15:19:44.3255)
2015-08-22 15:19:44.3255|Info|      Executando timer: id:37, (15:19:44.3255)
2015-08-22 15:19:44.3255|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:44.3255|Info|  Settimeout: id:38, (60) ms
2015-08-22 15:19:44.3805|Info|  Settimeout: id:39, (96) ms
2015-08-22 15:19:44.4325|Info|      Encerrado timer: id:37, (15:19:44.4325)
2015-08-22 15:19:44.4325|Info|      Executando timer: id:38, (15:19:44.4345)
2015-08-22 15:19:44.4325|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.4325|Info|      Encerrado timer: id:38, (15:19:44.4395)
2015-08-22 15:19:44.4796|Info|      Executando timer: id:39, (15:19:44.4796)
2015-08-22 15:19:44.4796|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.4796|Info|  Settimeout: id:40, (13) ms
2015-08-22 15:19:44.5386|Info|      Encerrado timer: id:39, (15:19:44.5386)
2015-08-22 15:19:44.5386|Info|      Executando timer: id:40, (15:19:44.5396)
2015-08-22 15:19:44.5386|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:44.5386|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-08-22 15:19:44.5386|Info|  Settimeout: id:41, (100) ms
2015-08-22 15:19:44.5956|Info|  Settimeout: id:42, (50) ms
2015-08-22 15:19:44.6487|Info|  Settimeout: id:43, (60) ms
2015-08-22 15:19:44.7007|Info|  Settimeout: id:44, (200) ms
2015-08-22 15:19:44.7528|Info|  Settimeout: id:45, (250) ms
2015-08-22 15:19:44.8048|Info|  Settimeout: id:46, (350) ms
2015-08-22 15:19:44.8568|Info|      Encerrado timer: id:40, (15:19:44.8568)
2015-08-22 15:19:44.8568|Info|      Executando timer: id:41, (15:19:44.8588)
2015-08-22 15:19:44.8568|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.8648|Info|      Encerrado timer: id:41, (15:19:44.8648)
2015-08-22 15:19:44.8648|Info|      Executando timer: id:42, (15:19:44.8668)
2015-08-22 15:19:44.8808|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.8808|Info|  Settimeout: id:47, (100) ms
2015-08-22 15:19:44.9339|Info|      Encerrado timer: id:42, (15:19:44.9339)
2015-08-22 15:19:44.9339|Info|      Executando timer: id:43, (15:19:44.9339)
2015-08-22 15:19:44.9339|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.9339|Info|      Encerrado timer: id:43, (15:19:44.9369)
2015-08-22 15:19:44.9339|Info|      Executando timer: id:44, (15:19:44.9379)
2015-08-22 15:19:44.9339|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.9339|Info|      Encerrado timer: id:44, (15:19:44.9399)
2015-08-22 15:19:44.9850|Info|      Executando timer: id:47, (15:19:44.9850)
2015-08-22 15:19:44.9850|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.9850|Info|      Encerrado timer: id:47, (15:19:44.9869)
2015-08-22 15:19:45.0050|Info|      Executando timer: id:45, (15:19:45.0050)
2015-08-22 15:19:45.0050|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.0050|Info|      Encerrado timer: id:45, (15:19:45.0119)
2015-08-22 15:19:45.1580|Info|      Executando timer: id:46, (15:19:45.1580)
2015-08-22 15:19:45.1610|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.1610|Info|  Settimeout: id:48, (13) ms
2015-08-22 15:19:45.2161|Info|      Encerrado timer: id:46, (15:19:45.2161)
2015-08-22 15:19:45.2161|Info|      Executando timer: id:48, (15:19:45.2171)
2015-08-22 15:19:45.2161|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:45.2161|Info|  Settimeout: id:49, (100) ms
2015-08-22 15:19:45.3192|Info|  Settimeout: id:50, (100) ms
2015-08-22 15:19:45.4192|Info|  Settimeout: id:51, (100) ms
2015-08-22 15:19:45.5183|Info|  Settimeout: id:52, (100) ms
2015-08-22 15:19:45.5703|Info|  Settimeout: id:53, (200) ms
2015-08-22 15:19:45.6224|Info|      Encerrado timer: id:48, (15:19:45.6224)
2015-08-22 15:19:45.6224|Info|      Executando timer: id:52, (15:19:45.6244)
2015-08-22 15:19:45.6224|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:45.6224|Info|      Encerrado timer: id:52, (15:19:45.6294)
2015-08-22 15:19:45.7725|Info|      Executando timer: id:53, (15:19:45.7725)
2015-08-22 15:19:45.7725|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.7725|Info|  Settimeout: id:54, (13) ms
2015-08-22 15:19:45.8255|Info|      Encerrado timer: id:53, (15:19:45.8255)
2015-08-22 15:19:45.8255|Info|      Executando timer: id:54, (15:19:45.8265)
2015-08-22 15:19:45.8255|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:45.8255|Info| PASS - one more throttle with leading: false test
2015-08-22 15:19:45.8335|Info|  Settimeout: id:55, (96) ms
2015-08-22 15:19:45.8866|Info|      Encerrado timer: id:54, (15:19:45.8866)
2015-08-22 15:19:45.9326|Info|      Executando timer: id:55, (15:19:45.9326)
2015-08-22 15:19:45.9326|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.9326|Info|  Settimeout: id:56, (96) ms
2015-08-22 15:19:45.9917|Info|      Encerrado timer: id:55, (15:19:45.9917)
2015-08-22 15:19:46.0387|Info|      Executando timer: id:56, (15:19:46.0387)
2015-08-22 15:19:46.0387|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.0387|Info|  Settimeout: id:57, (13) ms
2015-08-22 15:19:46.0987|Info|      Encerrado timer: id:56, (15:19:46.0987)
2015-08-22 15:19:46.0987|Info|      Executando timer: id:57, (15:19:46.1007)
2015-08-22 15:19:46.0987|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.0987|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-22 15:19:46.0987|Info|  Settimeout: id:58, (200) ms
2015-08-22 15:19:46.1638|Info|      Encerrado timer: id:57, (15:19:46.1638)
2015-08-22 15:19:46.3149|Info|      Executando timer: id:58, (15:19:46.3149)
2015-08-22 15:19:46.3179|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.3179|Info|  Settimeout: id:59, (13) ms
2015-08-22 15:19:46.3750|Info|      Encerrado timer: id:58, (15:19:46.3750)
2015-08-22 15:19:46.3750|Info|      Executando timer: id:59, (15:19:46.3759)
2015-08-22 15:19:46.3750|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.3750|Info| PASS - throttle continues to function after system time is set backwards
2015-08-22 15:19:46.3819|Info|  Settimeout: id:60, (32) ms
2015-08-22 15:19:46.4330|Info|  Settimeout: id:61, (100) ms
2015-08-22 15:19:46.4850|Info|      Encerrado timer: id:59, (15:19:46.4850)
2015-08-22 15:19:46.4850|Info|      Executando timer: id:60, (15:19:46.4870)
2015-08-22 15:19:46.4900|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:46.4900|Info|  Settimeout: id:62, (32) ms
2015-08-22 15:19:46.5461|Info|      Encerrado timer: id:60, (15:19:46.5461)
2015-08-22 15:19:46.5461|Info|      Executando timer: id:62, (15:19:46.5480)
2015-08-22 15:19:46.5461|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:46.5530|Info|      Encerrado timer: id:62, (15:19:46.5530)
2015-08-22 15:19:46.5530|Info|      Executando timer: id:61, (15:19:46.5550)
2015-08-22 15:19:46.5530|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.5530|Info|  Settimeout: id:63, (13) ms
2015-08-22 15:19:46.6141|Info|      Encerrado timer: id:61, (15:19:46.6141)
2015-08-22 15:19:46.6141|Info|      Executando timer: id:63, (15:19:46.6151)
2015-08-22 15:19:46.6141|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.6141|Info| PASS - throttle re-entrant
2015-08-22 15:19:46.6141|Info|  Settimeout: id:64, (32) ms
2015-08-22 15:19:46.6702|Info|  Settimeout: id:65, (16) ms
2015-08-22 15:19:46.7222|Info|  Settimeout: id:66, (96) ms
2015-08-22 15:19:46.7742|Info|      Encerrado timer: id:63, (15:19:46.7742)
2015-08-22 15:19:46.7742|Info|      Executando timer: id:64, (15:19:46.7752)
2015-08-22 15:19:46.7742|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:46.7742|Info|      Encerrado timer: id:64, (15:19:46.7772)
2015-08-22 15:19:46.7742|Info|      Executando timer: id:65, (15:19:46.7782)
2015-08-22 15:19:46.7742|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.7742|Info|  Settimeout: id:67, (32) ms
2015-08-22 15:19:46.8303|Info|      Encerrado timer: id:65, (15:19:46.8303)
2015-08-22 15:19:46.8303|Info|      Executando timer: id:67, (15:19:46.8303)
2015-08-22 15:19:46.8303|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:46.8303|Info|      Encerrado timer: id:67, (15:19:46.8322)
2015-08-22 15:19:46.8332|Info|      Executando timer: id:66, (15:19:46.8332)
2015-08-22 15:19:46.8332|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.8332|Info|  Settimeout: id:68, (13) ms
2015-08-22 15:19:46.8903|Info|      Encerrado timer: id:66, (15:19:46.8903)
2015-08-22 15:19:46.8903|Info|      Executando timer: id:68, (15:19:46.8913)
2015-08-22 15:19:46.8903|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.8963|Info|  Settimeout: id:69, (64) ms
2015-08-22 15:19:46.9493|Info|  Settimeout: id:70, (16) ms
2015-08-22 15:19:47.0003|Info|  Settimeout: id:71, (32) ms
2015-08-22 15:19:47.0524|Info|  Settimeout: id:72, (48) ms
2015-08-22 15:19:47.1044|Info|  Settimeout: id:73, (128) ms
2015-08-22 15:19:47.1565|Info|      Encerrado timer: id:68, (15:19:47.1565)
2015-08-22 15:19:47.1565|Info|      Executando timer: id:69, (15:19:47.1585)
2015-08-22 15:19:47.1615|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.1615|Info|      Encerrado timer: id:69, (15:19:47.1635)
2015-08-22 15:19:47.1615|Info|      Executando timer: id:70, (15:19:47.1655)
2015-08-22 15:19:47.1615|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.1615|Info|  Settimeout: id:74, (64) ms
2015-08-22 15:19:47.2235|Info|      Encerrado timer: id:70, (15:19:47.2235)
2015-08-22 15:19:47.2235|Info|      Executando timer: id:71, (15:19:47.2245)
2015-08-22 15:19:47.2235|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.2235|Info|      Encerrado timer: id:71, (15:19:47.2275)
2015-08-22 15:19:47.2235|Info|      Executando timer: id:72, (15:19:47.2275)
2015-08-22 15:19:47.2235|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.2235|Info|      Encerrado timer: id:72, (15:19:47.2305)
2015-08-22 15:19:47.2235|Info|      Executando timer: id:73, (15:19:47.2355)
2015-08-22 15:19:47.2235|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.2405|Info|  Settimeout: id:75, (13) ms
2015-08-22 15:19:47.2916|Info|      Encerrado timer: id:73, (15:19:47.2916)
2015-08-22 15:19:47.2916|Info|      Executando timer: id:74, (15:19:47.2936)
2015-08-22 15:19:47.2916|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.2916|Info|      Encerrado timer: id:74, (15:19:47.2986)
2015-08-22 15:19:47.3026|Info|      Executando timer: id:75, (15:19:47.3026)
2015-08-22 15:19:47.3026|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:47.3026|Info|  Settimeout: id:76, (32) ms
2015-08-22 15:19:47.3626|Info|  Settimeout: id:77, (96) ms
2015-08-22 15:19:47.4147|Info|      Encerrado timer: id:75, (15:19:47.4147)
2015-08-22 15:19:47.4147|Info|      Executando timer: id:76, (15:19:47.4156)
2015-08-22 15:19:47.4147|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.4147|Info|      Encerrado timer: id:76, (15:19:47.4176)
2015-08-22 15:19:47.4617|Info|      Executando timer: id:77, (15:19:47.4617)
2015-08-22 15:19:47.4617|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.4617|Info|  Settimeout: id:78, (13) ms
2015-08-22 15:19:47.5158|Info|      Encerrado timer: id:77, (15:19:47.5158)
2015-08-22 15:19:47.5158|Info|      Executando timer: id:78, (15:19:47.5167)
2015-08-22 15:19:47.5158|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:47.5158|Info| PASS - debounce asap recursively
2015-08-22 15:19:47.5207|Info|  Settimeout: id:79, (100) ms
2015-08-22 15:19:47.5718|Info|  Settimeout: id:80, (200) ms
2015-08-22 15:19:47.6238|Info|      Encerrado timer: id:78, (15:19:47.6238)
2015-08-22 15:19:47.6238|Info|      Executando timer: id:79, (15:19:47.6258)
2015-08-22 15:19:47.6238|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.6308|Info|      Encerrado timer: id:79, (15:19:47.6308)
2015-08-22 15:19:47.7750|Info|      Executando timer: id:80, (15:19:47.7750)
2015-08-22 15:19:47.7750|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.7750|Info|  Settimeout: id:81, (100) ms
2015-08-22 15:19:47.8349|Info|  Settimeout: id:82, (13) ms
2015-08-22 15:19:47.8870|Info|      Encerrado timer: id:80, (15:19:47.8870)
2015-08-22 15:19:47.8870|Info|      Executando timer: id:82, (15:19:47.8890)
2015-08-22 15:19:47.8870|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:47.8960|Info| PASS - debounce after system time is set backwards
2015-08-22 15:19:47.8960|Info|  Settimeout: id:83, (32) ms
2015-08-22 15:19:47.9521|Info|  Settimeout: id:84, (100) ms
2015-08-22 15:19:48.0041|Info|      Encerrado timer: id:82, (15:19:48.0041)
2015-08-22 15:19:48.0051|Info|      Executando timer: id:81, (15:19:48.0051)
2015-08-22 15:19:48.0051|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:48.0051|Info|      Encerrado timer: id:81, (15:19:48.0071)
2015-08-22 15:19:48.0051|Info|      Executando timer: id:83, (15:19:48.0081)
2015-08-22 15:19:48.0051|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:48.0051|Info|  Settimeout: id:85, (32) ms
2015-08-22 15:19:48.0631|Info|      Encerrado timer: id:83, (15:19:48.0631)
2015-08-22 15:19:48.0631|Info|      Executando timer: id:85, (15:19:48.0631)
2015-08-22 15:19:48.0631|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:48.0631|Info|      Encerrado timer: id:85, (15:19:48.0651)
2015-08-22 15:19:48.0631|Info|      Executando timer: id:84, (15:19:48.0661)
2015-08-22 15:19:48.0631|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:48.0681|Info|  Settimeout: id:86, (13) ms
2015-08-22 15:19:48.1182|Info|      Encerrado timer: id:84, (15:19:48.1182)
2015-08-22 15:19:48.1182|Info|      Executando timer: id:86, (15:19:48.1182)
2015-08-22 15:19:48.1182|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:48.1182|Info| PASS - debounce re-entrant
2015-08-22 15:19:48.1182|Info| PASS - once
2015-08-22 15:19:48.1182|Info| PASS - Recursive onced function.
2015-08-22 15:19:48.1182|Info| PASS - wrap
2015-08-22 15:19:48.1182|Info| PASS - negate
2015-08-22 15:19:48.1182|Info| PASS - compose
2015-08-22 15:19:48.1182|Info| PASS - after
2015-08-22 15:19:48.1182|Info| PASS - before
2015-08-22 15:19:48.1182|Info| PASS - iteratee
2015-08-22 15:19:48.1302|Info|----------------------------------------
2015-08-22 15:19:48.1302|Info|Objects
2015-08-22 15:19:48.1302|Info|----------------------------------------
2015-08-22 15:19:48.1302|Info| PASS - keys
2015-08-22 15:19:48.1302|Info| PASS - allKeys
2015-08-22 15:19:48.1302|Info| PASS - values
2015-08-22 15:19:48.1302|Info| PASS - pairs
2015-08-22 15:19:48.1302|Info| PASS - invert
2015-08-22 15:19:48.1302|Info| PASS - functions
2015-08-22 15:19:48.1302|Info| PASS - methods
2015-08-22 15:19:48.1302|Info| PASS - extend
2015-08-22 15:19:48.1302|Info| PASS - extendOwn
2015-08-22 15:19:48.1462|Info| PASS - pick
2015-08-22 15:19:48.1462|Info| PASS - omit
2015-08-22 15:19:48.1462|Info| PASS - defaults
2015-08-22 15:19:48.1462|Info| PASS - clone
2015-08-22 15:19:48.1462|Info| PASS - create
2015-08-22 15:19:48.1462|Info| PASS - isEqual
2015-08-22 15:19:48.1462|Info| PASS - isEmpty
2015-08-22 15:19:48.1462|Info| PASS - isArguments
2015-08-22 15:19:48.1462|Info| PASS - isObject
2015-08-22 15:19:48.1462|Info| PASS - isArray
2015-08-22 15:19:48.1612|Info| PASS - isString
2015-08-22 15:19:48.1612|Info| PASS - isNumber
2015-08-22 15:19:48.1612|Info| PASS - isBoolean
2015-08-22 15:19:48.1612|Info| PASS - isFunction
2015-08-22 15:19:48.1612|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-22 15:19:48.1612|Info|    PASS | EQ | can extract the keys from an object
2015-08-22 15:19:48.1612|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | matches non-enumerable properties
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-22 15:19:48.1772|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-22 15:19:48.1772|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | matches non-enumerable properties
2015-08-22 15:19:48.1772|Info|    PASS | EQ | should include inherited keys
2015-08-22 15:19:48.1772|Info|    PASS | EQ | should get keys from constructor
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can extract the values from an object
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can convert an object into pairs
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can invert an object
2015-08-22 15:19:48.1772|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can invert an object with "length"
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-22 15:19:48.1932|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-22 15:19:48.1932|Info|    PASS | EQ | alias for functions
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties in source override destination
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can extend from multiple source objects
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extend copies undefined values
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extend copies all properties from source
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-22 15:19:48.1932|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extending null results in null
2015-08-22 15:19:48.1932|Info|    PASS | OK | extending undefined results in undefined
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties in source override destination
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can assign from multiple source objects
2015-08-22 15:19:48.1932|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-22 15:19:48.1932|Info|    PASS | EQ | assign copies undefined values
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assign copies own properties from source
2015-08-22 15:19:48.2082|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | OK | assigning undefined results in undefined
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can restrict properties to those named
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can pick numeric properties
2015-08-22 15:19:48.2082|Info|    PASS | EQ | Called with null/undefined
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | Called with null/undefined
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can iterate primitives
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can accept a predicate and context
2015-08-22 15:19:48.2242|Info|    PASS | EQ | include prototype props
2015-08-22 15:19:48.2242|Info|    PASS | EQ | function is given context
2015-08-22 15:19:48.2242|Info|    PASS | EQ | does not set own property if property not in object
2015-08-22 15:19:48.2242|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-22 15:19:48.2242|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-22 15:19:48.2242|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit a single named property
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit several named properties
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit properties named in an array
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit numeric properties
2015-08-22 15:19:48.2242|Info|    PASS | EQ | non objects return empty object
2015-08-22 15:19:48.2242|Info|    PASS | EQ | null/undefined return empty object
2015-08-22 15:19:48.2242|Info|    PASS | EQ | returns empty object for primitives
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can accept a predicate
2015-08-22 15:19:48.2402|Info|    PASS | EQ | include prototype props
2015-08-22 15:19:48.2402|Info|    PASS | EQ | function is given context
2015-08-22 15:19:48.2402|Info|    PASS | EQ | value exists
2015-08-22 15:19:48.2402|Info|    PASS | EQ | value exists
2015-08-22 15:19:48.2402|Info|    PASS | EQ | default applied
2015-08-22 15:19:48.2402|Info|    PASS | EQ | null isn't overridden
2015-08-22 15:19:48.2402|Info|    PASS | EQ | value exists
2015-08-22 15:19:48.2402|Info|    PASS | EQ | NaN isn't overridden
2015-08-22 15:19:48.2402|Info|    PASS | EQ | new value is added, first one wins
2015-08-22 15:19:48.2402|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-22 15:19:48.2402|Info|    PASS | EQ | result is null if destination is null
2015-08-22 15:19:48.2402|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-22 15:19:48.2402|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-22 15:19:48.2402|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-22 15:19:48.2402|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-22 15:19:48.2402|Info|    PASS | OK | non objects should not be changed by clone
2015-08-22 15:19:48.2402|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-22 15:19:48.2402|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-22 15:19:48.2402|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2402|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | object should inherit prototype
2015-08-22 15:19:48.2553|Info|    PASS | EQ | properties should be added to object
2015-08-22 15:19:48.2553|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should only add own properties
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `null` is equal to `null`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Identical string primitives are equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Identical number primitives are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Invalid dates are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Flag order is not significant
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Empty object literals are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Empty array literals are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Object instances are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | `isEqual` can be chained
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | [1] is not empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | [] is empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | {one : 1} is not empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | {} is empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | null is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | undefined is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | the empty string is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but other strings are not
2015-08-22 15:19:48.3333|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-22 15:19:48.3333|Info|    PASS | EQ | empty arguments object is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | a string is not an arguments object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | a function is not an arguments object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but not when it's converted into an array
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not vanilla arrays.
2015-08-22 15:19:48.3333|Info|    PASS | EQ | the arguments object is object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and arrays
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and functions
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but not null
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not undefined
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not string
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not number
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not boolean
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but new String()
2015-08-22 15:19:48.3493|Info|    PASS | EQ | undefined vars are not arrays
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the arguments object is not an array
2015-08-22 15:19:48.3493|Info|    PASS | EQ | but arrays are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | but strings are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | string literals are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | so are String objects
2015-08-22 15:19:48.3493|Info|    PASS | EQ | ok
2015-08-22 15:19:48.3493|Info|    PASS | EQ | a string is not a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the arguments object is not a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | undefined is not a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | but numbers are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | NaN *is* a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | Infinity is a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | numeric strings are not numbers
2015-08-22 15:19:48.3493|Info|    PASS | EQ | a number is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | a string is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | undefined is not a boolean
2015-08-22 15:19:48.3653|Info|    PASS | EQ | NaN is not a boolean
2015-08-22 15:19:48.3653|Info|    PASS | EQ | null is not a boolean
2015-08-22 15:19:48.3653|Info|    PASS | EQ | but true is
2015-08-22 15:19:48.3653|Info|    PASS | EQ | and so is false
2015-08-22 15:19:48.3653|Info|    PASS | EQ | undefined vars are not functions
2015-08-22 15:19:48.3653|Info|    PASS | EQ | arrays are not functions
2015-08-22 15:19:48.3653|Info|    PASS | EQ | strings are not functions
2015-08-22 15:19:48.3653|Info|    PASS | EQ | but functions are
2015-08-22 15:19:48.3653|Info|    PASS | EQ | even anonymous ones
2015-08-22 15:19:48.3653|Info|    FAIL | OK | Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined
2015-08-22 15:19:48.3653|Info| PASS - isDate
2015-08-22 15:19:48.3653|Info| PASS - isRegExp
2015-08-22 15:19:48.3653|Info| PASS - isFinite
2015-08-22 15:19:48.3653|Info| PASS - isNaN
2015-08-22 15:19:48.3653|Info| PASS - isNull
2015-08-22 15:19:48.3653|Info| PASS - isUndefined
2015-08-22 15:19:48.3653|Info| PASS - isError
2015-08-22 15:19:48.3803|Info| PASS - tap
2015-08-22 15:19:48.3803|Info| PASS - has
2015-08-22 15:19:48.3803|Info| PASS - isMatch
2015-08-22 15:19:48.3803|Info| PASS - matcher
2015-08-22 15:19:48.3803|Info| PASS - matcher 
2015-08-22 15:19:48.3803|Info| PASS - findKey
2015-08-22 15:19:48.3803|Info| PASS - mapObject
2015-08-22 15:19:48.3803|Info|----------------------------------------
2015-08-22 15:19:48.3803|Info|Utility
2015-08-22 15:19:48.3803|Info|----------------------------------------
2015-08-22 15:19:48.3803|Info| PASS - #750 - Return _ instance.
2015-08-22 15:19:48.3803|Info| PASS - identity
2015-08-22 15:19:48.3803|Info| PASS - constant
2015-08-22 15:19:48.3803|Info| PASS - noop
2015-08-22 15:19:48.3964|Info| PASS - property
2015-08-22 15:19:48.3964|Info| PASS - propertyOf
2015-08-22 15:19:48.3964|Info| PASS - random
2015-08-22 15:19:48.3964|Info| PASS - now
2015-08-22 15:19:48.3964|Info| PASS - uniqueId
2015-08-22 15:19:48.3964|Info| PASS - times
2015-08-22 15:19:48.3964|Info| PASS - mixin
2015-08-22 15:19:48.3964|Info| PASS - _.escape
2015-08-22 15:19:48.3964|Info| PASS - _.unescape
2015-08-22 15:19:48.3964|Info| PASS - _.escape & unescape
2015-08-22 15:19:48.4134|Info| PASS - template
2015-08-22 15:19:48.4134|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-22 15:19:48.4134|Info| PASS - _.template handles \u2028 & \u2029
2015-08-22 15:19:48.4134|Info| PASS - result calls functions and returns primitives
2015-08-22 15:19:48.4134|Info| PASS - result returns a default value if object is null or undefined
2015-08-22 15:19:48.4134|Info| PASS - result returns a default value if property of object is missing
2015-08-22 15:19:48.4134|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-22 15:19:48.4134|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-22 15:19:48.4134|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-22 15:19:48.4134|Info| PASS - result fallback can use a function
2015-08-22 15:19:48.4134|Info| PASS - _.templateSettings.variable
2015-08-22 15:19:48.4134|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-22 15:19:48.4284|Info| PASS - #556 - undefined template variables.
2015-08-22 15:19:48.4284|Info| PASS - interpolate evaluates code only once.
2015-08-22 15:19:48.4284|Info| PASS - #746 - _.template settings are not modified.
2015-08-22 15:19:48.4284|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-22 15:19:48.4284|Info|  Settimeout: id:87, (100) ms
2015-08-22 15:19:48.4845|Info|  Settimeout: id:88, (50) ms
2015-08-22 15:19:48.5364|Info|  Settimeout: id:89, (150) ms
2015-08-22 15:19:48.5885|Info|      Encerrado timer: id:86, (15:19:48.5885)
2015-08-22 15:19:48.5885|Info|      Executando timer: id:87, (15:19:48.5905)
2015-08-22 15:19:48.5885|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:48.5885|Info|      Encerrado timer: id:87, (15:19:48.5955)
2015-08-22 15:19:48.5995|Info|      Executando timer: id:88, (15:19:48.5995)
2015-08-22 15:19:48.5995|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:48.5995|Info|      Encerrado timer: id:88, (15:19:48.6075)
2015-08-22 15:19:48.6896|Info|      Executando timer: id:89, (15:19:48.6896)
2015-08-22 15:19:48.6896|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:48.6936|Info|  Settimeout: id:90, (13) ms
2015-08-22 15:19:48.7456|Info|      Encerrado timer: id:89, (15:19:48.7456)
2015-08-22 15:19:48.7456|Info|      Executando timer: id:90, (15:19:48.7466)
2015-08-22 15:19:48.7456|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:48.7456|Info|  Settimeout: id:91, (100) ms
2015-08-22 15:19:48.8026|Info|  Settimeout: id:92, (50) ms
2015-08-22 15:19:48.8557|Info|  Settimeout: id:93, (150) ms
2015-08-22 15:19:48.9087|Info|  Settimeout: id:94, (160) ms
2015-08-22 15:19:48.9608|Info|  Settimeout: id:95, (230) ms
2015-08-22 15:19:49.0138|Info|  Settimeout: id:96, (300) ms
2015-08-22 15:19:49.0659|Info|      Encerrado timer: id:90, (15:19:49.0659)
2015-08-22 15:19:49.0678|Info|      Executando timer: id:91, (15:19:49.0678)
2015-08-22 15:19:49.0678|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.0678|Info|      Encerrado timer: id:91, (15:19:49.0728)
2015-08-22 15:19:49.0678|Info|      Executando timer: id:92, (15:19:49.0748)
2015-08-22 15:19:49.0678|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.0838|Info|  Settimeout: id:97, (91) ms
2015-08-22 15:19:49.1359|Info|      Encerrado timer: id:92, (15:19:49.1359)
2015-08-22 15:19:49.1359|Info|      Executando timer: id:93, (15:19:49.1379)
2015-08-22 15:19:49.1359|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.1359|Info|      Encerrado timer: id:93, (15:19:49.1419)
2015-08-22 15:19:49.1359|Info|      Executando timer: id:94, (15:19:49.1439)
2015-08-22 15:19:49.1469|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.1469|Info|      Encerrado timer: id:94, (15:19:49.1489)
2015-08-22 15:19:49.1779|Info|      Executando timer: id:97, (15:19:49.1779)
2015-08-22 15:19:49.1779|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.1779|Info|      Encerrado timer: id:97, (15:19:49.1829)
2015-08-22 15:19:49.1929|Info|      Executando timer: id:95, (15:19:49.1929)
2015-08-22 15:19:49.1929|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.1929|Info|  Settimeout: id:98, (86) ms
2015-08-22 15:19:49.2510|Info|      Encerrado timer: id:95, (15:19:49.2510)
2015-08-22 15:19:49.2880|Info|      Executando timer: id:98, (15:19:49.2880)
2015-08-22 15:19:49.2880|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.2880|Info|      Encerrado timer: id:98, (15:19:49.2930)
2015-08-22 15:19:49.3171|Info|      Executando timer: id:96, (15:19:49.3171)
2015-08-22 15:19:49.3200|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.3200|Info|  Settimeout: id:99, (13) ms
2015-08-22 15:19:49.3791|Info|      Encerrado timer: id:96, (15:19:49.3791)
2015-08-22 15:19:49.3800|Info|      Executando timer: id:99, (15:19:49.3800)
2015-08-22 15:19:49.3800|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:49.3800|Info|  Settimeout: id:100, (32) ms
2015-08-22 15:19:49.4371|Info|  Settimeout: id:101, (96) ms
2015-08-22 15:19:49.4892|Info|      Encerrado timer: id:99, (15:19:49.4892)
2015-08-22 15:19:49.4892|Info|      Executando timer: id:100, (15:19:49.4911)
2015-08-22 15:19:49.4892|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.4892|Info|      Encerrado timer: id:100, (15:19:49.4961)
2015-08-22 15:19:49.5362|Info|      Executando timer: id:101, (15:19:49.5362)
2015-08-22 15:19:49.5362|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.5362|Info|  Settimeout: id:102, (13) ms
2015-08-22 15:19:49.5942|Info|      Encerrado timer: id:101, (15:19:49.5942)
2015-08-22 15:19:49.5942|Info|      Executando timer: id:102, (15:19:49.5962)
2015-08-22 15:19:49.5942|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:49.6022|Info|  Settimeout: id:103, (100) ms
2015-08-22 15:19:49.6552|Info|  Settimeout: id:104, (50) ms
2015-08-22 15:19:49.7183|Info|  Settimeout: id:105, (60) ms
2015-08-22 15:19:49.7703|Info|  Settimeout: id:106, (200) ms
2015-08-22 15:19:49.8234|Info|  Settimeout: id:107, (250) ms
2015-08-22 15:19:49.8764|Info|  Settimeout: id:108, (350) ms
2015-08-22 15:19:49.9275|Info|      Encerrado timer: id:102, (15:19:49.9275)
2015-08-22 15:19:49.9275|Info|      Executando timer: id:103, (15:19:49.9284)
2015-08-22 15:19:49.9275|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.9275|Info|      Encerrado timer: id:103, (15:19:49.9314)
2015-08-22 15:19:49.9275|Info|      Executando timer: id:104, (15:19:49.9324)
2015-08-22 15:19:49.9275|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.9275|Info|  Settimeout: id:109, (100) ms
2015-08-22 15:19:49.9865|Info|      Encerrado timer: id:104, (15:19:49.9865)
2015-08-22 15:19:49.9865|Info|      Executando timer: id:105, (15:19:49.9885)
2015-08-22 15:19:49.9905|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.9905|Info|      Encerrado timer: id:105, (15:19:49.9935)
2015-08-22 15:19:49.9905|Info|      Executando timer: id:106, (15:19:49.9955)
2015-08-22 15:19:49.9905|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.9905|Info|      Encerrado timer: id:106, (15:19:49.9995)
2015-08-22 15:19:50.0375|Info|      Executando timer: id:109, (15:19:50.0375)
2015-08-22 15:19:50.0375|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:50.0375|Info|      Encerrado timer: id:109, (15:19:50.0425)
2015-08-22 15:19:50.0766|Info|      Executando timer: id:107, (15:19:50.0766)
2015-08-22 15:19:50.0766|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.0835|Info|      Encerrado timer: id:107, (15:19:50.0835)
2015-08-22 15:19:50.2287|Info|      Executando timer: id:108, (15:19:50.2287)
2015-08-22 15:19:50.2287|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.2287|Info|  Settimeout: id:110, (13) ms
2015-08-22 15:19:50.2827|Info|      Encerrado timer: id:108, (15:19:50.2827)
2015-08-22 15:19:50.2827|Info|      Executando timer: id:110, (15:19:50.2847)
2015-08-22 15:19:50.2877|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:50.2877|Info|  Settimeout: id:111, (32) ms
2015-08-22 15:19:50.3448|Info|  Settimeout: id:112, (16) ms
2015-08-22 15:19:50.3978|Info|  Settimeout: id:113, (96) ms
2015-08-22 15:19:50.4498|Info|      Encerrado timer: id:110, (15:19:50.4498)
2015-08-22 15:19:50.4498|Info|      Executando timer: id:111, (15:19:50.4498)
2015-08-22 15:19:50.4498|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.4498|Info|      Encerrado timer: id:111, (15:19:50.4528)
2015-08-22 15:19:50.4498|Info|      Executando timer: id:112, (15:19:50.4528)
2015-08-22 15:19:50.4498|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.4498|Info|  Settimeout: id:114, (32) ms
2015-08-22 15:19:50.5058|Info|      Encerrado timer: id:112, (15:19:50.5058)
2015-08-22 15:19:50.5058|Info|      Executando timer: id:114, (15:19:50.5068)
2015-08-22 15:19:50.5058|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.5058|Info|      Encerrado timer: id:114, (15:19:50.5088)
2015-08-22 15:19:50.5058|Info|      Executando timer: id:113, (15:19:50.5098)
2015-08-22 15:19:50.5058|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.5058|Info|  Settimeout: id:115, (13) ms
2015-08-22 15:19:50.5649|Info|      Encerrado timer: id:113, (15:19:50.5649)
2015-08-22 15:19:50.5649|Info|      Executando timer: id:115, (15:19:50.5649)
2015-08-22 15:19:50.5649|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:50.5649|Info|  Settimeout: id:116, (64) ms
2015-08-22 15:19:50.6179|Info|  Settimeout: id:117, (16) ms
2015-08-22 15:19:50.6760|Info|  Settimeout: id:118, (32) ms
2015-08-22 15:19:50.7271|Info|  Settimeout: id:119, (48) ms
2015-08-22 15:19:50.7781|Info|  Settimeout: id:120, (128) ms
2015-08-22 15:19:50.8301|Info|      Encerrado timer: id:115, (15:19:50.8301)
2015-08-22 15:19:50.8301|Info|      Executando timer: id:116, (15:19:50.8311)
2015-08-22 15:19:50.8301|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.8331|Info|      Encerrado timer: id:116, (15:19:50.8331)
2015-08-22 15:19:50.8331|Info|      Executando timer: id:117, (15:19:50.8341)
2015-08-22 15:19:50.8331|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.8331|Info|  Settimeout: id:121, (64) ms
2015-08-22 15:19:50.8871|Info|      Encerrado timer: id:117, (15:19:50.8871)
2015-08-22 15:19:50.8871|Info|      Executando timer: id:118, (15:19:50.8891)
2015-08-22 15:19:50.8871|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.8871|Info|      Encerrado timer: id:118, (15:19:50.8931)
2015-08-22 15:19:50.8961|Info|      Executando timer: id:119, (15:19:50.8961)
2015-08-22 15:19:50.8961|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.8961|Info|      Encerrado timer: id:119, (15:19:50.9021)
2015-08-22 15:19:50.8961|Info|      Executando timer: id:121, (15:19:50.9041)
2015-08-22 15:19:50.8961|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.8961|Info|  Settimeout: id:122, (57) ms
2015-08-22 15:19:50.9622|Info|      Encerrado timer: id:121, (15:19:50.9622)
2015-08-22 15:19:50.9622|Info|      Executando timer: id:120, (15:19:50.9632)
2015-08-22 15:19:50.9622|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.9622|Info|  Settimeout: id:123, (13) ms
2015-08-22 15:19:51.0173|Info|      Encerrado timer: id:120, (15:19:51.0173)
2015-08-22 15:19:51.0173|Info|      Executando timer: id:122, (15:19:51.0182)
2015-08-22 15:19:51.0173|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:51.0173|Info|      Encerrado timer: id:122, (15:19:51.0202)
2015-08-22 15:19:51.0173|Info|      Executando timer: id:123, (15:19:51.0202)
2015-08-22 15:19:51.0222|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:51.0222|Info|  Settimeout: id:124, (100) ms
2015-08-22 15:19:51.0743|Info|  Settimeout: id:125, (50) ms
2015-08-22 15:19:51.1263|Info|  Settimeout: id:126, (150) ms
2015-08-22 15:19:51.1783|Info|      Encerrado timer: id:123, (15:19:51.1783)
2015-08-22 15:19:51.1783|Info|      Executando timer: id:124, (15:19:51.1793)
2015-08-22 15:19:51.1783|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.1783|Info|      Encerrado timer: id:124, (15:19:51.1823)
2015-08-22 15:19:51.1783|Info|      Executando timer: id:125, (15:19:51.1823)
2015-08-22 15:19:51.1783|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:51.1783|Info|      Encerrado timer: id:125, (15:19:51.1863)
2015-08-22 15:19:51.2794|Info|      Executando timer: id:126, (15:19:51.2794)
2015-08-22 15:19:51.2794|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:51.2794|Info|  Settimeout: id:127, (13) ms
2015-08-22 15:19:51.3375|Info|      Encerrado timer: id:126, (15:19:51.3375)
2015-08-22 15:19:51.3375|Info|      Executando timer: id:127, (15:19:51.3394)
2015-08-22 15:19:51.3375|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:51.3375|Info|  Settimeout: id:128, (100) ms
2015-08-22 15:19:51.3985|Info|  Settimeout: id:129, (50) ms
2015-08-22 15:19:51.4505|Info|  Settimeout: id:130, (150) ms
2015-08-22 15:19:51.5025|Info|  Settimeout: id:131, (160) ms
2015-08-22 15:19:51.5561|Info|  Settimeout: id:132, (230) ms
2015-08-22 15:19:51.6103|Info|  Settimeout: id:133, (300) ms
2015-08-22 15:19:51.6634|Info|      Encerrado timer: id:127, (15:19:51.6634)
2015-08-22 15:19:51.6634|Info|      Executando timer: id:128, (15:19:51.6644)
2015-08-22 15:19:51.6634|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:51.6634|Info|      Encerrado timer: id:128, (15:19:51.6694)
2015-08-22 15:19:51.6634|Info|      Executando timer: id:129, (15:19:51.6704)
2015-08-22 15:19:51.6634|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.6634|Info|  Settimeout: id:134, (96) ms
2015-08-22 15:19:51.7272|Info|      Encerrado timer: id:129, (15:19:51.7272)
2015-08-22 15:19:51.7272|Info|      Executando timer: id:130, (15:19:51.7291)
2015-08-22 15:19:51.7272|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.7272|Info|      Encerrado timer: id:130, (15:19:51.7341)
2015-08-22 15:19:51.7272|Info|      Executando timer: id:131, (15:19:51.7361)
2015-08-22 15:19:51.7272|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.7401|Info|      Encerrado timer: id:131, (15:19:51.7401)
2015-08-22 15:19:51.7732|Info|      Executando timer: id:134, (15:19:51.7732)
2015-08-22 15:19:51.7732|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:51.7732|Info|      Encerrado timer: id:134, (15:19:51.7762)
2015-08-22 15:19:51.7892|Info|      Executando timer: id:132, (15:19:51.7892)
2015-08-22 15:19:51.7892|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.7892|Info|  Settimeout: id:135, (84) ms
2015-08-22 15:19:51.8442|Info|      Encerrado timer: id:132, (15:19:51.8442)
2015-08-22 15:19:51.8783|Info|      Executando timer: id:135, (15:19:51.8783)
2015-08-22 15:19:51.8783|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:51.8812|Info|      Encerrado timer: id:135, (15:19:51.8812)
2015-08-22 15:19:51.9143|Info|      Executando timer: id:133, (15:19:51.9143)
2015-08-22 15:19:51.9143|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.9143|Info|  Settimeout: id:136, (13) ms
2015-08-22 15:19:51.9764|Info|      Encerrado timer: id:133, (15:19:51.9764)
2015-08-22 15:19:51.9764|Info|      Executando timer: id:136, (15:19:51.9783)
2015-08-22 15:19:51.9764|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:51.9764|Info|  Settimeout: id:137, (32) ms
2015-08-22 15:19:52.0384|Info|  Settimeout: id:138, (96) ms
2015-08-22 15:19:52.0914|Info|      Encerrado timer: id:136, (15:19:52.0914)
2015-08-22 15:19:52.0914|Info|      Executando timer: id:137, (15:19:52.0924)
2015-08-22 15:19:52.0914|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:52.0914|Info|      Encerrado timer: id:137, (15:19:52.0944)
2015-08-22 15:19:52.1375|Info|      Executando timer: id:138, (15:19:52.1375)
2015-08-22 15:19:52.1375|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.1375|Info|  Settimeout: id:139, (13) ms
2015-08-22 15:19:52.1905|Info|      Encerrado timer: id:138, (15:19:52.1905)
2015-08-22 15:19:52.1925|Info|      Executando timer: id:139, (15:19:52.1925)
2015-08-22 15:19:52.1925|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:52.1925|Info|  Settimeout: id:140, (100) ms
2015-08-22 15:19:52.2515|Info|  Settimeout: id:141, (50) ms
2015-08-22 15:19:52.3045|Info|  Settimeout: id:142, (60) ms
2015-08-22 15:19:52.3606|Info|  Settimeout: id:143, (200) ms
2015-08-22 15:19:52.4126|Info|  Settimeout: id:144, (250) ms
2015-08-22 15:19:52.4637|Info|  Settimeout: id:145, (350) ms
2015-08-22 15:19:52.5147|Info|      Encerrado timer: id:139, (15:19:52.5147)
2015-08-22 15:19:52.5147|Info|      Executando timer: id:140, (15:19:52.5167)
2015-08-22 15:19:52.5147|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:52.5217|Info|      Encerrado timer: id:140, (15:19:52.5217)
2015-08-22 15:19:52.5217|Info|      Executando timer: id:141, (15:19:52.5227)
2015-08-22 15:19:52.5217|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.5217|Info|  Settimeout: id:146, (100) ms
2015-08-22 15:19:52.5827|Info|      Encerrado timer: id:141, (15:19:52.5827)
2015-08-22 15:19:52.5837|Info|      Executando timer: id:142, (15:19:52.5837)
2015-08-22 15:19:52.5837|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.5837|Info|      Encerrado timer: id:142, (15:19:52.5857)
2015-08-22 15:19:52.5837|Info|      Executando timer: id:143, (15:19:52.5867)
2015-08-22 15:19:52.5837|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.5837|Info|      Encerrado timer: id:143, (15:19:52.5927)
2015-08-22 15:19:52.6338|Info|      Executando timer: id:146, (15:19:52.6338)
2015-08-22 15:19:52.6338|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:52.6338|Info|      Encerrado timer: id:146, (15:19:52.6358)
2015-08-22 15:19:52.6648|Info|      Executando timer: id:144, (15:19:52.6648)
2015-08-22 15:19:52.6648|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.6648|Info|      Encerrado timer: id:144, (15:19:52.6678)
2015-08-22 15:19:52.8160|Info|      Executando timer: id:145, (15:19:52.8160)
2015-08-22 15:19:52.8179|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.8179|Info|  Settimeout: id:147, (13) ms
2015-08-22 15:19:52.8710|Info|      Encerrado timer: id:145, (15:19:52.8710)
2015-08-22 15:19:52.8710|Info|      Executando timer: id:147, (15:19:52.8720)
2015-08-22 15:19:52.8710|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:52.8710|Info|  Settimeout: id:148, (32) ms
2015-08-22 15:19:52.9290|Info|  Settimeout: id:149, (16) ms
2015-08-22 15:19:52.9820|Info|  Settimeout: id:150, (96) ms
2015-08-22 15:19:53.0341|Info|      Encerrado timer: id:147, (15:19:53.0341)
2015-08-22 15:19:53.0361|Info|      Executando timer: id:148, (15:19:53.0361)
2015-08-22 15:19:53.0361|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.0361|Info|      Encerrado timer: id:148, (15:19:53.0411)
2015-08-22 15:19:53.0361|Info|      Executando timer: id:149, (15:19:53.0431)
2015-08-22 15:19:53.0361|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.0361|Info|  Settimeout: id:151, (32) ms
2015-08-22 15:19:53.0981|Info|      Encerrado timer: id:149, (15:19:53.0981)
2015-08-22 15:19:53.0981|Info|      Executando timer: id:151, (15:19:53.0981)
2015-08-22 15:19:53.0991|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.0991|Info|      Encerrado timer: id:151, (15:19:53.1001)
2015-08-22 15:19:53.0991|Info|      Executando timer: id:150, (15:19:53.1011)
2015-08-22 15:19:53.0991|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.0991|Info|  Settimeout: id:152, (13) ms
2015-08-22 15:19:53.1552|Info|      Encerrado timer: id:150, (15:19:53.1552)
2015-08-22 15:19:53.1552|Info|      Executando timer: id:152, (15:19:53.1561)
2015-08-22 15:19:53.1552|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:53.1611|Info|  Settimeout: id:153, (64) ms
2015-08-22 15:19:53.2132|Info|  Settimeout: id:154, (16) ms
2015-08-22 15:19:53.2642|Info|  Settimeout: id:155, (32) ms
2015-08-22 15:19:53.3173|Info|  Settimeout: id:156, (48) ms
2015-08-22 15:19:53.3703|Info|  Settimeout: id:157, (128) ms
2015-08-22 15:19:53.4224|Info|      Encerrado timer: id:152, (15:19:53.4224)
2015-08-22 15:19:53.4224|Info|      Executando timer: id:153, (15:19:53.4233)
2015-08-22 15:19:53.4224|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.4224|Info|      Encerrado timer: id:153, (15:19:53.4263)
2015-08-22 15:19:53.4273|Info|      Executando timer: id:154, (15:19:53.4273)
2015-08-22 15:19:53.4273|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.4273|Info|  Settimeout: id:158, (64) ms
2015-08-22 15:19:53.4824|Info|      Encerrado timer: id:154, (15:19:53.4824)
2015-08-22 15:19:53.4824|Info|      Executando timer: id:155, (15:19:53.4834)
2015-08-22 15:19:53.4824|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.4824|Info|      Encerrado timer: id:155, (15:19:53.4874)
2015-08-22 15:19:53.4824|Info|      Executando timer: id:156, (15:19:53.4884)
2015-08-22 15:19:53.4904|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.4904|Info|      Encerrado timer: id:156, (15:19:53.4914)
2015-08-22 15:19:53.4904|Info|      Executando timer: id:158, (15:19:53.4974)
2015-08-22 15:19:53.4904|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.4904|Info|  Settimeout: id:159, (54) ms
2015-08-22 15:19:53.5535|Info|      Encerrado timer: id:158, (15:19:53.5535)
2015-08-22 15:19:53.5535|Info|      Executando timer: id:157, (15:19:53.5554)
2015-08-22 15:19:53.5535|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.5535|Info|  Settimeout: id:160, (13) ms
2015-08-22 15:19:53.6145|Info|      Encerrado timer: id:157, (15:19:53.6145)
2015-08-22 15:19:53.6145|Info|      Executando timer: id:159, (15:19:53.6155)
2015-08-22 15:19:53.6145|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.6145|Info|      Encerrado timer: id:159, (15:19:53.6175)
2015-08-22 15:19:53.6145|Info|      Executando timer: id:160, (15:19:53.6175)
2015-08-22 15:19:53.6145|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:53.6145|Info|  Settimeout: id:161, (100) ms
2015-08-22 15:19:53.6725|Info|  Settimeout: id:162, (50) ms
2015-08-22 15:19:53.7285|Info|  Settimeout: id:163, (150) ms
2015-08-22 15:19:53.7816|Info|      Encerrado timer: id:160, (15:19:53.7816)
2015-08-22 15:19:53.7816|Info|      Executando timer: id:161, (15:19:53.7836)
2015-08-22 15:19:53.7816|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.7886|Info|      Encerrado timer: id:161, (15:19:53.7886)
2015-08-22 15:19:53.7886|Info|      Executando timer: id:162, (15:19:53.7896)
2015-08-22 15:19:53.7886|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:53.7886|Info|      Encerrado timer: id:162, (15:19:53.7986)
2015-08-22 15:19:53.8817|Info|      Executando timer: id:163, (15:19:53.8817)
2015-08-22 15:19:53.8817|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:53.8817|Info|  Settimeout: id:164, (13) ms
2015-08-22 15:19:53.9397|Info|      Encerrado timer: id:163, (15:19:53.9397)
2015-08-22 15:19:53.9397|Info|      Executando timer: id:164, (15:19:53.9407)
2015-08-22 15:19:53.9427|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:53.9427|Info|----------------------------------------
2015-08-22 15:19:53.9427|Info|Functions
2015-08-22 15:19:53.9427|Info|----------------------------------------
2015-08-22 15:19:53.9427|Info| FAIL - delay
2015-08-22 15:19:53.9427|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:53.9427|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:53.9427|Info|  Settimeout: id:165, (100) ms
2015-08-22 15:19:54.0077|Info|  Settimeout: id:166, (50) ms
2015-08-22 15:19:54.0598|Info|  Settimeout: id:167, (150) ms
2015-08-22 15:19:54.1128|Info|  Settimeout: id:168, (160) ms
2015-08-22 15:19:54.1649|Info|  Settimeout: id:169, (230) ms
2015-08-22 15:19:54.2179|Info|  Settimeout: id:170, (300) ms
2015-08-22 15:19:54.2700|Info|      Encerrado timer: id:164, (15:19:54.2700)
2015-08-22 15:19:54.2709|Info|      Executando timer: id:165, (15:19:54.2709)
2015-08-22 15:19:54.2709|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.2709|Info|      Encerrado timer: id:165, (15:19:54.2729)
2015-08-22 15:19:54.2709|Info|      Executando timer: id:166, (15:19:54.2739)
2015-08-22 15:19:54.2709|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.2709|Info|  Settimeout: id:171, (98) ms
2015-08-22 15:19:54.3260|Info|      Encerrado timer: id:166, (15:19:54.3260)
2015-08-22 15:19:54.3260|Info|      Executando timer: id:167, (15:19:54.3270)
2015-08-22 15:19:54.3260|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.3260|Info|      Encerrado timer: id:167, (15:19:54.3310)
2015-08-22 15:19:54.3260|Info|      Executando timer: id:168, (15:19:54.3320)
2015-08-22 15:19:54.3340|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.3340|Info|      Encerrado timer: id:168, (15:19:54.3360)
2015-08-22 15:19:54.3750|Info|      Executando timer: id:171, (15:19:54.3750)
2015-08-22 15:19:54.3750|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.3820|Info|      Encerrado timer: id:171, (15:19:54.3820)
2015-08-22 15:19:54.3980|Info|      Executando timer: id:169, (15:19:54.3980)
2015-08-22 15:19:54.3980|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.3980|Info|  Settimeout: id:172, (82) ms
2015-08-22 15:19:54.4521|Info|      Encerrado timer: id:169, (15:19:54.4521)
2015-08-22 15:19:54.4851|Info|      Executando timer: id:172, (15:19:54.4851)
2015-08-22 15:19:54.4851|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.4851|Info|      Encerrado timer: id:172, (15:19:54.4871)
2015-08-22 15:19:54.5202|Info|      Executando timer: id:170, (15:19:54.5202)
2015-08-22 15:19:54.5211|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.5211|Info|  Settimeout: id:173, (13) ms
2015-08-22 15:19:54.5742|Info|      Encerrado timer: id:170, (15:19:54.5742)
2015-08-22 15:19:54.5742|Info|      Executando timer: id:173, (15:19:54.5761)
2015-08-22 15:19:54.5742|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:54.5742|Info| FAIL - throttle repeatedly with results
2015-08-22 15:19:54.5842|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:54.5842|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:54.5842|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:54.5842|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.5842|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:54.5842|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:54.6012|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.6012|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:54.6012|Info|  Settimeout: id:174, (32) ms
2015-08-22 15:19:54.6572|Info|  Settimeout: id:175, (96) ms
2015-08-22 15:19:54.7093|Info|      Encerrado timer: id:173, (15:19:54.7093)
2015-08-22 15:19:54.7093|Info|      Executando timer: id:174, (15:19:54.7093)
2015-08-22 15:19:54.7093|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.7093|Info|      Encerrado timer: id:174, (15:19:54.7112)
2015-08-22 15:19:54.7553|Info|      Executando timer: id:175, (15:19:54.7553)
2015-08-22 15:19:54.7553|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.7553|Info|  Settimeout: id:176, (13) ms
2015-08-22 15:19:54.8083|Info|      Encerrado timer: id:175, (15:19:54.8083)
2015-08-22 15:19:54.8083|Info|      Executando timer: id:176, (15:19:54.8103)
2015-08-22 15:19:54.8083|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:54.8083|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-22 15:19:54.8173|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:54.8173|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:54.8173|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:54.8173|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.8173|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:54.8333|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:54.8333|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.8333|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:54.8333|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:19:54.8333|Info|    PASS | EQ | okay
2015-08-22 15:19:54.8333|Info|  Settimeout: id:177, (100) ms
2015-08-22 15:19:54.8954|Info|  Settimeout: id:178, (50) ms
2015-08-22 15:19:54.9474|Info|  Settimeout: id:179, (60) ms
2015-08-22 15:19:55.0005|Info|  Settimeout: id:180, (200) ms
2015-08-22 15:19:55.0525|Info|  Settimeout: id:181, (250) ms
2015-08-22 15:19:55.1045|Info|  Settimeout: id:182, (350) ms
2015-08-22 15:19:55.1566|Info|      Encerrado timer: id:176, (15:19:55.1566)
2015-08-22 15:19:55.1566|Info|      Executando timer: id:177, (15:19:55.1586)
2015-08-22 15:19:55.1566|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:55.1626|Info|      Encerrado timer: id:177, (15:19:55.1626)
2015-08-22 15:19:55.1626|Info|      Executando timer: id:178, (15:19:55.1646)
2015-08-22 15:19:55.1626|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.1626|Info|  Settimeout: id:183, (100) ms
2015-08-22 15:19:55.2226|Info|      Encerrado timer: id:178, (15:19:55.2226)
2015-08-22 15:19:55.2256|Info|      Executando timer: id:179, (15:19:55.2256)
2015-08-22 15:19:55.2256|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.2256|Info|      Encerrado timer: id:179, (15:19:55.2306)
2015-08-22 15:19:55.2256|Info|      Executando timer: id:180, (15:19:55.2326)
2015-08-22 15:19:55.2256|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.2256|Info|      Encerrado timer: id:180, (15:19:55.2356)
2015-08-22 15:19:55.2736|Info|      Executando timer: id:183, (15:19:55.2736)
2015-08-22 15:19:55.2736|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:55.2736|Info|      Encerrado timer: id:183, (15:19:55.2766)
2015-08-22 15:19:55.3047|Info|      Executando timer: id:181, (15:19:55.3047)
2015-08-22 15:19:55.3047|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.3047|Info|      Encerrado timer: id:181, (15:19:55.3067)
2015-08-22 15:19:55.4578|Info|      Executando timer: id:182, (15:19:55.4578)
2015-08-22 15:19:55.4608|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.4608|Info|  Settimeout: id:184, (13) ms
2015-08-22 15:19:55.5168|Info|      Encerrado timer: id:182, (15:19:55.5168)
2015-08-22 15:19:55.5168|Info|      Executando timer: id:184, (15:19:55.5178)
2015-08-22 15:19:55.5168|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:55.5208|Info| FAIL - more throttle does not trigger leading call when leading is set to false
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:55.5208|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:19:55.5208|Info|    PASS | EQ | okay
2015-08-22 15:19:55.5208|Info|    PASS | EQ | ok
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-22 15:19:55.5368|Info|    PASS | EQ | ok
2015-08-22 15:19:55.5368|Info|  Settimeout: id:185, (32) ms
2015-08-22 15:19:55.5889|Info|  Settimeout: id:186, (16) ms
2015-08-22 15:19:55.6419|Info|  Settimeout: id:187, (96) ms
2015-08-22 15:19:55.6940|Info|      Encerrado timer: id:184, (15:19:55.6940)
2015-08-22 15:19:55.6940|Info|      Executando timer: id:185, (15:19:55.6960)
2015-08-22 15:19:55.6940|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:55.6940|Info|      Encerrado timer: id:185, (15:19:55.7009)
2015-08-22 15:19:55.6940|Info|      Executando timer: id:186, (15:19:55.7019)
2015-08-22 15:19:55.6940|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.7089|Info|  Settimeout: id:188, (32) ms
2015-08-22 15:19:55.7621|Info|      Encerrado timer: id:186, (15:19:55.7621)
2015-08-22 15:19:55.7621|Info|      Executando timer: id:187, (15:19:55.7630)
2015-08-22 15:19:55.7621|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.7621|Info|  Settimeout: id:189, (13) ms
2015-08-22 15:19:55.8191|Info|      Encerrado timer: id:187, (15:19:55.8191)
2015-08-22 15:19:55.8191|Info|      Executando timer: id:188, (15:19:55.8200)
2015-08-22 15:19:55.8191|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:55.8191|Info|      Encerrado timer: id:188, (15:19:55.8230)
2015-08-22 15:19:55.8191|Info|      Executando timer: id:189, (15:19:55.8240)
2015-08-22 15:19:55.8191|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:55.8191|Info| PASS - debounce
2015-08-22 15:19:55.8191|Info|  Settimeout: id:190, (64) ms
2015-08-22 15:19:55.8831|Info|  Settimeout: id:191, (16) ms
2015-08-22 15:19:55.9341|Info|  Settimeout: id:192, (32) ms
2015-08-22 15:19:55.9862|Info|  Settimeout: id:193, (48) ms
2015-08-22 15:19:56.0372|Info|  Settimeout: id:194, (128) ms
2015-08-22 15:19:56.0882|Info|      Encerrado timer: id:189, (15:19:56.0882)
2015-08-22 15:19:56.0882|Info|      Executando timer: id:190, (15:19:56.0902)
2015-08-22 15:19:56.0882|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:56.0882|Info|      Encerrado timer: id:190, (15:19:56.0952)
2015-08-22 15:19:56.0882|Info|      Executando timer: id:191, (15:19:56.0962)
2015-08-22 15:19:56.1002|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1002|Info|  Settimeout: id:195, (64) ms
2015-08-22 15:19:56.1553|Info|      Encerrado timer: id:191, (15:19:56.1553)
2015-08-22 15:19:56.1553|Info|      Executando timer: id:192, (15:19:56.1563)
2015-08-22 15:19:56.1553|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1553|Info|      Encerrado timer: id:192, (15:19:56.1593)
2015-08-22 15:19:56.1553|Info|      Executando timer: id:193, (15:19:56.1603)
2015-08-22 15:19:56.1613|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1613|Info|      Encerrado timer: id:193, (15:19:56.1633)
2015-08-22 15:19:56.1613|Info|      Executando timer: id:194, (15:19:56.1673)
2015-08-22 15:19:56.1613|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1793|Info|  Settimeout: id:196, (13) ms
2015-08-22 15:19:56.2303|Info|      Encerrado timer: id:194, (15:19:56.2303)
2015-08-22 15:19:56.2303|Info|      Executando timer: id:195, (15:19:56.2303)
2015-08-22 15:19:56.2303|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:56.2303|Info|      Encerrado timer: id:195, (15:19:56.2323)
2015-08-22 15:19:56.2303|Info|      Executando timer: id:196, (15:19:56.2333)
2015-08-22 15:19:56.2303|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:56.2303|Info| FAIL - debounce asap
2015-08-22 15:19:56.2303|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:56.2303|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:56.2303|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:56.2303|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:19:56.2393|Info|    PASS | EQ | okay
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was debounced
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was called immediately
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-22 15:19:56.2393|Info|----------------------------------------
2015-08-22 15:19:56.2393|Info|    PASS: 1368  FAIL: 6  TOTAL: 1374
2015-08-22 15:19:56.2393|Info|    Finished in 14577 milliseconds.
2015-08-22 15:19:56.2393|Info|----------------------------------------
2015-08-22 15:19:56.2683|Info|      Encerrado timer: id:196, (15:19:56.2683)
2015-08-22 15:19:56.2683|Info|Encerrando os testes
2015-08-22 15:19:56.2714|Info|Total:1374, Sucesso: 1368, Falha: 6
2015-08-22 15:19:56.2714|Info|15 segundos para avaliar o individuo underscore.js
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [21]:1:23
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [81]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [107]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [143]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [155]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (Script Document [12]:2900:65)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
    at Array.<anonymous> (Script Document [8]:643:4)
    at Script Document [181]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [185]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [205]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [225]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [237]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [251]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [259]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [279]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [299]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [311]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [325]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [333]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [353]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [373]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [397]:1:25
