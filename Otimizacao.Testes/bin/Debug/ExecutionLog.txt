2015-08-22 13:17:17.2917|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:17:17.8161|Info|      Executando timer: id:0, (13:17:17.8161)
2015-08-22 13:17:17.9412|Info|Iniciando os testes
2015-08-22 13:17:17.9592|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:17:17.9592|Info|  Settimeout: id:1, (500) ms
2015-08-22 13:17:18.0153|Info|      Encerrado timer: id:0, (13:17:18.0153)
2015-08-22 13:17:18.0153|Info|  Settimeout: id:2, (13) ms
2015-08-22 13:17:18.0303|Info|      Executando timer: id:2, (13:17:18.0303)
2015-08-22 13:17:18.0673|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.1213|Info|  Settimeout: id:3, (13) ms
2015-08-22 13:17:18.1734|Info|      Encerrado timer: id:2, (13:17:18.1734)
2015-08-22 13:17:18.1784|Info|      Executando timer: id:3, (13:17:18.1784)
2015-08-22 13:17:18.1784|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.2714|Info|  Settimeout: id:4, (32) ms
2015-08-22 13:17:18.3225|Info|  Settimeout: id:5, (96) ms
2015-08-22 13:17:18.3736|Info|      Encerrado timer: id:3, (13:17:18.3736)
2015-08-22 13:17:18.3736|Info|      Executando timer: id:4, (13:17:18.3745)
2015-08-22 13:17:18.3865|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.3865|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.3865|Info|      Encerrado timer: id:4, (13:17:18.3915)
2015-08-22 13:17:18.4206|Info|      Executando timer: id:5, (13:17:18.4206)
2015-08-22 13:17:18.4206|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:18.4206|Info|  Settimeout: id:6, (13) ms
2015-08-22 13:17:18.4766|Info|      Encerrado timer: id:5, (13:17:18.4766)
2015-08-22 13:17:18.4766|Info|      Executando timer: id:6, (13:17:18.4776)
2015-08-22 13:17:18.4766|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.4766|Info|  Settimeout: id:7, (32) ms
2015-08-22 13:17:18.5336|Info|  Settimeout: id:8, (64) ms
2015-08-22 13:17:18.5867|Info|  Settimeout: id:9, (128) ms
2015-08-22 13:17:18.6557|Info|      Encerrado timer: id:6, (13:17:18.6557)
2015-08-22 13:17:18.6557|Info|      Executando timer: id:1, (13:17:18.6567)
2015-08-22 13:17:18.6557|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 13:17:18.6627|Info|      Encerrado timer: id:1, (13:17:18.6617)
2015-08-22 13:17:18.6627|Info|      Executando timer: id:7, (13:17:18.6637)
2015-08-22 13:17:18.6627|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.6627|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.6627|Info|      Encerrado timer: id:7, (13:17:18.6707)
2015-08-22 13:17:18.6627|Info|      Executando timer: id:8, (13:17:18.6727)
2015-08-22 13:17:18.6627|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-22 13:17:18.6787|Info|  Settimeout: id:10, (32) ms
2015-08-22 13:17:18.7308|Info|      Encerrado timer: id:8, (13:17:18.7308)
2015-08-22 13:17:18.7308|Info|      Executando timer: id:10, (13:17:18.7318)
2015-08-22 13:17:18.7308|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.7438|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.7438|Info|      Encerrado timer: id:10, (13:17:18.7448)
2015-08-22 13:17:18.7438|Info|      Executando timer: id:9, (13:17:18.7458)
2015-08-22 13:17:18.7438|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-22 13:17:18.7438|Info|  Settimeout: id:11, (32) ms
2015-08-22 13:17:18.8009|Info|  Settimeout: id:12, (13) ms
2015-08-22 13:17:18.8529|Info|      Encerrado timer: id:9, (13:17:18.8529)
2015-08-22 13:17:18.8529|Info|      Executando timer: id:11, (13:17:18.8548)
2015-08-22 13:17:18.8529|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.8529|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:18.8529|Info|      Encerrado timer: id:11, (13:17:18.8618)
2015-08-22 13:17:18.8529|Info|      Executando timer: id:12, (13:17:18.8629)
2015-08-22 13:17:18.8659|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:18.8659|Info|  Settimeout: id:13, (32) ms
2015-08-22 13:17:18.9229|Info|  Settimeout: id:14, (64) ms
2015-08-22 13:17:18.9749|Info|      Encerrado timer: id:12, (13:17:18.9749)
2015-08-22 13:17:18.9749|Info|      Executando timer: id:13, (13:17:18.9769)
2015-08-22 13:17:18.9749|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:18.9749|Info|      Encerrado timer: id:13, (13:17:18.9819)
2015-08-22 13:17:18.9900|Info|      Executando timer: id:14, (13:17:18.9900)
2015-08-22 13:17:18.9900|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-22 13:17:18.9900|Info|  Settimeout: id:15, (32) ms
2015-08-22 13:17:19.0500|Info|  Settimeout: id:16, (13) ms
2015-08-22 13:17:19.1021|Info|      Encerrado timer: id:14, (13:17:19.1021)
2015-08-22 13:17:19.1021|Info|      Executando timer: id:15, (13:17:19.1030)
2015-08-22 13:17:19.1021|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.1021|Info|      Encerrado timer: id:15, (13:17:19.1060)
2015-08-22 13:17:19.1021|Info|      Executando timer: id:16, (13:17:19.1070)
2015-08-22 13:17:19.1021|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.1021|Info|  Settimeout: id:17, (32) ms
2015-08-22 13:17:19.1621|Info|  Settimeout: id:18, (64) ms
2015-08-22 13:17:19.2132|Info|      Encerrado timer: id:16, (13:17:19.2132)
2015-08-22 13:17:19.2132|Info|      Executando timer: id:17, (13:17:19.2141)
2015-08-22 13:17:19.2132|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.2132|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.2132|Info|      Encerrado timer: id:17, (13:17:19.2201)
2015-08-22 13:17:19.2281|Info|      Executando timer: id:18, (13:17:19.2281)
2015-08-22 13:17:19.2281|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:19.2281|Info|  Settimeout: id:19, (13) ms
2015-08-22 13:17:19.2862|Info|      Encerrado timer: id:18, (13:17:19.2862)
2015-08-22 13:17:19.2862|Info|      Executando timer: id:19, (13:17:19.2882)
2015-08-22 13:17:19.2862|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.2862|Info|  Settimeout: id:20, (32) ms
2015-08-22 13:17:19.3472|Info|  Settimeout: id:21, (32) ms
2015-08-22 13:17:19.3992|Info|  Settimeout: id:22, (32) ms
2015-08-22 13:17:19.4513|Info|  Settimeout: id:23, (64) ms
2015-08-22 13:17:19.5034|Info|      Encerrado timer: id:19, (13:17:19.5034)
2015-08-22 13:17:19.5053|Info|      Executando timer: id:20, (13:17:19.5053)
2015-08-22 13:17:19.5053|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.5053|Info|      Encerrado timer: id:20, (13:17:19.5103)
2015-08-22 13:17:19.5213|Info|      Executando timer: id:21, (13:17:19.5213)
2015-08-22 13:17:19.5213|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.5213|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.5213|Info|      Encerrado timer: id:21, (13:17:19.5313)
2015-08-22 13:17:19.5213|Info|      Executando timer: id:22, (13:17:19.5333)
2015-08-22 13:17:19.5364|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.5364|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.5364|Info|      Encerrado timer: id:22, (13:17:19.5403)
2015-08-22 13:17:19.5364|Info|      Executando timer: id:23, (13:17:19.5413)
2015-08-22 13:17:19.5364|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-22 13:17:19.5543|Info|  Settimeout: id:24, (32) ms
2015-08-22 13:17:19.6064|Info|  Settimeout: id:25, (13) ms
2015-08-22 13:17:19.6575|Info|      Encerrado timer: id:23, (13:17:19.6575)
2015-08-22 13:17:19.6575|Info|      Executando timer: id:24, (13:17:19.6584)
2015-08-22 13:17:19.6575|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.6614|Info|      Encerrado timer: id:24, (13:17:19.6614)
2015-08-22 13:17:19.6614|Info|      Executando timer: id:25, (13:17:19.6624)
2015-08-22 13:17:19.6614|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.6614|Info|  Settimeout: id:26, (32) ms
2015-08-22 13:17:19.7175|Info|  Settimeout: id:27, (32) ms
2015-08-22 13:17:19.7695|Info|  Settimeout: id:28, (64) ms
2015-08-22 13:17:19.8206|Info|      Encerrado timer: id:25, (13:17:19.8206)
2015-08-22 13:17:19.8206|Info|      Executando timer: id:26, (13:17:19.8225)
2015-08-22 13:17:19.8206|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.8206|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:19.8206|Info|      Encerrado timer: id:26, (13:17:19.8305)
2015-08-22 13:17:19.8206|Info|      Executando timer: id:27, (13:17:19.8315)
2015-08-22 13:17:19.8355|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:19.8355|Info|      Encerrado timer: id:27, (13:17:19.8385)
2015-08-22 13:17:19.8355|Info|      Executando timer: id:28, (13:17:19.8405)
2015-08-22 13:17:19.8355|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-22 13:17:19.8355|Info|  Settimeout: id:29, (13) ms
2015-08-22 13:17:19.8996|Info|      Encerrado timer: id:28, (13:17:19.8996)
2015-08-22 13:17:19.8996|Info|      Executando timer: id:29, (13:17:19.9006)
2015-08-22 13:17:19.8996|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:19.8996|Info|  Settimeout: id:30, (128) ms
2015-08-22 13:17:19.9567|Info|  Settimeout: id:31, (64) ms
2015-08-22 13:17:20.0107|Info|  Settimeout: id:32, (96) ms
2015-08-22 13:17:20.0647|Info|  Settimeout: id:33, (128) ms
2015-08-22 13:17:20.1167|Info|  Settimeout: id:34, (64) ms
2015-08-22 13:17:20.1938|Info|  Settimeout: id:35, (128) ms
2015-08-22 13:17:20.2478|Info|  Settimeout: id:36, (64) ms
2015-08-22 13:17:20.3009|Info|  Settimeout: id:37, (1) ms
2015-08-22 13:17:20.3520|Info|      Encerrado timer: id:29, (13:17:20.3520)
2015-08-22 13:17:20.3520|Info|      Executando timer: id:32, (13:17:20.3529)
2015-08-22 13:17:20.3520|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:20.3669|Info|  Settimeout: id:38, (32) ms
2015-08-22 13:17:20.4200|Info|      Encerrado timer: id:32, (13:17:20.4200)
2015-08-22 13:17:20.4200|Info|      Executando timer: id:37, (13:17:20.4220)
2015-08-22 13:17:20.4200|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-22 13:17:20.4280|Info|  Settimeout: id:39, (13) ms
2015-08-22 13:17:20.4801|Info|      Encerrado timer: id:37, (13:17:20.4801)
2015-08-22 13:17:20.4801|Info|      Executando timer: id:36, (13:17:20.4820)
2015-08-22 13:17:20.4801|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:20.4801|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:20.4801|Info|      Encerrado timer: id:36, (13:17:20.4890)
2015-08-22 13:17:20.4910|Info|      Executando timer: id:38, (13:17:20.4910)
2015-08-22 13:17:20.4910|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:20.4910|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:20.4910|Info|      Encerrado timer: id:38, (13:17:20.4980)
2015-08-22 13:17:20.4910|Info|      Executando timer: id:39, (13:17:20.5000)
2015-08-22 13:17:20.4910|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:20.5060|Info|  Settimeout: id:40, (64) ms
2015-08-22 13:17:20.5581|Info|  Settimeout: id:41, (32) ms
2015-08-22 13:17:20.6101|Info|  Settimeout: id:42, (128) ms
2015-08-22 13:17:20.6622|Info|      Encerrado timer: id:39, (13:17:20.6622)
2015-08-22 13:17:20.6622|Info|      Executando timer: id:40, (13:17:20.6631)
2015-08-22 13:17:20.6622|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:20.6622|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:20.6622|Info|      Encerrado timer: id:40, (13:17:20.6691)
2015-08-22 13:17:20.7412|Info|      Executando timer: id:42, (13:17:20.7412)
2015-08-22 13:17:20.7412|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:20.7412|Info|  Settimeout: id:43, (13) ms
2015-08-22 13:17:20.8003|Info|      Encerrado timer: id:42, (13:17:20.8003)
2015-08-22 13:17:20.8003|Info|      Executando timer: id:43, (13:17:20.8012)
2015-08-22 13:17:20.8022|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:20.8022|Info|  Settimeout: id:44, (32) ms
2015-08-22 13:17:20.8553|Info|  Settimeout: id:45, (13) ms
2015-08-22 13:17:20.9083|Info|  Settimeout: id:46, (64) ms
2015-08-22 13:17:20.9594|Info|      Encerrado timer: id:43, (13:17:20.9594)
2015-08-22 13:17:20.9744|Info|      Executando timer: id:46, (13:17:20.9744)
2015-08-22 13:17:20.9744|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-22 13:17:20.9744|Info|  Settimeout: id:47, (13) ms
2015-08-22 13:17:21.0344|Info|      Encerrado timer: id:46, (13:17:21.0344)
2015-08-22 13:17:21.0344|Info|      Executando timer: id:47, (13:17:21.0354)
2015-08-22 13:17:21.0374|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.0374|Info|  Settimeout: id:48, (1) ms
2015-08-22 13:17:21.0995|Info|  Settimeout: id:49, (32) ms
2015-08-22 13:17:21.1505|Info|      Encerrado timer: id:47, (13:17:21.1505)
2015-08-22 13:17:21.1505|Info|      Executando timer: id:48, (13:17:21.1525)
2015-08-22 13:17:21.1505|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.1505|Info|      Encerrado timer: id:48, (13:17:21.1565)
2015-08-22 13:17:21.1505|Info|      Executando timer: id:49, (13:17:21.1585)
2015-08-22 13:17:21.1615|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:21.1615|Info|  Settimeout: id:50, (13) ms
2015-08-22 13:17:21.2165|Info|      Encerrado timer: id:49, (13:17:21.2165)
2015-08-22 13:17:21.2235|Info|      Executando timer: id:50, (13:17:21.2235)
2015-08-22 13:17:21.2235|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.2235|Info|  Settimeout: id:51, (1) ms
2015-08-22 13:17:21.2826|Info|  Settimeout: id:52, (32) ms
2015-08-22 13:17:21.3347|Info|      Encerrado timer: id:50, (13:17:21.3347)
2015-08-22 13:17:21.3347|Info|      Executando timer: id:51, (13:17:21.3356)
2015-08-22 13:17:21.3347|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.3347|Info|      Encerrado timer: id:51, (13:17:21.3386)
2015-08-22 13:17:21.3347|Info|      Executando timer: id:52, (13:17:21.3396)
2015-08-22 13:17:21.3347|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 13:17:21.3347|Info|  Settimeout: id:53, (13) ms
2015-08-22 13:17:21.3947|Info|      Encerrado timer: id:52, (13:17:21.3947)
2015-08-22 13:17:21.3957|Info|      Executando timer: id:53, (13:17:21.3957)
2015-08-22 13:17:21.3957|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.3957|Info|  Settimeout: id:54, (1) ms
2015-08-22 13:17:21.4507|Info|  Settimeout: id:55, (32) ms
2015-08-22 13:17:21.5017|Info|      Encerrado timer: id:53, (13:17:21.5017)
2015-08-22 13:17:21.5017|Info|      Executando timer: id:55, (13:17:21.5037)
2015-08-22 13:17:21.5057|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:21.5057|Info|  Settimeout: id:56, (13) ms
2015-08-22 13:17:21.5618|Info|      Encerrado timer: id:55, (13:17:21.5618)
2015-08-22 13:17:21.5618|Info|      Executando timer: id:56, (13:17:21.5628)
2015-08-22 13:17:21.5618|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.5618|Info|  Settimeout: id:57, (32) ms
2015-08-22 13:17:21.6198|Info|  Settimeout: id:58, (1) ms
2015-08-22 13:17:21.6728|Info|  Settimeout: id:59, (64) ms
2015-08-22 13:17:21.7260|Info|      Encerrado timer: id:56, (13:17:21.7260)
2015-08-22 13:17:21.7260|Info|      Executando timer: id:57, (13:17:21.7280)
2015-08-22 13:17:21.7260|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.7260|Info|      Encerrado timer: id:57, (13:17:21.7335)
2015-08-22 13:17:21.7260|Info|      Executando timer: id:58, (13:17:21.7350)
2015-08-22 13:17:21.7395|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:21.7395|Info|      Encerrado timer: id:58, (13:17:21.7455)
2015-08-22 13:17:21.7395|Info|      Executando timer: id:59, (13:17:21.7470)
2015-08-22 13:17:21.7395|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:21.7395|Info|  Settimeout: id:60, (13) ms
2015-08-22 13:17:21.8023|Info|      Encerrado timer: id:59, (13:17:21.8023)
2015-08-22 13:17:21.8023|Info|      Executando timer: id:60, (13:17:21.8033)
2015-08-22 13:17:21.8023|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.8023|Info|  Settimeout: id:61, (32) ms
2015-08-22 13:17:21.8583|Info|  Settimeout: id:62, (64) ms
2015-08-22 13:17:21.9093|Info|      Encerrado timer: id:60, (13:17:21.9093)
2015-08-22 13:17:21.9093|Info|      Executando timer: id:61, (13:17:21.9093)
2015-08-22 13:17:21.9093|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:21.9113|Info|      Encerrado timer: id:61, (13:17:21.9113)
2015-08-22 13:17:21.9113|Info|      Executando timer: id:62, (13:17:21.9244)
2015-08-22 13:17:21.9273|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 13:17:21.9273|Info|  Settimeout: id:63, (13) ms
2015-08-22 13:17:21.9834|Info|      Encerrado timer: id:62, (13:17:21.9834)
2015-08-22 13:17:21.9834|Info|      Executando timer: id:63, (13:17:21.9843)
2015-08-22 13:17:21.9834|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:21.9834|Info|  Settimeout: id:64, (32) ms
2015-08-22 13:17:22.0414|Info|  Settimeout: id:65, (64) ms
2015-08-22 13:17:22.0935|Info|      Encerrado timer: id:63, (13:17:22.0935)
2015-08-22 13:17:22.1085|Info|      Executando timer: id:65, (13:17:22.1085)
2015-08-22 13:17:22.1085|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:22.1144|Info|  Settimeout: id:66, (13) ms
2015-08-22 13:17:22.1665|Info|      Encerrado timer: id:65, (13:17:22.1665)
2015-08-22 13:17:22.1665|Info|      Executando timer: id:66, (13:17:22.1675)
2015-08-22 13:17:22.1665|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:23.7106|Info|  Settimeout: id:67, (13) ms
2015-08-22 13:17:23.7617|Info|      Encerrado timer: id:66, (13:17:23.7617)
2015-08-22 13:17:23.7617|Info|      Executando timer: id:67, (13:17:23.7617)
2015-08-22 13:17:23.7617|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 13:17:23.8517|Info|----------------------------------------
2015-08-22 13:17:23.8517|Info|lodash.isNil
2015-08-22 13:17:23.8517|Info|----------------------------------------
2015-08-22 13:17:23.8517|Info| FAIL - should work with nulls from another realm
2015-08-22 13:17:23.8517|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-08-22 13:17:23.9908|Info|  Settimeout: id:68, (32) ms
2015-08-22 13:17:24.0408|Info|      Encerrado timer: id:67, (13:17:24.0408)
2015-08-22 13:17:24.0408|Info|      Executando timer: id:68, (13:17:24.0418)
2015-08-22 13:17:24.0408|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-08-22 13:17:24.0408|Info|  Settimeout: id:69, (13) ms
2015-08-22 13:17:24.0949|Info|      Encerrado timer: id:68, (13:17:24.0949)
2015-08-22 13:17:24.1889|Info|      Executando timer: id:69, (13:17:24.1889)
2015-08-22 13:17:24.1889|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.3810|Info|  Settimeout: id:70, (32) ms
2015-08-22 13:17:24.4321|Info|  Settimeout: id:71, (64) ms
2015-08-22 13:17:24.4832|Info|      Encerrado timer: id:69, (13:17:24.4832)
2015-08-22 13:17:24.4981|Info|      Executando timer: id:71, (13:17:24.4981)
2015-08-22 13:17:24.4981|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:24.5071|Info|  Settimeout: id:72, (13) ms
2015-08-22 13:17:24.5592|Info|      Encerrado timer: id:71, (13:17:24.5592)
2015-08-22 13:17:24.5592|Info|      Executando timer: id:72, (13:17:24.5592)
2015-08-22 13:17:24.5592|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.5592|Info|  Settimeout: id:73, (32) ms
2015-08-22 13:17:24.6123|Info|  Settimeout: id:74, (64) ms
2015-08-22 13:17:24.6633|Info|      Encerrado timer: id:72, (13:17:24.6633)
2015-08-22 13:17:24.6633|Info|      Executando timer: id:73, (13:17:24.6652)
2015-08-22 13:17:24.6633|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:24.6633|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:24.6633|Info|      Encerrado timer: id:73, (13:17:24.6742)
2015-08-22 13:17:24.6783|Info|      Executando timer: id:74, (13:17:24.6783)
2015-08-22 13:17:24.6783|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:24.6783|Info|  Settimeout: id:75, (18) ms
2015-08-22 13:17:24.7413|Info|  Settimeout: id:76, (13) ms
2015-08-22 13:17:24.7934|Info|      Encerrado timer: id:74, (13:17:24.7934)
2015-08-22 13:17:24.7934|Info|      Executando timer: id:76, (13:17:24.7943)
2015-08-22 13:17:24.7934|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.8083|Info|  Settimeout: id:77, (32) ms
2015-08-22 13:17:24.8604|Info|  Settimeout: id:78, (64) ms
2015-08-22 13:17:24.9115|Info|      Encerrado timer: id:76, (13:17:24.9115)
2015-08-22 13:17:24.9115|Info|      Executando timer: id:78, (13:17:24.9265)
2015-08-22 13:17:24.9284|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:24.9284|Info|  Settimeout: id:79, (13) ms
2015-08-22 13:17:24.9815|Info|      Encerrado timer: id:78, (13:17:24.9815)
2015-08-22 13:17:24.9815|Info|      Executando timer: id:79, (13:17:24.9835)
2015-08-22 13:17:24.9815|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:24.9905|Info|  Settimeout: id:80, (64) ms
2015-08-22 13:17:25.0426|Info|      Encerrado timer: id:79, (13:17:25.0426)
2015-08-22 13:17:25.0575|Info|      Executando timer: id:80, (13:17:25.0575)
2015-08-22 13:17:25.0575|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:25.0575|Info|  Settimeout: id:81, (13) ms
2015-08-22 13:17:25.1116|Info|      Encerrado timer: id:80, (13:17:25.1116)
2015-08-22 13:17:25.1116|Info|      Executando timer: id:81, (13:17:25.1126)
2015-08-22 13:17:25.1116|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:25.1156|Info|  Settimeout: id:82, (32) ms
2015-08-22 13:17:25.1686|Info|  Settimeout: id:83, (31) ms
2015-08-22 13:17:25.2217|Info|  Settimeout: id:84, (32) ms
2015-08-22 13:17:25.2737|Info|  Settimeout: id:85, (32) ms
2015-08-22 13:17:25.3257|Info|  Settimeout: id:86, (32) ms
2015-08-22 13:17:25.3798|Info|  Settimeout: id:87, (32) ms
2015-08-22 13:17:25.4328|Info|  Settimeout: id:88, (31) ms
2015-08-22 13:17:25.4869|Info|  Settimeout: id:89, (1) ms
2015-08-22 13:17:25.5389|Info|      Encerrado timer: id:81, (13:17:25.5389)
2015-08-22 13:17:25.5389|Info|      Executando timer: id:88, (13:17:25.5409)
2015-08-22 13:17:25.5389|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:25.5389|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:25.5389|Info|      Encerrado timer: id:88, (13:17:25.5509)
2015-08-22 13:17:25.5529|Info|      Executando timer: id:89, (13:17:25.5529)
2015-08-22 13:17:25.5529|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 13:17:25.5529|Info|  Settimeout: id:90, (13) ms
2015-08-22 13:17:25.6120|Info|      Encerrado timer: id:89, (13:17:25.6120)
2015-08-22 13:17:25.6120|Info|      Executando timer: id:90, (13:17:25.6129)
2015-08-22 13:17:25.6120|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:25.6159|Info|  Settimeout: id:91, (32) ms
2015-08-22 13:17:25.6690|Info|  Settimeout: id:92, (32) ms
2015-08-22 13:17:25.7220|Info|  Settimeout: id:93, (32) ms
2015-08-22 13:17:25.7730|Info|  Settimeout: id:94, (32) ms
2015-08-22 13:17:25.8251|Info|  Settimeout: id:95, (32) ms
2015-08-22 13:17:25.8762|Info|  Settimeout: id:96, (32) ms
2015-08-22 13:17:25.9291|Info|  Settimeout: id:97, (32) ms
2015-08-22 13:17:25.9822|Info|  Settimeout: id:98, (1) ms
2015-08-22 13:17:26.0433|Info|      Encerrado timer: id:90, (13:17:26.0433)
2015-08-22 13:17:26.0433|Info|      Executando timer: id:97, (13:17:26.0442)
2015-08-22 13:17:26.0433|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.0433|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.0433|Info|      Encerrado timer: id:97, (13:17:26.0462)
2015-08-22 13:17:26.0433|Info|      Executando timer: id:98, (13:17:26.0472)
2015-08-22 13:17:26.0433|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 13:17:26.0433|Info|  Settimeout: id:99, (13) ms
2015-08-22 13:17:26.1013|Info|      Encerrado timer: id:98, (13:17:26.1013)
2015-08-22 13:17:26.1013|Info|      Executando timer: id:99, (13:17:26.1013)
2015-08-22 13:17:26.1013|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:26.1013|Info|  Settimeout: id:100, (32) ms
2015-08-22 13:17:26.1554|Info|  Settimeout: id:101, (128) ms
2015-08-22 13:17:26.2074|Info|      Encerrado timer: id:99, (13:17:26.2074)
2015-08-22 13:17:26.2093|Info|      Executando timer: id:100, (13:17:26.2093)
2015-08-22 13:17:26.2093|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.2093|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.2093|Info|      Encerrado timer: id:100, (13:17:26.2163)
2015-08-22 13:17:26.2864|Info|      Executando timer: id:101, (13:17:26.2864)
2015-08-22 13:17:26.2864|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:26.2864|Info|  Settimeout: id:102, (13) ms
2015-08-22 13:17:26.3465|Info|      Encerrado timer: id:101, (13:17:26.3465)
2015-08-22 13:17:26.3465|Info|      Executando timer: id:102, (13:17:26.3484)
2015-08-22 13:17:26.3514|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:26.3514|Info|  Settimeout: id:103, (32) ms
2015-08-22 13:17:26.4105|Info|  Settimeout: id:104, (64) ms
2015-08-22 13:17:26.4635|Info|  Settimeout: id:105, (64) ms
2015-08-22 13:17:26.5146|Info|  Settimeout: id:106, (256) ms
2015-08-22 13:17:26.5656|Info|      Encerrado timer: id:102, (13:17:26.5656)
2015-08-22 13:17:26.5656|Info|      Executando timer: id:103, (13:17:26.5666)
2015-08-22 13:17:26.5676|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.5676|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.5676|Info|      Encerrado timer: id:103, (13:17:26.5716)
2015-08-22 13:17:26.5676|Info|      Executando timer: id:104, (13:17:26.5726)
2015-08-22 13:17:26.5676|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.5676|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:26.5676|Info|      Encerrado timer: id:104, (13:17:26.5806)
2015-08-22 13:17:26.5676|Info|      Executando timer: id:105, (13:17:26.5816)
2015-08-22 13:17:26.5846|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.5846|Info|      Encerrado timer: id:105, (13:17:26.5876)
2015-08-22 13:17:26.7728|Info|      Executando timer: id:106, (13:17:26.7728)
2015-08-22 13:17:26.7728|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-08-22 13:17:26.7728|Info|  Settimeout: id:107, (13) ms
2015-08-22 13:17:26.8288|Info|      Encerrado timer: id:106, (13:17:26.8288)
2015-08-22 13:17:26.8288|Info|      Executando timer: id:107, (13:17:26.8288)
2015-08-22 13:17:26.8288|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:26.8288|Info|  Settimeout: id:108, (64) ms
2015-08-22 13:17:26.8828|Info|  Settimeout: id:109, (96) ms
2015-08-22 13:17:26.9359|Info|  Settimeout: id:110, (192) ms
2015-08-22 13:17:26.9879|Info|      Encerrado timer: id:107, (13:17:26.9879)
2015-08-22 13:17:26.9879|Info|      Executando timer: id:108, (13:17:26.9889)
2015-08-22 13:17:26.9909|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:26.9909|Info|      Encerrado timer: id:108, (13:17:26.9929)
2015-08-22 13:17:26.9909|Info|      Executando timer: id:109, (13:17:26.9939)
2015-08-22 13:17:26.9909|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-08-22 13:17:26.9909|Info|  Settimeout: id:111, (64) ms
2015-08-22 13:17:27.0550|Info|      Encerrado timer: id:109, (13:17:27.0550)
2015-08-22 13:17:27.0700|Info|      Executando timer: id:111, (13:17:27.0700)
2015-08-22 13:17:27.0700|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:27.0700|Info|      Encerrado timer: id:111, (13:17:27.0750)
2015-08-22 13:17:27.1310|Info|      Executando timer: id:110, (13:17:27.1310)
2015-08-22 13:17:27.1310|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-08-22 13:17:27.1310|Info|  Settimeout: id:112, (13) ms
2015-08-22 13:17:27.1901|Info|      Encerrado timer: id:110, (13:17:27.1901)
2015-08-22 13:17:27.1901|Info|      Executando timer: id:112, (13:17:27.1911)
2015-08-22 13:17:27.1901|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:27.1950|Info|  Settimeout: id:113, (0) ms
2015-08-22 13:17:27.2461|Info|  Settimeout: id:114, (32) ms
2015-08-22 13:17:27.2971|Info|      Encerrado timer: id:112, (13:17:27.2971)
2015-08-22 13:17:27.2971|Info|      Executando timer: id:113, (13:17:27.2981)
2015-08-22 13:17:27.2971|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.3051|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.3051|Info|      Encerrado timer: id:113, (13:17:27.3061)
2015-08-22 13:17:27.3051|Info|      Executando timer: id:114, (13:17:27.3081)
2015-08-22 13:17:27.3051|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:27.3051|Info|  Settimeout: id:115, (0) ms
2015-08-22 13:17:27.3672|Info|  Settimeout: id:116, (13) ms
2015-08-22 13:17:27.4192|Info|      Encerrado timer: id:114, (13:17:27.4192)
2015-08-22 13:17:27.4192|Info|      Executando timer: id:115, (13:17:27.4202)
2015-08-22 13:17:27.4192|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.4192|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.4192|Info|      Encerrado timer: id:115, (13:17:27.4232)
2015-08-22 13:17:27.4192|Info|      Executando timer: id:116, (13:17:27.4242)
2015-08-22 13:17:27.4192|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:27.4282|Info|  Settimeout: id:117, (32) ms
2015-08-22 13:17:27.4793|Info|  Settimeout: id:118, (64) ms
2015-08-22 13:17:27.5303|Info|      Encerrado timer: id:116, (13:17:27.5303)
2015-08-22 13:17:27.5303|Info|      Executando timer: id:117, (13:17:27.5323)
2015-08-22 13:17:27.5303|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.5383|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.5383|Info|      Encerrado timer: id:117, (13:17:27.5403)
2015-08-22 13:17:27.5383|Info|      Executando timer: id:118, (13:17:27.5453)
2015-08-22 13:17:27.5583|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 13:17:27.5583|Info|  Settimeout: id:119, (13) ms
2015-08-22 13:17:27.6154|Info|      Encerrado timer: id:118, (13:17:27.6154)
2015-08-22 13:17:27.6154|Info|      Executando timer: id:119, (13:17:27.6173)
2015-08-22 13:17:27.6154|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:27.6154|Info|  Settimeout: id:120, (32) ms
2015-08-22 13:17:27.6784|Info|  Settimeout: id:121, (256) ms
2015-08-22 13:17:27.7304|Info|      Encerrado timer: id:119, (13:17:27.7304)
2015-08-22 13:17:27.7304|Info|      Executando timer: id:120, (13:17:27.7324)
2015-08-22 13:17:27.7304|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.7404|Info|  Settimeout: id:122, (32) ms
2015-08-22 13:17:27.7935|Info|!timeoutId && !maxTimeoutId false
2015-08-22 13:17:27.7935|Info|      Encerrado timer: id:120, (13:17:27.7965)
2015-08-22 13:17:27.7935|Info|      Executando timer: id:122, (13:17:27.7985)
2015-08-22 13:17:27.7935|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.8025|Info|  Settimeout: id:123, (32) ms
2015-08-22 13:17:27.8546|Info|!timeoutId && !maxTimeoutId false
2015-08-22 13:17:27.8546|Info|      Encerrado timer: id:122, (13:17:27.8555)
2015-08-22 13:17:27.8546|Info|      Executando timer: id:123, (13:17:27.8555)
2015-08-22 13:17:27.8546|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:27.8546|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:27.8546|Info|      Encerrado timer: id:123, (13:17:27.8585)
2015-08-22 13:17:27.9376|Info|      Executando timer: id:121, (13:17:27.9376)
2015-08-22 13:17:27.9376|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 13:17:27.9376|Info|  Settimeout: id:124, (13) ms
2015-08-22 13:17:27.9907|Info|      Encerrado timer: id:121, (13:17:27.9907)
2015-08-22 13:17:27.9907|Info|      Executando timer: id:124, (13:17:27.9916)
2015-08-22 13:17:27.9907|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.0076|Info|  Settimeout: id:125, (32) ms
2015-08-22 13:17:28.0597|Info|  Settimeout: id:126, (64) ms
2015-08-22 13:17:28.1117|Info|      Encerrado timer: id:124, (13:17:28.1117)
2015-08-22 13:17:28.1117|Info|      Executando timer: id:125, (13:17:28.1137)
2015-08-22 13:17:28.1167|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:28.1167|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:28.1167|Info|      Encerrado timer: id:125, (13:17:28.1227)
2015-08-22 13:17:28.1167|Info|      Executando timer: id:126, (13:17:28.1268)
2015-08-22 13:17:28.1167|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:28.1327|Info|  Settimeout: id:127, (32) ms
2015-08-22 13:17:28.1857|Info|  Settimeout: id:128, (13) ms
2015-08-22 13:17:28.2378|Info|      Encerrado timer: id:126, (13:17:28.2378)
2015-08-22 13:17:28.2378|Info|      Executando timer: id:127, (13:17:28.2388)
2015-08-22 13:17:28.2398|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:28.2398|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:28.2398|Info|      Encerrado timer: id:127, (13:17:28.2428)
2015-08-22 13:17:28.2398|Info|      Executando timer: id:128, (13:17:28.2428)
2015-08-22 13:17:28.2398|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.2398|Info|  Settimeout: id:129, (32) ms
2015-08-22 13:17:28.2988|Info|  Settimeout: id:130, (64) ms
2015-08-22 13:17:28.3529|Info|      Encerrado timer: id:128, (13:17:28.3529)
2015-08-22 13:17:28.3679|Info|      Executando timer: id:130, (13:17:28.3679)
2015-08-22 13:17:28.3679|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 13:17:28.3679|Info|  Settimeout: id:131, (13) ms
2015-08-22 13:17:28.4210|Info|      Encerrado timer: id:130, (13:17:28.4210)
2015-08-22 13:17:28.4210|Info|      Executando timer: id:131, (13:17:28.4210)
2015-08-22 13:17:28.4210|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.4210|Info|  Settimeout: id:132, (32) ms
2015-08-22 13:17:28.4760|Info|  Settimeout: id:133, (32) ms
2015-08-22 13:17:28.5280|Info|  Settimeout: id:134, (64) ms
2015-08-22 13:17:28.5791|Info|      Encerrado timer: id:131, (13:17:28.5791)
2015-08-22 13:17:28.5791|Info|      Executando timer: id:133, (13:17:28.5810)
2015-08-22 13:17:28.5841|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:17:28.5841|Info|      Encerrado timer: id:133, (13:17:28.5860)
2015-08-22 13:17:28.5841|Info|      Executando timer: id:134, (13:17:28.5941)
2015-08-22 13:17:28.5841|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:28.6010|Info|  Settimeout: id:135, (13) ms
2015-08-22 13:17:28.6531|Info|      Encerrado timer: id:134, (13:17:28.6531)
2015-08-22 13:17:28.6531|Info|      Executando timer: id:135, (13:17:28.6541)
2015-08-22 13:17:28.6531|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.6531|Info|  Settimeout: id:136, (32) ms
2015-08-22 13:17:28.7101|Info|      Encerrado timer: id:135, (13:17:28.7101)
2015-08-22 13:17:28.7101|Info|      Executando timer: id:136, (13:17:28.7111)
2015-08-22 13:17:28.7101|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:28.7101|Info|  Settimeout: id:137, (13) ms
2015-08-22 13:17:28.7662|Info|      Encerrado timer: id:136, (13:17:28.7662)
2015-08-22 13:17:28.7662|Info|      Executando timer: id:137, (13:17:28.7682)
2015-08-22 13:17:28.7662|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.7722|Info|  Settimeout: id:138, (32) ms
2015-08-22 13:17:28.8242|Info|  Settimeout: id:139, (64) ms
2015-08-22 13:17:28.8762|Info|      Encerrado timer: id:137, (13:17:28.8762)
2015-08-22 13:17:28.8762|Info|      Executando timer: id:138, (13:17:28.8782)
2015-08-22 13:17:28.8802|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:28.8802|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:28.8802|Info|      Encerrado timer: id:138, (13:17:28.8823)
2015-08-22 13:17:28.8802|Info|      Executando timer: id:139, (13:17:28.8913)
2015-08-22 13:17:28.8802|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 13:17:28.8802|Info|  Settimeout: id:140, (13) ms
2015-08-22 13:17:28.9443|Info|      Encerrado timer: id:139, (13:17:28.9443)
2015-08-22 13:17:28.9443|Info|      Executando timer: id:140, (13:17:28.9463)
2015-08-22 13:17:28.9443|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:28.9653|Info|  Settimeout: id:141, (32) ms
2015-08-22 13:17:29.0183|Info|  Settimeout: id:142, (256) ms
2015-08-22 13:17:29.0704|Info|      Encerrado timer: id:140, (13:17:29.0704)
2015-08-22 13:17:29.0704|Info|      Executando timer: id:141, (13:17:29.0724)
2015-08-22 13:17:29.0704|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:29.0704|Info|  Settimeout: id:143, (32) ms
2015-08-22 13:17:29.1325|Info|!timeoutId && !maxTimeoutId false
2015-08-22 13:17:29.1325|Info|      Encerrado timer: id:141, (13:17:29.1334)
2015-08-22 13:17:29.1325|Info|      Executando timer: id:143, (13:17:29.1344)
2015-08-22 13:17:29.1325|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:29.1325|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:29.1325|Info|      Encerrado timer: id:143, (13:17:29.1384)
2015-08-22 13:17:29.2776|Info|      Executando timer: id:142, (13:17:29.2776)
2015-08-22 13:17:29.2776|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 13:17:29.2776|Info|  Settimeout: id:144, (13) ms
2015-08-22 13:17:29.3366|Info|      Encerrado timer: id:142, (13:17:29.3366)
2015-08-22 13:17:29.3366|Info|      Executando timer: id:144, (13:17:29.3386)
2015-08-22 13:17:29.3366|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.3616|Info|  Settimeout: id:145, (64) ms
2015-08-22 13:17:29.4126|Info|      Encerrado timer: id:144, (13:17:29.4126)
2015-08-22 13:17:29.4277|Info|      Executando timer: id:145, (13:17:29.4277)
2015-08-22 13:17:29.4277|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 13:17:29.4277|Info|  Settimeout: id:146, (13) ms
2015-08-22 13:17:29.4837|Info|      Encerrado timer: id:145, (13:17:29.4837)
2015-08-22 13:17:29.4837|Info|      Executando timer: id:146, (13:17:29.4847)
2015-08-22 13:17:29.4837|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.4897|Info|  Settimeout: id:147, (32) ms
2015-08-22 13:17:29.5418|Info|  Settimeout: id:148, (64) ms
2015-08-22 13:17:29.5927|Info|      Encerrado timer: id:146, (13:17:29.5927)
2015-08-22 13:17:29.6078|Info|      Executando timer: id:148, (13:17:29.6078)
2015-08-22 13:17:29.6078|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 13:17:29.6078|Info|  Settimeout: id:149, (13) ms
2015-08-22 13:17:29.6658|Info|      Encerrado timer: id:148, (13:17:29.6658)
2015-08-22 13:17:29.6658|Info|      Executando timer: id:149, (13:17:29.6678)
2015-08-22 13:17:29.6658|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.6658|Info|  Settimeout: id:150, (64) ms
2015-08-22 13:17:29.7279|Info|      Encerrado timer: id:149, (13:17:29.7279)
2015-08-22 13:17:29.7428|Info|      Executando timer: id:150, (13:17:29.7428)
2015-08-22 13:17:29.7428|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 13:17:29.7428|Info|  Settimeout: id:151, (13) ms
2015-08-22 13:17:29.7969|Info|      Encerrado timer: id:150, (13:17:29.7969)
2015-08-22 13:17:29.7969|Info|      Executando timer: id:151, (13:17:29.7979)
2015-08-22 13:17:29.7969|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:29.9190|Info|  Settimeout: id:152, (32) ms
2015-08-22 13:17:29.9700|Info|  Settimeout: id:153, (1) ms
2015-08-22 13:17:30.0220|Info|  Settimeout: id:154, (64) ms
2015-08-22 13:17:30.0741|Info|      Encerrado timer: id:151, (13:17:30.0741)
2015-08-22 13:17:30.0741|Info|      Executando timer: id:152, (13:17:30.0771)
2015-08-22 13:17:30.0741|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:30.0741|Info|      Encerrado timer: id:152, (13:17:30.0821)
2015-08-22 13:17:30.0841|Info|      Executando timer: id:153, (13:17:30.0841)
2015-08-22 13:17:30.0841|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:30.0841|Info|      Encerrado timer: id:153, (13:17:30.0921)
2015-08-22 13:17:30.0841|Info|      Executando timer: id:154, (13:17:30.0951)
2015-08-22 13:17:30.0841|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:30.1001|Info|  Settimeout: id:155, (13) ms
2015-08-22 13:17:30.1522|Info|      Encerrado timer: id:154, (13:17:30.1522)
2015-08-22 13:17:30.1522|Info|      Executando timer: id:155, (13:17:30.1522)
2015-08-22 13:17:30.1522|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.1522|Info|  Settimeout: id:156, (32) ms
2015-08-22 13:17:30.2052|Info|  Settimeout: id:157, (64) ms
2015-08-22 13:17:30.2563|Info|      Encerrado timer: id:155, (13:17:30.2563)
2015-08-22 13:17:30.2713|Info|      Executando timer: id:157, (13:17:30.2713)
2015-08-22 13:17:30.2713|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:30.2713|Info|  Settimeout: id:158, (13) ms
2015-08-22 13:17:30.3243|Info|      Encerrado timer: id:157, (13:17:30.3243)
2015-08-22 13:17:30.3243|Info|      Executando timer: id:158, (13:17:30.3253)
2015-08-22 13:17:30.3243|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.3243|Info|  Settimeout: id:159, (32) ms
2015-08-22 13:17:30.3813|Info|  Settimeout: id:160, (64) ms
2015-08-22 13:17:30.4334|Info|      Encerrado timer: id:158, (13:17:30.4334)
2015-08-22 13:17:30.4334|Info|      Executando timer: id:159, (13:17:30.4343)
2015-08-22 13:17:30.4334|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:30.4334|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:30.4334|Info|      Encerrado timer: id:159, (13:17:30.4373)
2015-08-22 13:17:30.4474|Info|      Executando timer: id:160, (13:17:30.4474)
2015-08-22 13:17:30.4474|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:30.4474|Info|  Settimeout: id:161, (18) ms
2015-08-22 13:17:30.5044|Info|  Settimeout: id:162, (13) ms
2015-08-22 13:17:30.5565|Info|      Encerrado timer: id:160, (13:17:30.5565)
2015-08-22 13:17:30.5565|Info|      Executando timer: id:162, (13:17:30.5584)
2015-08-22 13:17:30.5565|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.5565|Info|  Settimeout: id:163, (32) ms
2015-08-22 13:17:30.6165|Info|  Settimeout: id:164, (1) ms
2015-08-22 13:17:30.6686|Info|  Settimeout: id:165, (64) ms
2015-08-22 13:17:30.7196|Info|      Encerrado timer: id:162, (13:17:30.7196)
2015-08-22 13:17:30.7196|Info|      Executando timer: id:163, (13:17:30.7196)
2015-08-22 13:17:30.7196|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:30.7196|Info|      Encerrado timer: id:163, (13:17:30.7225)
2015-08-22 13:17:30.7196|Info|      Executando timer: id:164, (13:17:30.7225)
2015-08-22 13:17:30.7235|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:30.7235|Info|      Encerrado timer: id:164, (13:17:30.7255)
2015-08-22 13:17:30.7235|Info|      Executando timer: id:165, (13:17:30.7346)
2015-08-22 13:17:30.7396|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:30.7396|Info|  Settimeout: id:166, (13) ms
2015-08-22 13:17:30.7916|Info|      Encerrado timer: id:165, (13:17:30.7916)
2015-08-22 13:17:30.7916|Info|      Executando timer: id:166, (13:17:30.7926)
2015-08-22 13:17:30.7916|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.7916|Info|  Settimeout: id:167, (32) ms
2015-08-22 13:17:30.8526|Info|  Settimeout: id:168, (64) ms
2015-08-22 13:17:30.9047|Info|      Encerrado timer: id:166, (13:17:30.9047)
2015-08-22 13:17:30.9197|Info|      Executando timer: id:168, (13:17:30.9197)
2015-08-22 13:17:30.9197|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:30.9287|Info|  Settimeout: id:169, (13) ms
2015-08-22 13:17:30.9808|Info|      Encerrado timer: id:168, (13:17:30.9808)
2015-08-22 13:17:30.9808|Info|      Executando timer: id:169, (13:17:30.9828)
2015-08-22 13:17:30.9808|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:30.9907|Info|  Settimeout: id:170, (32) ms
2015-08-22 13:17:31.0528|Info|  Settimeout: id:171, (64) ms
2015-08-22 13:17:31.1048|Info|      Encerrado timer: id:169, (13:17:31.1048)
2015-08-22 13:17:31.1048|Info|      Executando timer: id:170, (13:17:31.1068)
2015-08-22 13:17:31.1048|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:31.1048|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:31.1048|Info|      Encerrado timer: id:170, (13:17:31.1138)
2015-08-22 13:17:31.1199|Info|      Executando timer: id:171, (13:17:31.1199)
2015-08-22 13:17:31.1199|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:31.1199|Info|  Settimeout: id:172, (18) ms
2015-08-22 13:17:31.1819|Info|  Settimeout: id:173, (13) ms
2015-08-22 13:17:31.2349|Info|      Encerrado timer: id:171, (13:17:31.2349)
2015-08-22 13:17:31.2349|Info|      Executando timer: id:173, (13:17:31.2369)
2015-08-22 13:17:31.2349|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.2429|Info|  Settimeout: id:174, (32) ms
2015-08-22 13:17:31.2950|Info|  Settimeout: id:175, (1) ms
2015-08-22 13:17:31.3470|Info|  Settimeout: id:176, (64) ms
2015-08-22 13:17:31.3980|Info|      Encerrado timer: id:173, (13:17:31.3980)
2015-08-22 13:17:31.3980|Info|      Executando timer: id:174, (13:17:31.3980)
2015-08-22 13:17:31.3980|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:31.3980|Info|      Encerrado timer: id:174, (13:17:31.4010)
2015-08-22 13:17:31.3980|Info|      Executando timer: id:175, (13:17:31.4020)
2015-08-22 13:17:31.3980|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:31.3980|Info|      Encerrado timer: id:175, (13:17:31.4050)
2015-08-22 13:17:31.4130|Info|      Executando timer: id:176, (13:17:31.4130)
2015-08-22 13:17:31.4130|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:31.4130|Info|  Settimeout: id:177, (13) ms
2015-08-22 13:17:31.4661|Info|      Encerrado timer: id:176, (13:17:31.4661)
2015-08-22 13:17:31.4661|Info|      Executando timer: id:177, (13:17:31.4671)
2015-08-22 13:17:31.4661|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.4661|Info|  Settimeout: id:178, (32) ms
2015-08-22 13:17:31.5271|Info|  Settimeout: id:179, (64) ms
2015-08-22 13:17:31.5812|Info|      Encerrado timer: id:177, (13:17:31.5812)
2015-08-22 13:17:31.5962|Info|      Executando timer: id:179, (13:17:31.5962)
2015-08-22 13:17:31.5962|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:31.5992|Info|  Settimeout: id:180, (13) ms
2015-08-22 13:17:31.6503|Info|      Encerrado timer: id:179, (13:17:31.6503)
2015-08-22 13:17:31.6503|Info|      Executando timer: id:180, (13:17:31.6512)
2015-08-22 13:17:31.6503|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.6503|Info|  Settimeout: id:181, (32) ms
2015-08-22 13:17:31.7102|Info|  Settimeout: id:182, (64) ms
2015-08-22 13:17:31.7613|Info|      Encerrado timer: id:180, (13:17:31.7613)
2015-08-22 13:17:31.7613|Info|      Executando timer: id:181, (13:17:31.7623)
2015-08-22 13:17:31.7613|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:31.7613|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:31.7613|Info|      Encerrado timer: id:181, (13:17:31.7683)
2015-08-22 13:17:31.7763|Info|      Executando timer: id:182, (13:17:31.7763)
2015-08-22 13:17:31.7763|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:31.7763|Info|  Settimeout: id:183, (16) ms
2015-08-22 13:17:31.8353|Info|  Settimeout: id:184, (13) ms
2015-08-22 13:17:31.8864|Info|      Encerrado timer: id:182, (13:17:31.8864)
2015-08-22 13:17:31.8864|Info|      Executando timer: id:184, (13:17:31.8884)
2015-08-22 13:17:31.8864|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:31.8964|Info|  Settimeout: id:185, (32) ms
2015-08-22 13:17:31.9515|Info|  Settimeout: id:186, (1) ms
2015-08-22 13:17:32.0035|Info|  Settimeout: id:187, (64) ms
2015-08-22 13:17:32.0555|Info|      Encerrado timer: id:184, (13:17:32.0555)
2015-08-22 13:17:32.0555|Info|      Executando timer: id:185, (13:17:32.0565)
2015-08-22 13:17:32.0555|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:32.0555|Info|      Encerrado timer: id:185, (13:17:32.0595)
2015-08-22 13:17:32.0555|Info|      Executando timer: id:186, (13:17:32.0605)
2015-08-22 13:17:32.0555|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:32.0555|Info|      Encerrado timer: id:186, (13:17:32.0625)
2015-08-22 13:17:32.0705|Info|      Executando timer: id:187, (13:17:32.0705)
2015-08-22 13:17:32.0705|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:32.0705|Info|  Settimeout: id:188, (13) ms
2015-08-22 13:17:32.1236|Info|      Encerrado timer: id:187, (13:17:32.1236)
2015-08-22 13:17:32.1236|Info|      Executando timer: id:188, (13:17:32.1245)
2015-08-22 13:17:32.1236|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.1236|Info|  Settimeout: id:189, (32) ms
2015-08-22 13:17:32.1796|Info|  Settimeout: id:190, (64) ms
2015-08-22 13:17:32.2307|Info|      Encerrado timer: id:188, (13:17:32.2307)
2015-08-22 13:17:32.2456|Info|      Executando timer: id:190, (13:17:32.2456)
2015-08-22 13:17:32.2456|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:32.2456|Info|  Settimeout: id:191, (13) ms
2015-08-22 13:17:32.3047|Info|      Encerrado timer: id:190, (13:17:32.3047)
2015-08-22 13:17:32.3047|Info|      Executando timer: id:191, (13:17:32.3057)
2015-08-22 13:17:32.3047|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.3047|Info|  Settimeout: id:192, (32) ms
2015-08-22 13:17:32.3597|Info|  Settimeout: id:193, (64) ms
2015-08-22 13:17:32.4118|Info|      Encerrado timer: id:191, (13:17:32.4118)
2015-08-22 13:17:32.4118|Info|      Executando timer: id:192, (13:17:32.4137)
2015-08-22 13:17:32.4118|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:32.4118|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:32.4118|Info|      Encerrado timer: id:192, (13:17:32.4207)
2015-08-22 13:17:32.4268|Info|      Executando timer: id:193, (13:17:32.4268)
2015-08-22 13:17:32.4268|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:32.4268|Info|  Settimeout: id:194, (18) ms
2015-08-22 13:17:32.4888|Info|  Settimeout: id:195, (13) ms
2015-08-22 13:17:32.5398|Info|      Encerrado timer: id:193, (13:17:32.5398)
2015-08-22 13:17:32.5398|Info|      Executando timer: id:195, (13:17:32.5408)
2015-08-22 13:17:32.5398|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.5398|Info|  Settimeout: id:196, (32) ms
2015-08-22 13:17:32.5969|Info|  Settimeout: id:197, (1) ms
2015-08-22 13:17:32.6480|Info|  Settimeout: id:198, (64) ms
2015-08-22 13:17:32.7000|Info|      Encerrado timer: id:195, (13:17:32.7000)
2015-08-22 13:17:32.7000|Info|      Executando timer: id:196, (13:17:32.7020)
2015-08-22 13:17:32.7000|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:32.7080|Info|      Encerrado timer: id:196, (13:17:32.7080)
2015-08-22 13:17:32.7080|Info|      Executando timer: id:197, (13:17:32.7100)
2015-08-22 13:17:32.7080|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:32.7080|Info|      Encerrado timer: id:197, (13:17:32.7180)
2015-08-22 13:17:32.7080|Info|      Executando timer: id:198, (13:17:32.7210)
2015-08-22 13:17:32.7080|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:32.7270|Info|  Settimeout: id:199, (13) ms
2015-08-22 13:17:32.7790|Info|      Encerrado timer: id:198, (13:17:32.7790)
2015-08-22 13:17:32.7790|Info|      Executando timer: id:199, (13:17:32.7800)
2015-08-22 13:17:32.7790|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.7790|Info|  Settimeout: id:200, (32) ms
2015-08-22 13:17:32.8340|Info|  Settimeout: id:201, (64) ms
2015-08-22 13:17:32.8851|Info|      Encerrado timer: id:199, (13:17:32.8851)
2015-08-22 13:17:32.8991|Info|      Executando timer: id:201, (13:17:32.8991)
2015-08-22 13:17:32.8991|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:32.8991|Info|  Settimeout: id:202, (13) ms
2015-08-22 13:17:32.9532|Info|      Encerrado timer: id:201, (13:17:32.9532)
2015-08-22 13:17:32.9532|Info|      Executando timer: id:202, (13:17:32.9551)
2015-08-22 13:17:32.9532|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:32.9612|Info|  Settimeout: id:203, (32) ms
2015-08-22 13:17:33.0132|Info|  Settimeout: id:204, (64) ms
2015-08-22 13:17:33.0653|Info|      Encerrado timer: id:202, (13:17:33.0653)
2015-08-22 13:17:33.0653|Info|      Executando timer: id:203, (13:17:33.0672)
2015-08-22 13:17:33.0692|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:33.0692|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:33.0692|Info|      Encerrado timer: id:203, (13:17:33.0752)
2015-08-22 13:17:33.0692|Info|      Executando timer: id:204, (13:17:33.0803)
2015-08-22 13:17:33.0832|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:33.0832|Info|  Settimeout: id:205, (19) ms
2015-08-22 13:17:33.1423|Info|  Settimeout: id:206, (13) ms
2015-08-22 13:17:33.1933|Info|      Encerrado timer: id:204, (13:17:33.1933)
2015-08-22 13:17:33.1933|Info|      Executando timer: id:206, (13:17:33.1943)
2015-08-22 13:17:33.1933|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.1933|Info|  Settimeout: id:207, (32) ms
2015-08-22 13:17:33.2514|Info|  Settimeout: id:208, (1) ms
2015-08-22 13:17:33.3034|Info|  Settimeout: id:209, (64) ms
2015-08-22 13:17:33.3555|Info|      Encerrado timer: id:206, (13:17:33.3555)
2015-08-22 13:17:33.3555|Info|      Executando timer: id:207, (13:17:33.3564)
2015-08-22 13:17:33.3555|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:33.3555|Info|      Encerrado timer: id:207, (13:17:33.3614)
2015-08-22 13:17:33.3555|Info|      Executando timer: id:208, (13:17:33.3634)
2015-08-22 13:17:33.3654|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:33.3654|Info|      Encerrado timer: id:208, (13:17:33.3684)
2015-08-22 13:17:33.3654|Info|      Executando timer: id:209, (13:17:33.3704)
2015-08-22 13:17:33.3654|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:33.3654|Info|  Settimeout: id:210, (13) ms
2015-08-22 13:17:33.4255|Info|      Encerrado timer: id:209, (13:17:33.4255)
2015-08-22 13:17:33.4255|Info|      Executando timer: id:210, (13:17:33.4265)
2015-08-22 13:17:33.4275|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.4275|Info|  Settimeout: id:211, (32) ms
2015-08-22 13:17:33.4815|Info|  Settimeout: id:212, (64) ms
2015-08-22 13:17:33.5335|Info|      Encerrado timer: id:210, (13:17:33.5335)
2015-08-22 13:17:33.5486|Info|      Executando timer: id:212, (13:17:33.5486)
2015-08-22 13:17:33.5486|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:33.5546|Info|  Settimeout: id:213, (13) ms
2015-08-22 13:17:33.6056|Info|      Encerrado timer: id:212, (13:17:33.6056)
2015-08-22 13:17:33.6056|Info|      Executando timer: id:213, (13:17:33.6066)
2015-08-22 13:17:33.6056|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.6056|Info|  Settimeout: id:214, (32) ms
2015-08-22 13:17:33.6627|Info|  Settimeout: id:215, (64) ms
2015-08-22 13:17:33.7137|Info|      Encerrado timer: id:213, (13:17:33.7137)
2015-08-22 13:17:33.7137|Info|      Executando timer: id:214, (13:17:33.7157)
2015-08-22 13:17:33.7137|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:33.7137|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:33.7137|Info|      Encerrado timer: id:214, (13:17:33.7227)
2015-08-22 13:17:33.7287|Info|      Executando timer: id:215, (13:17:33.7287)
2015-08-22 13:17:33.7287|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:33.7287|Info|  Settimeout: id:216, (17) ms
2015-08-22 13:17:33.7907|Info|  Settimeout: id:217, (13) ms
2015-08-22 13:17:33.8418|Info|      Encerrado timer: id:215, (13:17:33.8418)
2015-08-22 13:17:33.8418|Info|      Executando timer: id:217, (13:17:33.8428)
2015-08-22 13:17:33.8418|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:33.8418|Info|  Settimeout: id:218, (32) ms
2015-08-22 13:17:33.8968|Info|  Settimeout: id:219, (1) ms
2015-08-22 13:17:33.9479|Info|  Settimeout: id:220, (64) ms
2015-08-22 13:17:33.9989|Info|      Encerrado timer: id:217, (13:17:33.9989)
2015-08-22 13:17:33.9989|Info|      Executando timer: id:218, (13:17:33.9989)
2015-08-22 13:17:33.9989|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:33.9989|Info|      Encerrado timer: id:218, (13:17:34.0009)
2015-08-22 13:17:33.9989|Info|      Executando timer: id:219, (13:17:34.0019)
2015-08-22 13:17:33.9989|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:33.9989|Info|      Encerrado timer: id:219, (13:17:34.0039)
2015-08-22 13:17:34.0139|Info|      Executando timer: id:220, (13:17:34.0139)
2015-08-22 13:17:34.0139|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:34.0139|Info|  Settimeout: id:221, (13) ms
2015-08-22 13:17:34.0680|Info|      Encerrado timer: id:220, (13:17:34.0680)
2015-08-22 13:17:34.0680|Info|      Executando timer: id:221, (13:17:34.0680)
2015-08-22 13:17:34.0680|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.0680|Info|  Settimeout: id:222, (32) ms
2015-08-22 13:17:34.1210|Info|  Settimeout: id:223, (64) ms
2015-08-22 13:17:34.1720|Info|      Encerrado timer: id:221, (13:17:34.1720)
2015-08-22 13:17:34.1871|Info|      Executando timer: id:223, (13:17:34.1871)
2015-08-22 13:17:34.1871|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:34.1871|Info|  Settimeout: id:224, (13) ms
2015-08-22 13:17:34.2411|Info|      Encerrado timer: id:223, (13:17:34.2411)
2015-08-22 13:17:34.2411|Info|      Executando timer: id:224, (13:17:34.2411)
2015-08-22 13:17:34.2411|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.2411|Info|  Settimeout: id:225, (32) ms
2015-08-22 13:17:34.2951|Info|  Settimeout: id:226, (64) ms
2015-08-22 13:17:34.3492|Info|      Encerrado timer: id:224, (13:17:34.3492)
2015-08-22 13:17:34.3492|Info|      Executando timer: id:225, (13:17:34.3511)
2015-08-22 13:17:34.3492|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:34.3492|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:34.3492|Info|      Encerrado timer: id:225, (13:17:34.3581)
2015-08-22 13:17:34.3642|Info|      Executando timer: id:226, (13:17:34.3642)
2015-08-22 13:17:34.3642|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:34.3642|Info|  Settimeout: id:227, (19) ms
2015-08-22 13:17:34.4262|Info|  Settimeout: id:228, (13) ms
2015-08-22 13:17:34.4773|Info|      Encerrado timer: id:226, (13:17:34.4773)
2015-08-22 13:17:34.4773|Info|      Executando timer: id:228, (13:17:34.4773)
2015-08-22 13:17:34.4773|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.4773|Info|  Settimeout: id:229, (32) ms
2015-08-22 13:17:34.5323|Info|  Settimeout: id:230, (1) ms
2015-08-22 13:17:34.5893|Info|  Settimeout: id:231, (64) ms
2015-08-22 13:17:34.6413|Info|      Encerrado timer: id:228, (13:17:34.6413)
2015-08-22 13:17:34.6413|Info|      Executando timer: id:229, (13:17:34.6423)
2015-08-22 13:17:34.6413|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:34.6413|Info|      Encerrado timer: id:229, (13:17:34.6443)
2015-08-22 13:17:34.6413|Info|      Executando timer: id:230, (13:17:34.6443)
2015-08-22 13:17:34.6463|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:34.6463|Info|      Encerrado timer: id:230, (13:17:34.6483)
2015-08-22 13:17:34.6463|Info|      Executando timer: id:231, (13:17:34.6563)
2015-08-22 13:17:34.6463|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:34.6463|Info|  Settimeout: id:232, (13) ms
2015-08-22 13:17:34.7104|Info|      Encerrado timer: id:231, (13:17:34.7104)
2015-08-22 13:17:34.7104|Info|      Executando timer: id:232, (13:17:34.7114)
2015-08-22 13:17:34.7104|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.7104|Info|  Settimeout: id:233, (32) ms
2015-08-22 13:17:34.7684|Info|  Settimeout: id:234, (64) ms
2015-08-22 13:17:34.8195|Info|      Encerrado timer: id:232, (13:17:34.8195)
2015-08-22 13:17:34.8345|Info|      Executando timer: id:234, (13:17:34.8345)
2015-08-22 13:17:34.8345|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:34.8345|Info|  Settimeout: id:235, (13) ms
2015-08-22 13:17:34.8945|Info|      Encerrado timer: id:234, (13:17:34.8945)
2015-08-22 13:17:34.8955|Info|      Executando timer: id:235, (13:17:34.8955)
2015-08-22 13:17:34.8955|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:34.8955|Info|  Settimeout: id:236, (32) ms
2015-08-22 13:17:34.9506|Info|  Settimeout: id:237, (64) ms
2015-08-22 13:17:35.0106|Info|      Encerrado timer: id:235, (13:17:35.0106)
2015-08-22 13:17:35.0106|Info|      Executando timer: id:236, (13:17:35.0136)
2015-08-22 13:17:35.0106|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:35.0106|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:35.0206|Info|      Encerrado timer: id:236, (13:17:35.0206)
2015-08-22 13:17:35.0206|Info|      Executando timer: id:237, (13:17:35.0257)
2015-08-22 13:17:35.0206|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:35.0206|Info|  Settimeout: id:238, (19) ms
2015-08-22 13:17:35.0866|Info|  Settimeout: id:239, (13) ms
2015-08-22 13:17:35.1397|Info|      Encerrado timer: id:237, (13:17:35.1397)
2015-08-22 13:17:35.1397|Info|      Executando timer: id:239, (13:17:35.1407)
2015-08-22 13:17:35.1397|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.1457|Info|  Settimeout: id:240, (32) ms
2015-08-22 13:17:35.1978|Info|  Settimeout: id:241, (1) ms
2015-08-22 13:17:35.2508|Info|  Settimeout: id:242, (64) ms
2015-08-22 13:17:35.3028|Info|      Encerrado timer: id:239, (13:17:35.3028)
2015-08-22 13:17:35.3028|Info|      Executando timer: id:240, (13:17:35.3048)
2015-08-22 13:17:35.3028|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:35.3028|Info|      Encerrado timer: id:240, (13:17:35.3108)
2015-08-22 13:17:35.3028|Info|      Executando timer: id:241, (13:17:35.3118)
2015-08-22 13:17:35.3028|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:35.3238|Info|      Encerrado timer: id:241, (13:17:35.3238)
2015-08-22 13:17:35.3238|Info|      Executando timer: id:242, (13:17:35.3268)
2015-08-22 13:17:35.3238|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:35.3238|Info|  Settimeout: id:243, (13) ms
2015-08-22 13:17:35.3819|Info|      Encerrado timer: id:242, (13:17:35.3819)
2015-08-22 13:17:35.3819|Info|      Executando timer: id:243, (13:17:35.3829)
2015-08-22 13:17:35.3819|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.3819|Info|  Settimeout: id:244, (32) ms
2015-08-22 13:17:35.4379|Info|  Settimeout: id:245, (64) ms
2015-08-22 13:17:35.4920|Info|      Encerrado timer: id:243, (13:17:35.4920)
2015-08-22 13:17:35.5070|Info|      Executando timer: id:245, (13:17:35.5070)
2015-08-22 13:17:35.5070|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:35.5070|Info|  Settimeout: id:246, (13) ms
2015-08-22 13:17:35.5670|Info|      Encerrado timer: id:245, (13:17:35.5670)
2015-08-22 13:17:35.5680|Info|      Executando timer: id:246, (13:17:35.5680)
2015-08-22 13:17:35.5680|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.5680|Info|  Settimeout: id:247, (32) ms
2015-08-22 13:17:35.6231|Info|  Settimeout: id:248, (64) ms
2015-08-22 13:17:35.6741|Info|      Encerrado timer: id:246, (13:17:35.6741)
2015-08-22 13:17:35.6741|Info|      Executando timer: id:247, (13:17:35.6751)
2015-08-22 13:17:35.6781|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:35.6781|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:35.6781|Info|      Encerrado timer: id:247, (13:17:35.6801)
2015-08-22 13:17:35.6781|Info|      Executando timer: id:248, (13:17:35.6891)
2015-08-22 13:17:35.6781|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:35.6961|Info|  Settimeout: id:249, (17) ms
2015-08-22 13:17:35.7501|Info|  Settimeout: id:250, (13) ms
2015-08-22 13:17:35.8012|Info|      Encerrado timer: id:248, (13:17:35.8012)
2015-08-22 13:17:35.8031|Info|      Executando timer: id:250, (13:17:35.8031)
2015-08-22 13:17:35.8031|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:35.8031|Info|  Settimeout: id:251, (32) ms
2015-08-22 13:17:35.8622|Info|  Settimeout: id:252, (1) ms
2015-08-22 13:17:35.9143|Info|  Settimeout: id:253, (64) ms
2015-08-22 13:17:35.9653|Info|      Encerrado timer: id:250, (13:17:35.9653)
2015-08-22 13:17:35.9653|Info|      Executando timer: id:251, (13:17:35.9673)
2015-08-22 13:17:35.9653|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:17:35.9653|Info|      Encerrado timer: id:251, (13:17:35.9723)
2015-08-22 13:17:35.9653|Info|      Executando timer: id:252, (13:17:35.9733)
2015-08-22 13:17:35.9763|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:17:35.9763|Info|      Encerrado timer: id:252, (13:17:35.9813)
2015-08-22 13:17:35.9763|Info|      Executando timer: id:253, (13:17:35.9843)
2015-08-22 13:17:35.9763|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:17:35.9893|Info|  Settimeout: id:254, (13) ms
2015-08-22 13:17:36.0403|Info|      Encerrado timer: id:253, (13:17:36.0403)
2015-08-22 13:17:36.0403|Info|      Executando timer: id:254, (13:17:36.0433)
2015-08-22 13:17:36.0403|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:36.0403|Info|----------------------------------------
2015-08-22 13:17:36.0403|Info|lodash.delay
2015-08-22 13:17:36.0403|Info|----------------------------------------
2015-08-22 13:17:36.0533|Info| FAIL - should delay `func` execution
2015-08-22 13:17:36.0533|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 13:17:36.0533|Info|  Settimeout: id:255, (32) ms
2015-08-22 13:17:36.1114|Info|  Settimeout: id:256, (64) ms
2015-08-22 13:17:36.1624|Info|      Encerrado timer: id:254, (13:17:36.1624)
2015-08-22 13:17:36.1774|Info|      Executando timer: id:256, (13:17:36.1774)
2015-08-22 13:17:36.1774|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 13:17:36.1774|Info|  Settimeout: id:257, (13) ms
2015-08-22 13:17:36.2315|Info|      Encerrado timer: id:256, (13:17:36.2315)
2015-08-22 13:17:36.2315|Info|      Executando timer: id:257, (13:17:36.2325)
2015-08-22 13:17:36.2315|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:36.2315|Info|----------------------------------------
2015-08-22 13:17:36.2405|Info|lodash.throttle
2015-08-22 13:17:36.2405|Info|----------------------------------------
2015-08-22 13:17:36.2405|Info| FAIL - should throttle a function
2015-08-22 13:17:36.2405|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 13:17:36.2405|Info|  Settimeout: id:258, (32) ms
2015-08-22 13:17:36.3025|Info|  Settimeout: id:259, (64) ms
2015-08-22 13:17:36.3586|Info|      Encerrado timer: id:257, (13:17:36.3586)
2015-08-22 13:17:36.3586|Info|      Executando timer: id:258, (13:17:36.3595)
2015-08-22 13:17:36.3586|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:17:36.3646|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:17:36.3646|Info|      Encerrado timer: id:258, (13:17:36.3665)
2015-08-22 13:17:36.3646|Info|      Executando timer: id:259, (13:17:36.3736)
2015-08-22 13:17:36.3646|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 13:17:36.3646|Info|  Settimeout: id:260, (18) ms
2015-08-22 13:17:36.4336|Info|  Settimeout: id:261, (13) ms
2015-08-22 13:17:36.4856|Info|      Encerrado timer: id:259, (13:17:36.4856)
2015-08-22 13:17:36.4856|Info|      Executando timer: id:261, (13:17:36.4876)
2015-08-22 13:17:36.4917|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:17:36.4917|Info| FAIL - subsequent calls should return the result of the first call
2015-08-22 13:17:36.4917|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 13:17:36.4917|Info|    FAIL | EQ | ok | Expected: y, Actual: y
2015-08-22 13:17:36.4917|Info|----------------------------------------
2015-08-22 13:17:36.5057|Info|    PASS: 4447  FAIL: 4  TOTAL: 4451
2015-08-22 13:17:36.5057|Info|    Finished in 18433 milliseconds.
2015-08-22 13:17:36.5057|Info|----------------------------------------
2015-08-22 13:17:36.5437|Info|      Encerrado timer: id:261, (13:17:36.5437)
2015-08-22 13:17:36.5437|Info|Encerrando os testes
2015-08-22 13:17:36.5437|Info|Total:4451, Sucesso: 4447, Falha: 4
2015-08-22 13:17:36.5437|Info|19 segundos para avaliar o individuo lodash.js
2015-08-22 13:17:36.5437|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [113]:1:24
2015-08-22 13:17:36.5437|Info|FAILED: lodash.isNil: should work with nulls from another realm: Expected 2 assertions, but 1 were run, ,     at Script Document [12]:7765:5
    at Script Document [12]:7774:4
    at Script Document [12]:17424:3
2015-08-22 13:17:36.5437|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [135]:1:24
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [141]:1:24
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [265]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [271]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [277]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [283]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [289]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [295]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [301]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [307]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [313]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [319]:1:25
2015-08-22 13:17:36.5517|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [325]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [331]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [337]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [343]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [349]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [355]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [361]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [367]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [373]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [379]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [385]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [391]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [397]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [403]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [409]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [415]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [421]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [427]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [433]:1:25
2015-08-22 13:17:36.5677|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [439]:1:25
2015-08-22 13:20:32.2253|Info|Iniciando os testes
2015-08-22 13:20:32.5535|Info|  Settimeout: id:0, (13) ms
2015-08-22 13:20:32.5716|Info|      Executando timer: id:0, (13:20:32.5716)
2015-08-22 13:20:32.6246|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:20:33.6293|Info|  Settimeout: id:1, (13) ms
2015-08-22 13:20:33.6794|Info|      Encerrado timer: id:0, (13:20:33.6794)
2015-08-22 13:20:33.6794|Info|      Executando timer: id:1, (13:20:33.6863)
2015-08-22 13:20:33.6943|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 13:20:34.6961|Info|  Settimeout: id:2, (13) ms
2015-08-22 13:20:34.7471|Info|      Encerrado timer: id:1, (13:20:34.7471)
2015-08-22 13:20:34.7471|Info|      Executando timer: id:2, (13:20:34.7471)
2015-08-22 13:20:34.7471|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 13:20:34.9562|Info|      Encerrado timer: id:2, (13:20:34.9562)
2015-08-22 13:20:34.9562|Info|Encerrando os testes
2015-08-22 13:20:34.9583|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-22 13:20:34.9583|Info|3 segundos para avaliar o individuo global.js
2015-08-22 13:20:38.6329|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:20:39.1582|Info|      Executando timer: id:0, (13:20:39.1582)
2015-08-22 13:20:39.2833|Info|Iniciando os testes
2015-08-22 13:20:39.3013|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:20:39.3053|Info|  Settimeout: id:1, (13) ms
2015-08-22 13:20:54.9431|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:20:55.4675|Info|      Executando timer: id:0, (13:20:55.4675)
2015-08-22 13:20:55.5355|Info|Iniciando os testes
2015-08-22 13:20:55.5536|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:20:55.5536|Info|  Settimeout: id:1, (13) ms
2015-08-22 13:22:01.8119|Info|  Settimeout: id:0, (500) ms
2015-08-22 13:22:02.3373|Info|      Executando timer: id:0, (13:22:02.3373)
2015-08-22 13:22:02.4364|Info|Iniciando os testes
2015-08-22 13:22:02.4554|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 13:22:02.4594|Info|  Settimeout: id:1, (500) ms
2015-08-22 13:22:02.5105|Info|      Encerrado timer: id:0, (13:22:02.5105)
2015-08-22 13:22:02.5105|Info|  Settimeout: id:2, (13) ms
2015-08-22 13:22:02.5255|Info|      Executando timer: id:2, (13:22:02.5255)
2015-08-22 13:22:02.5615|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:02.5845|Info|  Settimeout: id:3, (13) ms
2015-08-22 13:22:02.6365|Info|      Encerrado timer: id:2, (13:22:02.6365)
2015-08-22 13:22:02.6365|Info|      Executando timer: id:3, (13:22:02.6425)
2015-08-22 13:22:02.6455|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:02.7406|Info|  Settimeout: id:4, (32) ms
2015-08-22 13:22:02.7916|Info|  Settimeout: id:5, (96) ms
2015-08-22 13:22:02.8427|Info|      Encerrado timer: id:3, (13:22:02.8427)
2015-08-22 13:22:02.8427|Info|      Executando timer: id:4, (13:22:02.8446)
2015-08-22 13:22:02.8597|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:02.8597|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:02.8657|Info|      Encerrado timer: id:4, (13:22:02.8657)
2015-08-22 13:22:02.8897|Info|      Executando timer: id:5, (13:22:02.8897)
2015-08-22 13:22:02.8897|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:22:02.8897|Info|  Settimeout: id:6, (13) ms
2015-08-22 13:22:02.9438|Info|      Encerrado timer: id:5, (13:22:02.9438)
2015-08-22 13:22:02.9438|Info|      Executando timer: id:6, (13:22:02.9477)
2015-08-22 13:22:02.9438|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:02.9438|Info|  Settimeout: id:7, (32) ms
2015-08-22 13:22:03.0018|Info|  Settimeout: id:8, (64) ms
2015-08-22 13:22:03.0539|Info|  Settimeout: id:9, (128) ms
2015-08-22 13:22:03.1058|Info|      Encerrado timer: id:6, (13:22:03.1058)
2015-08-22 13:22:03.1058|Info|      Executando timer: id:1, (13:22:03.1068)
2015-08-22 13:22:03.1058|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 13:22:03.1058|Info|      Encerrado timer: id:1, (13:22:03.1108)
2015-08-22 13:22:03.1058|Info|      Executando timer: id:7, (13:22:03.1118)
2015-08-22 13:22:03.1058|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.1168|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.1168|Info|      Encerrado timer: id:7, (13:22:03.1178)
2015-08-22 13:22:03.1168|Info|      Executando timer: id:8, (13:22:03.1188)
2015-08-22 13:22:03.1168|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-22 13:22:03.1168|Info|  Settimeout: id:10, (32) ms
2015-08-22 13:22:03.1739|Info|      Encerrado timer: id:8, (13:22:03.1739)
2015-08-22 13:22:03.1739|Info|      Executando timer: id:10, (13:22:03.1749)
2015-08-22 13:22:03.1779|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.1779|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.1779|Info|      Encerrado timer: id:10, (13:22:03.1819)
2015-08-22 13:22:03.1779|Info|      Executando timer: id:9, (13:22:03.1849)
2015-08-22 13:22:03.1779|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-22 13:22:03.1779|Info|  Settimeout: id:11, (32) ms
2015-08-22 13:22:03.2409|Info|  Settimeout: id:12, (13) ms
2015-08-22 13:22:03.2920|Info|      Encerrado timer: id:9, (13:22:03.2920)
2015-08-22 13:22:03.2920|Info|      Executando timer: id:11, (13:22:03.2930)
2015-08-22 13:22:03.2920|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.2920|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.2920|Info|      Encerrado timer: id:11, (13:22:03.2980)
2015-08-22 13:22:03.2920|Info|      Executando timer: id:12, (13:22:03.2990)
2015-08-22 13:22:03.2920|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:03.3050|Info|  Settimeout: id:13, (32) ms
2015-08-22 13:22:03.3570|Info|  Settimeout: id:14, (64) ms
2015-08-22 13:22:03.4081|Info|      Encerrado timer: id:12, (13:22:03.4081)
2015-08-22 13:22:03.4081|Info|      Executando timer: id:13, (13:22:03.4090)
2015-08-22 13:22:03.4111|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.4111|Info|      Encerrado timer: id:13, (13:22:03.4120)
2015-08-22 13:22:03.4111|Info|      Executando timer: id:14, (13:22:03.4231)
2015-08-22 13:22:03.4111|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-22 13:22:03.4271|Info|  Settimeout: id:15, (32) ms
2015-08-22 13:22:03.4791|Info|  Settimeout: id:16, (13) ms
2015-08-22 13:22:03.5302|Info|      Encerrado timer: id:14, (13:22:03.5302)
2015-08-22 13:22:03.5302|Info|      Executando timer: id:15, (13:22:03.5321)
2015-08-22 13:22:03.5302|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.5362|Info|      Encerrado timer: id:15, (13:22:03.5362)
2015-08-22 13:22:03.5362|Info|      Executando timer: id:16, (13:22:03.5382)
2015-08-22 13:22:03.5362|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:03.5362|Info|  Settimeout: id:17, (32) ms
2015-08-22 13:22:03.5982|Info|  Settimeout: id:18, (64) ms
2015-08-22 13:22:03.6503|Info|      Encerrado timer: id:16, (13:22:03.6503)
2015-08-22 13:22:03.6503|Info|      Executando timer: id:17, (13:22:03.6522)
2015-08-22 13:22:03.6503|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.6503|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.6503|Info|      Encerrado timer: id:17, (13:22:03.6602)
2015-08-22 13:22:03.6653|Info|      Executando timer: id:18, (13:22:03.6653)
2015-08-22 13:22:03.6653|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:22:03.6653|Info|  Settimeout: id:19, (13) ms
2015-08-22 13:22:03.7253|Info|      Encerrado timer: id:18, (13:22:03.7253)
2015-08-22 13:22:03.7253|Info|      Executando timer: id:19, (13:22:03.7263)
2015-08-22 13:22:03.7253|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:03.7253|Info|  Settimeout: id:20, (32) ms
2015-08-22 13:22:03.7873|Info|  Settimeout: id:21, (32) ms
2015-08-22 13:22:03.8393|Info|  Settimeout: id:22, (32) ms
2015-08-22 13:22:03.8914|Info|  Settimeout: id:23, (64) ms
2015-08-22 13:22:03.9434|Info|      Encerrado timer: id:19, (13:22:03.9434)
2015-08-22 13:22:03.9434|Info|      Executando timer: id:20, (13:22:03.9454)
2015-08-22 13:22:03.9434|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.9434|Info|      Encerrado timer: id:20, (13:22:03.9504)
2015-08-22 13:22:03.9434|Info|      Executando timer: id:21, (13:22:03.9514)
2015-08-22 13:22:03.9434|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.9434|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.9434|Info|      Encerrado timer: id:21, (13:22:03.9564)
2015-08-22 13:22:03.9434|Info|      Executando timer: id:22, (13:22:03.9574)
2015-08-22 13:22:03.9604|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:03.9604|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:03.9604|Info|      Encerrado timer: id:22, (13:22:03.9634)
2015-08-22 13:22:03.9604|Info|      Executando timer: id:23, (13:22:03.9644)
2015-08-22 13:22:03.9604|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-22 13:22:03.9754|Info|  Settimeout: id:24, (32) ms
2015-08-22 13:22:04.0265|Info|  Settimeout: id:25, (13) ms
2015-08-22 13:22:04.0776|Info|      Encerrado timer: id:23, (13:22:04.0776)
2015-08-22 13:22:04.0776|Info|      Executando timer: id:24, (13:22:04.0776)
2015-08-22 13:22:04.0776|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.0776|Info|      Encerrado timer: id:24, (13:22:04.0795)
2015-08-22 13:22:04.0776|Info|      Executando timer: id:25, (13:22:04.0805)
2015-08-22 13:22:04.0776|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:04.0776|Info|  Settimeout: id:26, (32) ms
2015-08-22 13:22:04.1336|Info|  Settimeout: id:27, (32) ms
2015-08-22 13:22:04.1876|Info|  Settimeout: id:28, (64) ms
2015-08-22 13:22:04.2387|Info|      Encerrado timer: id:25, (13:22:04.2387)
2015-08-22 13:22:04.2397|Info|      Executando timer: id:26, (13:22:04.2397)
2015-08-22 13:22:04.2397|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.2397|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:04.2397|Info|      Encerrado timer: id:26, (13:22:04.2437)
2015-08-22 13:22:04.2397|Info|      Executando timer: id:27, (13:22:04.2447)
2015-08-22 13:22:04.2397|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.2397|Info|      Encerrado timer: id:27, (13:22:04.2476)
2015-08-22 13:22:04.2397|Info|      Executando timer: id:28, (13:22:04.2537)
2015-08-22 13:22:04.2556|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-22 13:22:04.2556|Info|  Settimeout: id:29, (13) ms
2015-08-22 13:22:04.3097|Info|      Encerrado timer: id:28, (13:22:04.3097)
2015-08-22 13:22:04.3097|Info|      Executando timer: id:29, (13:22:04.3107)
2015-08-22 13:22:04.3097|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:04.3097|Info|  Settimeout: id:30, (128) ms
2015-08-22 13:22:04.3667|Info|  Settimeout: id:31, (64) ms
2015-08-22 13:22:04.4198|Info|  Settimeout: id:32, (96) ms
2015-08-22 13:22:04.4738|Info|  Settimeout: id:33, (128) ms
2015-08-22 13:22:04.5249|Info|  Settimeout: id:34, (64) ms
2015-08-22 13:22:04.6019|Info|  Settimeout: id:35, (128) ms
2015-08-22 13:22:04.6530|Info|  Settimeout: id:36, (64) ms
2015-08-22 13:22:04.7050|Info|  Settimeout: id:37, (1) ms
2015-08-22 13:22:04.7570|Info|      Encerrado timer: id:29, (13:22:04.7570)
2015-08-22 13:22:04.7570|Info|      Executando timer: id:32, (13:22:04.7580)
2015-08-22 13:22:04.7570|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.7570|Info|  Settimeout: id:38, (40) ms
2015-08-22 13:22:04.8131|Info|      Encerrado timer: id:32, (13:22:04.8131)
2015-08-22 13:22:04.8131|Info|      Executando timer: id:37, (13:22:04.8140)
2015-08-22 13:22:04.8131|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-22 13:22:04.8131|Info|  Settimeout: id:39, (13) ms
2015-08-22 13:22:04.8671|Info|      Encerrado timer: id:37, (13:22:04.8671)
2015-08-22 13:22:04.8671|Info|      Executando timer: id:36, (13:22:04.8681)
2015-08-22 13:22:04.8671|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.8671|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:04.8671|Info|      Encerrado timer: id:36, (13:22:04.8701)
2015-08-22 13:22:04.8671|Info|      Executando timer: id:38, (13:22:04.8711)
2015-08-22 13:22:04.8671|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 13:22:04.8671|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:04.8671|Info|      Encerrado timer: id:38, (13:22:04.8731)
2015-08-22 13:22:04.8671|Info|      Executando timer: id:39, (13:22:04.8741)
2015-08-22 13:22:04.8671|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:04.8671|Info|  Settimeout: id:40, (64) ms
2015-08-22 13:22:04.9272|Info|  Settimeout: id:41, (32) ms
2015-08-22 13:22:04.9802|Info|  Settimeout: id:42, (128) ms
2015-08-22 13:22:05.0322|Info|      Encerrado timer: id:39, (13:22:05.0322)
2015-08-22 13:22:05.0322|Info|      Executando timer: id:40, (13:22:05.0342)
2015-08-22 13:22:05.0372|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 13:22:05.0372|Info|!timeoutId && !maxTimeoutId true
2015-08-22 13:22:05.0372|Info|      Encerrado timer: id:40, (13:22:05.0442)
2015-08-22 13:22:05.1113|Info|      Executando timer: id:42, (13:22:05.1113)
2015-08-22 13:22:05.1113|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 13:22:05.1143|Info|  Settimeout: id:43, (13) ms
2015-08-22 13:22:05.1653|Info|      Encerrado timer: id:42, (13:22:05.1653)
2015-08-22 13:22:05.1653|Info|      Executando timer: id:43, (13:22:05.1673)
2015-08-22 13:22:05.1653|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.1653|Info|  Settimeout: id:44, (32) ms
2015-08-22 13:22:05.2274|Info|  Settimeout: id:45, (11) ms
2015-08-22 13:22:05.2814|Info|  Settimeout: id:46, (64) ms
2015-08-22 13:22:05.3334|Info|      Encerrado timer: id:43, (13:22:05.3334)
2015-08-22 13:22:05.3334|Info|      Executando timer: id:46, (13:22:05.3484)
2015-08-22 13:22:05.3515|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-22 13:22:05.3515|Info|  Settimeout: id:47, (13) ms
2015-08-22 13:22:05.4065|Info|      Encerrado timer: id:46, (13:22:05.4065)
2015-08-22 13:22:05.4065|Info|      Executando timer: id:47, (13:22:05.4085)
2015-08-22 13:22:05.4065|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.4275|Info|  Settimeout: id:48, (1) ms
2015-08-22 13:22:05.4805|Info|  Settimeout: id:49, (32) ms
2015-08-22 13:22:05.5326|Info|      Encerrado timer: id:47, (13:22:05.5326)
2015-08-22 13:22:05.5326|Info|      Executando timer: id:48, (13:22:05.5336)
2015-08-22 13:22:05.5326|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:22:05.5366|Info|      Encerrado timer: id:48, (13:22:05.5366)
2015-08-22 13:22:05.5366|Info|      Executando timer: id:49, (13:22:05.5376)
2015-08-22 13:22:05.5366|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:22:05.5366|Info|  Settimeout: id:50, (13) ms
2015-08-22 13:22:05.5926|Info|      Encerrado timer: id:49, (13:22:05.5926)
2015-08-22 13:22:05.5926|Info|      Executando timer: id:50, (13:22:05.5936)
2015-08-22 13:22:05.5926|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.5926|Info|  Settimeout: id:51, (1) ms
2015-08-22 13:22:05.6487|Info|  Settimeout: id:52, (32) ms
2015-08-22 13:22:05.6997|Info|      Encerrado timer: id:50, (13:22:05.6997)
2015-08-22 13:22:05.6997|Info|      Executando timer: id:51, (13:22:05.7037)
2015-08-22 13:22:05.6997|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:22:05.6997|Info|      Encerrado timer: id:51, (13:22:05.7077)
2015-08-22 13:22:05.7087|Info|      Executando timer: id:52, (13:22:05.7087)
2015-08-22 13:22:05.7087|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 13:22:05.7087|Info|  Settimeout: id:53, (13) ms
2015-08-22 13:22:05.7647|Info|      Encerrado timer: id:52, (13:22:05.7647)
2015-08-22 13:22:05.7647|Info|      Executando timer: id:53, (13:22:05.7657)
2015-08-22 13:22:05.7647|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.7747|Info|  Settimeout: id:54, (1) ms
2015-08-22 13:22:05.8278|Info|  Settimeout: id:55, (32) ms
2015-08-22 13:22:05.8789|Info|      Encerrado timer: id:53, (13:22:05.8789)
2015-08-22 13:22:05.8808|Info|      Executando timer: id:55, (13:22:05.8808)
2015-08-22 13:22:05.8808|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 13:22:05.8808|Info|  Settimeout: id:56, (13) ms
2015-08-22 13:22:05.9388|Info|      Encerrado timer: id:55, (13:22:05.9388)
2015-08-22 13:22:05.9388|Info|      Executando timer: id:56, (13:22:05.9388)
2015-08-22 13:22:05.9388|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 13:22:05.9388|Info|  Settimeout: id:57, (32) ms
2015-08-22 13:22:05.9929|Info|  Settimeout: id:58, (1) ms
2015-08-22 13:22:06.0439|Info|  Settimeout: id:59, (64) ms
2015-08-22 13:22:06.0949|Info|      Encerrado timer: id:56, (13:22:06.0949)
2015-08-22 13:22:06.0949|Info|      Executando timer: id:57, (13:22:06.0949)
2015-08-22 13:22:06.0949|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 13:22:06.0949|Info|      Encerrado timer: id:57, (13:22:06.0970)
2015-08-22 13:22:06.0949|Info|      Executando timer: id:58, (13:22:06.0970)
2015-08-22 13:22:06.0990|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 13:22:06.0990|Info|      Encerrado timer: id:58, (13:22:06.1020)
2015-08-22 15:15:44.2208|Info|Iniciando os testes
2015-08-22 15:15:46.4804|Info|Encerrando os testes
2015-08-22 15:15:46.4804|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-22 15:15:46.4804|Info|2 segundos para avaliar o individuo global.js
2015-08-22 15:15:51.4689|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:15:51.9953|Info|      Executando timer: id:0, (15:15:51.9953)
2015-08-22 15:15:52.1184|Info|Iniciando os testes
2015-08-22 15:15:52.1374|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 15:15:52.1374|Info|  Settimeout: id:1, (500) ms
2015-08-22 15:15:52.1934|Info|      Encerrado timer: id:0, (15:15:52.1934)
2015-08-22 15:15:52.1934|Info|  Settimeout: id:2, (13) ms
2015-08-22 15:15:52.2084|Info|      Executando timer: id:2, (15:15:52.2084)
2015-08-22 15:15:52.2445|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.2815|Info|  Settimeout: id:3, (13) ms
2015-08-22 15:15:52.3336|Info|      Encerrado timer: id:2, (15:15:52.3336)
2015-08-22 15:15:52.3336|Info|      Executando timer: id:3, (15:15:52.3365)
2015-08-22 15:15:52.3336|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.4196|Info|  Settimeout: id:4, (32) ms
2015-08-22 15:15:52.4707|Info|  Settimeout: id:5, (96) ms
2015-08-22 15:15:52.5217|Info|      Encerrado timer: id:3, (15:15:52.5217)
2015-08-22 15:15:52.5217|Info|      Executando timer: id:4, (15:15:52.5217)
2015-08-22 15:15:52.5217|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.5217|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.5217|Info|      Encerrado timer: id:4, (15:15:52.5286)
2015-08-22 15:15:52.5687|Info|      Executando timer: id:5, (15:15:52.5687)
2015-08-22 15:15:52.5687|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:52.5687|Info|  Settimeout: id:6, (13) ms
2015-08-22 15:15:52.6208|Info|      Encerrado timer: id:5, (15:15:52.6208)
2015-08-22 15:15:52.6208|Info|      Executando timer: id:6, (15:15:52.6217)
2015-08-22 15:15:52.6208|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.6208|Info|  Settimeout: id:7, (32) ms
2015-08-22 15:15:52.6788|Info|  Settimeout: id:8, (64) ms
2015-08-22 15:15:52.7308|Info|  Settimeout: id:9, (128) ms
2015-08-22 15:15:52.7829|Info|      Encerrado timer: id:6, (15:15:52.7829)
2015-08-22 15:15:52.7829|Info|      Executando timer: id:1, (15:15:52.7849)
2015-08-22 15:15:52.7869|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 15:15:52.7869|Info|      Encerrado timer: id:1, (15:15:52.7898)
2015-08-22 15:15:52.7869|Info|      Executando timer: id:7, (15:15:52.7918)
2015-08-22 15:15:52.7869|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.7869|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.7869|Info|      Encerrado timer: id:7, (15:15:52.7998)
2015-08-22 15:15:52.7869|Info|      Executando timer: id:8, (15:15:52.8008)
2015-08-22 15:15:52.8038|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-22 15:15:52.8038|Info|  Settimeout: id:10, (32) ms
2015-08-22 15:15:52.8599|Info|      Encerrado timer: id:8, (15:15:52.8599)
2015-08-22 15:15:52.8599|Info|      Executando timer: id:10, (15:15:52.8619)
2015-08-22 15:15:52.8649|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.8649|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.8649|Info|      Encerrado timer: id:10, (15:15:52.8709)
2015-08-22 15:15:52.8649|Info|      Executando timer: id:9, (15:15:52.8719)
2015-08-22 15:15:52.8649|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-22 15:15:52.8809|Info|  Settimeout: id:11, (32) ms
2015-08-22 15:15:52.9330|Info|  Settimeout: id:12, (13) ms
2015-08-22 15:15:52.9840|Info|      Encerrado timer: id:9, (15:15:52.9840)
2015-08-22 15:15:52.9840|Info|      Executando timer: id:11, (15:15:52.9840)
2015-08-22 15:15:52.9840|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:52.9840|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:52.9840|Info|      Encerrado timer: id:11, (15:15:52.9870)
2015-08-22 15:15:52.9840|Info|      Executando timer: id:12, (15:15:52.9880)
2015-08-22 15:15:52.9840|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:52.9900|Info|  Settimeout: id:13, (32) ms
2015-08-22 15:15:53.0410|Info|  Settimeout: id:14, (64) ms
2015-08-22 15:15:53.0921|Info|      Encerrado timer: id:12, (15:15:53.0921)
2015-08-22 15:15:53.0921|Info|      Executando timer: id:13, (15:15:53.0921)
2015-08-22 15:15:53.0921|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.0921|Info|      Encerrado timer: id:13, (15:15:53.0941)
2015-08-22 15:15:53.1071|Info|      Executando timer: id:14, (15:15:53.1071)
2015-08-22 15:15:53.1071|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-22 15:15:53.1071|Info|  Settimeout: id:15, (32) ms
2015-08-22 15:15:53.1601|Info|  Settimeout: id:16, (13) ms
2015-08-22 15:15:53.2111|Info|      Encerrado timer: id:14, (15:15:53.2111)
2015-08-22 15:15:53.2111|Info|      Executando timer: id:15, (15:15:53.2111)
2015-08-22 15:15:53.2111|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.2111|Info|      Encerrado timer: id:15, (15:15:53.2131)
2015-08-22 15:15:53.2111|Info|      Executando timer: id:16, (15:15:53.2141)
2015-08-22 15:15:53.2111|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.2111|Info|  Settimeout: id:17, (32) ms
2015-08-22 15:15:53.2672|Info|  Settimeout: id:18, (64) ms
2015-08-22 15:15:53.3183|Info|      Encerrado timer: id:16, (15:15:53.3183)
2015-08-22 15:15:53.3183|Info|      Executando timer: id:17, (15:15:53.3192)
2015-08-22 15:15:53.3183|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.3183|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.3183|Info|      Encerrado timer: id:17, (15:15:53.3222)
2015-08-22 15:15:53.3333|Info|      Executando timer: id:18, (15:15:53.3333)
2015-08-22 15:15:53.3333|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:53.3333|Info|  Settimeout: id:19, (13) ms
2015-08-22 15:15:53.3863|Info|      Encerrado timer: id:18, (15:15:53.3863)
2015-08-22 15:15:53.3863|Info|      Executando timer: id:19, (15:15:53.3863)
2015-08-22 15:15:53.3863|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.3863|Info|  Settimeout: id:20, (32) ms
2015-08-22 15:15:53.4413|Info|  Settimeout: id:21, (32) ms
2015-08-22 15:15:53.4933|Info|  Settimeout: id:22, (32) ms
2015-08-22 15:15:53.5464|Info|  Settimeout: id:23, (64) ms
2015-08-22 15:15:53.5984|Info|      Encerrado timer: id:19, (15:15:53.5984)
2015-08-22 15:15:53.5994|Info|      Executando timer: id:20, (15:15:53.5994)
2015-08-22 15:15:53.5994|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.5994|Info|      Encerrado timer: id:20, (15:15:53.6124)
2015-08-22 15:15:53.5994|Info|      Executando timer: id:21, (15:15:53.6134)
2015-08-22 15:15:53.6154|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.6154|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.6154|Info|      Encerrado timer: id:21, (15:15:53.6174)
2015-08-22 15:15:53.6154|Info|      Executando timer: id:22, (15:15:53.6184)
2015-08-22 15:15:53.6154|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.6154|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.6154|Info|      Encerrado timer: id:22, (15:15:53.6214)
2015-08-22 15:15:53.6154|Info|      Executando timer: id:23, (15:15:53.6224)
2015-08-22 15:15:53.6154|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-22 15:15:53.6304|Info|  Settimeout: id:24, (32) ms
2015-08-22 15:15:53.6815|Info|  Settimeout: id:25, (13) ms
2015-08-22 15:15:53.7326|Info|      Encerrado timer: id:23, (15:15:53.7326)
2015-08-22 15:15:53.7326|Info|      Executando timer: id:24, (15:15:53.7345)
2015-08-22 15:15:53.7326|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.7326|Info|      Encerrado timer: id:24, (15:15:53.7385)
2015-08-22 15:15:53.7405|Info|      Executando timer: id:25, (15:15:53.7405)
2015-08-22 15:15:53.7405|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.7405|Info|  Settimeout: id:26, (32) ms
2015-08-22 15:15:53.8016|Info|  Settimeout: id:27, (32) ms
2015-08-22 15:15:53.8546|Info|  Settimeout: id:28, (64) ms
2015-08-22 15:15:53.9067|Info|      Encerrado timer: id:25, (15:15:53.9067)
2015-08-22 15:15:53.9067|Info|      Executando timer: id:26, (15:15:53.9076)
2015-08-22 15:15:53.9116|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.9116|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:53.9116|Info|      Encerrado timer: id:26, (15:15:53.9176)
2015-08-22 15:15:53.9116|Info|      Executando timer: id:27, (15:15:53.9196)
2015-08-22 15:15:53.9116|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:53.9116|Info|      Encerrado timer: id:27, (15:15:53.9246)
2015-08-22 15:15:53.9266|Info|      Executando timer: id:28, (15:15:53.9266)
2015-08-22 15:15:53.9266|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-22 15:15:53.9266|Info|  Settimeout: id:29, (13) ms
2015-08-22 15:15:53.9867|Info|      Encerrado timer: id:28, (15:15:53.9867)
2015-08-22 15:15:53.9867|Info|      Executando timer: id:29, (15:15:53.9877)
2015-08-22 15:15:53.9897|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:53.9897|Info|  Settimeout: id:30, (128) ms
2015-08-22 15:15:54.0427|Info|  Settimeout: id:31, (64) ms
2015-08-22 15:15:54.0938|Info|  Settimeout: id:32, (96) ms
2015-08-22 15:15:54.1478|Info|  Settimeout: id:33, (128) ms
2015-08-22 15:15:54.1999|Info|  Settimeout: id:34, (64) ms
2015-08-22 15:15:54.2779|Info|  Settimeout: id:35, (128) ms
2015-08-22 15:15:54.3290|Info|  Settimeout: id:36, (64) ms
2015-08-22 15:15:54.3820|Info|  Settimeout: id:37, (1) ms
2015-08-22 15:15:54.4340|Info|      Encerrado timer: id:29, (15:15:54.4340)
2015-08-22 15:15:54.4340|Info|      Executando timer: id:32, (15:15:54.4360)
2015-08-22 15:15:54.4340|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:54.4440|Info|  Settimeout: id:38, (36) ms
2015-08-22 15:15:54.4961|Info|      Encerrado timer: id:32, (15:15:54.4961)
2015-08-22 15:15:54.4961|Info|      Executando timer: id:37, (15:15:54.4980)
2015-08-22 15:15:54.4961|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-22 15:15:54.5051|Info|  Settimeout: id:39, (13) ms
2015-08-22 15:15:54.5571|Info|      Encerrado timer: id:37, (15:15:54.5571)
2015-08-22 15:15:54.5571|Info|      Executando timer: id:36, (15:15:54.5571)
2015-08-22 15:15:54.5571|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:54.5571|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:54.5571|Info|      Encerrado timer: id:36, (15:15:54.5601)
2015-08-22 15:15:54.5571|Info|      Executando timer: id:38, (15:15:54.5611)
2015-08-22 15:15:54.5571|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:15:54.5571|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:54.5571|Info|      Encerrado timer: id:38, (15:15:54.5631)
2015-08-22 15:15:54.5571|Info|      Executando timer: id:39, (15:15:54.5641)
2015-08-22 15:15:54.5571|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:54.5571|Info|  Settimeout: id:40, (64) ms
2015-08-22 15:15:54.6162|Info|  Settimeout: id:41, (32) ms
2015-08-22 15:15:54.6682|Info|  Settimeout: id:42, (128) ms
2015-08-22 15:15:54.7203|Info|      Encerrado timer: id:39, (15:15:54.7203)
2015-08-22 15:15:54.7203|Info|      Executando timer: id:40, (15:15:54.7222)
2015-08-22 15:15:54.7252|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:54.7252|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:54.7252|Info|      Encerrado timer: id:40, (15:15:54.7322)
2015-08-22 15:15:54.7993|Info|      Executando timer: id:42, (15:15:54.7993)
2015-08-22 15:15:54.8133|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:54.8133|Info|  Settimeout: id:43, (13) ms
2015-08-22 15:15:54.8664|Info|      Encerrado timer: id:42, (15:15:54.8664)
2015-08-22 15:15:54.8664|Info|      Executando timer: id:43, (15:15:54.8673)
2015-08-22 15:15:54.8664|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:54.8664|Info|  Settimeout: id:44, (32) ms
2015-08-22 15:15:54.9224|Info|  Settimeout: id:45, (12) ms
2015-08-22 15:15:54.9744|Info|  Settimeout: id:46, (64) ms
2015-08-22 15:15:55.0254|Info|      Encerrado timer: id:43, (15:15:55.0254)
2015-08-22 15:15:55.0404|Info|      Executando timer: id:46, (15:15:55.0404)
2015-08-22 15:15:55.0404|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-22 15:15:55.0404|Info|  Settimeout: id:47, (13) ms
2015-08-22 15:15:55.0995|Info|      Encerrado timer: id:46, (15:15:55.0995)
2015-08-22 15:15:55.0995|Info|      Executando timer: id:47, (15:15:55.1005)
2015-08-22 15:15:55.0995|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.1155|Info|  Settimeout: id:48, (1) ms
2015-08-22 15:15:55.1675|Info|  Settimeout: id:49, (32) ms
2015-08-22 15:15:55.2186|Info|      Encerrado timer: id:47, (15:15:55.2186)
2015-08-22 15:15:55.2186|Info|      Executando timer: id:48, (15:15:55.2186)
2015-08-22 15:15:55.2186|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.2186|Info|      Encerrado timer: id:48, (15:15:55.2206)
2015-08-22 15:15:55.2186|Info|      Executando timer: id:49, (15:15:55.2206)
2015-08-22 15:15:55.2186|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:55.2186|Info|  Settimeout: id:50, (13) ms
2015-08-22 15:15:55.2736|Info|      Encerrado timer: id:49, (15:15:55.2736)
2015-08-22 15:15:55.2736|Info|      Executando timer: id:50, (15:15:55.2736)
2015-08-22 15:15:55.2736|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.2736|Info|  Settimeout: id:51, (1) ms
2015-08-22 15:15:55.3267|Info|  Settimeout: id:52, (32) ms
2015-08-22 15:15:55.3777|Info|      Encerrado timer: id:50, (15:15:55.3777)
2015-08-22 15:15:55.3777|Info|      Executando timer: id:51, (15:15:55.3777)
2015-08-22 15:15:55.3777|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.3777|Info|      Encerrado timer: id:51, (15:15:55.3797)
2015-08-22 15:15:55.3777|Info|      Executando timer: id:52, (15:15:55.3797)
2015-08-22 15:15:55.3807|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 15:15:55.3807|Info|  Settimeout: id:53, (13) ms
2015-08-22 15:15:55.4327|Info|      Encerrado timer: id:52, (15:15:55.4327)
2015-08-22 15:15:55.4327|Info|      Executando timer: id:53, (15:15:55.4327)
2015-08-22 15:15:55.4327|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.4327|Info|  Settimeout: id:54, (1) ms
2015-08-22 15:15:55.4858|Info|  Settimeout: id:55, (32) ms
2015-08-22 15:15:55.5368|Info|      Encerrado timer: id:53, (15:15:55.5368)
2015-08-22 15:15:55.5368|Info|      Executando timer: id:55, (15:15:55.5388)
2015-08-22 15:15:55.5368|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:55.5368|Info|  Settimeout: id:56, (13) ms
2015-08-22 15:15:55.5989|Info|      Encerrado timer: id:55, (15:15:55.5989)
2015-08-22 15:15:55.5989|Info|      Executando timer: id:56, (15:15:55.5998)
2015-08-22 15:15:55.5989|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.5989|Info|  Settimeout: id:57, (32) ms
2015-08-22 15:15:55.6549|Info|  Settimeout: id:58, (1) ms
2015-08-22 15:15:55.7120|Info|  Settimeout: id:59, (64) ms
2015-08-22 15:15:55.7630|Info|      Encerrado timer: id:56, (15:15:55.7630)
2015-08-22 15:15:55.7630|Info|      Executando timer: id:57, (15:15:55.7630)
2015-08-22 15:15:55.7630|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.7630|Info|      Encerrado timer: id:57, (15:15:55.7649)
2015-08-22 15:15:55.7630|Info|      Executando timer: id:58, (15:15:55.7660)
2015-08-22 15:15:55.7630|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:15:55.7630|Info|      Encerrado timer: id:58, (15:15:55.7699)
2015-08-22 15:15:55.7780|Info|      Executando timer: id:59, (15:15:55.7780)
2015-08-22 15:15:55.7780|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:55.7780|Info|  Settimeout: id:60, (13) ms
2015-08-22 15:15:55.8310|Info|      Encerrado timer: id:59, (15:15:55.8310)
2015-08-22 15:15:55.8330|Info|      Executando timer: id:60, (15:15:55.8330)
2015-08-22 15:15:55.8330|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:55.8330|Info|  Settimeout: id:61, (32) ms
2015-08-22 15:15:55.8931|Info|  Settimeout: id:62, (64) ms
2015-08-22 15:15:55.9451|Info|      Encerrado timer: id:60, (15:15:55.9451)
2015-08-22 15:15:55.9451|Info|      Executando timer: id:61, (15:15:55.9471)
2015-08-22 15:15:55.9451|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:15:55.9451|Info|      Encerrado timer: id:61, (15:15:55.9521)
2015-08-22 15:15:55.9601|Info|      Executando timer: id:62, (15:15:55.9601)
2015-08-22 15:15:55.9601|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-22 15:15:55.9601|Info|  Settimeout: id:63, (13) ms
2015-08-22 15:15:56.0162|Info|      Encerrado timer: id:62, (15:15:56.0162)
2015-08-22 15:15:56.0162|Info|      Executando timer: id:63, (15:15:56.0162)
2015-08-22 15:15:56.0162|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:56.0162|Info|  Settimeout: id:64, (32) ms
2015-08-22 15:15:56.0702|Info|  Settimeout: id:65, (64) ms
2015-08-22 15:15:56.1213|Info|      Encerrado timer: id:63, (15:15:56.1213)
2015-08-22 15:15:56.1362|Info|      Executando timer: id:65, (15:15:56.1362)
2015-08-22 15:15:56.1362|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:15:56.1362|Info|  Settimeout: id:66, (13) ms
2015-08-22 15:15:56.1973|Info|      Encerrado timer: id:65, (15:15:56.1973)
2015-08-22 15:15:56.1973|Info|      Executando timer: id:66, (15:15:56.1983)
2015-08-22 15:15:56.1973|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:57.8034|Info|  Settimeout: id:67, (13) ms
2015-08-22 15:15:57.8535|Info|      Encerrado timer: id:66, (15:15:57.8535)
2015-08-22 15:15:57.8535|Info|      Executando timer: id:67, (15:15:57.8535)
2015-08-22 15:15:57.8535|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-22 15:15:57.9465|Info|----------------------------------------
2015-08-22 15:15:57.9465|Info|lodash.isNil
2015-08-22 15:15:57.9465|Info|----------------------------------------
2015-08-22 15:15:57.9465|Info| FAIL - should work with nulls from another realm
2015-08-22 15:15:57.9465|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-08-22 15:15:58.0906|Info|  Settimeout: id:68, (32) ms
2015-08-22 15:15:58.1407|Info|      Encerrado timer: id:67, (15:15:58.1407)
2015-08-22 15:15:58.1407|Info|      Executando timer: id:68, (15:15:58.1407)
2015-08-22 15:15:58.1407|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-08-22 15:15:58.1407|Info|  Settimeout: id:69, (13) ms
2015-08-22 15:15:58.1937|Info|      Encerrado timer: id:68, (15:15:58.1937)
2015-08-22 15:15:58.1937|Info|      Executando timer: id:69, (15:15:58.1937)
2015-08-22 15:15:58.1937|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.3568|Info|  Settimeout: id:70, (32) ms
2015-08-22 15:15:58.4079|Info|  Settimeout: id:71, (64) ms
2015-08-22 15:15:58.4589|Info|      Encerrado timer: id:69, (15:15:58.4589)
2015-08-22 15:15:58.4739|Info|      Executando timer: id:71, (15:15:58.4739)
2015-08-22 15:15:58.4739|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:15:58.4739|Info|  Settimeout: id:72, (13) ms
2015-08-22 15:15:58.5349|Info|      Encerrado timer: id:71, (15:15:58.5349)
2015-08-22 15:15:58.5349|Info|      Executando timer: id:72, (15:15:58.5349)
2015-08-22 15:15:58.5349|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.5379|Info|  Settimeout: id:73, (32) ms
2015-08-22 15:15:58.5879|Info|  Settimeout: id:74, (64) ms
2015-08-22 15:15:58.6390|Info|      Encerrado timer: id:72, (15:15:58.6390)
2015-08-22 15:15:58.6390|Info|      Executando timer: id:73, (15:15:58.6390)
2015-08-22 15:15:58.6390|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:58.6390|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:58.6390|Info|      Encerrado timer: id:73, (15:15:58.6420)
2015-08-22 15:15:58.6540|Info|      Executando timer: id:74, (15:15:58.6540)
2015-08-22 15:15:58.6540|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:15:58.6540|Info|  Settimeout: id:75, (18) ms
2015-08-22 15:15:58.7070|Info|  Settimeout: id:76, (13) ms
2015-08-22 15:15:58.7581|Info|      Encerrado timer: id:74, (15:15:58.7581)
2015-08-22 15:15:58.7581|Info|      Executando timer: id:76, (15:15:58.7581)
2015-08-22 15:15:58.7581|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.7581|Info|  Settimeout: id:77, (32) ms
2015-08-22 15:15:58.8191|Info|  Settimeout: id:78, (64) ms
2015-08-22 15:15:58.8702|Info|      Encerrado timer: id:76, (15:15:58.8702)
2015-08-22 15:15:58.8852|Info|      Executando timer: id:78, (15:15:58.8852)
2015-08-22 15:15:58.8852|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:15:58.8852|Info|  Settimeout: id:79, (13) ms
2015-08-22 15:15:58.9432|Info|      Encerrado timer: id:78, (15:15:58.9432)
2015-08-22 15:15:58.9432|Info|      Executando timer: id:79, (15:15:58.9442)
2015-08-22 15:15:58.9432|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:58.9432|Info|  Settimeout: id:80, (64) ms
2015-08-22 15:15:59.0063|Info|      Encerrado timer: id:79, (15:15:59.0063)
2015-08-22 15:15:59.0063|Info|      Executando timer: id:80, (15:15:59.0203)
2015-08-22 15:15:59.0223|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-22 15:15:59.0223|Info|  Settimeout: id:81, (13) ms
2015-08-22 15:15:59.0764|Info|      Encerrado timer: id:80, (15:15:59.0764)
2015-08-22 15:15:59.0764|Info|      Executando timer: id:81, (15:15:59.0773)
2015-08-22 15:15:59.0764|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:59.0764|Info|  Settimeout: id:82, (32) ms
2015-08-22 15:15:59.1333|Info|  Settimeout: id:83, (32) ms
2015-08-22 15:15:59.1854|Info|  Settimeout: id:84, (32) ms
2015-08-22 15:15:59.2365|Info|  Settimeout: id:85, (32) ms
2015-08-22 15:15:59.2884|Info|  Settimeout: id:86, (32) ms
2015-08-22 15:15:59.3415|Info|  Settimeout: id:87, (31) ms
2015-08-22 15:15:59.3945|Info|  Settimeout: id:88, (32) ms
2015-08-22 15:15:59.4456|Info|  Settimeout: id:89, (1) ms
2015-08-22 15:15:59.4966|Info|      Encerrado timer: id:81, (15:15:59.4966)
2015-08-22 15:15:59.4966|Info|      Executando timer: id:88, (15:15:59.4966)
2015-08-22 15:15:59.4966|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:59.4966|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:59.4966|Info|      Encerrado timer: id:88, (15:15:59.4996)
2015-08-22 15:15:59.4966|Info|      Executando timer: id:89, (15:15:59.5006)
2015-08-22 15:15:59.4966|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 15:15:59.4966|Info|  Settimeout: id:90, (13) ms
2015-08-22 15:15:59.5527|Info|      Encerrado timer: id:89, (15:15:59.5527)
2015-08-22 15:15:59.5527|Info|      Executando timer: id:90, (15:15:59.5536)
2015-08-22 15:15:59.5527|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:15:59.5527|Info|  Settimeout: id:91, (32) ms
2015-08-22 15:15:59.6107|Info|  Settimeout: id:92, (32) ms
2015-08-22 15:15:59.6628|Info|  Settimeout: id:93, (32) ms
2015-08-22 15:15:59.7148|Info|  Settimeout: id:94, (32) ms
2015-08-22 15:15:59.7668|Info|  Settimeout: id:95, (32) ms
2015-08-22 15:15:59.8188|Info|  Settimeout: id:96, (32) ms
2015-08-22 15:15:59.8709|Info|  Settimeout: id:97, (32) ms
2015-08-22 15:15:59.9229|Info|  Settimeout: id:98, (1) ms
2015-08-22 15:15:59.9760|Info|      Encerrado timer: id:90, (15:15:59.9760)
2015-08-22 15:15:59.9760|Info|      Executando timer: id:97, (15:15:59.9770)
2015-08-22 15:15:59.9760|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:15:59.9760|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:15:59.9760|Info|      Encerrado timer: id:97, (15:15:59.9819)
2015-08-22 15:15:59.9760|Info|      Executando timer: id:98, (15:15:59.9819)
2015-08-22 15:15:59.9760|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-22 15:15:59.9760|Info|  Settimeout: id:99, (13) ms
2015-08-22 15:16:00.0380|Info|      Encerrado timer: id:98, (15:16:00.0380)
2015-08-22 15:16:00.0380|Info|      Executando timer: id:99, (15:16:00.0390)
2015-08-22 15:16:00.0380|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:00.0380|Info|  Settimeout: id:100, (32) ms
2015-08-22 15:16:00.0951|Info|  Settimeout: id:101, (128) ms
2015-08-22 15:16:00.1471|Info|      Encerrado timer: id:99, (15:16:00.1471)
2015-08-22 15:16:00.1471|Info|      Executando timer: id:100, (15:16:00.1491)
2015-08-22 15:16:00.1471|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.1471|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:00.1471|Info|      Encerrado timer: id:100, (15:16:00.1541)
2015-08-22 15:16:00.2252|Info|      Executando timer: id:101, (15:16:00.2252)
2015-08-22 15:16:00.2252|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:16:00.2252|Info|  Settimeout: id:102, (13) ms
2015-08-22 15:16:00.2831|Info|      Encerrado timer: id:101, (15:16:00.2831)
2015-08-22 15:16:00.2831|Info|      Executando timer: id:102, (15:16:00.2842)
2015-08-22 15:16:00.2831|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:00.2872|Info|  Settimeout: id:103, (32) ms
2015-08-22 15:16:00.3402|Info|  Settimeout: id:104, (64) ms
2015-08-22 15:16:00.3913|Info|  Settimeout: id:105, (64) ms
2015-08-22 15:16:00.4423|Info|  Settimeout: id:106, (256) ms
2015-08-22 15:16:00.4944|Info|      Encerrado timer: id:102, (15:16:00.4944)
2015-08-22 15:16:00.4944|Info|      Executando timer: id:103, (15:16:00.4963)
2015-08-22 15:16:00.4944|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.4944|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:00.4944|Info|      Encerrado timer: id:103, (15:16:00.5033)
2015-08-22 15:16:00.5053|Info|      Executando timer: id:104, (15:16:00.5053)
2015-08-22 15:16:00.5053|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.5053|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:00.5053|Info|      Encerrado timer: id:104, (15:16:00.5143)
2015-08-22 15:16:00.5053|Info|      Executando timer: id:105, (15:16:00.5163)
2015-08-22 15:16:00.5053|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.5213|Info|      Encerrado timer: id:105, (15:16:00.5203)
2015-08-22 15:16:00.7005|Info|      Executando timer: id:106, (15:16:00.7005)
2015-08-22 15:16:00.7005|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-08-22 15:16:00.7005|Info|  Settimeout: id:107, (13) ms
2015-08-22 15:16:00.7565|Info|      Encerrado timer: id:106, (15:16:00.7565)
2015-08-22 15:16:00.7565|Info|      Executando timer: id:107, (15:16:00.7575)
2015-08-22 15:16:00.7565|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:00.7565|Info|  Settimeout: id:108, (64) ms
2015-08-22 15:16:00.8136|Info|  Settimeout: id:109, (96) ms
2015-08-22 15:16:00.8656|Info|  Settimeout: id:110, (192) ms
2015-08-22 15:16:00.9176|Info|      Encerrado timer: id:107, (15:16:00.9176)
2015-08-22 15:16:00.9176|Info|      Executando timer: id:108, (15:16:00.9176)
2015-08-22 15:16:00.9176|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.9176|Info|      Encerrado timer: id:108, (15:16:00.9196)
2015-08-22 15:16:00.9176|Info|      Executando timer: id:109, (15:16:00.9206)
2015-08-22 15:16:00.9176|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-08-22 15:16:00.9176|Info|  Settimeout: id:111, (64) ms
2015-08-22 15:16:00.9746|Info|      Encerrado timer: id:109, (15:16:00.9746)
2015-08-22 15:16:00.9897|Info|      Executando timer: id:111, (15:16:00.9897)
2015-08-22 15:16:00.9897|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:00.9897|Info|      Encerrado timer: id:111, (15:16:00.9907)
2015-08-22 15:16:01.0607|Info|      Executando timer: id:110, (15:16:01.0607)
2015-08-22 15:16:01.0607|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-08-22 15:16:01.0687|Info|  Settimeout: id:112, (13) ms
2015-08-22 15:16:01.1238|Info|      Encerrado timer: id:110, (15:16:01.1238)
2015-08-22 15:16:01.1238|Info|      Executando timer: id:112, (15:16:01.1248)
2015-08-22 15:16:01.1238|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.1238|Info|  Settimeout: id:113, (0) ms
2015-08-22 15:16:01.1798|Info|  Settimeout: id:114, (32) ms
2015-08-22 15:16:01.2318|Info|      Encerrado timer: id:112, (15:16:01.2318)
2015-08-22 15:16:01.2318|Info|      Executando timer: id:113, (15:16:01.2338)
2015-08-22 15:16:01.2318|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.2409|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.2409|Info|      Encerrado timer: id:113, (15:16:01.2418)
2015-08-22 15:16:01.2409|Info|      Executando timer: id:114, (15:16:01.2439)
2015-08-22 15:16:01.2409|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:01.2409|Info|  Settimeout: id:115, (0) ms
2015-08-22 15:16:01.3029|Info|  Settimeout: id:116, (13) ms
2015-08-22 15:16:01.3550|Info|      Encerrado timer: id:114, (15:16:01.3550)
2015-08-22 15:16:01.3550|Info|      Executando timer: id:115, (15:16:01.3559)
2015-08-22 15:16:01.3550|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.3550|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.3550|Info|      Encerrado timer: id:115, (15:16:01.3599)
2015-08-22 15:16:01.3550|Info|      Executando timer: id:116, (15:16:01.3609)
2015-08-22 15:16:01.3550|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.3649|Info|  Settimeout: id:117, (32) ms
2015-08-22 15:16:01.4160|Info|  Settimeout: id:118, (64) ms
2015-08-22 15:16:01.4670|Info|      Encerrado timer: id:116, (15:16:01.4670)
2015-08-22 15:16:01.4670|Info|      Executando timer: id:117, (15:16:01.4680)
2015-08-22 15:16:01.4670|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.4740|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.4740|Info|      Encerrado timer: id:117, (15:16:01.4760)
2015-08-22 15:16:01.4740|Info|      Executando timer: id:118, (15:16:01.4820)
2015-08-22 15:16:01.4740|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 15:16:01.4740|Info|  Settimeout: id:119, (13) ms
2015-08-22 15:16:01.5381|Info|      Encerrado timer: id:118, (15:16:01.5381)
2015-08-22 15:16:01.5381|Info|      Executando timer: id:119, (15:16:01.5390)
2015-08-22 15:16:01.5381|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.5381|Info|  Settimeout: id:120, (32) ms
2015-08-22 15:16:01.5941|Info|  Settimeout: id:121, (256) ms
2015-08-22 15:16:01.6462|Info|      Encerrado timer: id:119, (15:16:01.6462)
2015-08-22 15:16:01.6462|Info|      Executando timer: id:120, (15:16:01.6471)
2015-08-22 15:16:01.6462|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.6462|Info|  Settimeout: id:122, (32) ms
2015-08-22 15:16:01.7022|Info|!timeoutId && !maxTimeoutId false
2015-08-22 15:16:01.7022|Info|      Encerrado timer: id:120, (15:16:01.7032)
2015-08-22 15:16:01.7022|Info|      Executando timer: id:122, (15:16:01.7042)
2015-08-22 15:16:01.7022|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.7022|Info|  Settimeout: id:123, (32) ms
2015-08-22 15:16:01.7562|Info|!timeoutId && !maxTimeoutId false
2015-08-22 15:16:01.7562|Info|      Encerrado timer: id:122, (15:16:01.7572)
2015-08-22 15:16:01.7562|Info|      Executando timer: id:123, (15:16:01.7572)
2015-08-22 15:16:01.7562|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:01.7562|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:01.7562|Info|      Encerrado timer: id:123, (15:16:01.7592)
2015-08-22 15:16:01.8523|Info|      Executando timer: id:121, (15:16:01.8523)
2015-08-22 15:16:01.8523|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 15:16:01.8523|Info|  Settimeout: id:124, (13) ms
2015-08-22 15:16:01.9104|Info|      Encerrado timer: id:121, (15:16:01.9104)
2015-08-22 15:16:01.9113|Info|      Executando timer: id:124, (15:16:01.9113)
2015-08-22 15:16:01.9113|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:01.9313|Info|  Settimeout: id:125, (32) ms
2015-08-22 15:16:01.9844|Info|  Settimeout: id:126, (64) ms
2015-08-22 15:16:02.0355|Info|      Encerrado timer: id:124, (15:16:02.0355)
2015-08-22 15:16:02.0374|Info|      Executando timer: id:125, (15:16:02.0374)
2015-08-22 15:16:02.0374|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:02.0374|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:02.0374|Info|      Encerrado timer: id:125, (15:16:02.0454)
2015-08-22 15:16:02.0374|Info|      Executando timer: id:126, (15:16:02.0504)
2015-08-22 15:16:02.0534|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:02.0534|Info|  Settimeout: id:127, (32) ms
2015-08-22 15:16:02.1215|Info|  Settimeout: id:128, (13) ms
2015-08-22 15:16:02.1725|Info|      Encerrado timer: id:126, (15:16:02.1725)
2015-08-22 15:16:02.1725|Info|      Executando timer: id:127, (15:16:02.1725)
2015-08-22 15:16:02.1725|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:02.1725|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:02.1725|Info|      Encerrado timer: id:127, (15:16:02.1755)
2015-08-22 15:16:02.1725|Info|      Executando timer: id:128, (15:16:02.1755)
2015-08-22 15:16:02.1725|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.1775|Info|  Settimeout: id:129, (32) ms
2015-08-22 15:16:02.2286|Info|  Settimeout: id:130, (64) ms
2015-08-22 15:16:02.2796|Info|      Encerrado timer: id:128, (15:16:02.2796)
2015-08-22 15:16:02.2946|Info|      Executando timer: id:130, (15:16:02.2946)
2015-08-22 15:16:02.2946|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 15:16:02.2946|Info|  Settimeout: id:131, (13) ms
2015-08-22 15:16:02.3467|Info|      Encerrado timer: id:130, (15:16:02.3467)
2015-08-22 15:16:02.3486|Info|      Executando timer: id:131, (15:16:02.3486)
2015-08-22 15:16:02.3486|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.3486|Info|  Settimeout: id:132, (32) ms
2015-08-22 15:16:02.4097|Info|  Settimeout: id:133, (32) ms
2015-08-22 15:16:02.4617|Info|  Settimeout: id:134, (64) ms
2015-08-22 15:16:02.5138|Info|      Encerrado timer: id:131, (15:16:02.5138)
2015-08-22 15:16:02.5138|Info|      Executando timer: id:133, (15:16:02.5148)
2015-08-22 15:16:02.5138|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-22 15:16:02.5138|Info|      Encerrado timer: id:133, (15:16:02.5167)
2015-08-22 15:16:02.5278|Info|      Executando timer: id:134, (15:16:02.5278)
2015-08-22 15:16:02.5278|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:16:02.5278|Info|  Settimeout: id:135, (13) ms
2015-08-22 15:16:02.5858|Info|      Encerrado timer: id:134, (15:16:02.5858)
2015-08-22 15:16:02.5858|Info|      Executando timer: id:135, (15:16:02.5878)
2015-08-22 15:16:02.5858|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.5858|Info|  Settimeout: id:136, (32) ms
2015-08-22 15:16:02.6479|Info|      Encerrado timer: id:135, (15:16:02.6479)
2015-08-22 15:16:02.6479|Info|      Executando timer: id:136, (15:16:02.6488)
2015-08-22 15:16:02.6479|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:02.6479|Info|  Settimeout: id:137, (13) ms
2015-08-22 15:16:02.7019|Info|      Encerrado timer: id:136, (15:16:02.7019)
2015-08-22 15:16:02.7019|Info|      Executando timer: id:137, (15:16:02.7039)
2015-08-22 15:16:02.7019|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.7109|Info|  Settimeout: id:138, (32) ms
2015-08-22 15:16:02.7629|Info|  Settimeout: id:139, (64) ms
2015-08-22 15:16:02.8150|Info|      Encerrado timer: id:137, (15:16:02.8150)
2015-08-22 15:16:02.8150|Info|      Executando timer: id:138, (15:16:02.8160)
2015-08-22 15:16:02.8150|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:02.8190|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:02.8190|Info|      Encerrado timer: id:138, (15:16:02.8200)
2015-08-22 15:16:02.8190|Info|      Executando timer: id:139, (15:16:02.8300)
2015-08-22 15:16:02.8370|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-22 15:16:02.8370|Info|  Settimeout: id:140, (13) ms
2015-08-22 15:16:02.8951|Info|      Encerrado timer: id:139, (15:16:02.8951)
2015-08-22 15:16:02.8960|Info|      Executando timer: id:140, (15:16:02.8960)
2015-08-22 15:16:02.8960|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:02.8960|Info|  Settimeout: id:141, (32) ms
2015-08-22 15:16:02.9500|Info|  Settimeout: id:142, (256) ms
2015-08-22 15:16:03.0021|Info|      Encerrado timer: id:140, (15:16:03.0021)
2015-08-22 15:16:03.0021|Info|      Executando timer: id:141, (15:16:03.0031)
2015-08-22 15:16:03.0051|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:03.0051|Info|  Settimeout: id:143, (32) ms
2015-08-22 15:16:03.0582|Info|!timeoutId && !maxTimeoutId false
2015-08-22 15:16:03.0582|Info|      Encerrado timer: id:141, (15:16:03.0591)
2015-08-22 15:16:03.0582|Info|      Executando timer: id:143, (15:16:03.0601)
2015-08-22 15:16:03.0582|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:03.0582|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:03.0582|Info|      Encerrado timer: id:143, (15:16:03.0652)
2015-08-22 15:16:03.2083|Info|      Executando timer: id:142, (15:16:03.2083)
2015-08-22 15:16:03.2083|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-22 15:16:03.2083|Info|  Settimeout: id:144, (13) ms
2015-08-22 15:16:03.2673|Info|      Encerrado timer: id:142, (15:16:03.2673)
2015-08-22 15:16:03.2673|Info|      Executando timer: id:144, (15:16:03.2693)
2015-08-22 15:16:03.2723|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.2993|Info|  Settimeout: id:145, (64) ms
2015-08-22 15:16:03.3513|Info|      Encerrado timer: id:144, (15:16:03.3513)
2015-08-22 15:16:03.3663|Info|      Executando timer: id:145, (15:16:03.3663)
2015-08-22 15:16:03.3663|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-22 15:16:03.3663|Info|  Settimeout: id:146, (13) ms
2015-08-22 15:16:03.4244|Info|      Encerrado timer: id:145, (15:16:03.4244)
2015-08-22 15:16:03.4244|Info|      Executando timer: id:146, (15:16:03.4244)
2015-08-22 15:16:03.4244|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.4274|Info|  Settimeout: id:147, (32) ms
2015-08-22 15:16:03.4785|Info|  Settimeout: id:148, (64) ms
2015-08-22 15:16:03.5295|Info|      Encerrado timer: id:146, (15:16:03.5295)
2015-08-22 15:16:03.5445|Info|      Executando timer: id:148, (15:16:03.5445)
2015-08-22 15:16:03.5445|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-22 15:16:03.5445|Info|  Settimeout: id:149, (13) ms
2015-08-22 15:16:03.6036|Info|      Encerrado timer: id:148, (15:16:03.6036)
2015-08-22 15:16:03.6036|Info|      Executando timer: id:149, (15:16:03.6045)
2015-08-22 15:16:03.6036|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.6036|Info|  Settimeout: id:150, (64) ms
2015-08-22 15:16:03.6595|Info|      Encerrado timer: id:149, (15:16:03.6595)
2015-08-22 15:16:03.6746|Info|      Executando timer: id:150, (15:16:03.6746)
2015-08-22 15:16:03.6826|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-22 15:16:03.6826|Info|  Settimeout: id:151, (13) ms
2015-08-22 15:16:03.7367|Info|      Encerrado timer: id:150, (15:16:03.7367)
2015-08-22 15:16:03.7367|Info|      Executando timer: id:151, (15:16:03.7367)
2015-08-22 15:16:03.7367|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:03.8477|Info|  Settimeout: id:152, (32) ms
2015-08-22 15:16:03.8987|Info|  Settimeout: id:153, (1) ms
2015-08-22 15:16:03.9508|Info|  Settimeout: id:154, (64) ms
2015-08-22 15:16:04.0018|Info|      Encerrado timer: id:151, (15:16:04.0018)
2015-08-22 15:16:04.0018|Info|      Executando timer: id:152, (15:16:04.0028)
2015-08-22 15:16:04.0018|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:04.0048|Info|      Encerrado timer: id:152, (15:16:04.0048)
2015-08-22 15:16:04.0048|Info|      Executando timer: id:153, (15:16:04.0048)
2015-08-22 15:16:04.0048|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:04.0048|Info|      Encerrado timer: id:153, (15:16:04.0078)
2015-08-22 15:16:04.0048|Info|      Executando timer: id:154, (15:16:04.0169)
2015-08-22 15:16:04.0048|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:04.0048|Info|  Settimeout: id:155, (13) ms
2015-08-22 15:16:04.0689|Info|      Encerrado timer: id:154, (15:16:04.0689)
2015-08-22 15:16:04.0689|Info|      Executando timer: id:155, (15:16:04.0689)
2015-08-22 15:16:04.0689|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.0689|Info|  Settimeout: id:156, (32) ms
2015-08-22 15:16:04.1249|Info|  Settimeout: id:157, (64) ms
2015-08-22 15:16:04.1880|Info|      Encerrado timer: id:155, (15:16:04.1880)
2015-08-22 15:16:04.2030|Info|      Executando timer: id:157, (15:16:04.2030)
2015-08-22 15:16:04.2030|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:04.2079|Info|  Settimeout: id:158, (13) ms
2015-08-22 15:16:04.2590|Info|      Encerrado timer: id:157, (15:16:04.2590)
2015-08-22 15:16:04.2590|Info|      Executando timer: id:158, (15:16:04.2600)
2015-08-22 15:16:04.2590|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.2590|Info|  Settimeout: id:159, (32) ms
2015-08-22 15:16:04.3180|Info|  Settimeout: id:160, (64) ms
2015-08-22 15:16:04.3691|Info|      Encerrado timer: id:158, (15:16:04.3691)
2015-08-22 15:16:04.3691|Info|      Executando timer: id:159, (15:16:04.3691)
2015-08-22 15:16:04.3691|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:04.3691|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:04.3691|Info|      Encerrado timer: id:159, (15:16:04.3721)
2015-08-22 15:16:04.3841|Info|      Executando timer: id:160, (15:16:04.3841)
2015-08-22 15:16:04.3841|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:04.3841|Info|  Settimeout: id:161, (18) ms
2015-08-22 15:16:04.4411|Info|  Settimeout: id:162, (13) ms
2015-08-22 15:16:04.4932|Info|      Encerrado timer: id:160, (15:16:04.4932)
2015-08-22 15:16:04.4932|Info|      Executando timer: id:162, (15:16:04.4932)
2015-08-22 15:16:04.4932|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.4932|Info|  Settimeout: id:163, (32) ms
2015-08-22 15:16:04.5472|Info|  Settimeout: id:164, (1) ms
2015-08-22 15:16:04.6003|Info|  Settimeout: id:165, (64) ms
2015-08-22 15:16:04.6513|Info|      Encerrado timer: id:162, (15:16:04.6513)
2015-08-22 15:16:04.6513|Info|      Executando timer: id:163, (15:16:04.6513)
2015-08-22 15:16:04.6513|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:04.6513|Info|      Encerrado timer: id:163, (15:16:04.6553)
2015-08-22 15:16:04.6513|Info|      Executando timer: id:164, (15:16:04.6573)
2015-08-22 15:16:04.6513|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:04.6643|Info|      Encerrado timer: id:164, (15:16:04.6643)
2015-08-22 15:16:04.6643|Info|      Executando timer: id:165, (15:16:04.6663)
2015-08-22 15:16:04.6643|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:04.6643|Info|  Settimeout: id:166, (13) ms
2015-08-22 15:16:04.7244|Info|      Encerrado timer: id:165, (15:16:04.7244)
2015-08-22 15:16:04.7244|Info|      Executando timer: id:166, (15:16:04.7253)
2015-08-22 15:16:04.7244|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.7393|Info|  Settimeout: id:167, (32) ms
2015-08-22 15:16:04.7924|Info|  Settimeout: id:168, (64) ms
2015-08-22 15:16:04.8464|Info|      Encerrado timer: id:166, (15:16:04.8464)
2015-08-22 15:16:04.8615|Info|      Executando timer: id:168, (15:16:04.8615)
2015-08-22 15:16:04.8615|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:04.8615|Info|  Settimeout: id:169, (13) ms
2015-08-22 15:16:04.9144|Info|      Encerrado timer: id:168, (15:16:04.9144)
2015-08-22 15:16:04.9144|Info|      Executando timer: id:169, (15:16:04.9144)
2015-08-22 15:16:04.9144|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:04.9144|Info|  Settimeout: id:170, (32) ms
2015-08-22 15:16:04.9705|Info|  Settimeout: id:171, (64) ms
2015-08-22 15:16:05.0236|Info|      Encerrado timer: id:169, (15:16:05.0236)
2015-08-22 15:16:05.0236|Info|      Executando timer: id:170, (15:16:05.0245)
2015-08-22 15:16:05.0236|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:05.0236|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:05.0236|Info|      Encerrado timer: id:170, (15:16:05.0285)
2015-08-22 15:16:05.0386|Info|      Executando timer: id:171, (15:16:05.0386)
2015-08-22 15:16:05.0386|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:05.0386|Info|  Settimeout: id:172, (18) ms
2015-08-22 15:16:05.0946|Info|  Settimeout: id:173, (13) ms
2015-08-22 15:16:05.1457|Info|      Encerrado timer: id:171, (15:16:05.1457)
2015-08-22 15:16:05.1457|Info|      Executando timer: id:173, (15:16:05.1457)
2015-08-22 15:16:05.1457|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.1457|Info|  Settimeout: id:174, (32) ms
2015-08-22 15:16:05.1996|Info|  Settimeout: id:175, (1) ms
2015-08-22 15:16:05.2527|Info|  Settimeout: id:176, (64) ms
2015-08-22 15:16:05.3048|Info|      Encerrado timer: id:173, (15:16:05.3048)
2015-08-22 15:16:05.3048|Info|      Executando timer: id:174, (15:16:05.3057)
2015-08-22 15:16:05.3048|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:05.3048|Info|      Encerrado timer: id:174, (15:16:05.3087)
2015-08-22 15:16:05.3048|Info|      Executando timer: id:175, (15:16:05.3097)
2015-08-22 15:16:05.3048|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:05.3048|Info|      Encerrado timer: id:175, (15:16:05.3137)
2015-08-22 15:16:05.3198|Info|      Executando timer: id:176, (15:16:05.3198)
2015-08-22 15:16:05.3198|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:05.3198|Info|  Settimeout: id:177, (13) ms
2015-08-22 15:16:05.3738|Info|      Encerrado timer: id:176, (15:16:05.3738)
2015-08-22 15:16:05.3738|Info|      Executando timer: id:177, (15:16:05.3748)
2015-08-22 15:16:05.3738|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.3738|Info|  Settimeout: id:178, (32) ms
2015-08-22 15:16:05.4308|Info|  Settimeout: id:179, (64) ms
2015-08-22 15:16:05.4829|Info|      Encerrado timer: id:177, (15:16:05.4829)
2015-08-22 15:16:05.4979|Info|      Executando timer: id:179, (15:16:05.4979)
2015-08-22 15:16:05.4979|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:05.5249|Info|  Settimeout: id:180, (13) ms
2015-08-22 15:16:05.5759|Info|      Encerrado timer: id:179, (15:16:05.5759)
2015-08-22 15:16:05.5759|Info|      Executando timer: id:180, (15:16:05.5759)
2015-08-22 15:16:05.5759|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.5759|Info|  Settimeout: id:181, (32) ms
2015-08-22 15:16:05.6300|Info|  Settimeout: id:182, (64) ms
2015-08-22 15:16:05.6810|Info|      Encerrado timer: id:180, (15:16:05.6810)
2015-08-22 15:16:05.6810|Info|      Executando timer: id:181, (15:16:05.6830)
2015-08-22 15:16:05.6810|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:05.6810|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:05.6810|Info|      Encerrado timer: id:181, (15:16:05.6900)
2015-08-22 15:16:05.6960|Info|      Executando timer: id:182, (15:16:05.6960)
2015-08-22 15:16:05.6960|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:05.6960|Info|  Settimeout: id:183, (19) ms
2015-08-22 15:16:05.7560|Info|  Settimeout: id:184, (13) ms
2015-08-22 15:16:05.8081|Info|      Encerrado timer: id:182, (15:16:05.8081)
2015-08-22 15:16:05.8081|Info|      Executando timer: id:184, (15:16:05.8091)
2015-08-22 15:16:05.8081|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:05.8081|Info|  Settimeout: id:185, (32) ms
2015-08-22 15:16:05.8652|Info|  Settimeout: id:186, (1) ms
2015-08-22 15:16:05.9162|Info|  Settimeout: id:187, (64) ms
2015-08-22 15:16:05.9672|Info|      Encerrado timer: id:184, (15:16:05.9672)
2015-08-22 15:16:05.9672|Info|      Executando timer: id:185, (15:16:05.9672)
2015-08-22 15:16:05.9672|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:05.9672|Info|      Encerrado timer: id:185, (15:16:05.9702)
2015-08-22 15:16:05.9672|Info|      Executando timer: id:186, (15:16:05.9712)
2015-08-22 15:16:05.9672|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:05.9672|Info|      Encerrado timer: id:186, (15:16:05.9732)
2015-08-22 15:16:05.9822|Info|      Executando timer: id:187, (15:16:05.9822)
2015-08-22 15:16:05.9822|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:05.9822|Info|  Settimeout: id:188, (13) ms
2015-08-22 15:16:06.0362|Info|      Encerrado timer: id:187, (15:16:06.0362)
2015-08-22 15:16:06.0362|Info|      Executando timer: id:188, (15:16:06.0362)
2015-08-22 15:16:06.0362|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.0362|Info|  Settimeout: id:189, (32) ms
2015-08-22 15:16:06.0893|Info|  Settimeout: id:190, (64) ms
2015-08-22 15:16:06.1413|Info|      Encerrado timer: id:188, (15:16:06.1413)
2015-08-22 15:16:06.1553|Info|      Executando timer: id:190, (15:16:06.1553)
2015-08-22 15:16:06.1553|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:06.1613|Info|  Settimeout: id:191, (13) ms
2015-08-22 15:16:06.2164|Info|      Encerrado timer: id:190, (15:16:06.2164)
2015-08-22 15:16:06.2164|Info|      Executando timer: id:191, (15:16:06.2164)
2015-08-22 15:16:06.2164|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.2164|Info|  Settimeout: id:192, (32) ms
2015-08-22 15:16:06.2705|Info|  Settimeout: id:193, (64) ms
2015-08-22 15:16:06.3215|Info|      Encerrado timer: id:191, (15:16:06.3215)
2015-08-22 15:16:06.3215|Info|      Executando timer: id:192, (15:16:06.3224)
2015-08-22 15:16:06.3215|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:06.3215|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:06.3215|Info|      Encerrado timer: id:192, (15:16:06.3284)
2015-08-22 15:16:06.3365|Info|      Executando timer: id:193, (15:16:06.3365)
2015-08-22 15:16:06.3365|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:06.3365|Info|  Settimeout: id:194, (19) ms
2015-08-22 15:16:06.3965|Info|  Settimeout: id:195, (13) ms
2015-08-22 15:16:06.4486|Info|      Encerrado timer: id:193, (15:16:06.4486)
2015-08-22 15:16:06.4486|Info|      Executando timer: id:195, (15:16:06.4505)
2015-08-22 15:16:06.4486|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.4486|Info|  Settimeout: id:196, (32) ms
2015-08-22 15:16:06.5106|Info|  Settimeout: id:197, (1) ms
2015-08-22 15:16:06.5636|Info|  Settimeout: id:198, (64) ms
2015-08-22 15:16:06.6156|Info|      Encerrado timer: id:195, (15:16:06.6156)
2015-08-22 15:16:06.6156|Info|      Executando timer: id:196, (15:16:06.6166)
2015-08-22 15:16:06.6156|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:06.6156|Info|      Encerrado timer: id:196, (15:16:06.6237)
2015-08-22 15:16:06.6156|Info|      Executando timer: id:197, (15:16:06.6247)
2015-08-22 15:16:06.6156|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:06.6337|Info|      Encerrado timer: id:197, (15:16:06.6337)
2015-08-22 15:16:06.6337|Info|      Executando timer: id:198, (15:16:06.6367)
2015-08-22 15:16:06.6337|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:06.6337|Info|  Settimeout: id:199, (13) ms
2015-08-22 15:16:06.6958|Info|      Encerrado timer: id:198, (15:16:06.6958)
2015-08-22 15:16:06.6958|Info|      Executando timer: id:199, (15:16:06.6967)
2015-08-22 15:16:06.6958|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.6958|Info|  Settimeout: id:200, (32) ms
2015-08-22 15:16:06.7498|Info|  Settimeout: id:201, (64) ms
2015-08-22 15:16:06.8018|Info|      Encerrado timer: id:199, (15:16:06.8018)
2015-08-22 15:16:06.8018|Info|      Executando timer: id:201, (15:16:06.8158)
2015-08-22 15:16:06.8018|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:06.8258|Info|  Settimeout: id:202, (13) ms
2015-08-22 15:16:06.8769|Info|      Encerrado timer: id:201, (15:16:06.8769)
2015-08-22 15:16:06.8769|Info|      Executando timer: id:202, (15:16:06.8769)
2015-08-22 15:16:06.8769|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:06.8798|Info|  Settimeout: id:203, (32) ms
2015-08-22 15:16:06.9299|Info|  Settimeout: id:204, (64) ms
2015-08-22 15:16:06.9809|Info|      Encerrado timer: id:202, (15:16:06.9809)
2015-08-22 15:16:06.9809|Info|      Executando timer: id:203, (15:16:06.9829)
2015-08-22 15:16:06.9809|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:06.9809|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:06.9899|Info|      Encerrado timer: id:203, (15:16:06.9899)
2015-08-22 15:16:06.9899|Info|      Executando timer: id:204, (15:16:06.9960)
2015-08-22 15:16:06.9899|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:06.9899|Info|  Settimeout: id:205, (21) ms
2015-08-22 15:16:07.0500|Info|  Settimeout: id:206, (13) ms
2015-08-22 15:16:07.1010|Info|      Encerrado timer: id:204, (15:16:07.1010)
2015-08-22 15:16:07.1010|Info|      Executando timer: id:206, (15:16:07.1010)
2015-08-22 15:16:07.1010|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.1010|Info|  Settimeout: id:207, (32) ms
2015-08-22 15:16:07.1540|Info|  Settimeout: id:208, (1) ms
2015-08-22 15:16:07.2061|Info|  Settimeout: id:209, (64) ms
2015-08-22 15:16:07.2582|Info|      Encerrado timer: id:206, (15:16:07.2582)
2015-08-22 15:16:07.2582|Info|      Executando timer: id:207, (15:16:07.2591)
2015-08-22 15:16:07.2582|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:07.3031|Info|      Encerrado timer: id:207, (15:16:07.3031)
2015-08-22 15:16:07.3031|Info|      Executando timer: id:208, (15:16:07.3041)
2015-08-22 15:16:07.3031|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:07.3031|Info|      Encerrado timer: id:208, (15:16:07.3071)
2015-08-22 15:16:07.3031|Info|      Executando timer: id:209, (15:16:07.3081)
2015-08-22 15:16:07.3031|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:07.3031|Info|  Settimeout: id:210, (13) ms
2015-08-22 15:16:07.3612|Info|      Encerrado timer: id:209, (15:16:07.3612)
2015-08-22 15:16:07.3612|Info|      Executando timer: id:210, (15:16:07.3612)
2015-08-22 15:16:07.3612|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.3642|Info|  Settimeout: id:211, (32) ms
2015-08-22 15:16:07.4162|Info|  Settimeout: id:212, (64) ms
2015-08-22 15:16:07.4673|Info|      Encerrado timer: id:210, (15:16:07.4673)
2015-08-22 15:16:07.4823|Info|      Executando timer: id:212, (15:16:07.4823)
2015-08-22 15:16:07.4823|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:07.4903|Info|  Settimeout: id:213, (13) ms
2015-08-22 15:16:07.5433|Info|      Encerrado timer: id:212, (15:16:07.5433)
2015-08-22 15:16:07.5433|Info|      Executando timer: id:213, (15:16:07.5453)
2015-08-22 15:16:07.5433|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.5433|Info|  Settimeout: id:214, (32) ms
2015-08-22 15:16:07.6064|Info|  Settimeout: id:215, (64) ms
2015-08-22 15:16:07.6584|Info|      Encerrado timer: id:213, (15:16:07.6584)
2015-08-22 15:16:07.6584|Info|      Executando timer: id:214, (15:16:07.6594)
2015-08-22 15:16:07.6584|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:07.6614|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:07.6614|Info|      Encerrado timer: id:214, (15:16:07.6624)
2015-08-22 15:16:07.6614|Info|      Executando timer: id:215, (15:16:07.6735)
2015-08-22 15:16:07.6614|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:07.6614|Info|  Settimeout: id:216, (18) ms
2015-08-22 15:16:07.7284|Info|  Settimeout: id:217, (13) ms
2015-08-22 15:16:07.7795|Info|      Encerrado timer: id:215, (15:16:07.7795)
2015-08-22 15:16:07.7795|Info|      Executando timer: id:217, (15:16:07.7805)
2015-08-22 15:16:07.7795|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:07.7795|Info|  Settimeout: id:218, (32) ms
2015-08-22 15:16:07.8336|Info|  Settimeout: id:219, (1) ms
2015-08-22 15:16:07.8846|Info|  Settimeout: id:220, (64) ms
2015-08-22 15:16:07.9356|Info|      Encerrado timer: id:217, (15:16:07.9356)
2015-08-22 15:16:07.9356|Info|      Executando timer: id:218, (15:16:07.9376)
2015-08-22 15:16:07.9356|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:07.9356|Info|      Encerrado timer: id:218, (15:16:07.9416)
2015-08-22 15:16:07.9436|Info|      Executando timer: id:219, (15:16:07.9436)
2015-08-22 15:16:07.9436|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:07.9436|Info|      Encerrado timer: id:219, (15:16:07.9526)
2015-08-22 15:16:07.9436|Info|      Executando timer: id:220, (15:16:07.9536)
2015-08-22 15:16:07.9436|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:07.9436|Info|  Settimeout: id:221, (13) ms
2015-08-22 15:16:08.0077|Info|      Encerrado timer: id:220, (15:16:08.0077)
2015-08-22 15:16:08.0077|Info|      Executando timer: id:221, (15:16:08.0077)
2015-08-22 15:16:08.0077|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.0077|Info|  Settimeout: id:222, (32) ms
2015-08-22 15:16:08.0607|Info|  Settimeout: id:223, (64) ms
2015-08-22 15:16:08.1118|Info|      Encerrado timer: id:221, (15:16:08.1118)
2015-08-22 15:16:08.1268|Info|      Executando timer: id:223, (15:16:08.1268)
2015-08-22 15:16:08.1268|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:08.1268|Info|  Settimeout: id:224, (13) ms
2015-08-22 15:16:08.1798|Info|      Encerrado timer: id:223, (15:16:08.1798)
2015-08-22 15:16:08.1798|Info|      Executando timer: id:224, (15:16:08.1808)
2015-08-22 15:16:08.1798|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.1798|Info|  Settimeout: id:225, (32) ms
2015-08-22 15:16:08.2398|Info|  Settimeout: id:226, (64) ms
2015-08-22 15:16:08.2919|Info|      Encerrado timer: id:224, (15:16:08.2919)
2015-08-22 15:16:08.2919|Info|      Executando timer: id:225, (15:16:08.2928)
2015-08-22 15:16:08.2919|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:08.2919|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:08.2919|Info|      Encerrado timer: id:225, (15:16:08.2958)
2015-08-22 15:16:08.3069|Info|      Executando timer: id:226, (15:16:08.3069)
2015-08-22 15:16:08.3069|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:08.3069|Info|  Settimeout: id:227, (18) ms
2015-08-22 15:16:08.3609|Info|  Settimeout: id:228, (13) ms
2015-08-22 15:16:08.4119|Info|      Encerrado timer: id:226, (15:16:08.4119)
2015-08-22 15:16:08.4119|Info|      Executando timer: id:228, (15:16:08.4129)
2015-08-22 15:16:08.4119|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.4119|Info|  Settimeout: id:229, (32) ms
2015-08-22 15:16:08.4670|Info|  Settimeout: id:230, (1) ms
2015-08-22 15:16:08.5180|Info|  Settimeout: id:231, (64) ms
2015-08-22 15:16:08.5691|Info|      Encerrado timer: id:228, (15:16:08.5691)
2015-08-22 15:16:08.5691|Info|      Executando timer: id:229, (15:16:08.5700)
2015-08-22 15:16:08.5691|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:08.5691|Info|      Encerrado timer: id:229, (15:16:08.5720)
2015-08-22 15:16:08.5691|Info|      Executando timer: id:230, (15:16:08.5720)
2015-08-22 15:16:08.5691|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:08.5691|Info|      Encerrado timer: id:230, (15:16:08.5760)
2015-08-22 15:16:08.5841|Info|      Executando timer: id:231, (15:16:08.5841)
2015-08-22 15:16:08.5841|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:08.5841|Info|  Settimeout: id:232, (13) ms
2015-08-22 15:16:08.6371|Info|      Encerrado timer: id:231, (15:16:08.6371)
2015-08-22 15:16:08.6371|Info|      Executando timer: id:232, (15:16:08.6381)
2015-08-22 15:16:08.6371|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.6371|Info|  Settimeout: id:233, (32) ms
2015-08-22 15:16:08.6922|Info|  Settimeout: id:234, (64) ms
2015-08-22 15:16:08.7432|Info|      Encerrado timer: id:232, (15:16:08.7432)
2015-08-22 15:16:08.7582|Info|      Executando timer: id:234, (15:16:08.7582)
2015-08-22 15:16:08.7582|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:08.7582|Info|  Settimeout: id:235, (13) ms
2015-08-22 15:16:08.8153|Info|      Encerrado timer: id:234, (15:16:08.8153)
2015-08-22 15:16:08.8153|Info|      Executando timer: id:235, (15:16:08.8162)
2015-08-22 15:16:08.8153|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:08.8182|Info|  Settimeout: id:236, (32) ms
2015-08-22 15:16:08.8692|Info|  Settimeout: id:237, (64) ms
2015-08-22 15:16:08.9203|Info|      Encerrado timer: id:235, (15:16:08.9203)
2015-08-22 15:16:08.9203|Info|      Executando timer: id:236, (15:16:08.9213)
2015-08-22 15:16:08.9203|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:08.9203|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:08.9203|Info|      Encerrado timer: id:236, (15:16:08.9243)
2015-08-22 15:16:08.9353|Info|      Executando timer: id:237, (15:16:08.9353)
2015-08-22 15:16:08.9353|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:08.9353|Info|  Settimeout: id:238, (18) ms
2015-08-22 15:16:08.9903|Info|  Settimeout: id:239, (13) ms
2015-08-22 15:16:09.0414|Info|      Encerrado timer: id:237, (15:16:09.0414)
2015-08-22 15:16:09.0414|Info|      Executando timer: id:239, (15:16:09.0424)
2015-08-22 15:16:09.0414|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.0554|Info|  Settimeout: id:240, (32) ms
2015-08-22 15:16:09.1064|Info|  Settimeout: id:241, (1) ms
2015-08-22 15:16:09.1575|Info|  Settimeout: id:242, (64) ms
2015-08-22 15:16:09.2095|Info|      Encerrado timer: id:239, (15:16:09.2095)
2015-08-22 15:16:09.2095|Info|      Executando timer: id:240, (15:16:09.2115)
2015-08-22 15:16:09.2095|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:09.2095|Info|      Encerrado timer: id:240, (15:16:09.2165)
2015-08-22 15:16:09.2095|Info|      Executando timer: id:241, (15:16:09.2185)
2015-08-22 15:16:09.2095|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:09.2325|Info|      Encerrado timer: id:241, (15:16:09.2325)
2015-08-22 15:16:09.2325|Info|      Executando timer: id:242, (15:16:09.2355)
2015-08-22 15:16:09.2325|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:09.2425|Info|  Settimeout: id:243, (13) ms
2015-08-22 15:16:09.2926|Info|      Encerrado timer: id:242, (15:16:09.2926)
2015-08-22 15:16:09.2926|Info|      Executando timer: id:243, (15:16:09.2936)
2015-08-22 15:16:09.2926|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.2926|Info|  Settimeout: id:244, (32) ms
2015-08-22 15:16:09.3476|Info|  Settimeout: id:245, (64) ms
2015-08-22 15:16:09.3987|Info|      Encerrado timer: id:243, (15:16:09.3987)
2015-08-22 15:16:09.4137|Info|      Executando timer: id:245, (15:16:09.4137)
2015-08-22 15:16:09.4137|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:09.4137|Info|  Settimeout: id:246, (13) ms
2015-08-22 15:16:09.4687|Info|      Encerrado timer: id:245, (15:16:09.4687)
2015-08-22 15:16:09.4687|Info|      Executando timer: id:246, (15:16:09.4697)
2015-08-22 15:16:09.4687|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.4737|Info|  Settimeout: id:247, (32) ms
2015-08-22 15:16:09.5247|Info|  Settimeout: id:248, (64) ms
2015-08-22 15:16:09.5758|Info|      Encerrado timer: id:246, (15:16:09.5758)
2015-08-22 15:16:09.5758|Info|      Executando timer: id:247, (15:16:09.5758)
2015-08-22 15:16:09.5758|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:09.5758|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:09.5758|Info|      Encerrado timer: id:247, (15:16:09.5788)
2015-08-22 15:16:09.5908|Info|      Executando timer: id:248, (15:16:09.5908)
2015-08-22 15:16:09.5908|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:09.5908|Info|  Settimeout: id:249, (18) ms
2015-08-22 15:16:09.6468|Info|  Settimeout: id:250, (13) ms
2015-08-22 15:16:09.6979|Info|      Encerrado timer: id:248, (15:16:09.6979)
2015-08-22 15:16:09.6979|Info|      Executando timer: id:250, (15:16:09.6988)
2015-08-22 15:16:09.6979|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.6979|Info|  Settimeout: id:251, (32) ms
2015-08-22 15:16:09.7569|Info|  Settimeout: id:252, (1) ms
2015-08-22 15:16:09.8079|Info|  Settimeout: id:253, (64) ms
2015-08-22 15:16:09.8600|Info|      Encerrado timer: id:250, (15:16:09.8600)
2015-08-22 15:16:09.8600|Info|      Executando timer: id:251, (15:16:09.8620)
2015-08-22 15:16:09.8650|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-22 15:16:09.8650|Info|      Encerrado timer: id:251, (15:16:09.8670)
2015-08-22 15:16:09.8650|Info|      Executando timer: id:252, (15:16:09.8680)
2015-08-22 15:16:09.8650|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-22 15:16:09.8870|Info|      Encerrado timer: id:252, (15:16:09.8870)
2015-08-22 15:16:09.8870|Info|      Executando timer: id:253, (15:16:09.8910)
2015-08-22 15:16:09.8870|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-22 15:16:09.8980|Info|  Settimeout: id:254, (13) ms
2015-08-22 15:16:09.9501|Info|      Encerrado timer: id:253, (15:16:09.9501)
2015-08-22 15:16:09.9501|Info|      Executando timer: id:254, (15:16:09.9510)
2015-08-22 15:16:09.9501|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:09.9501|Info|----------------------------------------
2015-08-22 15:16:09.9501|Info|lodash.delay
2015-08-22 15:16:09.9501|Info|----------------------------------------
2015-08-22 15:16:09.9580|Info| FAIL - should delay `func` execution
2015-08-22 15:16:09.9580|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:16:09.9580|Info|  Settimeout: id:255, (32) ms
2015-08-22 15:16:10.0131|Info|  Settimeout: id:256, (64) ms
2015-08-22 15:16:10.0651|Info|      Encerrado timer: id:254, (15:16:10.0651)
2015-08-22 15:16:10.0801|Info|      Executando timer: id:256, (15:16:10.0801)
2015-08-22 15:16:10.0831|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-22 15:16:10.0831|Info|  Settimeout: id:257, (13) ms
2015-08-22 15:16:10.1412|Info|      Encerrado timer: id:256, (15:16:10.1412)
2015-08-22 15:16:10.1412|Info|      Executando timer: id:257, (15:16:10.1432)
2015-08-22 15:16:10.1462|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:10.1462|Info|----------------------------------------
2015-08-22 15:16:10.1462|Info|lodash.throttle
2015-08-22 15:16:10.1462|Info|----------------------------------------
2015-08-22 15:16:10.1462|Info| FAIL - should throttle a function
2015-08-22 15:16:10.1462|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:16:10.1462|Info|  Settimeout: id:258, (32) ms
2015-08-22 15:16:10.2062|Info|  Settimeout: id:259, (64) ms
2015-08-22 15:16:10.2572|Info|      Encerrado timer: id:257, (15:16:10.2572)
2015-08-22 15:16:10.2572|Info|      Executando timer: id:258, (15:16:10.2572)
2015-08-22 15:16:10.2572|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-22 15:16:10.2572|Info|!timeoutId && !maxTimeoutId true
2015-08-22 15:16:10.2572|Info|      Encerrado timer: id:258, (15:16:10.2602)
2015-08-22 15:16:10.2722|Info|      Executando timer: id:259, (15:16:10.2722)
2015-08-22 15:16:10.2722|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-22 15:16:10.2722|Info|  Settimeout: id:260, (18) ms
2015-08-22 15:16:10.3283|Info|  Settimeout: id:261, (13) ms
2015-08-22 15:16:10.3803|Info|      Encerrado timer: id:259, (15:16:10.3803)
2015-08-22 15:16:10.3803|Info|      Executando timer: id:261, (15:16:10.3823)
2015-08-22 15:16:10.3803|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:16:10.3803|Info| FAIL - subsequent calls should return the result of the first call
2015-08-22 15:16:10.3803|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:16:10.3803|Info|    FAIL | EQ | ok | Expected: y, Actual: y
2015-08-22 15:16:10.3983|Info|----------------------------------------
2015-08-22 15:16:10.3983|Info|    PASS: 4447  FAIL: 4  TOTAL: 4451
2015-08-22 15:16:10.3983|Info|    Finished in 18151 milliseconds.
2015-08-22 15:16:10.3983|Info|----------------------------------------
2015-08-22 15:16:10.4364|Info|      Encerrado timer: id:261, (15:16:10.4364)
2015-08-22 15:16:10.4364|Info|Encerrando os testes
2015-08-22 15:16:10.4364|Info|Total:4451, Sucesso: 4447, Falha: 4
2015-08-22 15:16:10.4364|Info|19 segundos para avaliar o individuo lodash.js
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [113]:1:24
2015-08-22 15:16:10.4424|Info|FAILED: lodash.isNil: should work with nulls from another realm: Expected 2 assertions, but 1 were run, ,     at Script Document [12]:7765:5
    at Script Document [12]:7774:4
    at Script Document [12]:17424:3
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [135]:1:24
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [141]:1:24
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [265]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [271]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [277]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [283]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [289]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [295]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [301]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [307]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [313]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [319]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [325]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [331]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [337]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [343]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [349]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [355]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [361]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [367]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [373]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [379]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [385]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [391]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [397]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [403]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [409]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [415]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [421]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:3120:15)
    at Script Document [427]:1:25
2015-08-22 15:16:10.4424|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:14984:24)
    at Script Document [433]:1:25
2015-08-22 15:16:10.4584|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:15006:26)
    at Script Document [439]:1:25
2015-08-22 15:16:34.5175|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:16:57.6949|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:17:19.0811|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:17:44.6539|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:19:41.4744|Info|  Settimeout: id:0, (500) ms
2015-08-22 15:19:41.5985|Info|Iniciando os testes
2015-08-22 15:19:41.5985|Info|  Settimeout: id:1, (13) ms
2015-08-22 15:19:41.6185|Info|      Executando timer: id:1, (15:19:41.6185)
2015-08-22 15:19:41.6716|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:41.6856|Info|----------------------------------------
2015-08-22 15:19:41.6856|Info|Arrays
2015-08-22 15:19:41.6856|Info|----------------------------------------
2015-08-22 15:19:41.6926|Info| PASS - first
2015-08-22 15:19:41.6926|Info| PASS - head
2015-08-22 15:19:41.6926|Info| PASS - take
2015-08-22 15:19:41.6926|Info| PASS - rest
2015-08-22 15:19:41.6926|Info| PASS - tail
2015-08-22 15:19:41.6926|Info| PASS - drop
2015-08-22 15:19:41.6926|Info| PASS - initial
2015-08-22 15:19:41.6926|Info| PASS - last
2015-08-22 15:19:41.6926|Info| PASS - compact
2015-08-22 15:19:41.8617|Info| PASS - flatten
2015-08-22 15:19:41.8617|Info| PASS - without
2015-08-22 15:19:41.8647|Info| PASS - sortedIndex
2015-08-22 15:19:41.8647|Info| PASS - uniq
2015-08-22 15:19:41.8647|Info| PASS - unique
2015-08-22 15:19:41.8647|Info| PASS - intersection
2015-08-22 15:19:41.8647|Info| PASS - union
2015-08-22 15:19:41.8647|Info| PASS - difference
2015-08-22 15:19:41.8647|Info| PASS - zip
2015-08-22 15:19:41.8647|Info| PASS - unzip
2015-08-22 15:19:41.8647|Info| PASS - object
2015-08-22 15:19:41.8647|Info| PASS - indexOf
2015-08-22 15:19:41.8647|Info| PASS - indexOf with NaN
2015-08-22 15:19:41.8807|Info| PASS - indexOf with +- 0
2015-08-22 15:19:41.8807|Info| PASS - lastIndexOf
2015-08-22 15:19:41.8807|Info| PASS - lastIndexOf with NaN
2015-08-22 15:19:41.8807|Info| PASS - lastIndexOf with +- 0
2015-08-22 15:19:41.8807|Info| PASS - findIndex
2015-08-22 15:19:41.8807|Info| PASS - findLastIndex
2015-08-22 15:19:41.8807|Info| PASS - range
2015-08-22 15:19:41.8807|Info|----------------------------------------
2015-08-22 15:19:41.8807|Info|Chaining
2015-08-22 15:19:41.8807|Info|----------------------------------------
2015-08-22 15:19:41.8807|Info| PASS - map/flatten/reduce
2015-08-22 15:19:41.8807|Info| PASS - select/reject/sortBy
2015-08-22 15:19:41.8957|Info| PASS - select/reject/sortBy in functional style
2015-08-22 15:19:41.8957|Info| PASS - reverse/concat/unshift/pop/map
2015-08-22 15:19:41.8957|Info| PASS - splice
2015-08-22 15:19:41.8957|Info| PASS - shift
2015-08-22 15:19:41.8957|Info| PASS - pop
2015-08-22 15:19:41.8957|Info| PASS - chaining works in small stages
2015-08-22 15:19:41.8957|Info| PASS - #1562: Engine proxies for chained functions
2015-08-22 15:19:41.8957|Info|----------------------------------------
2015-08-22 15:19:41.8957|Info|Collections
2015-08-22 15:19:41.8957|Info|----------------------------------------
2015-08-22 15:19:41.8957|Info| PASS - each
2015-08-22 15:19:41.8957|Info| PASS - forEach
2015-08-22 15:19:41.8957|Info| PASS - lookupIterator with contexts
2015-08-22 15:19:41.9157|Info| PASS - Iterating objects with sketchy length properties
2015-08-22 15:19:41.9157|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-22 15:19:41.9157|Info| PASS - map
2015-08-22 15:19:41.9157|Info| PASS - collect
2015-08-22 15:19:41.9157|Info| PASS - reduce
2015-08-22 15:19:41.9157|Info| PASS - foldl
2015-08-22 15:19:41.9157|Info| PASS - reduceRight
2015-08-22 15:19:41.9267|Info| PASS - foldr
2015-08-22 15:19:41.9267|Info| PASS - find
2015-08-22 15:19:41.9267|Info| PASS - detect
2015-08-22 15:19:41.9267|Info| PASS - filter
2015-08-22 15:19:41.9267|Info| PASS - select
2015-08-22 15:19:41.9267|Info| PASS - reject
2015-08-22 15:19:41.9267|Info| PASS - every
2015-08-22 15:19:41.9267|Info| PASS - all
2015-08-22 15:19:41.9267|Info| PASS - some
2015-08-22 15:19:41.9267|Info| PASS - any
2015-08-22 15:19:41.9267|Info| PASS - includes
2015-08-22 15:19:41.9267|Info| PASS - include
2015-08-22 15:19:41.9267|Info| PASS - contains
2015-08-22 15:19:41.9428|Info| PASS - includes with NaN
2015-08-22 15:19:41.9428|Info| PASS - includes with +- 0
2015-08-22 15:19:41.9428|Info| PASS - invoke
2015-08-22 15:19:41.9428|Info| PASS - invoke w/ function reference
2015-08-22 15:19:41.9428|Info| PASS - invoke when strings have a call method
2015-08-22 15:19:41.9428|Info| PASS - pluck
2015-08-22 15:19:41.9428|Info| PASS - where
2015-08-22 15:19:41.9428|Info| PASS - findWhere
2015-08-22 15:19:41.9608|Info| PASS - max
2015-08-22 15:19:41.9608|Info| PASS - min
2015-08-22 15:19:41.9608|Info| PASS - sortBy
2015-08-22 15:19:41.9608|Info| PASS - groupBy
2015-08-22 15:19:41.9608|Info| PASS - indexBy
2015-08-22 15:19:41.9778|Info| PASS - countBy
2015-08-22 15:19:41.9778|Info| PASS - shuffle
2015-08-22 15:19:41.9778|Info| PASS - sample
2015-08-22 15:19:41.9778|Info| PASS - toArray
2015-08-22 15:19:41.9778|Info| PASS - size
2015-08-22 15:19:41.9778|Info| PASS - partition
2015-08-22 15:19:41.9778|Info|----------------------------------------
2015-08-22 15:19:41.9778|Info|Functions
2015-08-22 15:19:41.9778|Info|----------------------------------------
2015-08-22 15:19:41.9778|Info| PASS - bind
2015-08-22 15:19:41.9898|Info| PASS - partial
2015-08-22 15:19:41.9898|Info| PASS - bindAll
2015-08-22 15:19:41.9898|Info| PASS - memoize
2015-08-22 15:19:41.9898|Info|  Settimeout: id:2, (100) ms
2015-08-22 15:19:42.0459|Info|  Settimeout: id:3, (50) ms
2015-08-22 15:19:42.0979|Info|  Settimeout: id:4, (150) ms
2015-08-22 15:19:42.1500|Info|      Encerrado timer: id:1, (15:19:42.1500)
2015-08-22 15:19:42.1500|Info|      Executando timer: id:0, (15:19:42.1539)
2015-08-22 15:19:42.1500|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-22 15:19:42.1500|Info|  Settimeout: id:5, (500) ms
2015-08-22 15:19:42.2080|Info|      Encerrado timer: id:0, (15:19:42.2080)
2015-08-22 15:19:42.2080|Info|      Executando timer: id:2, (15:19:42.2080)
2015-08-22 15:19:42.2080|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.2080|Info|      Encerrado timer: id:2, (15:19:42.2099)
2015-08-22 15:19:42.2080|Info|      Executando timer: id:3, (15:19:42.2109)
2015-08-22 15:19:42.2080|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:42.2080|Info|      Encerrado timer: id:3, (15:19:42.2140)
2015-08-22 15:19:42.2510|Info|      Executando timer: id:4, (15:19:42.2510)
2015-08-22 15:19:42.2510|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:42.2570|Info|  Settimeout: id:6, (13) ms
2015-08-22 15:19:42.3091|Info|      Encerrado timer: id:4, (15:19:42.3091)
2015-08-22 15:19:42.3091|Info|      Executando timer: id:6, (15:19:42.3110)
2015-08-22 15:19:42.3091|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.3190|Info|  Settimeout: id:7, (1) ms
2015-08-22 15:19:42.3731|Info|  Settimeout: id:8, (50) ms
2015-08-22 15:19:42.4252|Info|      Encerrado timer: id:6, (15:19:42.4252)
2015-08-22 15:19:42.4252|Info|      Executando timer: id:7, (15:19:42.4261)
2015-08-22 15:19:42.4271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.4271|Info|      Encerrado timer: id:7, (15:19:42.4281)
2015-08-22 15:19:42.4271|Info|      Executando timer: id:8, (15:19:42.4291)
2015-08-22 15:19:42.4271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.4271|Info|  Settimeout: id:9, (13) ms
2015-08-22 15:19:42.4832|Info|      Encerrado timer: id:8, (15:19:42.4832)
2015-08-22 15:19:42.4832|Info|      Executando timer: id:9, (15:19:42.4852)
2015-08-22 15:19:42.4832|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.4911|Info| PASS - defer
2015-08-22 15:19:42.4911|Info|  Settimeout: id:10, (32) ms
2015-08-22 15:19:42.5502|Info|  Settimeout: id:11, (64) ms
2015-08-22 15:19:42.6022|Info|      Encerrado timer: id:9, (15:19:42.6022)
2015-08-22 15:19:42.6022|Info|      Executando timer: id:10, (15:19:42.6032)
2015-08-22 15:19:42.6022|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:42.6022|Info|      Encerrado timer: id:10, (15:19:42.6072)
2015-08-22 15:19:42.6172|Info|      Executando timer: id:11, (15:19:42.6172)
2015-08-22 15:19:42.6172|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.6172|Info|  Settimeout: id:12, (13) ms
2015-08-22 15:19:42.6733|Info|      Encerrado timer: id:11, (15:19:42.6733)
2015-08-22 15:19:42.6733|Info|      Executando timer: id:12, (15:19:42.6743)
2015-08-22 15:19:42.6733|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.6733|Info| PASS - throttle
2015-08-22 15:19:42.6783|Info|  Settimeout: id:13, (32) ms
2015-08-22 15:19:42.7334|Info|  Settimeout: id:14, (64) ms
2015-08-22 15:19:42.7874|Info|  Settimeout: id:15, (96) ms
2015-08-22 15:19:42.8395|Info|      Encerrado timer: id:12, (15:19:42.8395)
2015-08-22 15:19:42.8395|Info|      Executando timer: id:5, (15:19:42.8414)
2015-08-22 15:19:42.8395|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-22 15:19:42.8395|Info|      Encerrado timer: id:5, (15:19:42.8444)
2015-08-22 15:19:42.8395|Info|      Executando timer: id:13, (15:19:42.8444)
2015-08-22 15:19:42.8395|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:42.8395|Info|      Encerrado timer: id:13, (15:19:42.8474)
2015-08-22 15:19:42.8395|Info|      Executando timer: id:14, (15:19:42.8474)
2015-08-22 15:19:42.8494|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.8494|Info|  Settimeout: id:16, (29) ms
2015-08-22 15:19:42.9015|Info|      Encerrado timer: id:14, (15:19:42.9015)
2015-08-22 15:19:42.9015|Info|      Executando timer: id:16, (15:19:42.9025)
2015-08-22 15:19:42.9015|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:42.9015|Info|      Encerrado timer: id:16, (15:19:42.9044)
2015-08-22 15:19:42.9015|Info|      Executando timer: id:15, (15:19:42.9055)
2015-08-22 15:19:42.9015|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:42.9015|Info|  Settimeout: id:17, (13) ms
2015-08-22 15:19:42.9585|Info|      Encerrado timer: id:15, (15:19:42.9585)
2015-08-22 15:19:42.9585|Info|      Executando timer: id:17, (15:19:42.9595)
2015-08-22 15:19:42.9585|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:42.9585|Info| PASS - throttle arguments
2015-08-22 15:19:42.9585|Info|  Settimeout: id:18, (64) ms
2015-08-22 15:19:43.0186|Info|      Encerrado timer: id:17, (15:19:43.0186)
2015-08-22 15:19:43.0336|Info|      Executando timer: id:18, (15:19:43.0336)
2015-08-22 15:19:43.0336|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.0365|Info|  Settimeout: id:19, (13) ms
2015-08-22 15:19:43.0886|Info|      Encerrado timer: id:18, (15:19:43.0886)
2015-08-22 15:19:43.0886|Info|      Executando timer: id:19, (15:19:43.0906)
2015-08-22 15:19:43.0886|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:43.0886|Info| PASS - throttle once
2015-08-22 15:19:43.0996|Info|  Settimeout: id:20, (32) ms
2015-08-22 15:19:43.1526|Info|  Settimeout: id:21, (64) ms
2015-08-22 15:19:43.2047|Info|      Encerrado timer: id:19, (15:19:43.2047)
2015-08-22 15:19:43.2047|Info|      Executando timer: id:20, (15:19:43.2067)
2015-08-22 15:19:43.2097|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.2097|Info|      Encerrado timer: id:20, (15:19:43.2117)
2015-08-22 15:19:43.2097|Info|      Executando timer: id:21, (15:19:43.2197)
2015-08-22 15:19:43.2097|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.2257|Info|  Settimeout: id:22, (13) ms
2015-08-22 15:19:43.2788|Info|      Encerrado timer: id:21, (15:19:43.2788)
2015-08-22 15:19:43.2788|Info|      Executando timer: id:22, (15:19:43.2797)
2015-08-22 15:19:43.2788|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:43.2788|Info| PASS - throttle twice
2015-08-22 15:19:43.2788|Info|  Settimeout: id:23, (30) ms
2015-08-22 15:19:43.3377|Info|  Settimeout: id:24, (85) ms
2015-08-22 15:19:43.3888|Info|      Encerrado timer: id:22, (15:19:43.3888)
2015-08-22 15:19:43.3888|Info|      Executando timer: id:23, (15:19:43.3898)
2015-08-22 15:19:43.3888|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.3888|Info|      Encerrado timer: id:23, (15:19:43.3928)
2015-08-22 15:19:43.4249|Info|      Executando timer: id:24, (15:19:43.4249)
2015-08-22 15:19:43.4249|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.4278|Info|  Settimeout: id:25, (13) ms
2015-08-22 15:19:43.4799|Info|      Encerrado timer: id:24, (15:19:43.4799)
2015-08-22 15:19:43.4799|Info|      Executando timer: id:25, (15:19:43.4809)
2015-08-22 15:19:43.4799|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:43.4799|Info| PASS - more throttling
2015-08-22 15:19:43.4799|Info|  Settimeout: id:26, (100) ms
2015-08-22 15:19:43.5379|Info|  Settimeout: id:27, (50) ms
2015-08-22 15:19:43.5889|Info|  Settimeout: id:28, (150) ms
2015-08-22 15:19:43.6400|Info|  Settimeout: id:29, (160) ms
2015-08-22 15:19:43.6930|Info|  Settimeout: id:30, (230) ms
2015-08-22 15:19:43.7460|Info|  Settimeout: id:31, (300) ms
2015-08-22 15:19:43.7991|Info|      Encerrado timer: id:25, (15:19:43.7991)
2015-08-22 15:19:43.7991|Info|      Executando timer: id:26, (15:19:43.8001)
2015-08-22 15:19:43.8021|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.8021|Info|      Encerrado timer: id:26, (15:19:43.8031)
2015-08-22 15:19:43.8021|Info|      Executando timer: id:27, (15:19:43.8041)
2015-08-22 15:19:43.8021|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.8021|Info|  Settimeout: id:32, (95) ms
2015-08-22 15:19:43.8602|Info|      Encerrado timer: id:27, (15:19:43.8602)
2015-08-22 15:19:43.8602|Info|      Executando timer: id:28, (15:19:43.8611)
2015-08-22 15:19:43.8602|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.8641|Info|      Encerrado timer: id:28, (15:19:43.8641)
2015-08-22 15:19:43.8641|Info|      Executando timer: id:29, (15:19:43.8651)
2015-08-22 15:19:43.8641|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.8641|Info|      Encerrado timer: id:29, (15:19:43.8681)
2015-08-22 15:19:43.9062|Info|      Executando timer: id:32, (15:19:43.9062)
2015-08-22 15:19:43.9062|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:43.9062|Info|      Encerrado timer: id:32, (15:19:43.9092)
2015-08-22 15:19:43.9262|Info|      Executando timer: id:30, (15:19:43.9262)
2015-08-22 15:19:43.9272|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:43.9272|Info|  Settimeout: id:33, (81) ms
2015-08-22 15:19:43.9812|Info|      Encerrado timer: id:30, (15:19:43.9812)
2015-08-22 15:19:44.0122|Info|      Executando timer: id:33, (15:19:44.0122)
2015-08-22 15:19:44.0122|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.0122|Info|      Encerrado timer: id:33, (15:19:44.0192)
2015-08-22 15:19:44.0503|Info|      Executando timer: id:31, (15:19:44.0503)
2015-08-22 15:19:44.0503|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.0533|Info|  Settimeout: id:34, (13) ms
2015-08-22 15:19:44.1043|Info|      Encerrado timer: id:31, (15:19:44.1043)
2015-08-22 15:19:44.1043|Info|      Executando timer: id:34, (15:19:44.1063)
2015-08-22 15:19:44.1043|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:44.1043|Info|  Settimeout: id:35, (32) ms
2015-08-22 15:19:44.1673|Info|  Settimeout: id:36, (96) ms
2015-08-22 15:19:44.2194|Info|      Encerrado timer: id:34, (15:19:44.2194)
2015-08-22 15:19:44.2194|Info|      Executando timer: id:35, (15:19:44.2204)
2015-08-22 15:19:44.2194|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.2244|Info|      Encerrado timer: id:35, (15:19:44.2244)
2015-08-22 15:19:44.2664|Info|      Executando timer: id:36, (15:19:44.2664)
2015-08-22 15:19:44.2664|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.2734|Info|  Settimeout: id:37, (13) ms
2015-08-22 15:19:44.3255|Info|      Encerrado timer: id:36, (15:19:44.3255)
2015-08-22 15:19:44.3255|Info|      Executando timer: id:37, (15:19:44.3255)
2015-08-22 15:19:44.3255|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:44.3255|Info|  Settimeout: id:38, (60) ms
2015-08-22 15:19:44.3805|Info|  Settimeout: id:39, (96) ms
2015-08-22 15:19:44.4325|Info|      Encerrado timer: id:37, (15:19:44.4325)
2015-08-22 15:19:44.4325|Info|      Executando timer: id:38, (15:19:44.4345)
2015-08-22 15:19:44.4325|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.4325|Info|      Encerrado timer: id:38, (15:19:44.4395)
2015-08-22 15:19:44.4796|Info|      Executando timer: id:39, (15:19:44.4796)
2015-08-22 15:19:44.4796|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.4796|Info|  Settimeout: id:40, (13) ms
2015-08-22 15:19:44.5386|Info|      Encerrado timer: id:39, (15:19:44.5386)
2015-08-22 15:19:44.5386|Info|      Executando timer: id:40, (15:19:44.5396)
2015-08-22 15:19:44.5386|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:44.5386|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-08-22 15:19:44.5386|Info|  Settimeout: id:41, (100) ms
2015-08-22 15:19:44.5956|Info|  Settimeout: id:42, (50) ms
2015-08-22 15:19:44.6487|Info|  Settimeout: id:43, (60) ms
2015-08-22 15:19:44.7007|Info|  Settimeout: id:44, (200) ms
2015-08-22 15:19:44.7528|Info|  Settimeout: id:45, (250) ms
2015-08-22 15:19:44.8048|Info|  Settimeout: id:46, (350) ms
2015-08-22 15:19:44.8568|Info|      Encerrado timer: id:40, (15:19:44.8568)
2015-08-22 15:19:44.8568|Info|      Executando timer: id:41, (15:19:44.8588)
2015-08-22 15:19:44.8568|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.8648|Info|      Encerrado timer: id:41, (15:19:44.8648)
2015-08-22 15:19:44.8648|Info|      Executando timer: id:42, (15:19:44.8668)
2015-08-22 15:19:44.8808|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.8808|Info|  Settimeout: id:47, (100) ms
2015-08-22 15:19:44.9339|Info|      Encerrado timer: id:42, (15:19:44.9339)
2015-08-22 15:19:44.9339|Info|      Executando timer: id:43, (15:19:44.9339)
2015-08-22 15:19:44.9339|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.9339|Info|      Encerrado timer: id:43, (15:19:44.9369)
2015-08-22 15:19:44.9339|Info|      Executando timer: id:44, (15:19:44.9379)
2015-08-22 15:19:44.9339|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:44.9339|Info|      Encerrado timer: id:44, (15:19:44.9399)
2015-08-22 15:19:44.9850|Info|      Executando timer: id:47, (15:19:44.9850)
2015-08-22 15:19:44.9850|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:44.9850|Info|      Encerrado timer: id:47, (15:19:44.9869)
2015-08-22 15:19:45.0050|Info|      Executando timer: id:45, (15:19:45.0050)
2015-08-22 15:19:45.0050|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.0050|Info|      Encerrado timer: id:45, (15:19:45.0119)
2015-08-22 15:19:45.1580|Info|      Executando timer: id:46, (15:19:45.1580)
2015-08-22 15:19:45.1610|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.1610|Info|  Settimeout: id:48, (13) ms
2015-08-22 15:19:45.2161|Info|      Encerrado timer: id:46, (15:19:45.2161)
2015-08-22 15:19:45.2161|Info|      Executando timer: id:48, (15:19:45.2171)
2015-08-22 15:19:45.2161|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:45.2161|Info|  Settimeout: id:49, (100) ms
2015-08-22 15:19:45.3192|Info|  Settimeout: id:50, (100) ms
2015-08-22 15:19:45.4192|Info|  Settimeout: id:51, (100) ms
2015-08-22 15:19:45.5183|Info|  Settimeout: id:52, (100) ms
2015-08-22 15:19:45.5703|Info|  Settimeout: id:53, (200) ms
2015-08-22 15:19:45.6224|Info|      Encerrado timer: id:48, (15:19:45.6224)
2015-08-22 15:19:45.6224|Info|      Executando timer: id:52, (15:19:45.6244)
2015-08-22 15:19:45.6224|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:45.6224|Info|      Encerrado timer: id:52, (15:19:45.6294)
2015-08-22 15:19:45.7725|Info|      Executando timer: id:53, (15:19:45.7725)
2015-08-22 15:19:45.7725|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.7725|Info|  Settimeout: id:54, (13) ms
2015-08-22 15:19:45.8255|Info|      Encerrado timer: id:53, (15:19:45.8255)
2015-08-22 15:19:45.8255|Info|      Executando timer: id:54, (15:19:45.8265)
2015-08-22 15:19:45.8255|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:45.8255|Info| PASS - one more throttle with leading: false test
2015-08-22 15:19:45.8335|Info|  Settimeout: id:55, (96) ms
2015-08-22 15:19:45.8866|Info|      Encerrado timer: id:54, (15:19:45.8866)
2015-08-22 15:19:45.9326|Info|      Executando timer: id:55, (15:19:45.9326)
2015-08-22 15:19:45.9326|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:45.9326|Info|  Settimeout: id:56, (96) ms
2015-08-22 15:19:45.9917|Info|      Encerrado timer: id:55, (15:19:45.9917)
2015-08-22 15:19:46.0387|Info|      Executando timer: id:56, (15:19:46.0387)
2015-08-22 15:19:46.0387|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.0387|Info|  Settimeout: id:57, (13) ms
2015-08-22 15:19:46.0987|Info|      Encerrado timer: id:56, (15:19:46.0987)
2015-08-22 15:19:46.0987|Info|      Executando timer: id:57, (15:19:46.1007)
2015-08-22 15:19:46.0987|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.0987|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-22 15:19:46.0987|Info|  Settimeout: id:58, (200) ms
2015-08-22 15:19:46.1638|Info|      Encerrado timer: id:57, (15:19:46.1638)
2015-08-22 15:19:46.3149|Info|      Executando timer: id:58, (15:19:46.3149)
2015-08-22 15:19:46.3179|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.3179|Info|  Settimeout: id:59, (13) ms
2015-08-22 15:19:46.3750|Info|      Encerrado timer: id:58, (15:19:46.3750)
2015-08-22 15:19:46.3750|Info|      Executando timer: id:59, (15:19:46.3759)
2015-08-22 15:19:46.3750|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.3750|Info| PASS - throttle continues to function after system time is set backwards
2015-08-22 15:19:46.3819|Info|  Settimeout: id:60, (32) ms
2015-08-22 15:19:46.4330|Info|  Settimeout: id:61, (100) ms
2015-08-22 15:19:46.4850|Info|      Encerrado timer: id:59, (15:19:46.4850)
2015-08-22 15:19:46.4850|Info|      Executando timer: id:60, (15:19:46.4870)
2015-08-22 15:19:46.4900|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:46.4900|Info|  Settimeout: id:62, (32) ms
2015-08-22 15:19:46.5461|Info|      Encerrado timer: id:60, (15:19:46.5461)
2015-08-22 15:19:46.5461|Info|      Executando timer: id:62, (15:19:46.5480)
2015-08-22 15:19:46.5461|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:46.5530|Info|      Encerrado timer: id:62, (15:19:46.5530)
2015-08-22 15:19:46.5530|Info|      Executando timer: id:61, (15:19:46.5550)
2015-08-22 15:19:46.5530|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.5530|Info|  Settimeout: id:63, (13) ms
2015-08-22 15:19:46.6141|Info|      Encerrado timer: id:61, (15:19:46.6141)
2015-08-22 15:19:46.6141|Info|      Executando timer: id:63, (15:19:46.6151)
2015-08-22 15:19:46.6141|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.6141|Info| PASS - throttle re-entrant
2015-08-22 15:19:46.6141|Info|  Settimeout: id:64, (32) ms
2015-08-22 15:19:46.6702|Info|  Settimeout: id:65, (16) ms
2015-08-22 15:19:46.7222|Info|  Settimeout: id:66, (96) ms
2015-08-22 15:19:46.7742|Info|      Encerrado timer: id:63, (15:19:46.7742)
2015-08-22 15:19:46.7742|Info|      Executando timer: id:64, (15:19:46.7752)
2015-08-22 15:19:46.7742|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:46.7742|Info|      Encerrado timer: id:64, (15:19:46.7772)
2015-08-22 15:19:46.7742|Info|      Executando timer: id:65, (15:19:46.7782)
2015-08-22 15:19:46.7742|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.7742|Info|  Settimeout: id:67, (32) ms
2015-08-22 15:19:46.8303|Info|      Encerrado timer: id:65, (15:19:46.8303)
2015-08-22 15:19:46.8303|Info|      Executando timer: id:67, (15:19:46.8303)
2015-08-22 15:19:46.8303|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:46.8303|Info|      Encerrado timer: id:67, (15:19:46.8322)
2015-08-22 15:19:46.8332|Info|      Executando timer: id:66, (15:19:46.8332)
2015-08-22 15:19:46.8332|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:46.8332|Info|  Settimeout: id:68, (13) ms
2015-08-22 15:19:46.8903|Info|      Encerrado timer: id:66, (15:19:46.8903)
2015-08-22 15:19:46.8903|Info|      Executando timer: id:68, (15:19:46.8913)
2015-08-22 15:19:46.8903|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:46.8963|Info|  Settimeout: id:69, (64) ms
2015-08-22 15:19:46.9493|Info|  Settimeout: id:70, (16) ms
2015-08-22 15:19:47.0003|Info|  Settimeout: id:71, (32) ms
2015-08-22 15:19:47.0524|Info|  Settimeout: id:72, (48) ms
2015-08-22 15:19:47.1044|Info|  Settimeout: id:73, (128) ms
2015-08-22 15:19:47.1565|Info|      Encerrado timer: id:68, (15:19:47.1565)
2015-08-22 15:19:47.1565|Info|      Executando timer: id:69, (15:19:47.1585)
2015-08-22 15:19:47.1615|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.1615|Info|      Encerrado timer: id:69, (15:19:47.1635)
2015-08-22 15:19:47.1615|Info|      Executando timer: id:70, (15:19:47.1655)
2015-08-22 15:19:47.1615|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.1615|Info|  Settimeout: id:74, (64) ms
2015-08-22 15:19:47.2235|Info|      Encerrado timer: id:70, (15:19:47.2235)
2015-08-22 15:19:47.2235|Info|      Executando timer: id:71, (15:19:47.2245)
2015-08-22 15:19:47.2235|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.2235|Info|      Encerrado timer: id:71, (15:19:47.2275)
2015-08-22 15:19:47.2235|Info|      Executando timer: id:72, (15:19:47.2275)
2015-08-22 15:19:47.2235|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.2235|Info|      Encerrado timer: id:72, (15:19:47.2305)
2015-08-22 15:19:47.2235|Info|      Executando timer: id:73, (15:19:47.2355)
2015-08-22 15:19:47.2235|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.2405|Info|  Settimeout: id:75, (13) ms
2015-08-22 15:19:47.2916|Info|      Encerrado timer: id:73, (15:19:47.2916)
2015-08-22 15:19:47.2916|Info|      Executando timer: id:74, (15:19:47.2936)
2015-08-22 15:19:47.2916|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.2916|Info|      Encerrado timer: id:74, (15:19:47.2986)
2015-08-22 15:19:47.3026|Info|      Executando timer: id:75, (15:19:47.3026)
2015-08-22 15:19:47.3026|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:47.3026|Info|  Settimeout: id:76, (32) ms
2015-08-22 15:19:47.3626|Info|  Settimeout: id:77, (96) ms
2015-08-22 15:19:47.4147|Info|      Encerrado timer: id:75, (15:19:47.4147)
2015-08-22 15:19:47.4147|Info|      Executando timer: id:76, (15:19:47.4156)
2015-08-22 15:19:47.4147|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.4147|Info|      Encerrado timer: id:76, (15:19:47.4176)
2015-08-22 15:19:47.4617|Info|      Executando timer: id:77, (15:19:47.4617)
2015-08-22 15:19:47.4617|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.4617|Info|  Settimeout: id:78, (13) ms
2015-08-22 15:19:47.5158|Info|      Encerrado timer: id:77, (15:19:47.5158)
2015-08-22 15:19:47.5158|Info|      Executando timer: id:78, (15:19:47.5167)
2015-08-22 15:19:47.5158|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:47.5158|Info| PASS - debounce asap recursively
2015-08-22 15:19:47.5207|Info|  Settimeout: id:79, (100) ms
2015-08-22 15:19:47.5718|Info|  Settimeout: id:80, (200) ms
2015-08-22 15:19:47.6238|Info|      Encerrado timer: id:78, (15:19:47.6238)
2015-08-22 15:19:47.6238|Info|      Executando timer: id:79, (15:19:47.6258)
2015-08-22 15:19:47.6238|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:47.6308|Info|      Encerrado timer: id:79, (15:19:47.6308)
2015-08-22 15:19:47.7750|Info|      Executando timer: id:80, (15:19:47.7750)
2015-08-22 15:19:47.7750|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:47.7750|Info|  Settimeout: id:81, (100) ms
2015-08-22 15:19:47.8349|Info|  Settimeout: id:82, (13) ms
2015-08-22 15:19:47.8870|Info|      Encerrado timer: id:80, (15:19:47.8870)
2015-08-22 15:19:47.8870|Info|      Executando timer: id:82, (15:19:47.8890)
2015-08-22 15:19:47.8870|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:47.8960|Info| PASS - debounce after system time is set backwards
2015-08-22 15:19:47.8960|Info|  Settimeout: id:83, (32) ms
2015-08-22 15:19:47.9521|Info|  Settimeout: id:84, (100) ms
2015-08-22 15:19:48.0041|Info|      Encerrado timer: id:82, (15:19:48.0041)
2015-08-22 15:19:48.0051|Info|      Executando timer: id:81, (15:19:48.0051)
2015-08-22 15:19:48.0051|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:48.0051|Info|      Encerrado timer: id:81, (15:19:48.0071)
2015-08-22 15:19:48.0051|Info|      Executando timer: id:83, (15:19:48.0081)
2015-08-22 15:19:48.0051|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:48.0051|Info|  Settimeout: id:85, (32) ms
2015-08-22 15:19:48.0631|Info|      Encerrado timer: id:83, (15:19:48.0631)
2015-08-22 15:19:48.0631|Info|      Executando timer: id:85, (15:19:48.0631)
2015-08-22 15:19:48.0631|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:48.0631|Info|      Encerrado timer: id:85, (15:19:48.0651)
2015-08-22 15:19:48.0631|Info|      Executando timer: id:84, (15:19:48.0661)
2015-08-22 15:19:48.0631|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:48.0681|Info|  Settimeout: id:86, (13) ms
2015-08-22 15:19:48.1182|Info|      Encerrado timer: id:84, (15:19:48.1182)
2015-08-22 15:19:48.1182|Info|      Executando timer: id:86, (15:19:48.1182)
2015-08-22 15:19:48.1182|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:48.1182|Info| PASS - debounce re-entrant
2015-08-22 15:19:48.1182|Info| PASS - once
2015-08-22 15:19:48.1182|Info| PASS - Recursive onced function.
2015-08-22 15:19:48.1182|Info| PASS - wrap
2015-08-22 15:19:48.1182|Info| PASS - negate
2015-08-22 15:19:48.1182|Info| PASS - compose
2015-08-22 15:19:48.1182|Info| PASS - after
2015-08-22 15:19:48.1182|Info| PASS - before
2015-08-22 15:19:48.1182|Info| PASS - iteratee
2015-08-22 15:19:48.1302|Info|----------------------------------------
2015-08-22 15:19:48.1302|Info|Objects
2015-08-22 15:19:48.1302|Info|----------------------------------------
2015-08-22 15:19:48.1302|Info| PASS - keys
2015-08-22 15:19:48.1302|Info| PASS - allKeys
2015-08-22 15:19:48.1302|Info| PASS - values
2015-08-22 15:19:48.1302|Info| PASS - pairs
2015-08-22 15:19:48.1302|Info| PASS - invert
2015-08-22 15:19:48.1302|Info| PASS - functions
2015-08-22 15:19:48.1302|Info| PASS - methods
2015-08-22 15:19:48.1302|Info| PASS - extend
2015-08-22 15:19:48.1302|Info| PASS - extendOwn
2015-08-22 15:19:48.1462|Info| PASS - pick
2015-08-22 15:19:48.1462|Info| PASS - omit
2015-08-22 15:19:48.1462|Info| PASS - defaults
2015-08-22 15:19:48.1462|Info| PASS - clone
2015-08-22 15:19:48.1462|Info| PASS - create
2015-08-22 15:19:48.1462|Info| PASS - isEqual
2015-08-22 15:19:48.1462|Info| PASS - isEmpty
2015-08-22 15:19:48.1462|Info| PASS - isArguments
2015-08-22 15:19:48.1462|Info| PASS - isObject
2015-08-22 15:19:48.1462|Info| PASS - isArray
2015-08-22 15:19:48.1612|Info| PASS - isString
2015-08-22 15:19:48.1612|Info| PASS - isNumber
2015-08-22 15:19:48.1612|Info| PASS - isBoolean
2015-08-22 15:19:48.1612|Info| PASS - isFunction
2015-08-22 15:19:48.1612|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-22 15:19:48.1612|Info|    PASS | EQ | can extract the keys from an object
2015-08-22 15:19:48.1612|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1612|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | matches non-enumerable properties
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-22 15:19:48.1772|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-22 15:19:48.1772|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ok
2015-08-22 15:19:48.1772|Info|    PASS | EQ | matches non-enumerable properties
2015-08-22 15:19:48.1772|Info|    PASS | EQ | should include inherited keys
2015-08-22 15:19:48.1772|Info|    PASS | EQ | should get keys from constructor
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can extract the values from an object
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can convert an object into pairs
2015-08-22 15:19:48.1772|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-22 15:19:48.1772|Info|    PASS | EQ | can invert an object
2015-08-22 15:19:48.1772|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can invert an object with "length"
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-22 15:19:48.1932|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-22 15:19:48.1932|Info|    PASS | EQ | alias for functions
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties in source override destination
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can extend from multiple source objects
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extend copies undefined values
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extend copies all properties from source
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-22 15:19:48.1932|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-22 15:19:48.1932|Info|    PASS | EQ | extending null results in null
2015-08-22 15:19:48.1932|Info|    PASS | OK | extending undefined results in undefined
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties in source override destination
2015-08-22 15:19:48.1932|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-22 15:19:48.1932|Info|    PASS | EQ | can assign from multiple source objects
2015-08-22 15:19:48.1932|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-22 15:19:48.1932|Info|    PASS | EQ | assign copies undefined values
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assign copies own properties from source
2015-08-22 15:19:48.2082|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-22 15:19:48.2082|Info|    PASS | OK | assigning undefined results in undefined
2015-08-22 15:19:48.2082|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can restrict properties to those named
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can pick numeric properties
2015-08-22 15:19:48.2082|Info|    PASS | EQ | Called with null/undefined
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | Called with null/undefined
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | can iterate primitives
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2082|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can accept a predicate and context
2015-08-22 15:19:48.2242|Info|    PASS | EQ | include prototype props
2015-08-22 15:19:48.2242|Info|    PASS | EQ | function is given context
2015-08-22 15:19:48.2242|Info|    PASS | EQ | does not set own property if property not in object
2015-08-22 15:19:48.2242|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-22 15:19:48.2242|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-22 15:19:48.2242|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit a single named property
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit several named properties
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit properties named in an array
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can omit numeric properties
2015-08-22 15:19:48.2242|Info|    PASS | EQ | non objects return empty object
2015-08-22 15:19:48.2242|Info|    PASS | EQ | null/undefined return empty object
2015-08-22 15:19:48.2242|Info|    PASS | EQ | returns empty object for primitives
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2242|Info|    PASS | EQ | can accept a predicate
2015-08-22 15:19:48.2402|Info|    PASS | EQ | include prototype props
2015-08-22 15:19:48.2402|Info|    PASS | EQ | function is given context
2015-08-22 15:19:48.2402|Info|    PASS | EQ | value exists
2015-08-22 15:19:48.2402|Info|    PASS | EQ | value exists
2015-08-22 15:19:48.2402|Info|    PASS | EQ | default applied
2015-08-22 15:19:48.2402|Info|    PASS | EQ | null isn't overridden
2015-08-22 15:19:48.2402|Info|    PASS | EQ | value exists
2015-08-22 15:19:48.2402|Info|    PASS | EQ | NaN isn't overridden
2015-08-22 15:19:48.2402|Info|    PASS | EQ | new value is added, first one wins
2015-08-22 15:19:48.2402|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-22 15:19:48.2402|Info|    PASS | EQ | result is null if destination is null
2015-08-22 15:19:48.2402|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-22 15:19:48.2402|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-22 15:19:48.2402|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-22 15:19:48.2402|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-22 15:19:48.2402|Info|    PASS | OK | non objects should not be changed by clone
2015-08-22 15:19:48.2402|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-22 15:19:48.2402|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-22 15:19:48.2402|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2402|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-22 15:19:48.2553|Info|    PASS | EQ | object should inherit prototype
2015-08-22 15:19:48.2553|Info|    PASS | EQ | properties should be added to object
2015-08-22 15:19:48.2553|Info|    PASS | EQ | ok
2015-08-22 15:19:48.2553|Info|    PASS | EQ | should only add own properties
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `null` is equal to `null`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Identical string primitives are equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-22 15:19:48.2553|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Identical number primitives are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-22 15:19:48.2713|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-22 15:19:48.2713|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-22 15:19:48.2713|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Invalid dates are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Flag order is not significant
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-22 15:19:48.2863|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Empty object literals are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Empty array literals are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-22 15:19:48.2863|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Object instances are equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-22 15:19:48.3023|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | `isEqual` can be chained
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-22 15:19:48.3173|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-22 15:19:48.3173|Info|    PASS | EQ | [1] is not empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | [] is empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | {one : 1} is not empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | {} is empty
2015-08-22 15:19:48.3173|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | null is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | undefined is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | the empty string is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but other strings are not
2015-08-22 15:19:48.3333|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-22 15:19:48.3333|Info|    PASS | EQ | empty arguments object is empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-22 15:19:48.3333|Info|    PASS | EQ | a string is not an arguments object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | a function is not an arguments object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but not when it's converted into an array
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not vanilla arrays.
2015-08-22 15:19:48.3333|Info|    PASS | EQ | the arguments object is object
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and arrays
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and functions
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but not null
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not undefined
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not string
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not number
2015-08-22 15:19:48.3333|Info|    PASS | EQ | and not boolean
2015-08-22 15:19:48.3333|Info|    PASS | EQ | but new String()
2015-08-22 15:19:48.3493|Info|    PASS | EQ | undefined vars are not arrays
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the arguments object is not an array
2015-08-22 15:19:48.3493|Info|    PASS | EQ | but arrays are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | but strings are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | string literals are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | so are String objects
2015-08-22 15:19:48.3493|Info|    PASS | EQ | ok
2015-08-22 15:19:48.3493|Info|    PASS | EQ | a string is not a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the arguments object is not a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | undefined is not a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | but numbers are
2015-08-22 15:19:48.3493|Info|    PASS | EQ | NaN *is* a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | Infinity is a number
2015-08-22 15:19:48.3493|Info|    PASS | EQ | numeric strings are not numbers
2015-08-22 15:19:48.3493|Info|    PASS | EQ | a number is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | a string is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-22 15:19:48.3493|Info|    PASS | EQ | undefined is not a boolean
2015-08-22 15:19:48.3653|Info|    PASS | EQ | NaN is not a boolean
2015-08-22 15:19:48.3653|Info|    PASS | EQ | null is not a boolean
2015-08-22 15:19:48.3653|Info|    PASS | EQ | but true is
2015-08-22 15:19:48.3653|Info|    PASS | EQ | and so is false
2015-08-22 15:19:48.3653|Info|    PASS | EQ | undefined vars are not functions
2015-08-22 15:19:48.3653|Info|    PASS | EQ | arrays are not functions
2015-08-22 15:19:48.3653|Info|    PASS | EQ | strings are not functions
2015-08-22 15:19:48.3653|Info|    PASS | EQ | but functions are
2015-08-22 15:19:48.3653|Info|    PASS | EQ | even anonymous ones
2015-08-22 15:19:48.3653|Info|    FAIL | OK | Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined
2015-08-22 15:19:48.3653|Info| PASS - isDate
2015-08-22 15:19:48.3653|Info| PASS - isRegExp
2015-08-22 15:19:48.3653|Info| PASS - isFinite
2015-08-22 15:19:48.3653|Info| PASS - isNaN
2015-08-22 15:19:48.3653|Info| PASS - isNull
2015-08-22 15:19:48.3653|Info| PASS - isUndefined
2015-08-22 15:19:48.3653|Info| PASS - isError
2015-08-22 15:19:48.3803|Info| PASS - tap
2015-08-22 15:19:48.3803|Info| PASS - has
2015-08-22 15:19:48.3803|Info| PASS - isMatch
2015-08-22 15:19:48.3803|Info| PASS - matcher
2015-08-22 15:19:48.3803|Info| PASS - matcher 
2015-08-22 15:19:48.3803|Info| PASS - findKey
2015-08-22 15:19:48.3803|Info| PASS - mapObject
2015-08-22 15:19:48.3803|Info|----------------------------------------
2015-08-22 15:19:48.3803|Info|Utility
2015-08-22 15:19:48.3803|Info|----------------------------------------
2015-08-22 15:19:48.3803|Info| PASS - #750 - Return _ instance.
2015-08-22 15:19:48.3803|Info| PASS - identity
2015-08-22 15:19:48.3803|Info| PASS - constant
2015-08-22 15:19:48.3803|Info| PASS - noop
2015-08-22 15:19:48.3964|Info| PASS - property
2015-08-22 15:19:48.3964|Info| PASS - propertyOf
2015-08-22 15:19:48.3964|Info| PASS - random
2015-08-22 15:19:48.3964|Info| PASS - now
2015-08-22 15:19:48.3964|Info| PASS - uniqueId
2015-08-22 15:19:48.3964|Info| PASS - times
2015-08-22 15:19:48.3964|Info| PASS - mixin
2015-08-22 15:19:48.3964|Info| PASS - _.escape
2015-08-22 15:19:48.3964|Info| PASS - _.unescape
2015-08-22 15:19:48.3964|Info| PASS - _.escape & unescape
2015-08-22 15:19:48.4134|Info| PASS - template
2015-08-22 15:19:48.4134|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-22 15:19:48.4134|Info| PASS - _.template handles \u2028 & \u2029
2015-08-22 15:19:48.4134|Info| PASS - result calls functions and returns primitives
2015-08-22 15:19:48.4134|Info| PASS - result returns a default value if object is null or undefined
2015-08-22 15:19:48.4134|Info| PASS - result returns a default value if property of object is missing
2015-08-22 15:19:48.4134|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-22 15:19:48.4134|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-22 15:19:48.4134|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-22 15:19:48.4134|Info| PASS - result fallback can use a function
2015-08-22 15:19:48.4134|Info| PASS - _.templateSettings.variable
2015-08-22 15:19:48.4134|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-22 15:19:48.4284|Info| PASS - #556 - undefined template variables.
2015-08-22 15:19:48.4284|Info| PASS - interpolate evaluates code only once.
2015-08-22 15:19:48.4284|Info| PASS - #746 - _.template settings are not modified.
2015-08-22 15:19:48.4284|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-22 15:19:48.4284|Info|  Settimeout: id:87, (100) ms
2015-08-22 15:19:48.4845|Info|  Settimeout: id:88, (50) ms
2015-08-22 15:19:48.5364|Info|  Settimeout: id:89, (150) ms
2015-08-22 15:19:48.5885|Info|      Encerrado timer: id:86, (15:19:48.5885)
2015-08-22 15:19:48.5885|Info|      Executando timer: id:87, (15:19:48.5905)
2015-08-22 15:19:48.5885|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:48.5885|Info|      Encerrado timer: id:87, (15:19:48.5955)
2015-08-22 15:19:48.5995|Info|      Executando timer: id:88, (15:19:48.5995)
2015-08-22 15:19:48.5995|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:48.5995|Info|      Encerrado timer: id:88, (15:19:48.6075)
2015-08-22 15:19:48.6896|Info|      Executando timer: id:89, (15:19:48.6896)
2015-08-22 15:19:48.6896|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:48.6936|Info|  Settimeout: id:90, (13) ms
2015-08-22 15:19:48.7456|Info|      Encerrado timer: id:89, (15:19:48.7456)
2015-08-22 15:19:48.7456|Info|      Executando timer: id:90, (15:19:48.7466)
2015-08-22 15:19:48.7456|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:48.7456|Info|  Settimeout: id:91, (100) ms
2015-08-22 15:19:48.8026|Info|  Settimeout: id:92, (50) ms
2015-08-22 15:19:48.8557|Info|  Settimeout: id:93, (150) ms
2015-08-22 15:19:48.9087|Info|  Settimeout: id:94, (160) ms
2015-08-22 15:19:48.9608|Info|  Settimeout: id:95, (230) ms
2015-08-22 15:19:49.0138|Info|  Settimeout: id:96, (300) ms
2015-08-22 15:19:49.0659|Info|      Encerrado timer: id:90, (15:19:49.0659)
2015-08-22 15:19:49.0678|Info|      Executando timer: id:91, (15:19:49.0678)
2015-08-22 15:19:49.0678|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.0678|Info|      Encerrado timer: id:91, (15:19:49.0728)
2015-08-22 15:19:49.0678|Info|      Executando timer: id:92, (15:19:49.0748)
2015-08-22 15:19:49.0678|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.0838|Info|  Settimeout: id:97, (91) ms
2015-08-22 15:19:49.1359|Info|      Encerrado timer: id:92, (15:19:49.1359)
2015-08-22 15:19:49.1359|Info|      Executando timer: id:93, (15:19:49.1379)
2015-08-22 15:19:49.1359|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.1359|Info|      Encerrado timer: id:93, (15:19:49.1419)
2015-08-22 15:19:49.1359|Info|      Executando timer: id:94, (15:19:49.1439)
2015-08-22 15:19:49.1469|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.1469|Info|      Encerrado timer: id:94, (15:19:49.1489)
2015-08-22 15:19:49.1779|Info|      Executando timer: id:97, (15:19:49.1779)
2015-08-22 15:19:49.1779|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.1779|Info|      Encerrado timer: id:97, (15:19:49.1829)
2015-08-22 15:19:49.1929|Info|      Executando timer: id:95, (15:19:49.1929)
2015-08-22 15:19:49.1929|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.1929|Info|  Settimeout: id:98, (86) ms
2015-08-22 15:19:49.2510|Info|      Encerrado timer: id:95, (15:19:49.2510)
2015-08-22 15:19:49.2880|Info|      Executando timer: id:98, (15:19:49.2880)
2015-08-22 15:19:49.2880|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.2880|Info|      Encerrado timer: id:98, (15:19:49.2930)
2015-08-22 15:19:49.3171|Info|      Executando timer: id:96, (15:19:49.3171)
2015-08-22 15:19:49.3200|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.3200|Info|  Settimeout: id:99, (13) ms
2015-08-22 15:19:49.3791|Info|      Encerrado timer: id:96, (15:19:49.3791)
2015-08-22 15:19:49.3800|Info|      Executando timer: id:99, (15:19:49.3800)
2015-08-22 15:19:49.3800|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:49.3800|Info|  Settimeout: id:100, (32) ms
2015-08-22 15:19:49.4371|Info|  Settimeout: id:101, (96) ms
2015-08-22 15:19:49.4892|Info|      Encerrado timer: id:99, (15:19:49.4892)
2015-08-22 15:19:49.4892|Info|      Executando timer: id:100, (15:19:49.4911)
2015-08-22 15:19:49.4892|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.4892|Info|      Encerrado timer: id:100, (15:19:49.4961)
2015-08-22 15:19:49.5362|Info|      Executando timer: id:101, (15:19:49.5362)
2015-08-22 15:19:49.5362|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.5362|Info|  Settimeout: id:102, (13) ms
2015-08-22 15:19:49.5942|Info|      Encerrado timer: id:101, (15:19:49.5942)
2015-08-22 15:19:49.5942|Info|      Executando timer: id:102, (15:19:49.5962)
2015-08-22 15:19:49.5942|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:49.6022|Info|  Settimeout: id:103, (100) ms
2015-08-22 15:19:49.6552|Info|  Settimeout: id:104, (50) ms
2015-08-22 15:19:49.7183|Info|  Settimeout: id:105, (60) ms
2015-08-22 15:19:49.7703|Info|  Settimeout: id:106, (200) ms
2015-08-22 15:19:49.8234|Info|  Settimeout: id:107, (250) ms
2015-08-22 15:19:49.8764|Info|  Settimeout: id:108, (350) ms
2015-08-22 15:19:49.9275|Info|      Encerrado timer: id:102, (15:19:49.9275)
2015-08-22 15:19:49.9275|Info|      Executando timer: id:103, (15:19:49.9284)
2015-08-22 15:19:49.9275|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:49.9275|Info|      Encerrado timer: id:103, (15:19:49.9314)
2015-08-22 15:19:49.9275|Info|      Executando timer: id:104, (15:19:49.9324)
2015-08-22 15:19:49.9275|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.9275|Info|  Settimeout: id:109, (100) ms
2015-08-22 15:19:49.9865|Info|      Encerrado timer: id:104, (15:19:49.9865)
2015-08-22 15:19:49.9865|Info|      Executando timer: id:105, (15:19:49.9885)
2015-08-22 15:19:49.9905|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.9905|Info|      Encerrado timer: id:105, (15:19:49.9935)
2015-08-22 15:19:49.9905|Info|      Executando timer: id:106, (15:19:49.9955)
2015-08-22 15:19:49.9905|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:49.9905|Info|      Encerrado timer: id:106, (15:19:49.9995)
2015-08-22 15:19:50.0375|Info|      Executando timer: id:109, (15:19:50.0375)
2015-08-22 15:19:50.0375|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:50.0375|Info|      Encerrado timer: id:109, (15:19:50.0425)
2015-08-22 15:19:50.0766|Info|      Executando timer: id:107, (15:19:50.0766)
2015-08-22 15:19:50.0766|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.0835|Info|      Encerrado timer: id:107, (15:19:50.0835)
2015-08-22 15:19:50.2287|Info|      Executando timer: id:108, (15:19:50.2287)
2015-08-22 15:19:50.2287|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.2287|Info|  Settimeout: id:110, (13) ms
2015-08-22 15:19:50.2827|Info|      Encerrado timer: id:108, (15:19:50.2827)
2015-08-22 15:19:50.2827|Info|      Executando timer: id:110, (15:19:50.2847)
2015-08-22 15:19:50.2877|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:50.2877|Info|  Settimeout: id:111, (32) ms
2015-08-22 15:19:50.3448|Info|  Settimeout: id:112, (16) ms
2015-08-22 15:19:50.3978|Info|  Settimeout: id:113, (96) ms
2015-08-22 15:19:50.4498|Info|      Encerrado timer: id:110, (15:19:50.4498)
2015-08-22 15:19:50.4498|Info|      Executando timer: id:111, (15:19:50.4498)
2015-08-22 15:19:50.4498|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.4498|Info|      Encerrado timer: id:111, (15:19:50.4528)
2015-08-22 15:19:50.4498|Info|      Executando timer: id:112, (15:19:50.4528)
2015-08-22 15:19:50.4498|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.4498|Info|  Settimeout: id:114, (32) ms
2015-08-22 15:19:50.5058|Info|      Encerrado timer: id:112, (15:19:50.5058)
2015-08-22 15:19:50.5058|Info|      Executando timer: id:114, (15:19:50.5068)
2015-08-22 15:19:50.5058|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.5058|Info|      Encerrado timer: id:114, (15:19:50.5088)
2015-08-22 15:19:50.5058|Info|      Executando timer: id:113, (15:19:50.5098)
2015-08-22 15:19:50.5058|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.5058|Info|  Settimeout: id:115, (13) ms
2015-08-22 15:19:50.5649|Info|      Encerrado timer: id:113, (15:19:50.5649)
2015-08-22 15:19:50.5649|Info|      Executando timer: id:115, (15:19:50.5649)
2015-08-22 15:19:50.5649|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:50.5649|Info|  Settimeout: id:116, (64) ms
2015-08-22 15:19:50.6179|Info|  Settimeout: id:117, (16) ms
2015-08-22 15:19:50.6760|Info|  Settimeout: id:118, (32) ms
2015-08-22 15:19:50.7271|Info|  Settimeout: id:119, (48) ms
2015-08-22 15:19:50.7781|Info|  Settimeout: id:120, (128) ms
2015-08-22 15:19:50.8301|Info|      Encerrado timer: id:115, (15:19:50.8301)
2015-08-22 15:19:50.8301|Info|      Executando timer: id:116, (15:19:50.8311)
2015-08-22 15:19:50.8301|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.8331|Info|      Encerrado timer: id:116, (15:19:50.8331)
2015-08-22 15:19:50.8331|Info|      Executando timer: id:117, (15:19:50.8341)
2015-08-22 15:19:50.8331|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.8331|Info|  Settimeout: id:121, (64) ms
2015-08-22 15:19:50.8871|Info|      Encerrado timer: id:117, (15:19:50.8871)
2015-08-22 15:19:50.8871|Info|      Executando timer: id:118, (15:19:50.8891)
2015-08-22 15:19:50.8871|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.8871|Info|      Encerrado timer: id:118, (15:19:50.8931)
2015-08-22 15:19:50.8961|Info|      Executando timer: id:119, (15:19:50.8961)
2015-08-22 15:19:50.8961|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.8961|Info|      Encerrado timer: id:119, (15:19:50.9021)
2015-08-22 15:19:50.8961|Info|      Executando timer: id:121, (15:19:50.9041)
2015-08-22 15:19:50.8961|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:50.8961|Info|  Settimeout: id:122, (57) ms
2015-08-22 15:19:50.9622|Info|      Encerrado timer: id:121, (15:19:50.9622)
2015-08-22 15:19:50.9622|Info|      Executando timer: id:120, (15:19:50.9632)
2015-08-22 15:19:50.9622|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:50.9622|Info|  Settimeout: id:123, (13) ms
2015-08-22 15:19:51.0173|Info|      Encerrado timer: id:120, (15:19:51.0173)
2015-08-22 15:19:51.0173|Info|      Executando timer: id:122, (15:19:51.0182)
2015-08-22 15:19:51.0173|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:51.0173|Info|      Encerrado timer: id:122, (15:19:51.0202)
2015-08-22 15:19:51.0173|Info|      Executando timer: id:123, (15:19:51.0202)
2015-08-22 15:19:51.0222|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:51.0222|Info|  Settimeout: id:124, (100) ms
2015-08-22 15:19:51.0743|Info|  Settimeout: id:125, (50) ms
2015-08-22 15:19:51.1263|Info|  Settimeout: id:126, (150) ms
2015-08-22 15:19:51.1783|Info|      Encerrado timer: id:123, (15:19:51.1783)
2015-08-22 15:19:51.1783|Info|      Executando timer: id:124, (15:19:51.1793)
2015-08-22 15:19:51.1783|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.1783|Info|      Encerrado timer: id:124, (15:19:51.1823)
2015-08-22 15:19:51.1783|Info|      Executando timer: id:125, (15:19:51.1823)
2015-08-22 15:19:51.1783|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:51.1783|Info|      Encerrado timer: id:125, (15:19:51.1863)
2015-08-22 15:19:51.2794|Info|      Executando timer: id:126, (15:19:51.2794)
2015-08-22 15:19:51.2794|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:51.2794|Info|  Settimeout: id:127, (13) ms
2015-08-22 15:19:51.3375|Info|      Encerrado timer: id:126, (15:19:51.3375)
2015-08-22 15:19:51.3375|Info|      Executando timer: id:127, (15:19:51.3394)
2015-08-22 15:19:51.3375|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:51.3375|Info|  Settimeout: id:128, (100) ms
2015-08-22 15:19:51.3985|Info|  Settimeout: id:129, (50) ms
2015-08-22 15:19:51.4505|Info|  Settimeout: id:130, (150) ms
2015-08-22 15:19:51.5025|Info|  Settimeout: id:131, (160) ms
2015-08-22 15:19:51.5561|Info|  Settimeout: id:132, (230) ms
2015-08-22 15:19:51.6103|Info|  Settimeout: id:133, (300) ms
2015-08-22 15:19:51.6634|Info|      Encerrado timer: id:127, (15:19:51.6634)
2015-08-22 15:19:51.6634|Info|      Executando timer: id:128, (15:19:51.6644)
2015-08-22 15:19:51.6634|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:51.6634|Info|      Encerrado timer: id:128, (15:19:51.6694)
2015-08-22 15:19:51.6634|Info|      Executando timer: id:129, (15:19:51.6704)
2015-08-22 15:19:51.6634|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.6634|Info|  Settimeout: id:134, (96) ms
2015-08-22 15:19:51.7272|Info|      Encerrado timer: id:129, (15:19:51.7272)
2015-08-22 15:19:51.7272|Info|      Executando timer: id:130, (15:19:51.7291)
2015-08-22 15:19:51.7272|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.7272|Info|      Encerrado timer: id:130, (15:19:51.7341)
2015-08-22 15:19:51.7272|Info|      Executando timer: id:131, (15:19:51.7361)
2015-08-22 15:19:51.7272|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.7401|Info|      Encerrado timer: id:131, (15:19:51.7401)
2015-08-22 15:19:51.7732|Info|      Executando timer: id:134, (15:19:51.7732)
2015-08-22 15:19:51.7732|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:51.7732|Info|      Encerrado timer: id:134, (15:19:51.7762)
2015-08-22 15:19:51.7892|Info|      Executando timer: id:132, (15:19:51.7892)
2015-08-22 15:19:51.7892|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.7892|Info|  Settimeout: id:135, (84) ms
2015-08-22 15:19:51.8442|Info|      Encerrado timer: id:132, (15:19:51.8442)
2015-08-22 15:19:51.8783|Info|      Executando timer: id:135, (15:19:51.8783)
2015-08-22 15:19:51.8783|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:51.8812|Info|      Encerrado timer: id:135, (15:19:51.8812)
2015-08-22 15:19:51.9143|Info|      Executando timer: id:133, (15:19:51.9143)
2015-08-22 15:19:51.9143|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:51.9143|Info|  Settimeout: id:136, (13) ms
2015-08-22 15:19:51.9764|Info|      Encerrado timer: id:133, (15:19:51.9764)
2015-08-22 15:19:51.9764|Info|      Executando timer: id:136, (15:19:51.9783)
2015-08-22 15:19:51.9764|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:51.9764|Info|  Settimeout: id:137, (32) ms
2015-08-22 15:19:52.0384|Info|  Settimeout: id:138, (96) ms
2015-08-22 15:19:52.0914|Info|      Encerrado timer: id:136, (15:19:52.0914)
2015-08-22 15:19:52.0914|Info|      Executando timer: id:137, (15:19:52.0924)
2015-08-22 15:19:52.0914|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:52.0914|Info|      Encerrado timer: id:137, (15:19:52.0944)
2015-08-22 15:19:52.1375|Info|      Executando timer: id:138, (15:19:52.1375)
2015-08-22 15:19:52.1375|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.1375|Info|  Settimeout: id:139, (13) ms
2015-08-22 15:19:52.1905|Info|      Encerrado timer: id:138, (15:19:52.1905)
2015-08-22 15:19:52.1925|Info|      Executando timer: id:139, (15:19:52.1925)
2015-08-22 15:19:52.1925|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:52.1925|Info|  Settimeout: id:140, (100) ms
2015-08-22 15:19:52.2515|Info|  Settimeout: id:141, (50) ms
2015-08-22 15:19:52.3045|Info|  Settimeout: id:142, (60) ms
2015-08-22 15:19:52.3606|Info|  Settimeout: id:143, (200) ms
2015-08-22 15:19:52.4126|Info|  Settimeout: id:144, (250) ms
2015-08-22 15:19:52.4637|Info|  Settimeout: id:145, (350) ms
2015-08-22 15:19:52.5147|Info|      Encerrado timer: id:139, (15:19:52.5147)
2015-08-22 15:19:52.5147|Info|      Executando timer: id:140, (15:19:52.5167)
2015-08-22 15:19:52.5147|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:52.5217|Info|      Encerrado timer: id:140, (15:19:52.5217)
2015-08-22 15:19:52.5217|Info|      Executando timer: id:141, (15:19:52.5227)
2015-08-22 15:19:52.5217|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.5217|Info|  Settimeout: id:146, (100) ms
2015-08-22 15:19:52.5827|Info|      Encerrado timer: id:141, (15:19:52.5827)
2015-08-22 15:19:52.5837|Info|      Executando timer: id:142, (15:19:52.5837)
2015-08-22 15:19:52.5837|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.5837|Info|      Encerrado timer: id:142, (15:19:52.5857)
2015-08-22 15:19:52.5837|Info|      Executando timer: id:143, (15:19:52.5867)
2015-08-22 15:19:52.5837|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.5837|Info|      Encerrado timer: id:143, (15:19:52.5927)
2015-08-22 15:19:52.6338|Info|      Executando timer: id:146, (15:19:52.6338)
2015-08-22 15:19:52.6338|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:52.6338|Info|      Encerrado timer: id:146, (15:19:52.6358)
2015-08-22 15:19:52.6648|Info|      Executando timer: id:144, (15:19:52.6648)
2015-08-22 15:19:52.6648|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.6648|Info|      Encerrado timer: id:144, (15:19:52.6678)
2015-08-22 15:19:52.8160|Info|      Executando timer: id:145, (15:19:52.8160)
2015-08-22 15:19:52.8179|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:52.8179|Info|  Settimeout: id:147, (13) ms
2015-08-22 15:19:52.8710|Info|      Encerrado timer: id:145, (15:19:52.8710)
2015-08-22 15:19:52.8710|Info|      Executando timer: id:147, (15:19:52.8720)
2015-08-22 15:19:52.8710|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:52.8710|Info|  Settimeout: id:148, (32) ms
2015-08-22 15:19:52.9290|Info|  Settimeout: id:149, (16) ms
2015-08-22 15:19:52.9820|Info|  Settimeout: id:150, (96) ms
2015-08-22 15:19:53.0341|Info|      Encerrado timer: id:147, (15:19:53.0341)
2015-08-22 15:19:53.0361|Info|      Executando timer: id:148, (15:19:53.0361)
2015-08-22 15:19:53.0361|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.0361|Info|      Encerrado timer: id:148, (15:19:53.0411)
2015-08-22 15:19:53.0361|Info|      Executando timer: id:149, (15:19:53.0431)
2015-08-22 15:19:53.0361|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.0361|Info|  Settimeout: id:151, (32) ms
2015-08-22 15:19:53.0981|Info|      Encerrado timer: id:149, (15:19:53.0981)
2015-08-22 15:19:53.0981|Info|      Executando timer: id:151, (15:19:53.0981)
2015-08-22 15:19:53.0991|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.0991|Info|      Encerrado timer: id:151, (15:19:53.1001)
2015-08-22 15:19:53.0991|Info|      Executando timer: id:150, (15:19:53.1011)
2015-08-22 15:19:53.0991|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.0991|Info|  Settimeout: id:152, (13) ms
2015-08-22 15:19:53.1552|Info|      Encerrado timer: id:150, (15:19:53.1552)
2015-08-22 15:19:53.1552|Info|      Executando timer: id:152, (15:19:53.1561)
2015-08-22 15:19:53.1552|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:53.1611|Info|  Settimeout: id:153, (64) ms
2015-08-22 15:19:53.2132|Info|  Settimeout: id:154, (16) ms
2015-08-22 15:19:53.2642|Info|  Settimeout: id:155, (32) ms
2015-08-22 15:19:53.3173|Info|  Settimeout: id:156, (48) ms
2015-08-22 15:19:53.3703|Info|  Settimeout: id:157, (128) ms
2015-08-22 15:19:53.4224|Info|      Encerrado timer: id:152, (15:19:53.4224)
2015-08-22 15:19:53.4224|Info|      Executando timer: id:153, (15:19:53.4233)
2015-08-22 15:19:53.4224|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.4224|Info|      Encerrado timer: id:153, (15:19:53.4263)
2015-08-22 15:19:53.4273|Info|      Executando timer: id:154, (15:19:53.4273)
2015-08-22 15:19:53.4273|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.4273|Info|  Settimeout: id:158, (64) ms
2015-08-22 15:19:53.4824|Info|      Encerrado timer: id:154, (15:19:53.4824)
2015-08-22 15:19:53.4824|Info|      Executando timer: id:155, (15:19:53.4834)
2015-08-22 15:19:53.4824|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.4824|Info|      Encerrado timer: id:155, (15:19:53.4874)
2015-08-22 15:19:53.4824|Info|      Executando timer: id:156, (15:19:53.4884)
2015-08-22 15:19:53.4904|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.4904|Info|      Encerrado timer: id:156, (15:19:53.4914)
2015-08-22 15:19:53.4904|Info|      Executando timer: id:158, (15:19:53.4974)
2015-08-22 15:19:53.4904|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.4904|Info|  Settimeout: id:159, (54) ms
2015-08-22 15:19:53.5535|Info|      Encerrado timer: id:158, (15:19:53.5535)
2015-08-22 15:19:53.5535|Info|      Executando timer: id:157, (15:19:53.5554)
2015-08-22 15:19:53.5535|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.5535|Info|  Settimeout: id:160, (13) ms
2015-08-22 15:19:53.6145|Info|      Encerrado timer: id:157, (15:19:53.6145)
2015-08-22 15:19:53.6145|Info|      Executando timer: id:159, (15:19:53.6155)
2015-08-22 15:19:53.6145|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:53.6145|Info|      Encerrado timer: id:159, (15:19:53.6175)
2015-08-22 15:19:53.6145|Info|      Executando timer: id:160, (15:19:53.6175)
2015-08-22 15:19:53.6145|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:53.6145|Info|  Settimeout: id:161, (100) ms
2015-08-22 15:19:53.6725|Info|  Settimeout: id:162, (50) ms
2015-08-22 15:19:53.7285|Info|  Settimeout: id:163, (150) ms
2015-08-22 15:19:53.7816|Info|      Encerrado timer: id:160, (15:19:53.7816)
2015-08-22 15:19:53.7816|Info|      Executando timer: id:161, (15:19:53.7836)
2015-08-22 15:19:53.7816|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:53.7886|Info|      Encerrado timer: id:161, (15:19:53.7886)
2015-08-22 15:19:53.7886|Info|      Executando timer: id:162, (15:19:53.7896)
2015-08-22 15:19:53.7886|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-22 15:19:53.7886|Info|      Encerrado timer: id:162, (15:19:53.7986)
2015-08-22 15:19:53.8817|Info|      Executando timer: id:163, (15:19:53.8817)
2015-08-22 15:19:53.8817|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-22 15:19:53.8817|Info|  Settimeout: id:164, (13) ms
2015-08-22 15:19:53.9397|Info|      Encerrado timer: id:163, (15:19:53.9397)
2015-08-22 15:19:53.9397|Info|      Executando timer: id:164, (15:19:53.9407)
2015-08-22 15:19:53.9427|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:53.9427|Info|----------------------------------------
2015-08-22 15:19:53.9427|Info|Functions
2015-08-22 15:19:53.9427|Info|----------------------------------------
2015-08-22 15:19:53.9427|Info| FAIL - delay
2015-08-22 15:19:53.9427|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:53.9427|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:53.9427|Info|  Settimeout: id:165, (100) ms
2015-08-22 15:19:54.0077|Info|  Settimeout: id:166, (50) ms
2015-08-22 15:19:54.0598|Info|  Settimeout: id:167, (150) ms
2015-08-22 15:19:54.1128|Info|  Settimeout: id:168, (160) ms
2015-08-22 15:19:54.1649|Info|  Settimeout: id:169, (230) ms
2015-08-22 15:19:54.2179|Info|  Settimeout: id:170, (300) ms
2015-08-22 15:19:54.2700|Info|      Encerrado timer: id:164, (15:19:54.2700)
2015-08-22 15:19:54.2709|Info|      Executando timer: id:165, (15:19:54.2709)
2015-08-22 15:19:54.2709|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.2709|Info|      Encerrado timer: id:165, (15:19:54.2729)
2015-08-22 15:19:54.2709|Info|      Executando timer: id:166, (15:19:54.2739)
2015-08-22 15:19:54.2709|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.2709|Info|  Settimeout: id:171, (98) ms
2015-08-22 15:19:54.3260|Info|      Encerrado timer: id:166, (15:19:54.3260)
2015-08-22 15:19:54.3260|Info|      Executando timer: id:167, (15:19:54.3270)
2015-08-22 15:19:54.3260|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.3260|Info|      Encerrado timer: id:167, (15:19:54.3310)
2015-08-22 15:19:54.3260|Info|      Executando timer: id:168, (15:19:54.3320)
2015-08-22 15:19:54.3340|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.3340|Info|      Encerrado timer: id:168, (15:19:54.3360)
2015-08-22 15:19:54.3750|Info|      Executando timer: id:171, (15:19:54.3750)
2015-08-22 15:19:54.3750|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.3820|Info|      Encerrado timer: id:171, (15:19:54.3820)
2015-08-22 15:19:54.3980|Info|      Executando timer: id:169, (15:19:54.3980)
2015-08-22 15:19:54.3980|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.3980|Info|  Settimeout: id:172, (82) ms
2015-08-22 15:19:54.4521|Info|      Encerrado timer: id:169, (15:19:54.4521)
2015-08-22 15:19:54.4851|Info|      Executando timer: id:172, (15:19:54.4851)
2015-08-22 15:19:54.4851|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.4851|Info|      Encerrado timer: id:172, (15:19:54.4871)
2015-08-22 15:19:54.5202|Info|      Executando timer: id:170, (15:19:54.5202)
2015-08-22 15:19:54.5211|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.5211|Info|  Settimeout: id:173, (13) ms
2015-08-22 15:19:54.5742|Info|      Encerrado timer: id:170, (15:19:54.5742)
2015-08-22 15:19:54.5742|Info|      Executando timer: id:173, (15:19:54.5761)
2015-08-22 15:19:54.5742|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:54.5742|Info| FAIL - throttle repeatedly with results
2015-08-22 15:19:54.5842|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:54.5842|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:54.5842|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:54.5842|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.5842|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:54.5842|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:54.6012|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.6012|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:54.6012|Info|  Settimeout: id:174, (32) ms
2015-08-22 15:19:54.6572|Info|  Settimeout: id:175, (96) ms
2015-08-22 15:19:54.7093|Info|      Encerrado timer: id:173, (15:19:54.7093)
2015-08-22 15:19:54.7093|Info|      Executando timer: id:174, (15:19:54.7093)
2015-08-22 15:19:54.7093|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:54.7093|Info|      Encerrado timer: id:174, (15:19:54.7112)
2015-08-22 15:19:54.7553|Info|      Executando timer: id:175, (15:19:54.7553)
2015-08-22 15:19:54.7553|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:54.7553|Info|  Settimeout: id:176, (13) ms
2015-08-22 15:19:54.8083|Info|      Encerrado timer: id:175, (15:19:54.8083)
2015-08-22 15:19:54.8083|Info|      Executando timer: id:176, (15:19:54.8103)
2015-08-22 15:19:54.8083|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:54.8083|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-22 15:19:54.8173|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:54.8173|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:54.8173|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:54.8173|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.8173|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:54.8333|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:54.8333|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:54.8333|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:54.8333|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:19:54.8333|Info|    PASS | EQ | okay
2015-08-22 15:19:54.8333|Info|  Settimeout: id:177, (100) ms
2015-08-22 15:19:54.8954|Info|  Settimeout: id:178, (50) ms
2015-08-22 15:19:54.9474|Info|  Settimeout: id:179, (60) ms
2015-08-22 15:19:55.0005|Info|  Settimeout: id:180, (200) ms
2015-08-22 15:19:55.0525|Info|  Settimeout: id:181, (250) ms
2015-08-22 15:19:55.1045|Info|  Settimeout: id:182, (350) ms
2015-08-22 15:19:55.1566|Info|      Encerrado timer: id:176, (15:19:55.1566)
2015-08-22 15:19:55.1566|Info|      Executando timer: id:177, (15:19:55.1586)
2015-08-22 15:19:55.1566|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:55.1626|Info|      Encerrado timer: id:177, (15:19:55.1626)
2015-08-22 15:19:55.1626|Info|      Executando timer: id:178, (15:19:55.1646)
2015-08-22 15:19:55.1626|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.1626|Info|  Settimeout: id:183, (100) ms
2015-08-22 15:19:55.2226|Info|      Encerrado timer: id:178, (15:19:55.2226)
2015-08-22 15:19:55.2256|Info|      Executando timer: id:179, (15:19:55.2256)
2015-08-22 15:19:55.2256|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.2256|Info|      Encerrado timer: id:179, (15:19:55.2306)
2015-08-22 15:19:55.2256|Info|      Executando timer: id:180, (15:19:55.2326)
2015-08-22 15:19:55.2256|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.2256|Info|      Encerrado timer: id:180, (15:19:55.2356)
2015-08-22 15:19:55.2736|Info|      Executando timer: id:183, (15:19:55.2736)
2015-08-22 15:19:55.2736|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-22 15:19:55.2736|Info|      Encerrado timer: id:183, (15:19:55.2766)
2015-08-22 15:19:55.3047|Info|      Executando timer: id:181, (15:19:55.3047)
2015-08-22 15:19:55.3047|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.3047|Info|      Encerrado timer: id:181, (15:19:55.3067)
2015-08-22 15:19:55.4578|Info|      Executando timer: id:182, (15:19:55.4578)
2015-08-22 15:19:55.4608|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.4608|Info|  Settimeout: id:184, (13) ms
2015-08-22 15:19:55.5168|Info|      Encerrado timer: id:182, (15:19:55.5168)
2015-08-22 15:19:55.5168|Info|      Executando timer: id:184, (15:19:55.5178)
2015-08-22 15:19:55.5168|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:55.5208|Info| FAIL - more throttle does not trigger leading call when leading is set to false
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:55.5208|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:55.5208|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:19:55.5208|Info|    PASS | EQ | okay
2015-08-22 15:19:55.5208|Info|    PASS | EQ | ok
2015-08-22 15:19:55.5208|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-22 15:19:55.5368|Info|    PASS | EQ | ok
2015-08-22 15:19:55.5368|Info|  Settimeout: id:185, (32) ms
2015-08-22 15:19:55.5889|Info|  Settimeout: id:186, (16) ms
2015-08-22 15:19:55.6419|Info|  Settimeout: id:187, (96) ms
2015-08-22 15:19:55.6940|Info|      Encerrado timer: id:184, (15:19:55.6940)
2015-08-22 15:19:55.6940|Info|      Executando timer: id:185, (15:19:55.6960)
2015-08-22 15:19:55.6940|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:55.6940|Info|      Encerrado timer: id:185, (15:19:55.7009)
2015-08-22 15:19:55.6940|Info|      Executando timer: id:186, (15:19:55.7019)
2015-08-22 15:19:55.6940|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.7089|Info|  Settimeout: id:188, (32) ms
2015-08-22 15:19:55.7621|Info|      Encerrado timer: id:186, (15:19:55.7621)
2015-08-22 15:19:55.7621|Info|      Executando timer: id:187, (15:19:55.7630)
2015-08-22 15:19:55.7621|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:55.7621|Info|  Settimeout: id:189, (13) ms
2015-08-22 15:19:55.8191|Info|      Encerrado timer: id:187, (15:19:55.8191)
2015-08-22 15:19:55.8191|Info|      Executando timer: id:188, (15:19:55.8200)
2015-08-22 15:19:55.8191|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:55.8191|Info|      Encerrado timer: id:188, (15:19:55.8230)
2015-08-22 15:19:55.8191|Info|      Executando timer: id:189, (15:19:55.8240)
2015-08-22 15:19:55.8191|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:55.8191|Info| PASS - debounce
2015-08-22 15:19:55.8191|Info|  Settimeout: id:190, (64) ms
2015-08-22 15:19:55.8831|Info|  Settimeout: id:191, (16) ms
2015-08-22 15:19:55.9341|Info|  Settimeout: id:192, (32) ms
2015-08-22 15:19:55.9862|Info|  Settimeout: id:193, (48) ms
2015-08-22 15:19:56.0372|Info|  Settimeout: id:194, (128) ms
2015-08-22 15:19:56.0882|Info|      Encerrado timer: id:189, (15:19:56.0882)
2015-08-22 15:19:56.0882|Info|      Executando timer: id:190, (15:19:56.0902)
2015-08-22 15:19:56.0882|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:56.0882|Info|      Encerrado timer: id:190, (15:19:56.0952)
2015-08-22 15:19:56.0882|Info|      Executando timer: id:191, (15:19:56.0962)
2015-08-22 15:19:56.1002|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1002|Info|  Settimeout: id:195, (64) ms
2015-08-22 15:19:56.1553|Info|      Encerrado timer: id:191, (15:19:56.1553)
2015-08-22 15:19:56.1553|Info|      Executando timer: id:192, (15:19:56.1563)
2015-08-22 15:19:56.1553|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1553|Info|      Encerrado timer: id:192, (15:19:56.1593)
2015-08-22 15:19:56.1553|Info|      Executando timer: id:193, (15:19:56.1603)
2015-08-22 15:19:56.1613|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1613|Info|      Encerrado timer: id:193, (15:19:56.1633)
2015-08-22 15:19:56.1613|Info|      Executando timer: id:194, (15:19:56.1673)
2015-08-22 15:19:56.1613|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-22 15:19:56.1793|Info|  Settimeout: id:196, (13) ms
2015-08-22 15:19:56.2303|Info|      Encerrado timer: id:194, (15:19:56.2303)
2015-08-22 15:19:56.2303|Info|      Executando timer: id:195, (15:19:56.2303)
2015-08-22 15:19:56.2303|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-22 15:19:56.2303|Info|      Encerrado timer: id:195, (15:19:56.2323)
2015-08-22 15:19:56.2303|Info|      Executando timer: id:196, (15:19:56.2333)
2015-08-22 15:19:56.2303|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-22 15:19:56.2303|Info| FAIL - debounce asap
2015-08-22 15:19:56.2303|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-22 15:19:56.2303|Info|    PASS | EQ | delayed the function
2015-08-22 15:19:56.2303|Info|    PASS | EQ | incr was called once
2015-08-22 15:19:56.2303|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was called twice
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was throttled
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was called trailing
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-22 15:19:56.2393|Info|    PASS | EQ | okay
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was debounced
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    PASS | EQ | ok
2015-08-22 15:19:56.2393|Info|    PASS | EQ | incr was called immediately
2015-08-22 15:19:56.2393|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-22 15:19:56.2393|Info|----------------------------------------
2015-08-22 15:19:56.2393|Info|    PASS: 1368  FAIL: 6  TOTAL: 1374
2015-08-22 15:19:56.2393|Info|    Finished in 14577 milliseconds.
2015-08-22 15:19:56.2393|Info|----------------------------------------
2015-08-22 15:19:56.2683|Info|      Encerrado timer: id:196, (15:19:56.2683)
2015-08-22 15:19:56.2683|Info|Encerrando os testes
2015-08-22 15:19:56.2714|Info|Total:1374, Sucesso: 1368, Falha: 6
2015-08-22 15:19:56.2714|Info|15 segundos para avaliar o individuo underscore.js
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [21]:1:23
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [81]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [107]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [143]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [155]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (Script Document [12]:2900:65)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
    at Array.<anonymous> (Script Document [8]:643:4)
    at Script Document [181]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [185]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [205]:1:24
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [225]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [237]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [251]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [259]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [279]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [299]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [311]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [325]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [333]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [353]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-22 15:19:56.2714|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [373]:1:25
2015-08-22 15:19:56.2714|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [397]:1:25
2015-08-24 22:05:53.8978|Info|  Settimeout: id:0, (500) ms
2015-08-24 22:05:54.4447|Info|      Executando timer: id:0, (22:05:54.4447)
2015-08-24 22:05:54.6634|Info|Iniciando os testes
2015-08-24 22:05:54.6790|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-24 22:05:54.6790|Info|  Settimeout: id:1, (13) ms
2015-08-24 22:06:37.1741|Info|Iniciando os testes
2015-08-24 22:06:39.2992|Info|Encerrando os testes
2015-08-24 22:06:39.2992|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-24 22:06:39.2992|Info|2 segundos para avaliar o individuo global.js
2015-08-24 22:06:43.9502|Info|  Settimeout: id:0, (500) ms
2015-08-24 22:06:44.1365|Info|Iniciando os testes
2015-08-24 22:06:44.1365|Info|  Settimeout: id:1, (13) ms
2015-08-24 22:06:44.1678|Info|      Executando timer: id:1, (22:06:44.1678)
2015-08-24 22:06:44.2303|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:44.2772|Info|----------------------------------------
2015-08-24 22:06:44.2772|Info|Arrays
2015-08-24 22:06:44.2772|Info|----------------------------------------
2015-08-24 22:06:44.2772|Info| PASS - first
2015-08-24 22:06:44.2928|Info| PASS - head
2015-08-24 22:06:44.3084|Info| PASS - take
2015-08-24 22:06:44.3084|Info| PASS - rest
2015-08-24 22:06:44.3084|Info| PASS - tail
2015-08-24 22:06:44.3084|Info| PASS - drop
2015-08-24 22:06:44.3084|Info| PASS - initial
2015-08-24 22:06:44.3084|Info| PASS - last
2015-08-24 22:06:44.3084|Info| PASS - compact
2015-08-24 22:06:44.4803|Info| PASS - flatten
2015-08-24 22:06:44.4803|Info| PASS - without
2015-08-24 22:06:44.4803|Info| PASS - sortedIndex
2015-08-24 22:06:44.4803|Info| PASS - uniq
2015-08-24 22:06:44.4803|Info| PASS - unique
2015-08-24 22:06:44.4803|Info| PASS - intersection
2015-08-24 22:06:44.4803|Info| PASS - union
2015-08-24 22:06:44.4803|Info| PASS - difference
2015-08-24 22:06:44.4803|Info| PASS - zip
2015-08-24 22:06:44.4959|Info| PASS - unzip
2015-08-24 22:06:44.4959|Info| PASS - object
2015-08-24 22:06:44.4959|Info| PASS - indexOf
2015-08-24 22:06:44.4959|Info| PASS - indexOf with NaN
2015-08-24 22:06:44.4959|Info| PASS - indexOf with +- 0
2015-08-24 22:06:44.4959|Info| PASS - lastIndexOf
2015-08-24 22:06:44.4959|Info| PASS - lastIndexOf with NaN
2015-08-24 22:06:44.4959|Info| PASS - lastIndexOf with +- 0
2015-08-24 22:06:44.4959|Info| PASS - findIndex
2015-08-24 22:06:44.4959|Info| PASS - findLastIndex
2015-08-24 22:06:44.4959|Info| PASS - range
2015-08-24 22:06:44.5115|Info|----------------------------------------
2015-08-24 22:06:44.5115|Info|Chaining
2015-08-24 22:06:44.5115|Info|----------------------------------------
2015-08-24 22:06:44.5115|Info| PASS - map/flatten/reduce
2015-08-24 22:06:44.5115|Info| PASS - select/reject/sortBy
2015-08-24 22:06:44.5115|Info| PASS - select/reject/sortBy in functional style
2015-08-24 22:06:44.5115|Info| PASS - reverse/concat/unshift/pop/map
2015-08-24 22:06:44.5115|Info| PASS - splice
2015-08-24 22:06:44.5115|Info| PASS - shift
2015-08-24 22:06:44.5115|Info| PASS - pop
2015-08-24 22:06:44.5115|Info| PASS - chaining works in small stages
2015-08-24 22:06:44.5115|Info| PASS - #1562: Engine proxies for chained functions
2015-08-24 22:06:44.5115|Info|----------------------------------------
2015-08-24 22:06:44.5115|Info|Collections
2015-08-24 22:06:44.5115|Info|----------------------------------------
2015-08-24 22:06:44.5272|Info| PASS - each
2015-08-24 22:06:44.5272|Info| PASS - forEach
2015-08-24 22:06:44.5272|Info| PASS - lookupIterator with contexts
2015-08-24 22:06:44.5272|Info| PASS - Iterating objects with sketchy length properties
2015-08-24 22:06:44.5272|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-24 22:06:44.5272|Info| PASS - map
2015-08-24 22:06:44.5272|Info| PASS - collect
2015-08-24 22:06:44.5272|Info| PASS - reduce
2015-08-24 22:06:44.5272|Info| PASS - foldl
2015-08-24 22:06:44.5272|Info| PASS - reduceRight
2015-08-24 22:06:44.5428|Info| PASS - foldr
2015-08-24 22:06:44.5428|Info| PASS - find
2015-08-24 22:06:44.5428|Info| PASS - detect
2015-08-24 22:06:44.5428|Info| PASS - filter
2015-08-24 22:06:44.5428|Info| PASS - select
2015-08-24 22:06:44.5428|Info| PASS - reject
2015-08-24 22:06:44.5428|Info| PASS - every
2015-08-24 22:06:44.5428|Info| PASS - all
2015-08-24 22:06:44.5428|Info| PASS - some
2015-08-24 22:06:44.5428|Info| PASS - any
2015-08-24 22:06:44.5428|Info| PASS - includes
2015-08-24 22:06:44.5428|Info| PASS - include
2015-08-24 22:06:44.5428|Info| PASS - contains
2015-08-24 22:06:44.5428|Info| PASS - includes with NaN
2015-08-24 22:06:44.5584|Info| PASS - includes with +- 0
2015-08-24 22:06:44.5584|Info| PASS - invoke
2015-08-24 22:06:44.5584|Info| PASS - invoke w/ function reference
2015-08-24 22:06:44.5584|Info| PASS - invoke when strings have a call method
2015-08-24 22:06:44.5584|Info| PASS - pluck
2015-08-24 22:06:44.5584|Info| PASS - where
2015-08-24 22:06:44.5584|Info| PASS - findWhere
2015-08-24 22:06:44.5755|Info| PASS - max
2015-08-24 22:06:44.5755|Info| PASS - min
2015-08-24 22:06:44.5835|Info| PASS - sortBy
2015-08-24 22:06:44.5835|Info| PASS - groupBy
2015-08-24 22:06:44.5835|Info| PASS - indexBy
2015-08-24 22:06:44.5835|Info| PASS - countBy
2015-08-24 22:06:44.5835|Info| PASS - shuffle
2015-08-24 22:06:44.5835|Info| PASS - sample
2015-08-24 22:06:44.5835|Info| PASS - toArray
2015-08-24 22:06:44.5835|Info| PASS - size
2015-08-24 22:06:44.5835|Info| PASS - partition
2015-08-24 22:06:44.5995|Info|----------------------------------------
2015-08-24 22:06:44.5995|Info|Functions
2015-08-24 22:06:44.5995|Info|----------------------------------------
2015-08-24 22:06:44.5995|Info| PASS - bind
2015-08-24 22:06:44.5995|Info| PASS - partial
2015-08-24 22:06:44.5995|Info| PASS - bindAll
2015-08-24 22:06:44.5995|Info| PASS - memoize
2015-08-24 22:06:44.5995|Info|  Settimeout: id:2, (100) ms
2015-08-24 22:06:44.6621|Info|  Settimeout: id:3, (50) ms
2015-08-24 22:06:44.7246|Info|  Settimeout: id:4, (150) ms
2015-08-24 22:06:44.7871|Info|      Encerrado timer: id:1, (22:06:44.7871)
2015-08-24 22:06:44.7871|Info|      Executando timer: id:0, (22:06:44.7871)
2015-08-24 22:06:44.7871|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-24 22:06:44.8964|Info|  Settimeout: id:5, (500) ms
2015-08-24 22:06:44.9590|Info|      Encerrado timer: id:0, (22:06:44.9590)
2015-08-24 22:06:44.9590|Info|      Executando timer: id:2, (22:06:44.9590)
2015-08-24 22:06:44.9590|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:44.9590|Info|      Encerrado timer: id:2, (22:06:44.9590)
2015-08-24 22:06:44.9590|Info|      Executando timer: id:3, (22:06:44.9590)
2015-08-24 22:06:44.9590|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-24 22:06:44.9746|Info|      Encerrado timer: id:3, (22:06:44.9746)
2015-08-24 22:06:44.9746|Info|      Executando timer: id:4, (22:06:44.9746)
2015-08-24 22:06:44.9746|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-24 22:06:44.9746|Info|  Settimeout: id:6, (13) ms
2015-08-24 22:06:45.0371|Info|      Encerrado timer: id:4, (22:06:45.0371)
2015-08-24 22:06:45.0371|Info|      Executando timer: id:6, (22:06:45.0371)
2015-08-24 22:06:45.0371|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:45.0371|Info|  Settimeout: id:7, (1) ms
2015-08-24 22:06:45.0996|Info|  Settimeout: id:8, (50) ms
2015-08-24 22:06:45.1621|Info|      Encerrado timer: id:6, (22:06:45.1621)
2015-08-24 22:06:45.1621|Info|      Executando timer: id:7, (22:06:45.1621)
2015-08-24 22:06:45.1621|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:45.1621|Info|      Encerrado timer: id:7, (22:06:45.1621)
2015-08-24 22:06:45.1621|Info|      Executando timer: id:8, (22:06:45.1621)
2015-08-24 22:06:45.1621|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:45.1777|Info|  Settimeout: id:9, (13) ms
2015-08-24 22:06:45.2402|Info|      Encerrado timer: id:8, (22:06:45.2402)
2015-08-24 22:06:45.2402|Info|      Executando timer: id:9, (22:06:45.2402)
2015-08-24 22:06:45.2402|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:45.2402|Info| PASS - defer
2015-08-24 22:06:45.2402|Info|  Settimeout: id:10, (32) ms
2015-08-24 22:06:45.3027|Info|  Settimeout: id:11, (64) ms
2015-08-24 22:06:45.3652|Info|      Encerrado timer: id:9, (22:06:45.3652)
2015-08-24 22:06:45.3652|Info|      Executando timer: id:10, (22:06:45.3652)
2015-08-24 22:06:45.3652|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:45.3652|Info|      Encerrado timer: id:10, (22:06:45.3652)
2015-08-24 22:06:45.3809|Info|      Executando timer: id:11, (22:06:45.3809)
2015-08-24 22:06:45.3809|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:45.3809|Info|  Settimeout: id:12, (13) ms
2015-08-24 22:06:45.4434|Info|      Encerrado timer: id:11, (22:06:45.4434)
2015-08-24 22:06:45.4434|Info|      Executando timer: id:5, (22:06:45.4434)
2015-08-24 22:06:45.4434|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-24 22:06:45.4434|Info|      Encerrado timer: id:5, (22:06:45.4434)
2015-08-24 22:06:45.4434|Info|      Executando timer: id:12, (22:06:45.4434)
2015-08-24 22:06:45.4434|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:45.4434|Info| PASS - throttle
2015-08-24 22:06:45.4589|Info|  Settimeout: id:13, (32) ms
2015-08-24 22:06:45.5215|Info|  Settimeout: id:14, (64) ms
2015-08-24 22:06:45.5840|Info|  Settimeout: id:15, (96) ms
2015-08-24 22:06:45.6465|Info|      Encerrado timer: id:12, (22:06:45.6465)
2015-08-24 22:06:45.6465|Info|      Executando timer: id:13, (22:06:45.6465)
2015-08-24 22:06:45.6465|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:45.6465|Info|      Encerrado timer: id:13, (22:06:45.6465)
2015-08-24 22:06:45.6465|Info|      Executando timer: id:14, (22:06:45.6465)
2015-08-24 22:06:45.6465|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:45.6465|Info|  Settimeout: id:16, (32) ms
2015-08-24 22:06:45.7246|Info|      Encerrado timer: id:14, (22:06:45.7246)
2015-08-24 22:06:45.7246|Info|      Executando timer: id:15, (22:06:45.7246)
2015-08-24 22:06:45.7246|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:45.7246|Info|  Settimeout: id:17, (13) ms
2015-08-24 22:06:45.7871|Info|      Encerrado timer: id:15, (22:06:45.7871)
2015-08-24 22:06:45.7871|Info|      Executando timer: id:16, (22:06:45.7871)
2015-08-24 22:06:45.7871|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:45.7871|Info|      Encerrado timer: id:16, (22:06:45.7871)
2015-08-24 22:06:45.7871|Info|      Executando timer: id:17, (22:06:45.7871)
2015-08-24 22:06:45.7871|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:45.7871|Info|  Settimeout: id:18, (64) ms
2015-08-24 22:06:45.8808|Info|      Encerrado timer: id:17, (22:06:45.8808)
2015-08-24 22:06:45.8965|Info|      Executando timer: id:18, (22:06:45.8965)
2015-08-24 22:06:45.8965|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:45.8965|Info|  Settimeout: id:19, (13) ms
2015-08-24 22:06:45.9595|Info|      Encerrado timer: id:18, (22:06:45.9595)
2015-08-24 22:06:45.9595|Info|      Executando timer: id:19, (22:06:45.9599)
2015-08-24 22:06:45.9595|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:45.9595|Info| PASS - throttle once
2015-08-24 22:06:45.9595|Info|  Settimeout: id:20, (32) ms
2015-08-24 22:06:46.0225|Info|  Settimeout: id:21, (64) ms
2015-08-24 22:06:46.0850|Info|      Encerrado timer: id:19, (22:06:46.0850)
2015-08-24 22:06:46.0850|Info|      Executando timer: id:20, (22:06:46.0850)
2015-08-24 22:06:46.0850|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:46.0850|Info|      Encerrado timer: id:20, (22:06:46.0850)
2015-08-24 22:06:46.1005|Info|      Executando timer: id:21, (22:06:46.1005)
2015-08-24 22:06:46.1005|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:46.1005|Info|  Settimeout: id:22, (13) ms
2015-08-24 22:06:46.1631|Info|      Encerrado timer: id:21, (22:06:46.1631)
2015-08-24 22:06:46.1631|Info|      Executando timer: id:22, (22:06:46.1631)
2015-08-24 22:06:46.1631|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:46.1631|Info| PASS - throttle twice
2015-08-24 22:06:46.1631|Info|  Settimeout: id:23, (30) ms
2015-08-24 22:06:46.2256|Info|  Settimeout: id:24, (85) ms
2015-08-24 22:06:46.2881|Info|      Encerrado timer: id:22, (22:06:46.2881)
2015-08-24 22:06:46.2881|Info|      Executando timer: id:23, (22:06:46.2881)
2015-08-24 22:06:46.2881|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:46.2881|Info|      Encerrado timer: id:23, (22:06:46.2881)
2015-08-24 22:06:46.3193|Info|      Executando timer: id:24, (22:06:46.3193)
2015-08-24 22:06:46.3193|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:46.3193|Info|  Settimeout: id:25, (13) ms
2015-08-24 22:06:46.3819|Info|      Encerrado timer: id:24, (22:06:46.3819)
2015-08-24 22:06:46.3819|Info|      Executando timer: id:25, (22:06:46.3819)
2015-08-24 22:06:46.3819|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:46.3974|Info| PASS - more throttling
2015-08-24 22:06:46.3974|Info|  Settimeout: id:26, (100) ms
2015-08-24 22:06:46.4600|Info|  Settimeout: id:27, (50) ms
2015-08-24 22:06:46.5225|Info|  Settimeout: id:28, (150) ms
2015-08-24 22:06:46.5850|Info|  Settimeout: id:29, (160) ms
2015-08-24 22:06:46.6475|Info|  Settimeout: id:30, (230) ms
2015-08-24 22:06:46.7100|Info|  Settimeout: id:31, (300) ms
2015-08-24 22:06:46.7725|Info|      Encerrado timer: id:25, (22:06:46.7725)
2015-08-24 22:06:46.7725|Info|      Executando timer: id:26, (22:06:46.7725)
2015-08-24 22:06:46.7725|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:46.7725|Info|      Encerrado timer: id:26, (22:06:46.7725)
2015-08-24 22:06:46.7725|Info|      Executando timer: id:27, (22:06:46.7725)
2015-08-24 22:06:46.7725|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:46.7881|Info|  Settimeout: id:32, (100) ms
2015-08-24 22:06:46.8506|Info|      Encerrado timer: id:27, (22:06:46.8506)
2015-08-24 22:06:46.8506|Info|      Executando timer: id:28, (22:06:46.8506)
2015-08-24 22:06:46.8506|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:46.8506|Info|      Encerrado timer: id:28, (22:06:46.8506)
2015-08-24 22:06:46.8506|Info|      Executando timer: id:29, (22:06:46.8506)
2015-08-24 22:06:46.8506|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:46.8506|Info|      Encerrado timer: id:29, (22:06:46.8506)
2015-08-24 22:06:46.8819|Info|      Executando timer: id:30, (22:06:46.8819)
2015-08-24 22:06:46.8819|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:46.8819|Info|      Encerrado timer: id:30, (22:06:46.8819)
2015-08-24 22:06:47.0225|Info|      Executando timer: id:31, (22:06:47.0225)
2015-08-24 22:06:47.0225|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:47.0225|Info|  Settimeout: id:33, (13) ms
2015-08-24 22:06:47.0850|Info|      Encerrado timer: id:31, (22:06:47.0850)
2015-08-24 22:06:47.0850|Info|      Executando timer: id:33, (22:06:47.0850)
2015-08-24 22:06:47.0850|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:47.0850|Info|  Settimeout: id:34, (32) ms
2015-08-24 22:06:47.1475|Info|  Settimeout: id:35, (96) ms
2015-08-24 22:06:47.2100|Info|      Encerrado timer: id:33, (22:06:47.2100)
2015-08-24 22:06:47.2100|Info|      Executando timer: id:34, (22:06:47.2100)
2015-08-24 22:06:47.2100|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:47.2100|Info|      Encerrado timer: id:34, (22:06:47.2100)
2015-08-24 22:06:47.2568|Info|      Executando timer: id:35, (22:06:47.2568)
2015-08-24 22:06:47.2568|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:47.2568|Info|  Settimeout: id:36, (13) ms
2015-08-24 22:06:47.3194|Info|      Encerrado timer: id:35, (22:06:47.3194)
2015-08-24 22:06:47.3194|Info|      Executando timer: id:36, (22:06:47.3194)
2015-08-24 22:06:47.3194|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:47.3194|Info|  Settimeout: id:37, (60) ms
2015-08-24 22:06:47.3819|Info|  Settimeout: id:38, (96) ms
2015-08-24 22:06:47.4444|Info|      Encerrado timer: id:36, (22:06:47.4444)
2015-08-24 22:06:47.4912|Info|      Executando timer: id:38, (22:06:47.4912)
2015-08-24 22:06:47.4912|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:47.4912|Info|  Settimeout: id:39, (13) ms
2015-08-24 22:06:47.5537|Info|      Encerrado timer: id:38, (22:06:47.5537)
2015-08-24 22:06:47.5537|Info|      Executando timer: id:39, (22:06:47.5537)
2015-08-24 22:06:47.5537|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:47.5537|Info|  Settimeout: id:40, (100) ms
2015-08-24 22:06:47.6162|Info|  Settimeout: id:41, (50) ms
2015-08-24 22:06:47.6787|Info|  Settimeout: id:42, (60) ms
2015-08-24 22:06:47.7412|Info|  Settimeout: id:43, (200) ms
2015-08-24 22:06:47.8037|Info|  Settimeout: id:44, (250) ms
2015-08-24 22:06:47.8662|Info|  Settimeout: id:45, (350) ms
2015-08-24 22:06:47.9287|Info|      Encerrado timer: id:39, (22:06:47.9287)
2015-08-24 22:06:47.9287|Info|      Executando timer: id:40, (22:06:47.9287)
2015-08-24 22:06:47.9287|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:47.9287|Info|      Encerrado timer: id:40, (22:06:47.9287)
2015-08-24 22:06:47.9287|Info|      Executando timer: id:41, (22:06:47.9287)
2015-08-24 22:06:47.9287|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:47.9287|Info|  Settimeout: id:46, (100) ms
2015-08-24 22:06:48.0077|Info|      Encerrado timer: id:41, (22:06:48.0077)
2015-08-24 22:06:48.0077|Info|      Executando timer: id:42, (22:06:48.0077)
2015-08-24 22:06:48.0077|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:48.0077|Info|      Encerrado timer: id:42, (22:06:48.0077)
2015-08-24 22:06:48.0077|Info|      Executando timer: id:43, (22:06:48.0077)
2015-08-24 22:06:48.0077|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:48.0077|Info|      Encerrado timer: id:43, (22:06:48.0077)
2015-08-24 22:06:48.0546|Info|      Executando timer: id:46, (22:06:48.0546)
2015-08-24 22:06:48.0546|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:48.0546|Info|      Encerrado timer: id:46, (22:06:48.0546)
2015-08-24 22:06:48.0702|Info|      Executando timer: id:44, (22:06:48.0702)
2015-08-24 22:06:48.0702|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:48.0702|Info|      Encerrado timer: id:44, (22:06:48.0702)
2015-08-24 22:06:48.2264|Info|      Executando timer: id:45, (22:06:48.2264)
2015-08-24 22:06:48.2264|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:48.2264|Info|  Settimeout: id:47, (13) ms
2015-08-24 22:06:48.2889|Info|      Encerrado timer: id:45, (22:06:48.2889)
2015-08-24 22:06:48.2889|Info|      Executando timer: id:47, (22:06:48.2889)
2015-08-24 22:06:48.2889|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:48.2889|Info|  Settimeout: id:48, (100) ms
2015-08-24 22:06:48.3983|Info|  Settimeout: id:49, (100) ms
2015-08-24 22:06:48.5077|Info|  Settimeout: id:50, (100) ms
2015-08-24 22:06:48.6170|Info|  Settimeout: id:51, (100) ms
2015-08-24 22:06:48.6796|Info|  Settimeout: id:52, (200) ms
2015-08-24 22:06:48.7421|Info|      Encerrado timer: id:47, (22:06:48.7421)
2015-08-24 22:06:48.7421|Info|      Executando timer: id:51, (22:06:48.7421)
2015-08-24 22:06:48.7421|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:48.7421|Info|      Encerrado timer: id:51, (22:06:48.7421)
2015-08-24 22:06:48.8983|Info|      Executando timer: id:52, (22:06:48.8983)
2015-08-24 22:06:48.8983|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:48.8983|Info|  Settimeout: id:53, (13) ms
2015-08-24 22:06:48.9610|Info|      Encerrado timer: id:52, (22:06:48.9610)
2015-08-24 22:06:48.9610|Info|      Executando timer: id:53, (22:06:48.9613)
2015-08-24 22:06:48.9610|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:48.9770|Info| PASS - one more throttle with leading: false test
2015-08-24 22:06:48.9770|Info|  Settimeout: id:54, (96) ms
2015-08-24 22:06:49.0395|Info|      Encerrado timer: id:53, (22:06:49.0395)
2015-08-24 22:06:49.0864|Info|      Executando timer: id:54, (22:06:49.0864)
2015-08-24 22:06:49.0864|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:49.0864|Info|  Settimeout: id:55, (96) ms
2015-08-24 22:06:49.1489|Info|      Encerrado timer: id:54, (22:06:49.1489)
2015-08-24 22:06:49.1957|Info|      Executando timer: id:55, (22:06:49.1957)
2015-08-24 22:06:49.1957|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:49.1957|Info|  Settimeout: id:56, (13) ms
2015-08-24 22:06:49.2583|Info|      Encerrado timer: id:55, (22:06:49.2583)
2015-08-24 22:06:49.2583|Info|      Executando timer: id:56, (22:06:49.2583)
2015-08-24 22:06:49.2583|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:49.2583|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-24 22:06:49.2583|Info|  Settimeout: id:57, (200) ms
2015-08-24 22:06:49.3208|Info|      Encerrado timer: id:56, (22:06:49.3208)
2015-08-24 22:06:49.4770|Info|      Executando timer: id:57, (22:06:49.4770)
2015-08-24 22:06:49.4770|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:49.4770|Info|  Settimeout: id:58, (13) ms
2015-08-24 22:06:49.5395|Info|      Encerrado timer: id:57, (22:06:49.5395)
2015-08-24 22:06:49.5395|Info|      Executando timer: id:58, (22:06:49.5395)
2015-08-24 22:06:49.5395|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:49.5395|Info| PASS - throttle continues to function after system time is set backwards
2015-08-24 22:06:49.5395|Info|  Settimeout: id:59, (32) ms
2015-08-24 22:06:49.6020|Info|  Settimeout: id:60, (100) ms
2015-08-24 22:06:49.6645|Info|      Encerrado timer: id:58, (22:06:49.6645)
2015-08-24 22:06:49.6645|Info|      Executando timer: id:59, (22:06:49.6645)
2015-08-24 22:06:49.6645|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:49.6645|Info|  Settimeout: id:61, (32) ms
2015-08-24 22:06:49.7270|Info|      Encerrado timer: id:59, (22:06:49.7270)
2015-08-24 22:06:49.7270|Info|      Executando timer: id:61, (22:06:49.7270)
2015-08-24 22:06:49.7270|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:49.7270|Info|      Encerrado timer: id:61, (22:06:49.7270)
2015-08-24 22:06:49.7270|Info|      Executando timer: id:60, (22:06:49.7270)
2015-08-24 22:06:49.7270|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:49.7426|Info|  Settimeout: id:62, (13) ms
2015-08-24 22:06:49.8052|Info|      Encerrado timer: id:60, (22:06:49.8052)
2015-08-24 22:06:49.8052|Info|      Executando timer: id:62, (22:06:49.8052)
2015-08-24 22:06:49.8052|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:49.8052|Info| PASS - throttle re-entrant
2015-08-24 22:06:49.8052|Info|  Settimeout: id:63, (32) ms
2015-08-24 22:06:49.8676|Info|  Settimeout: id:64, (16) ms
2015-08-24 22:06:49.9301|Info|  Settimeout: id:65, (96) ms
2015-08-24 22:06:49.9938|Info|      Encerrado timer: id:62, (22:06:49.9938)
2015-08-24 22:06:49.9938|Info|      Executando timer: id:63, (22:06:49.9938)
2015-08-24 22:06:49.9938|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:49.9938|Info|      Encerrado timer: id:63, (22:06:49.9938)
2015-08-24 22:06:49.9938|Info|      Executando timer: id:64, (22:06:49.9938)
2015-08-24 22:06:49.9938|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:50.0094|Info|  Settimeout: id:66, (32) ms
2015-08-24 22:06:50.0720|Info|      Encerrado timer: id:64, (22:06:50.0720)
2015-08-24 22:06:50.0720|Info|      Executando timer: id:65, (22:06:50.0720)
2015-08-24 22:06:50.0720|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:50.0720|Info|  Settimeout: id:67, (13) ms
2015-08-24 22:06:50.1345|Info|      Encerrado timer: id:65, (22:06:50.1345)
2015-08-24 22:06:50.1345|Info|      Executando timer: id:66, (22:06:50.1345)
2015-08-24 22:06:50.1345|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:50.1345|Info|      Encerrado timer: id:66, (22:06:50.1345)
2015-08-24 22:06:50.1345|Info|      Executando timer: id:67, (22:06:50.1345)
2015-08-24 22:06:50.1345|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:50.1501|Info| PASS - debounce
2015-08-24 22:06:50.1501|Info|  Settimeout: id:68, (64) ms
2015-08-24 22:06:50.2126|Info|  Settimeout: id:69, (16) ms
2015-08-24 22:06:50.2751|Info|  Settimeout: id:70, (32) ms
2015-08-24 22:06:50.3376|Info|  Settimeout: id:71, (48) ms
2015-08-24 22:06:50.4001|Info|  Settimeout: id:72, (128) ms
2015-08-24 22:06:50.4594|Info|      Encerrado timer: id:67, (22:06:50.4594)
2015-08-24 22:06:50.4594|Info|      Executando timer: id:68, (22:06:50.4594)
2015-08-24 22:06:50.4594|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:50.4594|Info|      Encerrado timer: id:68, (22:06:50.4594)
2015-08-24 22:06:50.4594|Info|      Executando timer: id:69, (22:06:50.4594)
2015-08-24 22:06:50.4594|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:50.4594|Info|  Settimeout: id:73, (64) ms
2015-08-24 22:06:50.5375|Info|      Encerrado timer: id:69, (22:06:50.5375)
2015-08-24 22:06:50.5375|Info|      Executando timer: id:70, (22:06:50.5375)
2015-08-24 22:06:50.5375|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:50.5375|Info|      Encerrado timer: id:70, (22:06:50.5375)
2015-08-24 22:06:50.5375|Info|      Executando timer: id:71, (22:06:50.5375)
2015-08-24 22:06:50.5375|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:50.5375|Info|      Encerrado timer: id:71, (22:06:50.5375)
2015-08-24 22:06:50.5531|Info|      Executando timer: id:72, (22:06:50.5531)
2015-08-24 22:06:50.5531|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:50.5531|Info|  Settimeout: id:74, (13) ms
2015-08-24 22:06:50.6156|Info|      Encerrado timer: id:72, (22:06:50.6156)
2015-08-24 22:06:50.6156|Info|      Executando timer: id:73, (22:06:50.6156)
2015-08-24 22:06:50.6156|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:50.6156|Info|      Encerrado timer: id:73, (22:06:50.6156)
2015-08-24 22:06:50.6156|Info|      Executando timer: id:74, (22:06:50.6156)
2015-08-24 22:06:50.6156|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:50.6156|Info|  Settimeout: id:75, (32) ms
2015-08-24 22:06:50.6781|Info|  Settimeout: id:76, (96) ms
2015-08-24 22:06:50.7406|Info|      Encerrado timer: id:74, (22:06:50.7406)
2015-08-24 22:06:50.7406|Info|      Executando timer: id:75, (22:06:50.7406)
2015-08-24 22:06:50.7406|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:50.7406|Info|      Encerrado timer: id:75, (22:06:50.7406)
2015-08-24 22:06:50.7875|Info|      Executando timer: id:76, (22:06:50.7875)
2015-08-24 22:06:50.7875|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:50.7875|Info|  Settimeout: id:77, (13) ms
2015-08-24 22:06:50.8500|Info|      Encerrado timer: id:76, (22:06:50.8500)
2015-08-24 22:06:50.8500|Info|      Executando timer: id:77, (22:06:50.8500)
2015-08-24 22:06:50.8500|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:50.8500|Info| PASS - debounce asap recursively
2015-08-24 22:06:50.8500|Info|  Settimeout: id:78, (100) ms
2015-08-24 22:06:50.9125|Info|  Settimeout: id:79, (200) ms
2015-08-24 22:06:50.9750|Info|      Encerrado timer: id:77, (22:06:50.9750)
2015-08-24 22:06:50.9750|Info|      Executando timer: id:78, (22:06:50.9750)
2015-08-24 22:06:50.9750|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:50.9750|Info|      Encerrado timer: id:78, (22:06:50.9750)
2015-08-24 22:06:51.1156|Info|      Executando timer: id:79, (22:06:51.1156)
2015-08-24 22:06:51.1156|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:51.1156|Info|  Settimeout: id:80, (100) ms
2015-08-24 22:06:51.1938|Info|  Settimeout: id:81, (13) ms
2015-08-24 22:06:51.2563|Info|      Encerrado timer: id:79, (22:06:51.2563)
2015-08-24 22:06:51.2563|Info|      Executando timer: id:81, (22:06:51.2563)
2015-08-24 22:06:51.2563|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:51.2563|Info| PASS - debounce after system time is set backwards
2015-08-24 22:06:51.2563|Info|  Settimeout: id:82, (32) ms
2015-08-24 22:06:51.3188|Info|  Settimeout: id:83, (100) ms
2015-08-24 22:06:51.3813|Info|      Encerrado timer: id:81, (22:06:51.3813)
2015-08-24 22:06:51.3813|Info|      Executando timer: id:80, (22:06:51.3813)
2015-08-24 22:06:51.3813|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:51.3813|Info|      Encerrado timer: id:80, (22:06:51.3813)
2015-08-24 22:06:51.3813|Info|      Executando timer: id:82, (22:06:51.3813)
2015-08-24 22:06:51.3813|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:51.3813|Info|  Settimeout: id:84, (32) ms
2015-08-24 22:06:51.4594|Info|      Encerrado timer: id:82, (22:06:51.4594)
2015-08-24 22:06:51.4594|Info|      Executando timer: id:83, (22:06:51.4594)
2015-08-24 22:06:51.4594|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:51.4594|Info|  Settimeout: id:85, (13) ms
2015-08-24 22:06:51.5219|Info|      Encerrado timer: id:83, (22:06:51.5219)
2015-08-24 22:06:51.5219|Info|      Executando timer: id:84, (22:06:51.5219)
2015-08-24 22:06:51.5219|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:51.5219|Info|      Encerrado timer: id:84, (22:06:51.5219)
2015-08-24 22:06:51.5219|Info|      Executando timer: id:85, (22:06:51.5219)
2015-08-24 22:06:51.5219|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:51.5219|Info| PASS - once
2015-08-24 22:06:51.5375|Info| PASS - Recursive onced function.
2015-08-24 22:06:51.5375|Info| PASS - wrap
2015-08-24 22:06:51.5375|Info| PASS - negate
2015-08-24 22:06:51.5531|Info| PASS - compose
2015-08-24 22:06:51.5531|Info| PASS - after
2015-08-24 22:06:51.5531|Info| PASS - before
2015-08-24 22:06:51.5531|Info| PASS - iteratee
2015-08-24 22:06:51.5531|Info|----------------------------------------
2015-08-24 22:06:51.5687|Info|Objects
2015-08-24 22:06:51.5687|Info|----------------------------------------
2015-08-24 22:06:51.5687|Info| PASS - keys
2015-08-24 22:06:51.5687|Info| PASS - allKeys
2015-08-24 22:06:51.5687|Info| PASS - values
2015-08-24 22:06:51.5844|Info| PASS - pairs
2015-08-24 22:06:51.5844|Info| PASS - invert
2015-08-24 22:06:51.5844|Info| PASS - functions
2015-08-24 22:06:51.5844|Info| PASS - methods
2015-08-24 22:06:51.5844|Info| PASS - extend
2015-08-24 22:06:51.6000|Info| PASS - extendOwn
2015-08-24 22:06:51.6000|Info| PASS - pick
2015-08-24 22:06:51.6156|Info| PASS - omit
2015-08-24 22:06:51.6156|Info| PASS - defaults
2015-08-24 22:06:51.6156|Info| PASS - clone
2015-08-24 22:06:51.6156|Info| PASS - create
2015-08-24 22:06:51.6312|Info| PASS - isEqual
2015-08-24 22:06:51.6468|Info| PASS - isEmpty
2015-08-24 22:06:51.6468|Info| PASS - isArguments
2015-08-24 22:06:51.6468|Info| PASS - isObject
2015-08-24 22:06:51.6468|Info| PASS - isArray
2015-08-24 22:06:51.6625|Info| PASS - isString
2015-08-24 22:06:51.6625|Info| PASS - isNumber
2015-08-24 22:06:51.6625|Info| PASS - isBoolean
2015-08-24 22:06:51.6625|Info| PASS - isFunction
2015-08-24 22:06:51.6625|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-24 22:06:51.6625|Info|    PASS | EQ | can extract the keys from an object
2015-08-24 22:06:51.6625|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-24 22:06:51.6781|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6781|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6781|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6781|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6781|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6781|Info|    PASS | EQ | matches non-enumerable properties
2015-08-24 22:06:51.6781|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-24 22:06:51.6781|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-24 22:06:51.6937|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.6937|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7093|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7093|Info|    PASS | EQ | matches non-enumerable properties
2015-08-24 22:06:51.7093|Info|    PASS | EQ | should include inherited keys
2015-08-24 22:06:51.7093|Info|    PASS | EQ | should get keys from constructor
2015-08-24 22:06:51.7093|Info|    PASS | EQ | can extract the values from an object
2015-08-24 22:06:51.7093|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-24 22:06:51.7093|Info|    PASS | EQ | can convert an object into pairs
2015-08-24 22:06:51.7093|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-24 22:06:51.7093|Info|    PASS | EQ | can invert an object
2015-08-24 22:06:51.7093|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-24 22:06:51.7250|Info|    PASS | EQ | can invert an object with "length"
2015-08-24 22:06:51.7250|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-24 22:06:51.7250|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-24 22:06:51.7250|Info|    PASS | EQ | alias for functions
2015-08-24 22:06:51.7250|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-24 22:06:51.7250|Info|    PASS | EQ | properties in source override destination
2015-08-24 22:06:51.7250|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-24 22:06:51.7250|Info|    PASS | EQ | can extend from multiple source objects
2015-08-24 22:06:51.7250|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-24 22:06:51.7250|Info|    PASS | EQ | extend copies undefined values
2015-08-24 22:06:51.7406|Info|    PASS | EQ | extend copies all properties from source
2015-08-24 22:06:51.7406|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-24 22:06:51.7406|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-24 22:06:51.7406|Info|    PASS | EQ | extending null results in null
2015-08-24 22:06:51.7406|Info|    PASS | OK | extending undefined results in undefined
2015-08-24 22:06:51.7406|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-24 22:06:51.7406|Info|    PASS | EQ | properties in source override destination
2015-08-24 22:06:51.7406|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-24 22:06:51.7406|Info|    PASS | EQ | can assign from multiple source objects
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assign copies undefined values
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assign copies own properties from source
2015-08-24 22:06:51.7562|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-24 22:06:51.7562|Info|    PASS | OK | assigning undefined results in undefined
2015-08-24 22:06:51.7562|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-24 22:06:51.7562|Info|    PASS | EQ | can restrict properties to those named
2015-08-24 22:06:51.7562|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-24 22:06:51.7718|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-24 22:06:51.7718|Info|    PASS | EQ | can pick numeric properties
2015-08-24 22:06:51.7718|Info|    PASS | EQ | Called with null/undefined
2015-08-24 22:06:51.7718|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7718|Info|    PASS | EQ | Called with null/undefined
2015-08-24 22:06:51.7718|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7718|Info|    PASS | EQ | can iterate primitives
2015-08-24 22:06:51.7718|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7718|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7718|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7718|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7718|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7875|Info|    PASS | EQ | ok
2015-08-24 22:06:51.7875|Info|    PASS | EQ | can accept a predicate and context
2015-08-24 22:06:51.7875|Info|    PASS | EQ | include prototype props
2015-08-24 22:06:51.7875|Info|    PASS | EQ | function is given context
2015-08-24 22:06:51.7875|Info|    PASS | EQ | does not set own property if property not in object
2015-08-24 22:06:51.7875|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-24 22:06:51.7875|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-24 22:06:51.7875|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-24 22:06:51.7875|Info|    PASS | EQ | can omit a single named property
2015-08-24 22:06:51.7875|Info|    PASS | EQ | can omit several named properties
2015-08-24 22:06:51.7875|Info|    PASS | EQ | can omit properties named in an array
2015-08-24 22:06:51.7875|Info|    PASS | EQ | can omit numeric properties
2015-08-24 22:06:51.8031|Info|    PASS | EQ | non objects return empty object
2015-08-24 22:06:51.8031|Info|    PASS | EQ | null/undefined return empty object
2015-08-24 22:06:51.8031|Info|    PASS | EQ | returns empty object for primitives
2015-08-24 22:06:51.8031|Info|    PASS | EQ | ok
2015-08-24 22:06:51.8031|Info|    PASS | EQ | ok
2015-08-24 22:06:51.8031|Info|    PASS | EQ | ok
2015-08-24 22:06:51.8031|Info|    PASS | EQ | ok
2015-08-24 22:06:51.8031|Info|    PASS | EQ | ok
2015-08-24 22:06:51.8031|Info|    PASS | EQ | ok
2015-08-24 22:06:51.8031|Info|    PASS | EQ | can accept a predicate
2015-08-24 22:06:51.8031|Info|    PASS | EQ | include prototype props
2015-08-24 22:06:51.8187|Info|    PASS | EQ | function is given context
2015-08-24 22:06:51.8187|Info|    PASS | EQ | value exists
2015-08-24 22:06:51.8187|Info|    PASS | EQ | value exists
2015-08-24 22:06:51.8187|Info|    PASS | EQ | default applied
2015-08-24 22:06:51.8187|Info|    PASS | EQ | null isn't overridden
2015-08-24 22:06:51.8187|Info|    PASS | EQ | value exists
2015-08-24 22:06:51.8187|Info|    PASS | EQ | NaN isn't overridden
2015-08-24 22:06:51.8187|Info|    PASS | EQ | new value is added, first one wins
2015-08-24 22:06:51.8187|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-24 22:06:51.8187|Info|    PASS | EQ | result is null if destination is null
2015-08-24 22:06:51.8187|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-24 22:06:51.8187|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-24 22:06:51.8343|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-24 22:06:51.8343|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-24 22:06:51.8343|Info|    PASS | OK | non objects should not be changed by clone
2015-08-24 22:06:51.8343|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-24 22:06:51.8343|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-24 22:06:51.8343|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-24 22:06:51.8343|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-24 22:06:51.8343|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-24 22:06:51.8343|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-24 22:06:51.8343|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-24 22:06:51.8343|Info|    PASS | EQ | object should inherit prototype
2015-08-24 22:06:51.8343|Info|    PASS | EQ | properties should be added to object
2015-08-24 22:06:51.8500|Info|    PASS | EQ | ok
2015-08-24 22:06:51.8500|Info|    PASS | EQ | should only add own properties
2015-08-24 22:06:51.8500|Info|    PASS | EQ | `null` is equal to `null`
2015-08-24 22:06:51.8500|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-24 22:06:51.8500|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-24 22:06:51.8500|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-24 22:06:51.8500|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-24 22:06:51.8500|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-24 22:06:51.8500|Info|    PASS | EQ | Identical string primitives are equal
2015-08-24 22:06:51.8500|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-24 22:06:51.8500|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-24 22:06:51.8656|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | Identical number primitives are equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-24 22:06:51.8656|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-24 22:06:51.8656|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-24 22:06:51.8812|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-24 22:06:51.8812|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-24 22:06:51.8812|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-24 22:06:51.8812|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-24 22:06:51.8812|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-24 22:06:51.8812|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-24 22:06:51.8812|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-24 22:06:51.8812|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-24 22:06:51.8812|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-24 22:06:51.8812|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-24 22:06:51.8812|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-24 22:06:51.8968|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-24 22:06:51.8968|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | Invalid dates are not equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | Flag order is not significant
2015-08-24 22:06:51.9125|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-24 22:06:51.9125|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | Empty object literals are equal
2015-08-24 22:06:51.9125|Info|    PASS | EQ | Empty array literals are equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-24 22:06:51.9281|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Object instances are equal
2015-08-24 22:06:51.9437|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-24 22:06:51.9594|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-24 22:06:51.9594|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-24 22:06:52.0848|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-24 22:06:52.0848|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-24 22:06:52.0848|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-24 22:06:52.0848|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-24 22:06:52.0848|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-24 22:06:52.0848|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-24 22:06:52.1004|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-24 22:06:52.1004|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-24 22:06:52.1004|Info|    PASS | EQ | Cyclic structures are equal
2015-08-24 22:06:52.1004|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-24 22:06:52.1004|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-24 22:06:52.1004|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-24 22:06:52.1004|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-24 22:06:52.1160|Info|    PASS | EQ | `isEqual` can be chained
2015-08-24 22:06:52.1160|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-24 22:06:52.1160|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-24 22:06:52.1160|Info|    PASS | EQ | [1] is not empty
2015-08-24 22:06:52.1160|Info|    PASS | EQ | [] is empty
2015-08-24 22:06:52.1160|Info|    PASS | EQ | {one : 1} is not empty
2015-08-24 22:06:52.1316|Info|    PASS | EQ | {} is empty
2015-08-24 22:06:52.1316|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-24 22:06:52.1316|Info|    PASS | EQ | null is empty
2015-08-24 22:06:52.1316|Info|    PASS | EQ | undefined is empty
2015-08-24 22:06:52.1316|Info|    PASS | EQ | the empty string is empty
2015-08-24 22:06:52.1316|Info|    PASS | EQ | but other strings are not
2015-08-24 22:06:52.1472|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-24 22:06:52.1472|Info|    PASS | EQ | empty arguments object is empty
2015-08-24 22:06:52.1472|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-24 22:06:52.1472|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-24 22:06:52.1472|Info|    PASS | EQ | a string is not an arguments object
2015-08-24 22:06:52.1472|Info|    PASS | EQ | a function is not an arguments object
2015-08-24 22:06:52.1629|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-24 22:06:52.1629|Info|    PASS | EQ | but not when it's converted into an array
2015-08-24 22:06:52.1629|Info|    PASS | EQ | and not vanilla arrays.
2015-08-24 22:06:52.1629|Info|    PASS | EQ | the arguments object is object
2015-08-24 22:06:52.1629|Info|    PASS | EQ | and arrays
2015-08-24 22:06:52.1629|Info|    PASS | EQ | and functions
2015-08-24 22:06:52.1785|Info|    PASS | EQ | but not null
2015-08-24 22:06:52.1785|Info|    PASS | EQ | and not undefined
2015-08-24 22:06:52.1785|Info|    PASS | EQ | and not string
2015-08-24 22:06:52.1785|Info|    PASS | EQ | and not number
2015-08-24 22:06:52.1785|Info|    PASS | EQ | and not boolean
2015-08-24 22:06:52.1785|Info|    PASS | EQ | but new String()
2015-08-24 22:06:52.1941|Info|    PASS | EQ | undefined vars are not arrays
2015-08-24 22:06:52.1941|Info|    PASS | EQ | the arguments object is not an array
2015-08-24 22:06:52.1941|Info|    PASS | EQ | but arrays are
2015-08-24 22:06:52.1941|Info|    PASS | EQ | but strings are
2015-08-24 22:06:52.1941|Info|    PASS | EQ | string literals are
2015-08-24 22:06:52.1941|Info|    PASS | EQ | so are String objects
2015-08-24 22:06:52.1941|Info|    PASS | EQ | ok
2015-08-24 22:06:52.2097|Info|    PASS | EQ | a string is not a number
2015-08-24 22:06:52.2097|Info|    PASS | EQ | the arguments object is not a number
2015-08-24 22:06:52.2097|Info|    PASS | EQ | undefined is not a number
2015-08-24 22:06:52.2097|Info|    PASS | EQ | but numbers are
2015-08-24 22:06:52.2097|Info|    PASS | EQ | NaN *is* a number
2015-08-24 22:06:52.2097|Info|    PASS | EQ | Infinity is a number
2015-08-24 22:06:52.2097|Info|    PASS | EQ | numeric strings are not numbers
2015-08-24 22:06:52.2254|Info|    PASS | EQ | a number is not a boolean
2015-08-24 22:06:52.2254|Info|    PASS | EQ | a string is not a boolean
2015-08-24 22:06:52.2254|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-24 22:06:52.2254|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-24 22:06:52.2254|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-24 22:06:52.2254|Info|    PASS | EQ | undefined is not a boolean
2015-08-24 22:06:52.2410|Info|    PASS | EQ | NaN is not a boolean
2015-08-24 22:06:52.2410|Info|    PASS | EQ | null is not a boolean
2015-08-24 22:06:52.2410|Info|    PASS | EQ | but true is
2015-08-24 22:06:52.2410|Info|    PASS | EQ | and so is false
2015-08-24 22:06:52.2410|Info|    PASS | EQ | undefined vars are not functions
2015-08-24 22:06:52.2410|Info|    PASS | EQ | arrays are not functions
2015-08-24 22:06:52.2410|Info|    PASS | EQ | strings are not functions
2015-08-24 22:06:52.2566|Info|    PASS | EQ | but functions are
2015-08-24 22:06:52.2566|Info|    PASS | EQ | even anonymous ones
2015-08-24 22:06:52.2566|Info|    FAIL | OK | Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined
2015-08-24 22:06:52.2566|Info| PASS - isDate
2015-08-24 22:06:52.2566|Info| PASS - isRegExp
2015-08-24 22:06:52.2566|Info| PASS - isFinite
2015-08-24 22:06:52.2722|Info| PASS - isNaN
2015-08-24 22:06:52.2722|Info| PASS - isNull
2015-08-24 22:06:52.2722|Info| PASS - isUndefined
2015-08-24 22:06:52.2722|Info| PASS - isError
2015-08-24 22:06:52.2879|Info| PASS - tap
2015-08-24 22:06:52.2879|Info| PASS - has
2015-08-24 22:06:52.2879|Info| PASS - isMatch
2015-08-24 22:06:52.2879|Info| PASS - matcher
2015-08-24 22:06:52.3035|Info| PASS - matcher 
2015-08-24 22:06:52.3035|Info| PASS - findKey
2015-08-24 22:06:52.3035|Info| PASS - mapObject
2015-08-24 22:06:52.3191|Info|----------------------------------------
2015-08-24 22:06:52.3191|Info|Utility
2015-08-24 22:06:52.3191|Info|----------------------------------------
2015-08-24 22:06:52.3191|Info| PASS - #750 - Return _ instance.
2015-08-24 22:06:52.3191|Info| PASS - identity
2015-08-24 22:06:52.3191|Info| PASS - constant
2015-08-24 22:06:52.3191|Info| PASS - noop
2015-08-24 22:06:52.3191|Info| PASS - property
2015-08-24 22:06:52.3348|Info| PASS - propertyOf
2015-08-24 22:06:52.3504|Info| PASS - random
2015-08-24 22:06:52.3504|Info| PASS - now
2015-08-24 22:06:52.3504|Info| PASS - uniqueId
2015-08-24 22:06:52.3504|Info| PASS - times
2015-08-24 22:06:52.3504|Info| PASS - mixin
2015-08-24 22:06:52.3504|Info| PASS - _.escape
2015-08-24 22:06:52.3660|Info| PASS - _.unescape
2015-08-24 22:06:52.3660|Info| PASS - _.escape & unescape
2015-08-24 22:06:52.3660|Info| PASS - template
2015-08-24 22:06:52.3816|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-24 22:06:52.3816|Info| PASS - _.template handles \u2028 & \u2029
2015-08-24 22:06:52.3816|Info| PASS - result calls functions and returns primitives
2015-08-24 22:06:52.3816|Info| PASS - result returns a default value if object is null or undefined
2015-08-24 22:06:52.3816|Info| PASS - result returns a default value if property of object is missing
2015-08-24 22:06:52.3816|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-24 22:06:52.3816|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-24 22:06:52.3816|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-24 22:06:52.3816|Info| PASS - result fallback can use a function
2015-08-24 22:06:52.3816|Info| PASS - _.templateSettings.variable
2015-08-24 22:06:52.3816|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-24 22:06:52.3972|Info| PASS - #556 - undefined template variables.
2015-08-24 22:06:52.3972|Info| PASS - interpolate evaluates code only once.
2015-08-24 22:06:52.3972|Info| PASS - #746 - _.template settings are not modified.
2015-08-24 22:06:52.3972|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-24 22:06:52.3972|Info|  Settimeout: id:86, (100) ms
2015-08-24 22:06:52.4598|Info|  Settimeout: id:87, (50) ms
2015-08-24 22:06:52.5223|Info|  Settimeout: id:88, (150) ms
2015-08-24 22:06:52.5848|Info|      Encerrado timer: id:85, (22:06:52.5848)
2015-08-24 22:06:52.5848|Info|      Executando timer: id:86, (22:06:52.5848)
2015-08-24 22:06:52.5848|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:52.5848|Info|      Encerrado timer: id:86, (22:06:52.5848)
2015-08-24 22:06:52.5848|Info|      Executando timer: id:87, (22:06:52.5848)
2015-08-24 22:06:52.5848|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-24 22:06:52.5848|Info|      Encerrado timer: id:87, (22:06:52.5848)
2015-08-24 22:06:52.6786|Info|      Executando timer: id:88, (22:06:52.6786)
2015-08-24 22:06:52.6786|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-24 22:06:52.6786|Info|  Settimeout: id:89, (13) ms
2015-08-24 22:06:52.7410|Info|      Encerrado timer: id:88, (22:06:52.7410)
2015-08-24 22:06:52.7410|Info|      Executando timer: id:89, (22:06:52.7410)
2015-08-24 22:06:52.7410|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:52.7410|Info|  Settimeout: id:90, (32) ms
2015-08-24 22:06:52.8035|Info|  Settimeout: id:91, (64) ms
2015-08-24 22:06:52.8661|Info|  Settimeout: id:92, (96) ms
2015-08-24 22:06:52.9286|Info|      Encerrado timer: id:89, (22:06:52.9286)
2015-08-24 22:06:52.9286|Info|      Executando timer: id:90, (22:06:52.9286)
2015-08-24 22:06:52.9286|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:52.9286|Info|      Encerrado timer: id:90, (22:06:52.9286)
2015-08-24 22:06:52.9286|Info|      Executando timer: id:91, (22:06:52.9286)
2015-08-24 22:06:52.9286|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:52.9286|Info|  Settimeout: id:93, (32) ms
2015-08-24 22:06:53.0067|Info|      Encerrado timer: id:91, (22:06:53.0067)
2015-08-24 22:06:53.0067|Info|      Executando timer: id:92, (22:06:53.0067)
2015-08-24 22:06:53.0067|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:53.0067|Info|  Settimeout: id:94, (13) ms
2015-08-24 22:06:53.0692|Info|      Encerrado timer: id:92, (22:06:53.0692)
2015-08-24 22:06:53.0692|Info|      Executando timer: id:93, (22:06:53.0692)
2015-08-24 22:06:53.0692|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:53.0692|Info|      Encerrado timer: id:93, (22:06:53.0692)
2015-08-24 22:06:53.0692|Info|      Executando timer: id:94, (22:06:53.0692)
2015-08-24 22:06:53.0692|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:53.0692|Info|  Settimeout: id:95, (100) ms
2015-08-24 22:06:53.1473|Info|  Settimeout: id:96, (50) ms
2015-08-24 22:06:53.2098|Info|  Settimeout: id:97, (150) ms
2015-08-24 22:06:53.2723|Info|  Settimeout: id:98, (160) ms
2015-08-24 22:06:53.3348|Info|  Settimeout: id:99, (230) ms
2015-08-24 22:06:53.3973|Info|  Settimeout: id:100, (300) ms
2015-08-24 22:06:53.4598|Info|      Encerrado timer: id:94, (22:06:53.4598)
2015-08-24 22:06:53.4598|Info|      Executando timer: id:95, (22:06:53.4598)
2015-08-24 22:06:53.4598|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:53.4598|Info|      Encerrado timer: id:95, (22:06:53.4598)
2015-08-24 22:06:53.4598|Info|      Executando timer: id:96, (22:06:53.4598)
2015-08-24 22:06:53.4598|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:53.4598|Info|  Settimeout: id:101, (100) ms
2015-08-24 22:06:53.5223|Info|      Encerrado timer: id:96, (22:06:53.5223)
2015-08-24 22:06:53.5223|Info|      Executando timer: id:97, (22:06:53.5223)
2015-08-24 22:06:53.5223|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:53.5223|Info|      Encerrado timer: id:97, (22:06:53.5223)
2015-08-24 22:06:53.5223|Info|      Executando timer: id:98, (22:06:53.5223)
2015-08-24 22:06:53.5223|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:53.5223|Info|      Encerrado timer: id:98, (22:06:53.5223)
2015-08-24 22:06:53.5692|Info|      Executando timer: id:99, (22:06:53.5692)
2015-08-24 22:06:53.5692|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:53.5692|Info|      Encerrado timer: id:99, (22:06:53.5692)
2015-08-24 22:06:53.7098|Info|      Executando timer: id:100, (22:06:53.7098)
2015-08-24 22:06:53.7098|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:53.7098|Info|  Settimeout: id:102, (13) ms
2015-08-24 22:06:53.7723|Info|      Encerrado timer: id:100, (22:06:53.7723)
2015-08-24 22:06:53.7723|Info|      Executando timer: id:102, (22:06:53.7723)
2015-08-24 22:06:53.7723|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:53.7723|Info|  Settimeout: id:103, (32) ms
2015-08-24 22:06:53.8348|Info|  Settimeout: id:104, (96) ms
2015-08-24 22:06:53.8973|Info|      Encerrado timer: id:102, (22:06:53.8973)
2015-08-24 22:06:53.8973|Info|      Executando timer: id:103, (22:06:53.8973)
2015-08-24 22:06:53.8973|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:53.8973|Info|      Encerrado timer: id:103, (22:06:53.8973)
2015-08-24 22:06:53.9441|Info|      Executando timer: id:104, (22:06:53.9441)
2015-08-24 22:06:53.9441|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:53.9441|Info|  Settimeout: id:105, (13) ms
2015-08-24 22:06:54.0069|Info|      Encerrado timer: id:104, (22:06:54.0069)
2015-08-24 22:06:54.0069|Info|      Executando timer: id:105, (22:06:54.0069)
2015-08-24 22:06:54.0069|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:54.0069|Info|  Settimeout: id:106, (60) ms
2015-08-24 22:06:54.0694|Info|  Settimeout: id:107, (96) ms
2015-08-24 22:06:54.1319|Info|      Encerrado timer: id:105, (22:06:54.1319)
2015-08-24 22:06:54.1787|Info|      Executando timer: id:107, (22:06:54.1787)
2015-08-24 22:06:54.1787|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:54.1787|Info|  Settimeout: id:108, (13) ms
2015-08-24 22:06:54.2413|Info|      Encerrado timer: id:107, (22:06:54.2413)
2015-08-24 22:06:54.2413|Info|      Executando timer: id:108, (22:06:54.2413)
2015-08-24 22:06:54.2413|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:54.2413|Info|  Settimeout: id:109, (100) ms
2015-08-24 22:06:54.3038|Info|  Settimeout: id:110, (50) ms
2015-08-24 22:06:54.3663|Info|  Settimeout: id:111, (60) ms
2015-08-24 22:06:54.4288|Info|  Settimeout: id:112, (200) ms
2015-08-24 22:06:54.4913|Info|  Settimeout: id:113, (250) ms
2015-08-24 22:06:54.5538|Info|  Settimeout: id:114, (350) ms
2015-08-24 22:06:54.6163|Info|      Encerrado timer: id:108, (22:06:54.6163)
2015-08-24 22:06:54.6163|Info|      Executando timer: id:109, (22:06:54.6163)
2015-08-24 22:06:54.6163|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:54.6163|Info|      Encerrado timer: id:109, (22:06:54.6163)
2015-08-24 22:06:54.6163|Info|      Executando timer: id:110, (22:06:54.6163)
2015-08-24 22:06:54.6631|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:54.6631|Info|  Settimeout: id:115, (100) ms
2015-08-24 22:06:54.7257|Info|      Encerrado timer: id:110, (22:06:54.7257)
2015-08-24 22:06:54.7257|Info|      Executando timer: id:111, (22:06:54.7257)
2015-08-24 22:06:54.7257|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:54.7257|Info|      Encerrado timer: id:111, (22:06:54.7257)
2015-08-24 22:06:54.7257|Info|      Executando timer: id:112, (22:06:54.7257)
2015-08-24 22:06:54.7257|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:54.7413|Info|      Encerrado timer: id:112, (22:06:54.7413)
2015-08-24 22:06:54.7569|Info|      Executando timer: id:113, (22:06:54.7569)
2015-08-24 22:06:54.7569|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:54.7569|Info|      Encerrado timer: id:113, (22:06:54.7569)
2015-08-24 22:06:54.7725|Info|      Executando timer: id:115, (22:06:54.7725)
2015-08-24 22:06:54.7725|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:54.7725|Info|      Encerrado timer: id:115, (22:06:54.7725)
2015-08-24 22:06:54.9132|Info|      Executando timer: id:114, (22:06:54.9132)
2015-08-24 22:06:54.9132|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:54.9132|Info|  Settimeout: id:116, (13) ms
2015-08-24 22:06:54.9757|Info|      Encerrado timer: id:114, (22:06:54.9757)
2015-08-24 22:06:54.9757|Info|      Executando timer: id:116, (22:06:54.9757)
2015-08-24 22:06:54.9757|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:54.9757|Info|----------------------------------------
2015-08-24 22:06:54.9757|Info|Functions
2015-08-24 22:06:54.9757|Info|----------------------------------------
2015-08-24 22:06:54.9913|Info| PASS - more throttle does not trigger leading call when leading is set to false
2015-08-24 22:06:54.9913|Info|  Settimeout: id:117, (64) ms
2015-08-24 22:06:55.0538|Info|  Settimeout: id:118, (16) ms
2015-08-24 22:06:55.1163|Info|  Settimeout: id:119, (32) ms
2015-08-24 22:06:55.1788|Info|  Settimeout: id:120, (48) ms
2015-08-24 22:06:55.2413|Info|  Settimeout: id:121, (128) ms
2015-08-24 22:06:55.3038|Info|      Encerrado timer: id:116, (22:06:55.3038)
2015-08-24 22:06:55.3038|Info|      Executando timer: id:117, (22:06:55.3038)
2015-08-24 22:06:55.3038|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:55.3038|Info|      Encerrado timer: id:117, (22:06:55.3038)
2015-08-24 22:06:55.3038|Info|      Executando timer: id:118, (22:06:55.3038)
2015-08-24 22:06:55.3038|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:55.3038|Info|  Settimeout: id:122, (64) ms
2015-08-24 22:06:55.3820|Info|      Encerrado timer: id:118, (22:06:55.3820)
2015-08-24 22:06:55.3820|Info|      Executando timer: id:119, (22:06:55.3820)
2015-08-24 22:06:55.3820|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:55.3820|Info|      Encerrado timer: id:119, (22:06:55.3820)
2015-08-24 22:06:55.3820|Info|      Executando timer: id:120, (22:06:55.3820)
2015-08-24 22:06:55.3820|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:55.5069|Info|      Encerrado timer: id:120, (22:06:55.5069)
2015-08-24 22:06:55.5069|Info|      Executando timer: id:121, (22:06:55.5069)
2015-08-24 22:06:55.5069|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:55.5069|Info|  Settimeout: id:123, (13) ms
2015-08-24 22:06:55.5851|Info|      Encerrado timer: id:121, (22:06:55.5851)
2015-08-24 22:06:55.5851|Info|      Executando timer: id:122, (22:06:55.5851)
2015-08-24 22:06:55.5851|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:55.5851|Info|      Encerrado timer: id:122, (22:06:55.5851)
2015-08-24 22:06:55.5851|Info|      Executando timer: id:123, (22:06:55.5851)
2015-08-24 22:06:55.5851|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:55.5851|Info|  Settimeout: id:124, (32) ms
2015-08-24 22:06:55.6632|Info|  Settimeout: id:125, (100) ms
2015-08-24 22:06:55.7257|Info|      Encerrado timer: id:123, (22:06:55.7257)
2015-08-24 22:06:55.7257|Info|      Executando timer: id:124, (22:06:55.7257)
2015-08-24 22:06:55.7257|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:55.7257|Info|  Settimeout: id:126, (32) ms
2015-08-24 22:06:55.7771|Info|      Encerrado timer: id:124, (22:06:55.7771)
2015-08-24 22:06:55.7771|Info|      Executando timer: id:125, (22:06:55.7771)
2015-08-24 22:06:55.7771|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:55.7854|Info|  Settimeout: id:127, (13) ms
2015-08-24 22:06:55.8480|Info|      Encerrado timer: id:125, (22:06:55.8480)
2015-08-24 22:06:55.8480|Info|      Executando timer: id:126, (22:06:55.8480)
2015-08-24 22:06:55.8480|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:55.8480|Info|      Encerrado timer: id:126, (22:06:55.8480)
2015-08-24 22:06:55.8480|Info|      Executando timer: id:127, (22:06:55.8480)
2015-08-24 22:06:55.8480|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:55.8480|Info|  Settimeout: id:128, (100) ms
2015-08-24 22:06:55.9261|Info|  Settimeout: id:129, (50) ms
2015-08-24 22:06:55.9886|Info|  Settimeout: id:130, (150) ms
2015-08-24 22:06:56.0511|Info|      Encerrado timer: id:127, (22:06:56.0511)
2015-08-24 22:06:56.0511|Info|      Executando timer: id:128, (22:06:56.0511)
2015-08-24 22:06:56.0511|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:56.0511|Info|      Encerrado timer: id:128, (22:06:56.0511)
2015-08-24 22:06:56.0511|Info|      Executando timer: id:129, (22:06:56.0511)
2015-08-24 22:06:56.0511|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-24 22:06:56.0667|Info|      Encerrado timer: id:129, (22:06:56.0667)
2015-08-24 22:06:56.1449|Info|      Executando timer: id:130, (22:06:56.1449)
2015-08-24 22:06:56.1449|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-24 22:06:56.1449|Info|  Settimeout: id:131, (13) ms
2015-08-24 22:06:56.2074|Info|      Encerrado timer: id:130, (22:06:56.2074)
2015-08-24 22:06:56.2074|Info|      Executando timer: id:131, (22:06:56.2074)
2015-08-24 22:06:56.2074|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:56.2074|Info|  Settimeout: id:132, (32) ms
2015-08-24 22:06:56.2698|Info|  Settimeout: id:133, (64) ms
2015-08-24 22:06:56.3324|Info|  Settimeout: id:134, (96) ms
2015-08-24 22:06:56.3949|Info|      Encerrado timer: id:131, (22:06:56.3949)
2015-08-24 22:06:56.3949|Info|      Executando timer: id:132, (22:06:56.3949)
2015-08-24 22:06:56.3949|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:56.3949|Info|      Encerrado timer: id:132, (22:06:56.3949)
2015-08-24 22:06:56.3949|Info|      Executando timer: id:133, (22:06:56.3949)
2015-08-24 22:06:56.3949|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:56.4104|Info|  Settimeout: id:135, (32) ms
2015-08-24 22:06:56.4729|Info|      Encerrado timer: id:133, (22:06:56.4729)
2015-08-24 22:06:56.4729|Info|      Executando timer: id:134, (22:06:56.4729)
2015-08-24 22:06:56.4729|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:56.4729|Info|  Settimeout: id:136, (13) ms
2015-08-24 22:06:56.5355|Info|      Encerrado timer: id:134, (22:06:56.5355)
2015-08-24 22:06:56.5355|Info|      Executando timer: id:135, (22:06:56.5355)
2015-08-24 22:06:56.5355|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:56.5355|Info|      Encerrado timer: id:135, (22:06:56.5355)
2015-08-24 22:06:56.5355|Info|      Executando timer: id:136, (22:06:56.5355)
2015-08-24 22:06:56.5355|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:56.5355|Info|  Settimeout: id:137, (100) ms
2015-08-24 22:06:56.6136|Info|  Settimeout: id:138, (50) ms
2015-08-24 22:06:56.6761|Info|  Settimeout: id:139, (150) ms
2015-08-24 22:06:56.7398|Info|  Settimeout: id:140, (160) ms
2015-08-24 22:06:56.7995|Info|  Settimeout: id:141, (230) ms
2015-08-24 22:06:56.8620|Info|  Settimeout: id:142, (300) ms
2015-08-24 22:06:56.9245|Info|      Encerrado timer: id:136, (22:06:56.9245)
2015-08-24 22:06:56.9245|Info|      Executando timer: id:137, (22:06:56.9245)
2015-08-24 22:06:56.9245|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:56.9245|Info|      Encerrado timer: id:137, (22:06:56.9245)
2015-08-24 22:06:56.9245|Info|      Executando timer: id:138, (22:06:56.9245)
2015-08-24 22:06:56.9245|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:56.9245|Info|  Settimeout: id:143, (100) ms
2015-08-24 22:06:57.0026|Info|      Encerrado timer: id:138, (22:06:57.0026)
2015-08-24 22:06:57.0026|Info|      Executando timer: id:139, (22:06:57.0026)
2015-08-24 22:06:57.0026|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:57.0026|Info|      Encerrado timer: id:139, (22:06:57.0026)
2015-08-24 22:06:57.0026|Info|      Executando timer: id:140, (22:06:57.0026)
2015-08-24 22:06:57.0026|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:57.0026|Info|      Encerrado timer: id:140, (22:06:57.0026)
2015-08-24 22:06:57.0339|Info|      Executando timer: id:141, (22:06:57.0339)
2015-08-24 22:06:57.0339|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:57.1432|Info|      Encerrado timer: id:141, (22:06:57.1432)
2015-08-24 22:06:57.1744|Info|      Executando timer: id:142, (22:06:57.1744)
2015-08-24 22:06:57.1744|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:57.1744|Info|  Settimeout: id:144, (13) ms
2015-08-24 22:06:57.2370|Info|      Encerrado timer: id:142, (22:06:57.2370)
2015-08-24 22:06:57.2370|Info|      Executando timer: id:144, (22:06:57.2370)
2015-08-24 22:06:57.2370|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:57.2370|Info|  Settimeout: id:145, (32) ms
2015-08-24 22:06:57.2995|Info|  Settimeout: id:146, (96) ms
2015-08-24 22:06:57.3620|Info|      Encerrado timer: id:144, (22:06:57.3620)
2015-08-24 22:06:57.3620|Info|      Executando timer: id:145, (22:06:57.3620)
2015-08-24 22:06:57.3620|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:57.3620|Info|      Encerrado timer: id:145, (22:06:57.3620)
2015-08-24 22:06:57.4089|Info|      Executando timer: id:146, (22:06:57.4089)
2015-08-24 22:06:57.4089|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:57.4089|Info|  Settimeout: id:147, (13) ms
2015-08-24 22:06:57.4714|Info|      Encerrado timer: id:146, (22:06:57.4714)
2015-08-24 22:06:57.4714|Info|      Executando timer: id:147, (22:06:57.4714)
2015-08-24 22:06:57.4714|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:57.4869|Info|  Settimeout: id:148, (60) ms
2015-08-24 22:06:57.5495|Info|  Settimeout: id:149, (96) ms
2015-08-24 22:06:57.6120|Info|      Encerrado timer: id:147, (22:06:57.6120)
2015-08-24 22:06:57.6589|Info|      Executando timer: id:149, (22:06:57.6589)
2015-08-24 22:06:57.6589|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:57.6589|Info|  Settimeout: id:150, (13) ms
2015-08-24 22:06:57.7214|Info|      Encerrado timer: id:149, (22:06:57.7214)
2015-08-24 22:06:57.7214|Info|      Executando timer: id:150, (22:06:57.7214)
2015-08-24 22:06:57.7214|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:57.7214|Info|  Settimeout: id:151, (64) ms
2015-08-24 22:06:57.7838|Info|  Settimeout: id:152, (16) ms
2015-08-24 22:06:57.8620|Info|  Settimeout: id:153, (32) ms
2015-08-24 22:06:57.9245|Info|  Settimeout: id:154, (48) ms
2015-08-24 22:06:57.9870|Info|  Settimeout: id:155, (128) ms
2015-08-24 22:06:58.0372|Info|      Encerrado timer: id:150, (22:06:58.0372)
2015-08-24 22:06:58.0372|Info|      Executando timer: id:151, (22:06:58.0372)
2015-08-24 22:06:58.0372|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:58.0372|Info|      Encerrado timer: id:151, (22:06:58.0372)
2015-08-24 22:06:58.0372|Info|      Executando timer: id:152, (22:06:58.0412)
2015-08-24 22:06:58.0372|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:58.0372|Info|  Settimeout: id:156, (64) ms
2015-08-24 22:06:58.1080|Info|      Encerrado timer: id:152, (22:06:58.1080)
2015-08-24 22:06:58.1080|Info|      Executando timer: id:153, (22:06:58.1080)
2015-08-24 22:06:58.1080|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:58.1080|Info|      Encerrado timer: id:153, (22:06:58.1080)
2015-08-24 22:06:58.1080|Info|      Executando timer: id:154, (22:06:58.1080)
2015-08-24 22:06:58.1080|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:58.1080|Info|      Encerrado timer: id:154, (22:06:58.1080)
2015-08-24 22:06:58.1236|Info|      Executando timer: id:155, (22:06:58.1236)
2015-08-24 22:06:58.1236|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:58.1236|Info|  Settimeout: id:157, (13) ms
2015-08-24 22:06:58.1861|Info|      Encerrado timer: id:155, (22:06:58.1861)
2015-08-24 22:06:58.1861|Info|      Executando timer: id:156, (22:06:58.1861)
2015-08-24 22:06:58.1861|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:58.1861|Info|      Encerrado timer: id:156, (22:06:58.1861)
2015-08-24 22:06:58.1861|Info|      Executando timer: id:157, (22:06:58.1861)
2015-08-24 22:06:58.1861|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:58.1861|Info|  Settimeout: id:158, (32) ms
2015-08-24 22:06:58.2486|Info|  Settimeout: id:159, (100) ms
2015-08-24 22:06:58.3111|Info|      Encerrado timer: id:157, (22:06:58.3111)
2015-08-24 22:06:58.3111|Info|      Executando timer: id:158, (22:06:58.3111)
2015-08-24 22:06:58.3111|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:58.3111|Info|  Settimeout: id:160, (32) ms
2015-08-24 22:06:58.3736|Info|      Encerrado timer: id:158, (22:06:58.3736)
2015-08-24 22:06:58.3736|Info|      Executando timer: id:159, (22:06:58.3736)
2015-08-24 22:06:58.3736|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:58.3736|Info|  Settimeout: id:161, (13) ms
2015-08-24 22:06:58.4361|Info|      Encerrado timer: id:159, (22:06:58.4361)
2015-08-24 22:06:58.4361|Info|      Executando timer: id:160, (22:06:58.4361)
2015-08-24 22:06:58.4361|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:06:58.4361|Info|      Encerrado timer: id:160, (22:06:58.4361)
2015-08-24 22:06:58.4361|Info|      Executando timer: id:161, (22:06:58.4361)
2015-08-24 22:06:58.4361|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:58.4361|Info|  Settimeout: id:162, (100) ms
2015-08-24 22:06:58.5142|Info|  Settimeout: id:163, (50) ms
2015-08-24 22:06:58.5767|Info|  Settimeout: id:164, (150) ms
2015-08-24 22:06:58.6392|Info|      Encerrado timer: id:161, (22:06:58.6392)
2015-08-24 22:06:58.6392|Info|      Executando timer: id:162, (22:06:58.6392)
2015-08-24 22:06:58.6392|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:58.6392|Info|      Encerrado timer: id:162, (22:06:58.6392)
2015-08-24 22:06:58.6392|Info|      Executando timer: id:163, (22:06:58.6392)
2015-08-24 22:06:58.6392|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-24 22:06:58.6392|Info|      Encerrado timer: id:163, (22:06:58.6392)
2015-08-24 22:06:58.7329|Info|      Executando timer: id:164, (22:06:58.7329)
2015-08-24 22:06:58.7329|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-24 22:06:58.7329|Info|  Settimeout: id:165, (13) ms
2015-08-24 22:06:58.7955|Info|      Encerrado timer: id:164, (22:06:58.7955)
2015-08-24 22:06:58.7955|Info|      Executando timer: id:165, (22:06:58.7955)
2015-08-24 22:06:58.7955|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:58.7955|Info| FAIL - delay
2015-08-24 22:06:58.7955|Info|    PASS | EQ | ok
2015-08-24 22:06:58.7955|Info|    PASS | EQ | ok
2015-08-24 22:06:58.7955|Info|    PASS | EQ | ok
2015-08-24 22:06:58.7955|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-24 22:06:58.7955|Info|    PASS | EQ | delayed the function
2015-08-24 22:06:58.7955|Info|  Settimeout: id:166, (32) ms
2015-08-24 22:06:58.8736|Info|  Settimeout: id:167, (64) ms
2015-08-24 22:06:58.9361|Info|  Settimeout: id:168, (96) ms
2015-08-24 22:06:58.9986|Info|      Encerrado timer: id:165, (22:06:58.9986)
2015-08-24 22:06:58.9986|Info|      Executando timer: id:166, (22:06:58.9986)
2015-08-24 22:06:58.9986|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:58.9986|Info|      Encerrado timer: id:166, (22:06:58.9986)
2015-08-24 22:06:58.9986|Info|      Executando timer: id:167, (22:06:58.9986)
2015-08-24 22:06:58.9986|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:59.0142|Info|  Settimeout: id:169, (32) ms
2015-08-24 22:06:59.0767|Info|      Encerrado timer: id:167, (22:06:59.0767)
2015-08-24 22:06:59.0767|Info|      Executando timer: id:168, (22:06:59.0767)
2015-08-24 22:06:59.0767|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:59.0767|Info|  Settimeout: id:170, (13) ms
2015-08-24 22:06:59.1392|Info|      Encerrado timer: id:168, (22:06:59.1392)
2015-08-24 22:06:59.1392|Info|      Executando timer: id:169, (22:06:59.1392)
2015-08-24 22:06:59.1392|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:59.1392|Info|      Encerrado timer: id:169, (22:06:59.1392)
2015-08-24 22:06:59.1392|Info|      Executando timer: id:170, (22:06:59.1392)
2015-08-24 22:06:59.1392|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:59.1392|Info| FAIL - throttle arguments
2015-08-24 22:06:59.1548|Info|    PASS | EQ | ok
2015-08-24 22:06:59.1548|Info|    PASS | EQ | ok
2015-08-24 22:06:59.1548|Info|    PASS | EQ | ok
2015-08-24 22:06:59.1548|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-24 22:06:59.1548|Info|    PASS | EQ | delayed the function
2015-08-24 22:06:59.1704|Info|    PASS | EQ | updated to latest value
2015-08-24 22:06:59.1704|Info|    FAIL | EQ | updated to latest value | Expected: 3, Actual: 2
2015-08-24 22:06:59.1704|Info|  Settimeout: id:171, (100) ms
2015-08-24 22:06:59.2330|Info|  Settimeout: id:172, (50) ms
2015-08-24 22:06:59.2955|Info|  Settimeout: id:173, (150) ms
2015-08-24 22:06:59.3579|Info|  Settimeout: id:174, (160) ms
2015-08-24 22:06:59.4205|Info|  Settimeout: id:175, (230) ms
2015-08-24 22:06:59.4830|Info|  Settimeout: id:176, (300) ms
2015-08-24 22:06:59.5454|Info|      Encerrado timer: id:170, (22:06:59.5454)
2015-08-24 22:06:59.5454|Info|      Executando timer: id:171, (22:06:59.5454)
2015-08-24 22:06:59.5454|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:06:59.5454|Info|      Encerrado timer: id:171, (22:06:59.5454)
2015-08-24 22:06:59.5454|Info|      Executando timer: id:172, (22:06:59.5454)
2015-08-24 22:06:59.5454|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:59.5454|Info|  Settimeout: id:177, (100) ms
2015-08-24 22:06:59.6236|Info|      Encerrado timer: id:172, (22:06:59.6236)
2015-08-24 22:06:59.6236|Info|      Executando timer: id:173, (22:06:59.6236)
2015-08-24 22:06:59.6236|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:59.6236|Info|      Encerrado timer: id:173, (22:06:59.6236)
2015-08-24 22:06:59.6236|Info|      Executando timer: id:174, (22:06:59.6236)
2015-08-24 22:06:59.6236|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:59.6236|Info|      Encerrado timer: id:174, (22:06:59.6236)
2015-08-24 22:06:59.6549|Info|      Executando timer: id:175, (22:06:59.6549)
2015-08-24 22:06:59.6549|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:59.6549|Info|      Encerrado timer: id:175, (22:06:59.6549)
2015-08-24 22:06:59.7955|Info|      Executando timer: id:176, (22:06:59.7955)
2015-08-24 22:06:59.7955|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:06:59.7955|Info|  Settimeout: id:178, (13) ms
2015-08-24 22:06:59.8579|Info|      Encerrado timer: id:176, (22:06:59.8579)
2015-08-24 22:06:59.8579|Info|      Executando timer: id:178, (22:06:59.8579)
2015-08-24 22:06:59.8579|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:06:59.8579|Info| FAIL - throttle repeatedly with results
2015-08-24 22:06:59.8579|Info|    PASS | EQ | ok
2015-08-24 22:06:59.8579|Info|    PASS | EQ | ok
2015-08-24 22:06:59.8579|Info|    PASS | EQ | ok
2015-08-24 22:06:59.8735|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-24 22:06:59.8735|Info|    PASS | EQ | delayed the function
2015-08-24 22:06:59.8735|Info|    PASS | EQ | updated to latest value
2015-08-24 22:06:59.8735|Info|    FAIL | EQ | updated to latest value | Expected: 3, Actual: 2
2015-08-24 22:06:59.8735|Info|    PASS | EQ | incr was called once
2015-08-24 22:06:59.8735|Info|    PASS | EQ | incr was throttled
2015-08-24 22:06:59.8735|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-24 22:06:59.8892|Info|    PASS | EQ | incr was called twice
2015-08-24 22:06:59.8892|Info|    PASS | EQ | incr was throttled
2015-08-24 22:06:59.8892|Info|    PASS | EQ | incr was called trailing
2015-08-24 22:06:59.8892|Info|  Settimeout: id:179, (32) ms
2015-08-24 22:06:59.9517|Info|  Settimeout: id:180, (96) ms
2015-08-24 22:07:00.0145|Info|      Encerrado timer: id:178, (22:07:00.0145)
2015-08-24 22:07:00.0145|Info|      Executando timer: id:179, (22:07:00.0145)
2015-08-24 22:07:00.0145|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-24 22:07:00.0145|Info|      Encerrado timer: id:179, (22:07:00.0145)
2015-08-24 22:07:00.0614|Info|      Executando timer: id:180, (22:07:00.0614)
2015-08-24 22:07:00.0614|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:07:00.0614|Info|  Settimeout: id:181, (13) ms
2015-08-24 22:07:00.1239|Info|      Encerrado timer: id:180, (22:07:00.1239)
2015-08-24 22:07:00.1239|Info|      Executando timer: id:181, (22:07:00.1239)
2015-08-24 22:07:00.1239|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:07:00.1239|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-24 22:07:00.1239|Info|    PASS | EQ | ok
2015-08-24 22:07:00.1239|Info|    PASS | EQ | ok
2015-08-24 22:07:00.1239|Info|    PASS | EQ | ok
2015-08-24 22:07:00.1395|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-24 22:07:00.1395|Info|    PASS | EQ | delayed the function
2015-08-24 22:07:00.1395|Info|    PASS | EQ | updated to latest value
2015-08-24 22:07:00.1395|Info|    FAIL | EQ | updated to latest value | Expected: 3, Actual: 2
2015-08-24 22:07:00.1395|Info|    PASS | EQ | incr was called once
2015-08-24 22:07:00.1395|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:00.1551|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-24 22:07:00.1551|Info|    PASS | EQ | incr was called twice
2015-08-24 22:07:00.1551|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:00.1551|Info|    PASS | EQ | incr was called trailing
2015-08-24 22:07:00.1708|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-24 22:07:00.1708|Info|    PASS | EQ | okay
2015-08-24 22:07:00.1708|Info|  Settimeout: id:182, (60) ms
2015-08-24 22:07:00.2333|Info|  Settimeout: id:183, (96) ms
2015-08-24 22:07:00.2958|Info|      Encerrado timer: id:181, (22:07:00.2958)
2015-08-24 22:07:00.3427|Info|      Executando timer: id:183, (22:07:00.3427)
2015-08-24 22:07:00.3427|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:07:00.3427|Info|  Settimeout: id:184, (13) ms
2015-08-24 22:07:00.4052|Info|      Encerrado timer: id:183, (22:07:00.4052)
2015-08-24 22:07:00.4052|Info|      Executando timer: id:184, (22:07:00.4052)
2015-08-24 22:07:00.4052|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:07:00.4052|Info| FAIL - throttle does not trigger leading call when leading is set to false
2015-08-24 22:07:00.4052|Info|    PASS | EQ | ok
2015-08-24 22:07:00.4052|Info|    PASS | EQ | ok
2015-08-24 22:07:00.4208|Info|    PASS | EQ | ok
2015-08-24 22:07:00.4208|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-24 22:07:00.4208|Info|    PASS | EQ | delayed the function
2015-08-24 22:07:00.4208|Info|    PASS | EQ | updated to latest value
2015-08-24 22:07:00.4208|Info|    FAIL | EQ | updated to latest value | Expected: 3, Actual: 2
2015-08-24 22:07:00.4208|Info|    PASS | EQ | incr was called once
2015-08-24 22:07:00.4208|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:00.4364|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-24 22:07:00.4364|Info|    PASS | EQ | incr was called twice
2015-08-24 22:07:00.4364|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:00.4364|Info|    PASS | EQ | incr was called trailing
2015-08-24 22:07:00.4364|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-24 22:07:00.4364|Info|    PASS | EQ | okay
2015-08-24 22:07:00.4364|Info|    FAIL | EQ | ok | Expected: 0, Actual: 1
2015-08-24 22:07:00.4520|Info|    PASS | EQ | ok
2015-08-24 22:07:00.4520|Info|  Settimeout: id:185, (64) ms
2015-08-24 22:07:00.5145|Info|  Settimeout: id:186, (16) ms
2015-08-24 22:07:00.5771|Info|  Settimeout: id:187, (32) ms
2015-08-24 22:07:00.6396|Info|  Settimeout: id:188, (48) ms
2015-08-24 22:07:00.7021|Info|  Settimeout: id:189, (128) ms
2015-08-24 22:07:00.7646|Info|      Encerrado timer: id:184, (22:07:00.7646)
2015-08-24 22:07:00.7646|Info|      Executando timer: id:185, (22:07:00.7646)
2015-08-24 22:07:00.7646|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:07:00.7646|Info|      Encerrado timer: id:185, (22:07:00.7646)
2015-08-24 22:07:00.7646|Info|      Executando timer: id:186, (22:07:00.7646)
2015-08-24 22:07:00.7646|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:07:00.7646|Info|  Settimeout: id:190, (64) ms
2015-08-24 22:07:00.8271|Info|      Encerrado timer: id:186, (22:07:00.8271)
2015-08-24 22:07:00.8271|Info|      Executando timer: id:187, (22:07:00.8271)
2015-08-24 22:07:00.8271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:07:00.8271|Info|      Encerrado timer: id:187, (22:07:00.8271)
2015-08-24 22:07:00.8271|Info|      Executando timer: id:188, (22:07:00.8271)
2015-08-24 22:07:00.8271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:07:00.8271|Info|      Encerrado timer: id:188, (22:07:00.8271)
2015-08-24 22:07:00.8427|Info|      Executando timer: id:189, (22:07:00.8427)
2015-08-24 22:07:00.8427|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:07:00.8427|Info|  Settimeout: id:191, (13) ms
2015-08-24 22:07:00.9052|Info|      Encerrado timer: id:189, (22:07:00.9052)
2015-08-24 22:07:00.9052|Info|      Executando timer: id:190, (22:07:00.9052)
2015-08-24 22:07:00.9052|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:07:00.9052|Info|      Encerrado timer: id:190, (22:07:00.9052)
2015-08-24 22:07:00.9052|Info|      Executando timer: id:191, (22:07:00.9052)
2015-08-24 22:07:00.9052|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:07:00.9052|Info| FAIL - debounce asap
2015-08-24 22:07:00.9052|Info|    PASS | EQ | ok
2015-08-24 22:07:00.9052|Info|    PASS | EQ | ok
2015-08-24 22:07:00.9052|Info|    PASS | EQ | ok
2015-08-24 22:07:00.9052|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-24 22:07:00.9052|Info|    PASS | EQ | delayed the function
2015-08-24 22:07:00.9208|Info|    PASS | EQ | updated to latest value
2015-08-24 22:07:00.9208|Info|    FAIL | EQ | updated to latest value | Expected: 3, Actual: 2
2015-08-24 22:07:00.9208|Info|    PASS | EQ | incr was called once
2015-08-24 22:07:00.9208|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:00.9208|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-24 22:07:00.9208|Info|    PASS | EQ | incr was called twice
2015-08-24 22:07:00.9208|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:00.9208|Info|    PASS | EQ | incr was called trailing
2015-08-24 22:07:00.9208|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-24 22:07:00.9208|Info|    PASS | EQ | okay
2015-08-24 22:07:00.9208|Info|    FAIL | EQ | ok | Expected: 0, Actual: 1
2015-08-24 22:07:00.9364|Info|    PASS | EQ | ok
2015-08-24 22:07:00.9364|Info|    PASS | EQ | ok
2015-08-24 22:07:00.9364|Info|    PASS | EQ | ok
2015-08-24 22:07:00.9364|Info|    PASS | EQ | incr was called immediately
2015-08-24 22:07:00.9364|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-24 22:07:00.9364|Info|  Settimeout: id:192, (32) ms
2015-08-24 22:07:00.9990|Info|  Settimeout: id:193, (100) ms
2015-08-24 22:07:01.0618|Info|      Encerrado timer: id:191, (22:07:01.0618)
2015-08-24 22:07:01.0618|Info|      Executando timer: id:192, (22:07:01.0618)
2015-08-24 22:07:01.0618|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:07:01.0618|Info|  Settimeout: id:194, (32) ms
2015-08-24 22:07:01.1243|Info|      Encerrado timer: id:192, (22:07:01.1243)
2015-08-24 22:07:01.1243|Info|      Executando timer: id:193, (22:07:01.1243)
2015-08-24 22:07:01.1243|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-24 22:07:01.1243|Info|  Settimeout: id:195, (13) ms
2015-08-24 22:07:01.1868|Info|      Encerrado timer: id:193, (22:07:01.1868)
2015-08-24 22:07:01.1868|Info|      Executando timer: id:194, (22:07:01.1868)
2015-08-24 22:07:01.1868|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-24 22:07:01.1868|Info|      Encerrado timer: id:194, (22:07:01.1868)
2015-08-24 22:07:01.1868|Info|      Executando timer: id:195, (22:07:01.1868)
2015-08-24 22:07:01.1868|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-24 22:07:01.1868|Info| FAIL - debounce re-entrant
2015-08-24 22:07:01.2023|Info|    PASS | EQ | ok
2015-08-24 22:07:01.2023|Info|    PASS | EQ | ok
2015-08-24 22:07:01.2023|Info|    PASS | EQ | ok
2015-08-24 22:07:01.2023|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-24 22:07:01.2023|Info|    PASS | EQ | delayed the function
2015-08-24 22:07:01.2180|Info|    PASS | EQ | updated to latest value
2015-08-24 22:07:01.2180|Info|    FAIL | EQ | updated to latest value | Expected: 3, Actual: 2
2015-08-24 22:07:01.2180|Info|    PASS | EQ | incr was called once
2015-08-24 22:07:01.2180|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:01.2180|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-24 22:07:01.2180|Info|    PASS | EQ | incr was called twice
2015-08-24 22:07:01.2180|Info|    PASS | EQ | incr was throttled
2015-08-24 22:07:01.2336|Info|    PASS | EQ | incr was called trailing
2015-08-24 22:07:01.2336|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-24 22:07:01.2336|Info|    PASS | EQ | okay
2015-08-24 22:07:01.2336|Info|    FAIL | EQ | ok | Expected: 0, Actual: 1
2015-08-24 22:07:01.2336|Info|    PASS | EQ | ok
2015-08-24 22:07:01.2336|Info|    PASS | EQ | ok
2015-08-24 22:07:01.2492|Info|    PASS | EQ | ok
2015-08-24 22:07:01.2492|Info|    PASS | EQ | incr was called immediately
2015-08-24 22:07:01.2492|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-24 22:07:01.2492|Info|    PASS | EQ | ok
2015-08-24 22:07:01.2492|Info|    FAIL | EQ | append was debounced successfully | Expected: a1a2b1b2, Actual: a1a2
2015-08-24 22:07:01.2492|Info|----------------------------------------
2015-08-24 22:07:01.2492|Info|    PASS: 1366  FAIL: 8  TOTAL: 1374
2015-08-24 22:07:01.2492|Info|    Finished in 17019 milliseconds.
2015-08-24 22:07:01.2492|Info|----------------------------------------
2015-08-24 22:07:01.2805|Info|      Encerrado timer: id:195, (22:07:01.2805)
2015-08-24 22:07:01.2805|Info|Encerrando os testes
2015-08-24 22:07:01.2805|Info|Total:1374, Sucesso: 1366, Falha: 8
2015-08-24 22:07:01.2805|Info|17 segundos para avaliar o individuo underscore.js
2015-08-24 22:07:01.2805|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [21]:1:23
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle arguments: updated to latest value, expected: 3, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1840:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [45]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [77]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1923:5)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2805|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [101]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [149]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at Script Document [8]:1906:13
    at Script Document [12]:2106:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [171]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (Script Document [12]:2900:65)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
    at Array.<anonymous> (Script Document [8]:643:4)
    at Script Document [175]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [179]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle arguments: updated to latest value, expected: 3, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1840:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [189]:1:24
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [205]:1:25
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2805|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1923:5)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2961|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [243]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at Script Document [8]:1906:13
    at Script Document [12]:2106:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [251]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [259]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle arguments: updated to latest value, expected: 3, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1840:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [269]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [285]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1923:5)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2961|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [307]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at Script Document [8]:1906:13
    at Script Document [12]:2106:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [315]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [323]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle arguments: updated to latest value, expected: 3, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1840:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [333]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [349]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2961|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1923:5)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-24 22:07:01.2961|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [371]:1:25
2015-08-24 22:07:01.2961|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at Script Document [8]:1906:13
    at Script Document [12]:2106:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [379]:1:25
2015-08-26 10:21:19.5499|Info|Iniciando os testes
2015-08-26 10:21:22.3804|Info|Encerrando os testes
2015-08-26 10:21:22.3804|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 10:21:22.3804|Info|3 segundos para avaliar o individuo global.js
2015-08-26 10:34:37.5065|Info|Iniciando os testes
2015-08-26 10:34:40.4650|Info|Encerrando os testes
2015-08-26 10:34:40.4650|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 10:34:40.4650|Info|3 segundos para avaliar o individuo global.js
2015-08-26 10:35:31.7859|Info|  Settimeout: id:0, (500) ms
2015-08-26 10:35:32.3527|Info|      Executando timer: id:0, (10:35:32.3316)
2015-08-26 10:35:32.5517|Info|Iniciando os testes
2015-08-26 10:35:32.5673|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 10:35:32.5830|Info|  Settimeout: id:1, (500) ms
2015-08-26 10:35:32.6455|Info|      Encerrado timer: id:0, (10:35:32.6455)
2015-08-26 10:35:32.6455|Info|  Settimeout: id:2, (13) ms
2015-08-26 10:35:32.6673|Info|      Executando timer: id:2, (10:35:32.6673)
2015-08-26 10:35:32.7037|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:32.7350|Info|  Settimeout: id:3, (13) ms
2015-08-26 10:35:32.7975|Info|      Encerrado timer: id:2, (10:35:32.7975)
2015-08-26 10:35:32.8017|Info|      Executando timer: id:3, (10:35:32.8017)
2015-08-26 10:35:32.8017|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:32.8864|Info|  Settimeout: id:4, (32) ms
2015-08-26 10:35:32.9520|Info|  Settimeout: id:5, (96) ms
2015-08-26 10:35:33.0044|Info|      Encerrado timer: id:3, (10:35:33.0044)
2015-08-26 10:35:33.0044|Info|      Executando timer: id:4, (10:35:33.0044)
2015-08-26 10:35:33.0044|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:33.0044|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:33.0044|Info|      Encerrado timer: id:4, (10:35:33.0044)
2015-08-26 10:35:33.0513|Info|      Executando timer: id:5, (10:35:33.0513)
2015-08-26 10:35:33.0513|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 10:35:33.0513|Info|  Settimeout: id:6, (13) ms
2015-08-26 10:35:33.1138|Info|      Encerrado timer: id:5, (10:35:33.1138)
2015-08-26 10:35:33.1138|Info|      Executando timer: id:6, (10:35:33.1138)
2015-08-26 10:35:33.1138|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:33.1138|Info|  Settimeout: id:7, (32) ms
2015-08-26 10:35:33.1706|Info|  Settimeout: id:8, (64) ms
2015-08-26 10:35:33.2331|Info|  Settimeout: id:9, (128) ms
2015-08-26 10:35:33.2841|Info|      Encerrado timer: id:6, (10:35:33.2841)
2015-08-26 10:35:33.2841|Info|      Executando timer: id:1, (10:35:33.2851)
2015-08-26 10:35:33.2871|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 10:35:33.2871|Info|      Encerrado timer: id:1, (10:35:33.2891)
2015-08-26 10:35:33.2871|Info|      Executando timer: id:7, (10:35:33.2896)
2015-08-26 10:35:33.2871|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:33.2871|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:33.2871|Info|      Encerrado timer: id:7, (10:35:33.2896)
2015-08-26 10:35:33.2871|Info|      Executando timer: id:8, (10:35:33.2896)
2015-08-26 10:35:33.2871|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-26 10:35:33.2871|Info|  Settimeout: id:10, (32) ms
2015-08-26 10:35:33.3522|Info|      Encerrado timer: id:8, (10:35:33.3522)
2015-08-26 10:35:33.3522|Info|      Executando timer: id:10, (10:35:33.3522)
2015-08-26 10:35:33.3522|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:33.3522|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:33.3522|Info|      Encerrado timer: id:10, (10:35:33.3522)
2015-08-26 10:35:33.3678|Info|      Executando timer: id:9, (10:35:33.3678)
2015-08-26 10:35:33.3678|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-26 10:35:33.3678|Info|  Settimeout: id:11, (32) ms
2015-08-26 10:35:33.4223|Info|  Settimeout: id:12, (13) ms
2015-08-26 10:35:33.4725|Info|      Encerrado timer: id:9, (10:35:33.4725)
2015-08-26 10:35:33.4725|Info|      Executando timer: id:11, (10:35:33.4725)
2015-08-26 10:35:33.4725|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:33.4725|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:33.4725|Info|      Encerrado timer: id:11, (10:35:33.4725)
2015-08-26 10:35:33.4725|Info|      Executando timer: id:12, (10:35:33.4725)
2015-08-26 10:35:33.4725|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:33.5037|Info|  Settimeout: id:13, (32) ms
2015-08-26 10:35:33.5663|Info|  Settimeout: id:14, (64) ms
2015-08-26 10:35:33.6170|Info|      Encerrado timer: id:12, (10:35:33.6170)
2015-08-26 10:35:33.6170|Info|      Executando timer: id:13, (10:35:33.6180)
2015-08-26 10:35:33.6170|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:33.6170|Info|      Encerrado timer: id:13, (10:35:33.6210)
2015-08-26 10:35:33.6386|Info|      Executando timer: id:14, (10:35:33.6386)
2015-08-26 10:35:33.6854|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-26 10:35:33.6854|Info|  Settimeout: id:15, (32) ms
2015-08-26 10:35:33.7359|Info|  Settimeout: id:16, (13) ms
2015-08-26 10:35:33.8040|Info|      Encerrado timer: id:14, (10:35:33.8040)
2015-08-26 10:35:33.8040|Info|      Executando timer: id:15, (10:35:33.8040)
2015-08-26 10:35:33.8040|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:33.8040|Info|      Encerrado timer: id:15, (10:35:33.8040)
2015-08-26 10:35:33.8040|Info|      Executando timer: id:16, (10:35:33.8040)
2015-08-26 10:35:33.8040|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:33.8040|Info|  Settimeout: id:17, (32) ms
2015-08-26 10:35:33.8665|Info|  Settimeout: id:18, (64) ms
2015-08-26 10:35:33.9220|Info|      Encerrado timer: id:16, (10:35:33.9220)
2015-08-26 10:35:33.9220|Info|      Executando timer: id:17, (10:35:33.9220)
2015-08-26 10:35:33.9220|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:33.9220|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:33.9220|Info|      Encerrado timer: id:17, (10:35:33.9220)
2015-08-26 10:35:33.9376|Info|      Executando timer: id:18, (10:35:33.9376)
2015-08-26 10:35:33.9376|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 10:35:33.9376|Info|  Settimeout: id:19, (13) ms
2015-08-26 10:35:34.0470|Info|      Encerrado timer: id:18, (10:35:34.0470)
2015-08-26 10:35:34.0470|Info|      Executando timer: id:19, (10:35:34.0470)
2015-08-26 10:35:34.0470|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:34.0546|Info|  Settimeout: id:20, (32) ms
2015-08-26 10:35:34.1187|Info|  Settimeout: id:21, (32) ms
2015-08-26 10:35:34.1812|Info|  Settimeout: id:22, (32) ms
2015-08-26 10:35:34.2312|Info|  Settimeout: id:23, (64) ms
2015-08-26 10:35:34.2862|Info|      Encerrado timer: id:19, (10:35:34.2862)
2015-08-26 10:35:34.2862|Info|      Executando timer: id:20, (10:35:34.2862)
2015-08-26 10:35:34.2862|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:34.2862|Info|      Encerrado timer: id:20, (10:35:34.2862)
2015-08-26 10:35:34.2862|Info|      Executando timer: id:21, (10:35:34.2862)
2015-08-26 10:35:34.2862|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:34.2862|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:34.2862|Info|      Encerrado timer: id:21, (10:35:34.2862)
2015-08-26 10:35:34.2862|Info|      Executando timer: id:22, (10:35:34.2862)
2015-08-26 10:35:34.2862|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:34.2862|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:34.2862|Info|      Encerrado timer: id:22, (10:35:34.2862)
2015-08-26 10:35:34.3019|Info|      Executando timer: id:23, (10:35:34.3019)
2015-08-26 10:35:34.3019|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-26 10:35:34.3019|Info|  Settimeout: id:24, (32) ms
2015-08-26 10:35:34.3644|Info|  Settimeout: id:25, (13) ms
2015-08-26 10:35:34.4147|Info|      Encerrado timer: id:23, (10:35:34.4147)
2015-08-26 10:35:34.4147|Info|      Executando timer: id:24, (10:35:34.4157)
2015-08-26 10:35:34.4147|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:34.4147|Info|      Encerrado timer: id:24, (10:35:34.4197)
2015-08-26 10:35:34.4147|Info|      Executando timer: id:25, (10:35:34.4207)
2015-08-26 10:35:34.4147|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:34.4147|Info|  Settimeout: id:26, (32) ms
2015-08-26 10:35:34.4758|Info|  Settimeout: id:27, (32) ms
2015-08-26 10:35:34.5268|Info|  Settimeout: id:28, (64) ms
2015-08-26 10:35:34.5778|Info|      Encerrado timer: id:25, (10:35:34.5778)
2015-08-26 10:35:34.5778|Info|      Executando timer: id:26, (10:35:34.5788)
2015-08-26 10:35:34.5778|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:34.5828|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:34.5828|Info|      Encerrado timer: id:26, (10:35:34.5838)
2015-08-26 10:35:34.5828|Info|      Executando timer: id:27, (10:35:34.5848)
2015-08-26 10:35:34.5828|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:34.5828|Info|      Encerrado timer: id:27, (10:35:34.5888)
2015-08-26 10:35:34.5828|Info|      Executando timer: id:28, (10:35:34.5928)
2015-08-26 10:35:34.5828|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-26 10:35:34.5828|Info|  Settimeout: id:29, (13) ms
2015-08-26 10:35:34.6479|Info|      Encerrado timer: id:28, (10:35:34.6479)
2015-08-26 10:35:34.6479|Info|      Executando timer: id:29, (10:35:34.6499)
2015-08-26 10:35:34.6479|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:34.6479|Info|  Settimeout: id:30, (128) ms
2015-08-26 10:35:34.7070|Info|  Settimeout: id:31, (64) ms
2015-08-26 10:35:34.7580|Info|  Settimeout: id:32, (96) ms
2015-08-26 10:35:34.8120|Info|  Settimeout: id:33, (128) ms
2015-08-26 10:35:34.8660|Info|  Settimeout: id:34, (64) ms
2015-08-26 10:35:34.9401|Info|  Settimeout: id:35, (128) ms
2015-08-26 10:35:34.9911|Info|  Settimeout: id:36, (64) ms
2015-08-26 10:35:35.0422|Info|  Settimeout: id:37, (1) ms
2015-08-26 10:35:35.1068|Info|      Encerrado timer: id:29, (10:35:35.1068)
2015-08-26 10:35:35.1068|Info|      Executando timer: id:32, (10:35:35.1068)
2015-08-26 10:35:35.1068|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:35.1068|Info|  Settimeout: id:38, (31) ms
2015-08-26 10:35:35.1578|Info|      Encerrado timer: id:32, (10:35:35.1578)
2015-08-26 10:35:35.1578|Info|      Executando timer: id:37, (10:35:35.1588)
2015-08-26 10:35:35.1578|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-26 10:35:35.1618|Info|  Settimeout: id:39, (13) ms
2015-08-26 10:35:35.2212|Info|      Encerrado timer: id:37, (10:35:35.2212)
2015-08-26 10:35:35.2212|Info|      Executando timer: id:36, (10:35:35.2212)
2015-08-26 10:35:35.2212|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:35.2212|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:35.2212|Info|      Encerrado timer: id:36, (10:35:35.2212)
2015-08-26 10:35:35.2212|Info|      Executando timer: id:38, (10:35:35.2212)
2015-08-26 10:35:35.2212|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:35.2212|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:35.2212|Info|      Encerrado timer: id:38, (10:35:35.2212)
2015-08-26 10:35:35.2212|Info|      Executando timer: id:39, (10:35:35.2212)
2015-08-26 10:35:35.2212|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:35.2368|Info|  Settimeout: id:40, (64) ms
2015-08-26 10:35:35.2994|Info|  Settimeout: id:41, (32) ms
2015-08-26 10:35:35.3534|Info|  Settimeout: id:42, (128) ms
2015-08-26 10:35:35.4041|Info|      Encerrado timer: id:39, (10:35:35.4041)
2015-08-26 10:35:35.4041|Info|      Executando timer: id:40, (10:35:35.4051)
2015-08-26 10:35:35.4041|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:35.4041|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:35.4041|Info|      Encerrado timer: id:40, (10:35:35.4081)
2015-08-26 10:35:35.4870|Info|      Executando timer: id:42, (10:35:35.4870)
2015-08-26 10:35:35.4870|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 10:35:35.4890|Info|  Settimeout: id:43, (13) ms
2015-08-26 10:35:35.5528|Info|      Encerrado timer: id:42, (10:35:35.5528)
2015-08-26 10:35:35.5528|Info|      Executando timer: id:43, (10:35:35.5528)
2015-08-26 10:35:35.5528|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:35.5528|Info|  Settimeout: id:44, (32) ms
2015-08-26 10:35:35.6153|Info|  Settimeout: id:45, (2) ms
2015-08-26 10:35:35.6702|Info|  Settimeout: id:46, (64) ms
2015-08-26 10:35:35.7327|Info|      Encerrado timer: id:43, (10:35:35.7327)
2015-08-26 10:35:35.7483|Info|      Executando timer: id:46, (10:35:35.7483)
2015-08-26 10:35:35.7483|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-26 10:35:35.7483|Info|  Settimeout: id:47, (13) ms
2015-08-26 10:35:35.7983|Info|      Encerrado timer: id:46, (10:35:35.7983)
2015-08-26 10:35:35.7983|Info|      Executando timer: id:47, (10:35:35.7993)
2015-08-26 10:35:35.7983|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:35.8064|Info|  Settimeout: id:48, (1) ms
2015-08-26 10:35:35.8689|Info|  Settimeout: id:49, (32) ms
2015-08-26 10:35:35.9196|Info|      Encerrado timer: id:47, (10:35:35.9196)
2015-08-26 10:35:35.9196|Info|      Executando timer: id:48, (10:35:35.9216)
2015-08-26 10:35:35.9196|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 10:35:35.9196|Info|      Encerrado timer: id:48, (10:35:35.9237)
2015-08-26 10:35:35.9196|Info|      Executando timer: id:49, (10:35:35.9237)
2015-08-26 10:35:35.9196|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 10:35:35.9196|Info|  Settimeout: id:50, (13) ms
2015-08-26 10:35:35.9876|Info|      Encerrado timer: id:49, (10:35:35.9876)
2015-08-26 10:35:35.9876|Info|      Executando timer: id:50, (10:35:35.9876)
2015-08-26 10:35:35.9876|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:35.9876|Info|  Settimeout: id:51, (1) ms
2015-08-26 10:35:36.0501|Info|  Settimeout: id:52, (32) ms
2015-08-26 10:35:36.1029|Info|      Encerrado timer: id:50, (10:35:36.1029)
2015-08-26 10:35:36.1029|Info|      Executando timer: id:51, (10:35:36.1049)
2015-08-26 10:35:36.1029|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 10:35:36.1029|Info|      Encerrado timer: id:51, (10:35:36.1099)
2015-08-26 10:35:36.1029|Info|      Executando timer: id:52, (10:35:36.1119)
2015-08-26 10:35:36.1159|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-26 10:35:36.1159|Info|  Settimeout: id:53, (13) ms
2015-08-26 10:35:36.1845|Info|      Encerrado timer: id:52, (10:35:36.1845)
2015-08-26 10:35:36.1845|Info|      Executando timer: id:53, (10:35:36.1845)
2015-08-26 10:35:36.1845|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:36.1845|Info|  Settimeout: id:54, (1) ms
2015-08-26 10:35:36.2470|Info|  Settimeout: id:55, (32) ms
2015-08-26 10:35:36.3050|Info|      Encerrado timer: id:53, (10:35:36.3050)
2015-08-26 10:35:36.3050|Info|      Executando timer: id:55, (10:35:36.3050)
2015-08-26 10:35:36.3050|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 10:35:36.3050|Info|  Settimeout: id:56, (13) ms
2015-08-26 10:35:36.3676|Info|      Encerrado timer: id:55, (10:35:36.3676)
2015-08-26 10:35:36.3676|Info|      Executando timer: id:56, (10:35:36.3676)
2015-08-26 10:35:36.3676|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:36.3676|Info|  Settimeout: id:57, (32) ms
2015-08-26 10:35:36.4206|Info|  Settimeout: id:58, (1) ms
2015-08-26 10:35:36.4864|Info|  Settimeout: id:59, (64) ms
2015-08-26 10:35:36.5488|Info|      Encerrado timer: id:56, (10:35:36.5488)
2015-08-26 10:35:36.5488|Info|      Executando timer: id:57, (10:35:36.5488)
2015-08-26 10:35:36.5488|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 10:35:36.5488|Info|      Encerrado timer: id:57, (10:35:36.5488)
2015-08-26 10:35:36.5488|Info|      Executando timer: id:58, (10:35:36.5488)
2015-08-26 10:35:36.5488|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 10:35:36.5488|Info|      Encerrado timer: id:58, (10:35:36.5488)
2015-08-26 10:35:36.5644|Info|      Executando timer: id:59, (10:35:36.5644)
2015-08-26 10:35:36.5644|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 10:35:36.5644|Info|  Settimeout: id:60, (13) ms
2015-08-26 10:35:36.6225|Info|      Encerrado timer: id:59, (10:35:36.6225)
2015-08-26 10:35:36.6225|Info|      Executando timer: id:60, (10:35:36.6225)
2015-08-26 10:35:36.6225|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:36.6225|Info|  Settimeout: id:61, (32) ms
2015-08-26 10:35:36.6851|Info|  Settimeout: id:62, (64) ms
2015-08-26 10:35:36.7358|Info|      Encerrado timer: id:60, (10:35:36.7358)
2015-08-26 10:35:36.7358|Info|      Executando timer: id:61, (10:35:36.7367)
2015-08-26 10:35:36.7358|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 10:35:36.7358|Info|      Encerrado timer: id:61, (10:35:36.7377)
2015-08-26 10:35:36.7507|Info|      Executando timer: id:62, (10:35:36.7507)
2015-08-26 10:35:36.7507|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-26 10:35:36.7507|Info|  Settimeout: id:63, (13) ms
2015-08-26 10:35:36.8194|Info|      Encerrado timer: id:62, (10:35:36.8194)
2015-08-26 10:35:36.8194|Info|      Executando timer: id:63, (10:35:36.8194)
2015-08-26 10:35:36.8194|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:36.8194|Info|  Settimeout: id:64, (32) ms
2015-08-26 10:35:36.8819|Info|  Settimeout: id:65, (64) ms
2015-08-26 10:35:36.9323|Info|      Encerrado timer: id:63, (10:35:36.9323)
2015-08-26 10:35:36.9541|Info|      Executando timer: id:65, (10:35:36.9541)
2015-08-26 10:35:36.9541|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 10:35:36.9541|Info|  Settimeout: id:66, (13) ms
2015-08-26 10:35:37.0166|Info|      Encerrado timer: id:65, (10:35:37.0166)
2015-08-26 10:35:37.0166|Info|      Executando timer: id:66, (10:35:37.0166)
2015-08-26 10:35:37.0166|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:39.0040|Info|  Settimeout: id:67, (13) ms
2015-08-26 10:35:39.0549|Info|      Encerrado timer: id:66, (10:35:39.0549)
2015-08-26 10:35:39.0549|Info|      Executando timer: id:67, (10:35:39.0569)
2015-08-26 10:35:39.0549|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-26 10:35:39.1292|Info|----------------------------------------
2015-08-26 10:35:39.1292|Info|lodash.isNil
2015-08-26 10:35:39.1292|Info|----------------------------------------
2015-08-26 10:35:39.1292|Info| FAIL - should work with nulls from another realm
2015-08-26 10:35:39.1292|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-08-26 10:35:39.3552|Info|  Settimeout: id:68, (32) ms
2015-08-26 10:35:39.4354|Info|      Encerrado timer: id:67, (10:35:39.4354)
2015-08-26 10:35:39.4354|Info|      Executando timer: id:68, (10:35:39.4354)
2015-08-26 10:35:39.4354|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-08-26 10:35:39.4354|Info|  Settimeout: id:69, (13) ms
2015-08-26 10:35:39.4874|Info|      Encerrado timer: id:68, (10:35:39.4874)
2015-08-26 10:35:39.4874|Info|      Executando timer: id:69, (10:35:39.4874)
2015-08-26 10:35:39.4874|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:39.6660|Info|  Settimeout: id:70, (32) ms
2015-08-26 10:35:39.7161|Info|  Settimeout: id:71, (64) ms
2015-08-26 10:35:39.7693|Info|      Encerrado timer: id:69, (10:35:39.7693)
2015-08-26 10:35:39.7850|Info|      Executando timer: id:71, (10:35:39.7850)
2015-08-26 10:35:39.7850|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 10:35:39.7850|Info|  Settimeout: id:72, (13) ms
2015-08-26 10:35:39.8475|Info|      Encerrado timer: id:71, (10:35:39.8475)
2015-08-26 10:35:39.8475|Info|      Executando timer: id:72, (10:35:39.8475)
2015-08-26 10:35:39.8493|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:39.8493|Info|  Settimeout: id:73, (32) ms
2015-08-26 10:35:39.9037|Info|  Settimeout: id:74, (64) ms
2015-08-26 10:35:39.9543|Info|      Encerrado timer: id:72, (10:35:39.9543)
2015-08-26 10:35:39.9543|Info|      Executando timer: id:73, (10:35:39.9553)
2015-08-26 10:35:39.9573|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:39.9573|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:39.9573|Info|      Encerrado timer: id:73, (10:35:39.9593)
2015-08-26 10:35:39.9573|Info|      Executando timer: id:74, (10:35:39.9693)
2015-08-26 10:35:39.9573|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 10:35:39.9573|Info|  Settimeout: id:75, (20) ms
2015-08-26 10:35:40.0223|Info|  Settimeout: id:76, (13) ms
2015-08-26 10:35:40.0853|Info|      Encerrado timer: id:74, (10:35:40.0853)
2015-08-26 10:35:40.0853|Info|      Executando timer: id:76, (10:35:40.0853)
2015-08-26 10:35:40.0853|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:40.0853|Info|  Settimeout: id:77, (32) ms
2015-08-26 10:35:40.1634|Info|  Settimeout: id:78, (64) ms
2015-08-26 10:35:40.2208|Info|      Encerrado timer: id:76, (10:35:40.2208)
2015-08-26 10:35:40.2364|Info|      Executando timer: id:78, (10:35:40.2364)
2015-08-26 10:35:40.2364|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 10:35:40.2364|Info|  Settimeout: id:79, (13) ms
2015-08-26 10:35:40.2989|Info|      Encerrado timer: id:78, (10:35:40.2989)
2015-08-26 10:35:40.2989|Info|      Executando timer: id:79, (10:35:40.2989)
2015-08-26 10:35:40.2989|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:40.2989|Info|  Settimeout: id:80, (64) ms
2015-08-26 10:35:40.3499|Info|      Encerrado timer: id:79, (10:35:40.3499)
2015-08-26 10:35:40.3716|Info|      Executando timer: id:80, (10:35:40.3716)
2015-08-26 10:35:40.3716|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 10:35:40.3716|Info|  Settimeout: id:81, (13) ms
2015-08-26 10:35:40.4341|Info|      Encerrado timer: id:80, (10:35:40.4341)
2015-08-26 10:35:40.4341|Info|      Executando timer: id:81, (10:35:40.4341)
2015-08-26 10:35:40.4341|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:40.4341|Info|  Settimeout: id:82, (32) ms
2015-08-26 10:35:40.4843|Info|  Settimeout: id:83, (32) ms
2015-08-26 10:35:40.5385|Info|  Settimeout: id:84, (32) ms
2015-08-26 10:35:40.6010|Info|  Settimeout: id:85, (32) ms
2015-08-26 10:35:40.6549|Info|  Settimeout: id:86, (32) ms
2015-08-26 10:35:40.7173|Info|  Settimeout: id:87, (32) ms
2015-08-26 10:35:40.7799|Info|  Settimeout: id:88, (1) ms
2015-08-26 10:35:40.8347|Info|      Encerrado timer: id:81, (10:35:40.8347)
2015-08-26 10:35:40.8347|Info|      Executando timer: id:87, (10:35:40.8357)
2015-08-26 10:35:40.8347|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:40.8347|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:40.8347|Info|      Encerrado timer: id:87, (10:35:40.8407)
2015-08-26 10:35:40.8347|Info|      Executando timer: id:88, (10:35:40.8417)
2015-08-26 10:35:40.8347|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-26 10:35:40.8347|Info|  Settimeout: id:89, (13) ms
2015-08-26 10:35:40.9070|Info|      Encerrado timer: id:88, (10:35:40.9070)
2015-08-26 10:35:40.9070|Info|      Executando timer: id:89, (10:35:40.9070)
2015-08-26 10:35:40.9070|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:40.9070|Info|  Settimeout: id:90, (32) ms
2015-08-26 10:35:40.9580|Info|  Settimeout: id:91, (32) ms
2015-08-26 10:35:41.0208|Info|  Settimeout: id:92, (32) ms
2015-08-26 10:35:41.0833|Info|  Settimeout: id:93, (32) ms
2015-08-26 10:35:41.1377|Info|  Settimeout: id:94, (32) ms
2015-08-26 10:35:41.2002|Info|  Settimeout: id:95, (32) ms
2015-08-26 10:35:41.2627|Info|  Settimeout: id:96, (1) ms
2015-08-26 10:35:41.3198|Info|      Encerrado timer: id:89, (10:35:41.3198)
2015-08-26 10:35:41.3198|Info|      Executando timer: id:95, (10:35:41.3198)
2015-08-26 10:35:41.3198|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:41.3198|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:41.3198|Info|      Encerrado timer: id:95, (10:35:41.3198)
2015-08-26 10:35:41.3198|Info|      Executando timer: id:96, (10:35:41.3198)
2015-08-26 10:35:41.3198|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-26 10:35:41.3198|Info|  Settimeout: id:97, (13) ms
2015-08-26 10:35:41.3824|Info|      Encerrado timer: id:96, (10:35:41.3824)
2015-08-26 10:35:41.3824|Info|      Executando timer: id:97, (10:35:41.3824)
2015-08-26 10:35:41.3824|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:41.3824|Info|  Settimeout: id:98, (32) ms
2015-08-26 10:35:41.4327|Info|  Settimeout: id:99, (128) ms
2015-08-26 10:35:41.4863|Info|      Encerrado timer: id:97, (10:35:41.4863)
2015-08-26 10:35:41.4893|Info|      Executando timer: id:98, (10:35:41.4883)
2015-08-26 10:35:41.4893|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:41.4893|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:41.4893|Info|      Encerrado timer: id:98, (10:35:41.4973)
2015-08-26 10:35:41.5747|Info|      Executando timer: id:99, (10:35:41.5747)
2015-08-26 10:35:41.5747|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 10:35:41.5747|Info|  Settimeout: id:100, (13) ms
2015-08-26 10:35:41.6374|Info|      Encerrado timer: id:99, (10:35:41.6374)
2015-08-26 10:35:41.6374|Info|      Executando timer: id:100, (10:35:41.6374)
2015-08-26 10:35:41.6374|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:41.6374|Info|  Settimeout: id:101, (32) ms
2015-08-26 10:35:41.6999|Info|  Settimeout: id:102, (64) ms
2015-08-26 10:35:41.7508|Info|  Settimeout: id:103, (64) ms
2015-08-26 10:35:41.8038|Info|  Settimeout: id:104, (256) ms
2015-08-26 10:35:41.8663|Info|      Encerrado timer: id:100, (10:35:41.8663)
2015-08-26 10:35:41.8663|Info|      Executando timer: id:101, (10:35:41.8663)
2015-08-26 10:35:41.8663|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:41.8663|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:41.8663|Info|      Encerrado timer: id:101, (10:35:41.8663)
2015-08-26 10:35:41.8663|Info|      Executando timer: id:102, (10:35:41.8663)
2015-08-26 10:35:41.8663|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:41.8663|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:41.8663|Info|      Encerrado timer: id:102, (10:35:41.8663)
2015-08-26 10:35:41.8663|Info|      Executando timer: id:103, (10:35:41.8663)
2015-08-26 10:35:41.8663|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:41.8663|Info|      Encerrado timer: id:103, (10:35:41.8663)
2015-08-26 10:35:42.0632|Info|      Executando timer: id:104, (10:35:42.0632)
2015-08-26 10:35:42.0632|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-08-26 10:35:42.0632|Info|  Settimeout: id:105, (13) ms
2015-08-26 10:35:42.1202|Info|      Encerrado timer: id:104, (10:35:42.1202)
2015-08-26 10:35:42.1202|Info|      Executando timer: id:105, (10:35:42.1202)
2015-08-26 10:35:42.1202|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:42.1202|Info|  Settimeout: id:106, (64) ms
2015-08-26 10:35:42.1827|Info|  Settimeout: id:107, (96) ms
2015-08-26 10:35:42.2377|Info|  Settimeout: id:108, (192) ms
2015-08-26 10:35:42.3002|Info|      Encerrado timer: id:105, (10:35:42.3002)
2015-08-26 10:35:42.3002|Info|      Executando timer: id:106, (10:35:42.3002)
2015-08-26 10:35:42.3002|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:42.3002|Info|      Encerrado timer: id:106, (10:35:42.3002)
2015-08-26 10:35:42.3002|Info|      Executando timer: id:107, (10:35:42.3002)
2015-08-26 10:35:42.3002|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-08-26 10:35:42.3002|Info|  Settimeout: id:109, (64) ms
2015-08-26 10:35:42.3663|Info|      Encerrado timer: id:107, (10:35:42.3663)
2015-08-26 10:35:42.3891|Info|      Executando timer: id:109, (10:35:42.3891)
2015-08-26 10:35:42.3891|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:42.3891|Info|      Encerrado timer: id:109, (10:35:42.3891)
2015-08-26 10:35:42.4361|Info|      Executando timer: id:108, (10:35:42.4361)
2015-08-26 10:35:42.4361|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-08-26 10:35:42.4361|Info|  Settimeout: id:110, (13) ms
2015-08-26 10:35:42.4913|Info|      Encerrado timer: id:108, (10:35:42.4913)
2015-08-26 10:35:42.4913|Info|      Executando timer: id:110, (10:35:42.4933)
2015-08-26 10:35:42.4913|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:42.4913|Info|  Settimeout: id:111, (0) ms
2015-08-26 10:35:42.5551|Info|  Settimeout: id:112, (32) ms
2015-08-26 10:35:42.6176|Info|      Encerrado timer: id:110, (10:35:42.6176)
2015-08-26 10:35:42.6176|Info|      Executando timer: id:111, (10:35:42.6176)
2015-08-26 10:35:42.6176|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:42.6176|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:42.6176|Info|      Encerrado timer: id:111, (10:35:42.6176)
2015-08-26 10:35:42.6176|Info|      Executando timer: id:112, (10:35:42.6176)
2015-08-26 10:35:42.6176|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 10:35:42.6176|Info|  Settimeout: id:113, (0) ms
2015-08-26 10:35:42.6679|Info|  Settimeout: id:114, (13) ms
2015-08-26 10:35:42.7209|Info|      Encerrado timer: id:112, (10:35:42.7209)
2015-08-26 10:35:42.7209|Info|      Executando timer: id:113, (10:35:42.7209)
2015-08-26 10:35:42.7209|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:42.7209|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:42.7209|Info|      Encerrado timer: id:113, (10:35:42.7209)
2015-08-26 10:35:42.7209|Info|      Executando timer: id:114, (10:35:42.7209)
2015-08-26 10:35:42.7209|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:42.7209|Info|  Settimeout: id:115, (32) ms
2015-08-26 10:35:42.7833|Info|  Settimeout: id:116, (64) ms
2015-08-26 10:35:42.8367|Info|      Encerrado timer: id:114, (10:35:42.8367)
2015-08-26 10:35:42.8367|Info|      Executando timer: id:115, (10:35:42.8387)
2015-08-26 10:35:42.8367|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:42.8367|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:42.8367|Info|      Encerrado timer: id:115, (10:35:42.8477)
2015-08-26 10:35:42.8507|Info|      Executando timer: id:116, (10:35:42.8507)
2015-08-26 10:35:42.8507|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-26 10:35:42.8507|Info|  Settimeout: id:117, (13) ms
2015-08-26 10:35:42.9189|Info|      Encerrado timer: id:116, (10:35:42.9189)
2015-08-26 10:35:42.9189|Info|      Executando timer: id:117, (10:35:42.9189)
2015-08-26 10:35:42.9189|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:42.9189|Info|  Settimeout: id:118, (32) ms
2015-08-26 10:35:42.9814|Info|  Settimeout: id:119, (256) ms
2015-08-26 10:35:43.0315|Info|      Encerrado timer: id:117, (10:35:43.0315)
2015-08-26 10:35:43.0315|Info|      Executando timer: id:118, (10:35:43.0325)
2015-08-26 10:35:43.0315|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:43.0355|Info|  Settimeout: id:120, (32) ms
2015-08-26 10:35:43.1019|Info|!timeoutId && !maxTimeoutId false
2015-08-26 10:35:43.1019|Info|      Encerrado timer: id:118, (10:35:43.1019)
2015-08-26 10:35:43.1019|Info|      Executando timer: id:120, (10:35:43.1019)
2015-08-26 10:35:43.1019|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:43.1019|Info|  Settimeout: id:121, (32) ms
2015-08-26 10:35:43.1524|Info|!timeoutId && !maxTimeoutId false
2015-08-26 10:35:43.1524|Info|      Encerrado timer: id:120, (10:35:43.1534)
2015-08-26 10:35:43.1524|Info|      Executando timer: id:121, (10:35:43.1544)
2015-08-26 10:35:43.1524|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:43.1524|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:43.1524|Info|      Encerrado timer: id:121, (10:35:43.1574)
2015-08-26 10:35:43.2517|Info|      Executando timer: id:119, (10:35:43.2517)
2015-08-26 10:35:43.2517|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-26 10:35:43.2517|Info|  Settimeout: id:122, (13) ms
2015-08-26 10:35:43.3021|Info|      Encerrado timer: id:119, (10:35:43.3021)
2015-08-26 10:35:43.3021|Info|      Executando timer: id:122, (10:35:43.3031)
2015-08-26 10:35:43.3021|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:43.3021|Info|  Settimeout: id:123, (32) ms
2015-08-26 10:35:43.3698|Info|  Settimeout: id:124, (64) ms
2015-08-26 10:35:43.4323|Info|      Encerrado timer: id:122, (10:35:43.4323)
2015-08-26 10:35:43.4323|Info|      Executando timer: id:123, (10:35:43.4323)
2015-08-26 10:35:43.4323|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:43.4323|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:43.4323|Info|      Encerrado timer: id:123, (10:35:43.4323)
2015-08-26 10:35:43.4479|Info|      Executando timer: id:124, (10:35:43.4479)
2015-08-26 10:35:43.4479|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 10:35:43.4479|Info|  Settimeout: id:125, (32) ms
2015-08-26 10:35:43.5069|Info|  Settimeout: id:126, (13) ms
2015-08-26 10:35:43.5706|Info|      Encerrado timer: id:124, (10:35:43.5706)
2015-08-26 10:35:43.5706|Info|      Executando timer: id:125, (10:35:43.5706)
2015-08-26 10:35:43.5706|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:43.5706|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:43.5706|Info|      Encerrado timer: id:125, (10:35:43.5706)
2015-08-26 10:35:43.5706|Info|      Executando timer: id:126, (10:35:43.5706)
2015-08-26 10:35:43.5706|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:43.5706|Info|  Settimeout: id:127, (32) ms
2015-08-26 10:35:43.6211|Info|  Settimeout: id:128, (64) ms
2015-08-26 10:35:43.6871|Info|      Encerrado timer: id:126, (10:35:43.6871)
2015-08-26 10:35:43.6871|Info|      Executando timer: id:128, (10:35:43.6871)
2015-08-26 10:35:43.6871|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-26 10:35:43.6871|Info|  Settimeout: id:129, (13) ms
2015-08-26 10:35:43.7496|Info|      Encerrado timer: id:128, (10:35:43.7496)
2015-08-26 10:35:43.7496|Info|      Executando timer: id:129, (10:35:43.7496)
2015-08-26 10:35:43.7496|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:43.7496|Info|  Settimeout: id:130, (32) ms
2015-08-26 10:35:43.8043|Info|  Settimeout: id:131, (32) ms
2015-08-26 10:35:43.8668|Info|  Settimeout: id:132, (64) ms
2015-08-26 10:35:43.9179|Info|      Encerrado timer: id:129, (10:35:43.9179)
2015-08-26 10:35:43.9179|Info|      Executando timer: id:131, (10:35:43.9199)
2015-08-26 10:35:43.9179|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 10:35:43.9179|Info|      Encerrado timer: id:131, (10:35:43.9249)
2015-08-26 10:35:43.9339|Info|      Executando timer: id:132, (10:35:43.9339)
2015-08-26 10:35:43.9339|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 10:35:43.9339|Info|  Settimeout: id:133, (13) ms
2015-08-26 10:35:43.9957|Info|      Encerrado timer: id:132, (10:35:43.9957)
2015-08-26 10:35:43.9957|Info|      Executando timer: id:133, (10:35:43.9977)
2015-08-26 10:35:43.9957|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:43.9957|Info|  Settimeout: id:134, (32) ms
2015-08-26 10:35:44.0700|Info|      Encerrado timer: id:133, (10:35:44.0700)
2015-08-26 10:35:44.0700|Info|      Executando timer: id:134, (10:35:44.0700)
2015-08-26 10:35:44.0700|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 10:35:44.0700|Info|  Settimeout: id:135, (13) ms
2015-08-26 10:35:44.1355|Info|      Encerrado timer: id:134, (10:35:44.1355)
2015-08-26 10:35:44.1355|Info|      Executando timer: id:135, (10:35:44.1355)
2015-08-26 10:35:44.1355|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:44.1355|Info|  Settimeout: id:136, (32) ms
2015-08-26 10:35:44.1980|Info|  Settimeout: id:137, (64) ms
2015-08-26 10:35:44.2486|Info|      Encerrado timer: id:135, (10:35:44.2486)
2015-08-26 10:35:44.2486|Info|      Executando timer: id:136, (10:35:44.2486)
2015-08-26 10:35:44.2486|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:44.2486|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:44.2486|Info|      Encerrado timer: id:136, (10:35:44.2516)
2015-08-26 10:35:44.2714|Info|      Executando timer: id:137, (10:35:44.2714)
2015-08-26 10:35:44.2714|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-26 10:35:44.2714|Info|  Settimeout: id:138, (13) ms
2015-08-26 10:35:44.3339|Info|      Encerrado timer: id:137, (10:35:44.3339)
2015-08-26 10:35:44.3339|Info|      Executando timer: id:138, (10:35:44.3339)
2015-08-26 10:35:44.3339|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:44.3339|Info|  Settimeout: id:139, (32) ms
2015-08-26 10:35:44.3845|Info|  Settimeout: id:140, (256) ms
2015-08-26 10:35:44.4376|Info|      Encerrado timer: id:138, (10:35:44.4376)
2015-08-26 10:35:44.4376|Info|      Executando timer: id:139, (10:35:44.4376)
2015-08-26 10:35:44.4376|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:44.4376|Info|  Settimeout: id:141, (32) ms
2015-08-26 10:35:44.5001|Info|!timeoutId && !maxTimeoutId false
2015-08-26 10:35:44.5001|Info|      Encerrado timer: id:139, (10:35:44.5001)
2015-08-26 10:35:44.5001|Info|      Executando timer: id:141, (10:35:44.5001)
2015-08-26 10:35:44.5001|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 10:35:44.5001|Info|!timeoutId && !maxTimeoutId true
2015-08-26 10:35:44.5045|Info|      Encerrado timer: id:141, (10:35:44.5045)
2015-08-26 10:35:44.6502|Info|      Executando timer: id:140, (10:35:44.6502)
2015-08-26 10:35:44.6502|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-26 10:35:44.6502|Info|  Settimeout: id:142, (13) ms
2015-08-26 10:35:44.7005|Info|      Encerrado timer: id:140, (10:35:44.7005)
2015-08-26 10:35:44.7005|Info|      Executando timer: id:142, (10:35:44.7015)
2015-08-26 10:35:44.7005|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:44.7115|Info|  Settimeout: id:143, (64) ms
2015-08-26 10:35:44.7707|Info|      Encerrado timer: id:142, (10:35:44.7707)
2015-08-26 10:35:44.7863|Info|      Executando timer: id:143, (10:35:44.7863)
2015-08-26 10:35:44.7863|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 10:35:44.7863|Info|  Settimeout: id:144, (13) ms
2015-08-26 10:35:44.8488|Info|      Encerrado timer: id:143, (10:35:44.8488)
2015-08-26 10:35:44.8488|Info|      Executando timer: id:144, (10:35:44.8488)
2015-08-26 10:35:44.8488|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:44.8488|Info|  Settimeout: id:145, (32) ms
2015-08-26 10:35:44.9197|Info|  Settimeout: id:146, (64) ms
2015-08-26 10:35:44.9822|Info|      Encerrado timer: id:144, (10:35:44.9822)
2015-08-26 10:35:44.9978|Info|      Executando timer: id:146, (10:35:44.9978)
2015-08-26 10:35:44.9978|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-26 10:35:44.9978|Info|  Settimeout: id:147, (13) ms
2015-08-26 10:35:45.0543|Info|      Encerrado timer: id:146, (10:35:45.0543)
2015-08-26 10:35:45.0543|Info|      Executando timer: id:147, (10:35:45.0543)
2015-08-26 10:35:45.0543|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:35:45.0543|Info|  Settimeout: id:148, (64) ms
2015-08-26 10:35:45.1168|Info|      Encerrado timer: id:147, (10:35:45.1168)
2015-08-26 10:35:45.1324|Info|      Executando timer: id:148, (10:35:45.1324)
2015-08-26 10:35:45.1324|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 10:35:45.1324|Info|  Settimeout: id:149, (13) ms
2015-08-26 10:35:45.1824|Info|      Encerrado timer: id:148, (10:35:45.1824)
2015-08-26 10:35:45.1824|Info|      Executando timer: id:149, (10:35:45.1843)
2015-08-26 10:35:45.1824|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:00.6656|Info|Iniciando os testes
2015-08-26 10:36:03.3878|Info|Encerrando os testes
2015-08-26 10:36:03.3878|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 10:36:03.3878|Info|3 segundos para avaliar o individuo global.js
2015-08-26 10:36:06.3681|Info|  Settimeout: id:0, (500) ms
2015-08-26 10:36:06.5201|Info|Iniciando os testes
2015-08-26 10:36:06.5201|Info|  Settimeout: id:1, (13) ms
2015-08-26 10:36:06.5514|Info|      Executando timer: id:1, (10:36:06.5514)
2015-08-26 10:36:06.6260|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:06.6390|Info|----------------------------------------
2015-08-26 10:36:06.6390|Info|Arrays
2015-08-26 10:36:06.6390|Info|----------------------------------------
2015-08-26 10:36:06.6390|Info| PASS - first
2015-08-26 10:36:06.6390|Info| PASS - head
2015-08-26 10:36:06.6390|Info| PASS - take
2015-08-26 10:36:06.6460|Info| PASS - rest
2015-08-26 10:36:06.6460|Info| PASS - tail
2015-08-26 10:36:06.6460|Info| PASS - drop
2015-08-26 10:36:06.6460|Info| PASS - initial
2015-08-26 10:36:06.6460|Info| PASS - last
2015-08-26 10:36:06.6460|Info| PASS - compact
2015-08-26 10:36:07.1276|Info| PASS - flatten
2015-08-26 10:36:07.1276|Info| PASS - without
2015-08-26 10:36:07.1296|Info| PASS - sortedIndex
2015-08-26 10:36:07.1296|Info| PASS - uniq
2015-08-26 10:36:07.1296|Info| PASS - unique
2015-08-26 10:36:07.1296|Info| PASS - intersection
2015-08-26 10:36:07.1296|Info| PASS - union
2015-08-26 10:36:07.1296|Info| PASS - difference
2015-08-26 10:36:07.1296|Info| PASS - zip
2015-08-26 10:36:07.1296|Info| PASS - unzip
2015-08-26 10:36:07.1296|Info| PASS - object
2015-08-26 10:36:07.1296|Info| PASS - indexOf
2015-08-26 10:36:07.1296|Info| PASS - indexOf with NaN
2015-08-26 10:36:07.1296|Info| PASS - indexOf with +- 0
2015-08-26 10:36:07.1296|Info| PASS - lastIndexOf
2015-08-26 10:36:07.1296|Info| PASS - lastIndexOf with NaN
2015-08-26 10:36:07.1296|Info| PASS - lastIndexOf with +- 0
2015-08-26 10:36:07.1296|Info| PASS - findIndex
2015-08-26 10:36:07.1296|Info| PASS - findLastIndex
2015-08-26 10:36:07.1296|Info| PASS - range
2015-08-26 10:36:07.1296|Info|----------------------------------------
2015-08-26 10:36:07.1296|Info|Chaining
2015-08-26 10:36:07.1296|Info|----------------------------------------
2015-08-26 10:36:07.1296|Info| PASS - map/flatten/reduce
2015-08-26 10:36:07.1296|Info| PASS - select/reject/sortBy
2015-08-26 10:36:07.1296|Info| PASS - select/reject/sortBy in functional style
2015-08-26 10:36:07.1296|Info| PASS - reverse/concat/unshift/pop/map
2015-08-26 10:36:07.1563|Info| PASS - splice
2015-08-26 10:36:07.1563|Info| PASS - shift
2015-08-26 10:36:07.1563|Info| PASS - pop
2015-08-26 10:36:07.1563|Info| PASS - chaining works in small stages
2015-08-26 10:36:07.1563|Info| PASS - #1562: Engine proxies for chained functions
2015-08-26 10:36:07.1563|Info|----------------------------------------
2015-08-26 10:36:07.1563|Info|Collections
2015-08-26 10:36:07.1563|Info|----------------------------------------
2015-08-26 10:36:07.1563|Info| PASS - each
2015-08-26 10:36:07.1563|Info| PASS - forEach
2015-08-26 10:36:07.1563|Info| PASS - lookupIterator with contexts
2015-08-26 10:36:07.1563|Info| PASS - Iterating objects with sketchy length properties
2015-08-26 10:36:07.1719|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-26 10:36:07.1719|Info| PASS - map
2015-08-26 10:36:07.1719|Info| PASS - collect
2015-08-26 10:36:07.1719|Info| PASS - reduce
2015-08-26 10:36:07.1719|Info| PASS - foldl
2015-08-26 10:36:07.1719|Info| PASS - reduceRight
2015-08-26 10:36:07.1719|Info| PASS - foldr
2015-08-26 10:36:07.1719|Info| PASS - find
2015-08-26 10:36:07.1719|Info| PASS - detect
2015-08-26 10:36:07.1719|Info| PASS - filter
2015-08-26 10:36:07.1719|Info| PASS - select
2015-08-26 10:36:07.1875|Info| PASS - reject
2015-08-26 10:36:07.1875|Info| PASS - every
2015-08-26 10:36:07.1875|Info| PASS - all
2015-08-26 10:36:07.1875|Info| PASS - some
2015-08-26 10:36:07.1875|Info| PASS - any
2015-08-26 10:36:07.1875|Info| PASS - includes
2015-08-26 10:36:07.1875|Info| PASS - include
2015-08-26 10:36:07.1875|Info| PASS - contains
2015-08-26 10:36:07.1875|Info| PASS - includes with NaN
2015-08-26 10:36:07.1875|Info| PASS - includes with +- 0
2015-08-26 10:36:07.1875|Info| PASS - invoke
2015-08-26 10:36:07.1875|Info| PASS - invoke w/ function reference
2015-08-26 10:36:07.1875|Info| PASS - invoke when strings have a call method
2015-08-26 10:36:07.2032|Info| PASS - pluck
2015-08-26 10:36:07.2032|Info| PASS - where
2015-08-26 10:36:07.2032|Info| PASS - findWhere
2015-08-26 10:36:07.2344|Info| PASS - max
2015-08-26 10:36:07.2654|Info| PASS - min
2015-08-26 10:36:07.2654|Info| PASS - sortBy
2015-08-26 10:36:07.2654|Info| PASS - groupBy
2015-08-26 10:36:07.2654|Info| PASS - indexBy
2015-08-26 10:36:07.2704|Info| PASS - countBy
2015-08-26 10:36:07.2704|Info| PASS - shuffle
2015-08-26 10:36:07.2704|Info| PASS - sample
2015-08-26 10:36:07.2704|Info| PASS - toArray
2015-08-26 10:36:07.2704|Info| PASS - size
2015-08-26 10:36:07.2704|Info| PASS - partition
2015-08-26 10:36:07.2704|Info|----------------------------------------
2015-08-26 10:36:07.2704|Info|Functions
2015-08-26 10:36:07.2704|Info|----------------------------------------
2015-08-26 10:36:07.2704|Info| PASS - bind
2015-08-26 10:36:07.2704|Info| PASS - partial
2015-08-26 10:36:07.2704|Info| PASS - bindAll
2015-08-26 10:36:07.2854|Info| PASS - memoize
2015-08-26 10:36:07.2854|Info|  Settimeout: id:2, (100) ms
2015-08-26 10:36:07.3374|Info|  Settimeout: id:3, (50) ms
2015-08-26 10:36:07.3877|Info|  Settimeout: id:4, (150) ms
2015-08-26 10:36:07.4391|Info|      Encerrado timer: id:1, (10:36:07.4391)
2015-08-26 10:36:07.4481|Info|      Executando timer: id:0, (10:36:07.4481)
2015-08-26 10:36:07.4481|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 10:36:07.4481|Info|  Settimeout: id:5, (500) ms
2015-08-26 10:36:07.5197|Info|      Encerrado timer: id:0, (10:36:07.5197)
2015-08-26 10:36:07.5197|Info|      Executando timer: id:2, (10:36:07.5197)
2015-08-26 10:36:07.5197|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:07.5197|Info|      Encerrado timer: id:2, (10:36:07.5197)
2015-08-26 10:36:07.5197|Info|      Executando timer: id:3, (10:36:07.5197)
2015-08-26 10:36:07.5197|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:36:07.5353|Info|      Encerrado timer: id:3, (10:36:07.5353)
2015-08-26 10:36:07.5510|Info|      Executando timer: id:4, (10:36:07.5510)
2015-08-26 10:36:07.5510|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:36:07.5510|Info|  Settimeout: id:6, (13) ms
2015-08-26 10:36:07.6020|Info|      Encerrado timer: id:4, (10:36:07.6020)
2015-08-26 10:36:07.6020|Info|      Executando timer: id:6, (10:36:07.6029)
2015-08-26 10:36:07.6020|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:07.6020|Info|  Settimeout: id:7, (1) ms
2015-08-26 10:36:07.6710|Info|  Settimeout: id:8, (50) ms
2015-08-26 10:36:07.7337|Info|      Encerrado timer: id:6, (10:36:07.7337)
2015-08-26 10:36:07.7337|Info|      Executando timer: id:7, (10:36:07.7357)
2015-08-26 10:36:07.7337|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:07.7407|Info|      Encerrado timer: id:7, (10:36:07.7407)
2015-08-26 10:36:07.7881|Info|      Executando timer: id:8, (10:36:07.7881)
2015-08-26 10:36:07.7881|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:07.7881|Info|  Settimeout: id:9, (13) ms
2015-08-26 10:36:07.8507|Info|      Encerrado timer: id:8, (10:36:07.8507)
2015-08-26 10:36:07.8507|Info|      Executando timer: id:9, (10:36:07.8507)
2015-08-26 10:36:07.8507|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:07.8507|Info| PASS - defer
2015-08-26 10:36:07.8507|Info|  Settimeout: id:10, (32) ms
2015-08-26 10:36:07.9011|Info|  Settimeout: id:11, (64) ms
2015-08-26 10:36:07.9552|Info|      Encerrado timer: id:9, (10:36:07.9552)
2015-08-26 10:36:07.9552|Info|      Executando timer: id:10, (10:36:07.9552)
2015-08-26 10:36:07.9552|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:07.9552|Info|      Encerrado timer: id:10, (10:36:07.9552)
2015-08-26 10:36:07.9708|Info|      Executando timer: id:5, (10:36:07.9708)
2015-08-26 10:36:07.9708|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 10:36:07.9708|Info|      Encerrado timer: id:5, (10:36:07.9708)
2015-08-26 10:36:07.9708|Info|      Executando timer: id:11, (10:36:07.9708)
2015-08-26 10:36:07.9708|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:07.9708|Info|  Settimeout: id:12, (13) ms
2015-08-26 10:36:08.0367|Info|      Encerrado timer: id:11, (10:36:08.0367)
2015-08-26 10:36:08.0367|Info|      Executando timer: id:12, (10:36:08.0377)
2015-08-26 10:36:08.0367|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:08.0367|Info| PASS - throttle
2015-08-26 10:36:08.0367|Info|  Settimeout: id:13, (32) ms
2015-08-26 10:36:08.1072|Info|  Settimeout: id:14, (64) ms
2015-08-26 10:36:08.1697|Info|  Settimeout: id:15, (96) ms
2015-08-26 10:36:08.2198|Info|      Encerrado timer: id:12, (10:36:08.2198)
2015-08-26 10:36:08.2198|Info|      Executando timer: id:13, (10:36:08.2208)
2015-08-26 10:36:08.2198|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:08.2198|Info|      Encerrado timer: id:13, (10:36:08.2228)
2015-08-26 10:36:08.2238|Info|      Executando timer: id:14, (10:36:08.2238)
2015-08-26 10:36:08.2238|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:08.2238|Info|  Settimeout: id:16, (30) ms
2015-08-26 10:36:08.2891|Info|      Encerrado timer: id:14, (10:36:08.2891)
2015-08-26 10:36:08.2891|Info|      Executando timer: id:16, (10:36:08.2891)
2015-08-26 10:36:08.2891|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:08.2891|Info|      Encerrado timer: id:16, (10:36:08.2891)
2015-08-26 10:36:08.2891|Info|      Executando timer: id:15, (10:36:08.2891)
2015-08-26 10:36:08.2891|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:08.2891|Info|  Settimeout: id:17, (13) ms
2015-08-26 10:36:08.3392|Info|      Encerrado timer: id:15, (10:36:08.3392)
2015-08-26 10:36:08.3392|Info|      Executando timer: id:17, (10:36:08.3402)
2015-08-26 10:36:08.3392|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:08.3392|Info| PASS - throttle arguments
2015-08-26 10:36:08.3392|Info|  Settimeout: id:18, (64) ms
2015-08-26 10:36:08.3983|Info|      Encerrado timer: id:17, (10:36:08.3983)
2015-08-26 10:36:08.4232|Info|      Executando timer: id:18, (10:36:08.4232)
2015-08-26 10:36:08.4232|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:08.4232|Info|  Settimeout: id:19, (13) ms
2015-08-26 10:36:08.4856|Info|      Encerrado timer: id:18, (10:36:08.4856)
2015-08-26 10:36:08.4856|Info|      Executando timer: id:19, (10:36:08.4856)
2015-08-26 10:36:08.4856|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:08.4856|Info| PASS - throttle once
2015-08-26 10:36:08.4856|Info|  Settimeout: id:20, (32) ms
2015-08-26 10:36:08.5366|Info|  Settimeout: id:21, (64) ms
2015-08-26 10:36:08.6031|Info|      Encerrado timer: id:19, (10:36:08.6031)
2015-08-26 10:36:08.6031|Info|      Executando timer: id:20, (10:36:08.6031)
2015-08-26 10:36:08.6031|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:08.6031|Info|      Encerrado timer: id:20, (10:36:08.6031)
2015-08-26 10:36:08.6031|Info|      Executando timer: id:21, (10:36:08.6031)
2015-08-26 10:36:08.6031|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:08.6031|Info|  Settimeout: id:22, (13) ms
2015-08-26 10:36:08.6657|Info|      Encerrado timer: id:21, (10:36:08.6657)
2015-08-26 10:36:08.6657|Info|      Executando timer: id:22, (10:36:08.6657)
2015-08-26 10:36:08.6657|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:08.6657|Info| PASS - throttle twice
2015-08-26 10:36:08.6657|Info|  Settimeout: id:23, (30) ms
2015-08-26 10:36:08.7227|Info|  Settimeout: id:24, (85) ms
2015-08-26 10:36:08.7852|Info|      Encerrado timer: id:22, (10:36:08.7852)
2015-08-26 10:36:08.7852|Info|      Executando timer: id:23, (10:36:08.7852)
2015-08-26 10:36:08.7852|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:08.7852|Info|      Encerrado timer: id:23, (10:36:08.7852)
2015-08-26 10:36:08.8165|Info|      Executando timer: id:24, (10:36:08.8165)
2015-08-26 10:36:08.8165|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:08.8199|Info|  Settimeout: id:25, (13) ms
2015-08-26 10:36:08.8740|Info|      Encerrado timer: id:24, (10:36:08.8740)
2015-08-26 10:36:08.8740|Info|      Executando timer: id:25, (10:36:08.8740)
2015-08-26 10:36:08.8740|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:08.8740|Info| PASS - more throttling
2015-08-26 10:36:08.8818|Info|  Settimeout: id:26, (99) ms
2015-08-26 10:36:08.9395|Info|  Settimeout: id:27, (50) ms
2015-08-26 10:36:08.9897|Info|  Settimeout: id:28, (150) ms
2015-08-26 10:36:09.0536|Info|  Settimeout: id:29, (160) ms
2015-08-26 10:36:09.1161|Info|  Settimeout: id:30, (230) ms
2015-08-26 10:36:09.1669|Info|  Settimeout: id:31, (300) ms
2015-08-26 10:36:09.2199|Info|      Encerrado timer: id:25, (10:36:09.2199)
2015-08-26 10:36:09.2199|Info|      Executando timer: id:26, (10:36:09.2199)
2015-08-26 10:36:09.2199|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:09.2199|Info|      Encerrado timer: id:26, (10:36:09.2199)
2015-08-26 10:36:09.2199|Info|      Executando timer: id:27, (10:36:09.2199)
2015-08-26 10:36:09.2199|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:09.2199|Info|  Settimeout: id:32, (100) ms
2015-08-26 10:36:09.2877|Info|      Encerrado timer: id:27, (10:36:09.2877)
2015-08-26 10:36:09.2877|Info|      Executando timer: id:28, (10:36:09.2887)
2015-08-26 10:36:09.2877|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:09.2877|Info|      Encerrado timer: id:28, (10:36:09.2937)
2015-08-26 10:36:09.2877|Info|      Executando timer: id:29, (10:36:09.2947)
2015-08-26 10:36:09.2877|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:09.2877|Info|      Encerrado timer: id:29, (10:36:09.2967)
2015-08-26 10:36:09.3385|Info|      Executando timer: id:32, (10:36:09.3385)
2015-08-26 10:36:09.3385|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:09.3385|Info|      Encerrado timer: id:32, (10:36:09.3385)
2015-08-26 10:36:09.3542|Info|      Executando timer: id:30, (10:36:09.3542)
2015-08-26 10:36:09.3542|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:09.3542|Info|  Settimeout: id:33, (84) ms
2015-08-26 10:36:09.4051|Info|      Encerrado timer: id:30, (10:36:09.4051)
2015-08-26 10:36:09.4436|Info|      Executando timer: id:33, (10:36:09.4436)
2015-08-26 10:36:09.4436|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:09.4436|Info|      Encerrado timer: id:33, (10:36:09.4475)
2015-08-26 10:36:09.4686|Info|      Executando timer: id:31, (10:36:09.4686)
2015-08-26 10:36:09.4686|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:09.4686|Info|  Settimeout: id:34, (13) ms
2015-08-26 10:36:09.5218|Info|      Encerrado timer: id:31, (10:36:09.5218)
2015-08-26 10:36:09.5218|Info|      Executando timer: id:34, (10:36:09.5218)
2015-08-26 10:36:09.5218|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:09.5218|Info|  Settimeout: id:35, (32) ms
2015-08-26 10:36:09.5842|Info|  Settimeout: id:36, (96) ms
2015-08-26 10:36:09.6345|Info|      Encerrado timer: id:34, (10:36:09.6345)
2015-08-26 10:36:09.6345|Info|      Executando timer: id:35, (10:36:09.6364)
2015-08-26 10:36:09.6345|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:09.6345|Info|      Encerrado timer: id:35, (10:36:09.6395)
2015-08-26 10:36:09.6865|Info|      Executando timer: id:36, (10:36:09.6865)
2015-08-26 10:36:09.6865|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:09.6865|Info|  Settimeout: id:37, (13) ms
2015-08-26 10:36:09.7489|Info|      Encerrado timer: id:36, (10:36:09.7489)
2015-08-26 10:36:09.7489|Info|      Executando timer: id:37, (10:36:09.7489)
2015-08-26 10:36:09.7489|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:09.7489|Info|  Settimeout: id:38, (60) ms
2015-08-26 10:36:09.7991|Info|  Settimeout: id:39, (96) ms
2015-08-26 10:36:09.8540|Info|      Encerrado timer: id:37, (10:36:09.8540)
2015-08-26 10:36:09.8540|Info|      Executando timer: id:38, (10:36:09.8540)
2015-08-26 10:36:09.8540|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:09.8540|Info|      Encerrado timer: id:38, (10:36:09.8540)
2015-08-26 10:36:09.9009|Info|      Executando timer: id:39, (10:36:09.9009)
2015-08-26 10:36:09.9009|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:09.9009|Info|  Settimeout: id:40, (13) ms
2015-08-26 10:36:09.9720|Info|      Encerrado timer: id:39, (10:36:09.9720)
2015-08-26 10:36:09.9720|Info|      Executando timer: id:40, (10:36:09.9720)
2015-08-26 10:36:10.0033|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:10.0033|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-08-26 10:36:10.0033|Info|  Settimeout: id:41, (100) ms
2015-08-26 10:36:10.0658|Info|  Settimeout: id:42, (50) ms
2015-08-26 10:36:10.1166|Info|  Settimeout: id:43, (60) ms
2015-08-26 10:36:10.1706|Info|  Settimeout: id:44, (200) ms
2015-08-26 10:36:10.2331|Info|  Settimeout: id:45, (250) ms
2015-08-26 10:36:10.2899|Info|  Settimeout: id:46, (350) ms
2015-08-26 10:36:10.3524|Info|      Encerrado timer: id:40, (10:36:10.3524)
2015-08-26 10:36:10.3524|Info|      Executando timer: id:41, (10:36:10.3524)
2015-08-26 10:36:10.3524|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:10.3524|Info|      Encerrado timer: id:41, (10:36:10.3524)
2015-08-26 10:36:10.3524|Info|      Executando timer: id:42, (10:36:10.3524)
2015-08-26 10:36:10.3524|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:10.3524|Info|  Settimeout: id:47, (100) ms
2015-08-26 10:36:10.4028|Info|      Encerrado timer: id:42, (10:36:10.4028)
2015-08-26 10:36:10.4028|Info|      Executando timer: id:43, (10:36:10.4038)
2015-08-26 10:36:10.4028|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:10.4028|Info|      Encerrado timer: id:43, (10:36:10.4058)
2015-08-26 10:36:10.4028|Info|      Executando timer: id:44, (10:36:10.4068)
2015-08-26 10:36:10.4028|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:10.4028|Info|      Encerrado timer: id:44, (10:36:10.4088)
2015-08-26 10:36:10.4722|Info|      Executando timer: id:47, (10:36:10.4722)
2015-08-26 10:36:10.4722|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:10.4722|Info|      Encerrado timer: id:47, (10:36:10.4722)
2015-08-26 10:36:10.4879|Info|      Executando timer: id:45, (10:36:10.4879)
2015-08-26 10:36:10.4879|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:10.4879|Info|      Encerrado timer: id:45, (10:36:10.4879)
2015-08-26 10:36:10.6517|Info|      Executando timer: id:46, (10:36:10.6517)
2015-08-26 10:36:10.6517|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:10.6517|Info|  Settimeout: id:48, (13) ms
2015-08-26 10:36:10.7021|Info|      Encerrado timer: id:46, (10:36:10.7021)
2015-08-26 10:36:10.7021|Info|      Executando timer: id:48, (10:36:10.7031)
2015-08-26 10:36:10.7021|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:10.7021|Info|  Settimeout: id:49, (100) ms
2015-08-26 10:36:10.8183|Info|  Settimeout: id:50, (100) ms
2015-08-26 10:36:10.9189|Info|  Settimeout: id:51, (100) ms
2015-08-26 10:36:11.0189|Info|  Settimeout: id:52, (100) ms
2015-08-26 10:36:11.0855|Info|  Settimeout: id:53, (200) ms
2015-08-26 10:36:11.1480|Info|      Encerrado timer: id:48, (10:36:11.1480)
2015-08-26 10:36:11.1480|Info|      Executando timer: id:52, (10:36:11.1480)
2015-08-26 10:36:11.1480|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:11.1480|Info|      Encerrado timer: id:52, (10:36:11.1480)
2015-08-26 10:36:11.2938|Info|      Executando timer: id:53, (10:36:11.2938)
2015-08-26 10:36:11.2938|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:11.2938|Info|  Settimeout: id:54, (13) ms
2015-08-26 10:36:11.3590|Info|      Encerrado timer: id:53, (10:36:11.3590)
2015-08-26 10:36:11.3590|Info|      Executando timer: id:54, (10:36:11.3590)
2015-08-26 10:36:11.3590|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:11.3590|Info| PASS - one more throttle with leading: false test
2015-08-26 10:36:11.3590|Info|  Settimeout: id:55, (96) ms
2015-08-26 10:36:11.4215|Info|      Encerrado timer: id:54, (10:36:11.4215)
2015-08-26 10:36:11.4730|Info|      Executando timer: id:55, (10:36:11.4730)
2015-08-26 10:36:11.4730|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:11.4730|Info|  Settimeout: id:56, (96) ms
2015-08-26 10:36:11.5231|Info|      Encerrado timer: id:55, (10:36:11.5231)
2015-08-26 10:36:11.5856|Info|      Executando timer: id:56, (10:36:11.5856)
2015-08-26 10:36:11.5856|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:11.5856|Info|  Settimeout: id:57, (13) ms
2015-08-26 10:36:11.6481|Info|      Encerrado timer: id:56, (10:36:11.6481)
2015-08-26 10:36:11.6481|Info|      Executando timer: id:57, (10:36:11.6481)
2015-08-26 10:36:11.6481|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:11.6481|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-26 10:36:11.6481|Info|  Settimeout: id:58, (200) ms
2015-08-26 10:36:11.7217|Info|      Encerrado timer: id:57, (10:36:11.7217)
2015-08-26 10:36:11.8726|Info|      Executando timer: id:58, (10:36:11.8726)
2015-08-26 10:36:11.8726|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:11.8726|Info|  Settimeout: id:59, (13) ms
2015-08-26 10:36:11.9351|Info|      Encerrado timer: id:58, (10:36:11.9351)
2015-08-26 10:36:11.9351|Info|      Executando timer: id:59, (10:36:11.9351)
2015-08-26 10:36:11.9351|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:11.9426|Info| PASS - throttle continues to function after system time is set backwards
2015-08-26 10:36:11.9426|Info|  Settimeout: id:60, (31) ms
2015-08-26 10:36:12.0064|Info|  Settimeout: id:61, (100) ms
2015-08-26 10:36:12.0689|Info|      Encerrado timer: id:59, (10:36:12.0689)
2015-08-26 10:36:12.0689|Info|      Executando timer: id:60, (10:36:12.0689)
2015-08-26 10:36:12.0689|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:12.0689|Info|  Settimeout: id:62, (32) ms
2015-08-26 10:36:12.1190|Info|      Encerrado timer: id:60, (10:36:12.1190)
2015-08-26 10:36:12.1190|Info|      Executando timer: id:61, (10:36:12.1210)
2015-08-26 10:36:12.1190|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:12.1190|Info|  Settimeout: id:63, (13) ms
2015-08-26 10:36:12.1883|Info|      Encerrado timer: id:61, (10:36:12.1883)
2015-08-26 10:36:12.1883|Info|      Executando timer: id:62, (10:36:12.1883)
2015-08-26 10:36:12.1883|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:12.1883|Info|      Encerrado timer: id:62, (10:36:12.1883)
2015-08-26 10:36:12.1883|Info|      Executando timer: id:63, (10:36:12.1883)
2015-08-26 10:36:12.1883|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:12.1883|Info|  Settimeout: id:64, (32) ms
2015-08-26 10:36:12.2509|Info|  Settimeout: id:65, (16) ms
2015-08-26 10:36:12.3016|Info|  Settimeout: id:66, (96) ms
2015-08-26 10:36:12.3556|Info|      Encerrado timer: id:63, (10:36:12.3556)
2015-08-26 10:36:12.3556|Info|      Executando timer: id:64, (10:36:12.3556)
2015-08-26 10:36:12.3556|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:12.3556|Info|      Encerrado timer: id:64, (10:36:12.3556)
2015-08-26 10:36:12.3556|Info|      Executando timer: id:65, (10:36:12.3556)
2015-08-26 10:36:12.3556|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:12.3556|Info|  Settimeout: id:67, (32) ms
2015-08-26 10:36:12.4181|Info|      Encerrado timer: id:65, (10:36:12.4181)
2015-08-26 10:36:12.4181|Info|      Executando timer: id:66, (10:36:12.4181)
2015-08-26 10:36:12.4181|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:12.4181|Info|  Settimeout: id:68, (13) ms
2015-08-26 10:36:12.4729|Info|      Encerrado timer: id:66, (10:36:12.4729)
2015-08-26 10:36:12.4729|Info|      Executando timer: id:67, (10:36:12.4729)
2015-08-26 10:36:12.4740|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:12.4740|Info|      Encerrado timer: id:67, (10:36:12.4740)
2015-08-26 10:36:12.4740|Info|      Executando timer: id:68, (10:36:12.4740)
2015-08-26 10:36:12.4740|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:12.4740|Info| PASS - debounce
2015-08-26 10:36:12.4740|Info|  Settimeout: id:69, (64) ms
2015-08-26 10:36:12.5366|Info|  Settimeout: id:70, (16) ms
2015-08-26 10:36:12.5873|Info|  Settimeout: id:71, (32) ms
2015-08-26 10:36:12.6547|Info|  Settimeout: id:72, (48) ms
2015-08-26 10:36:12.7172|Info|  Settimeout: id:73, (128) ms
2015-08-26 10:36:12.7675|Info|      Encerrado timer: id:68, (10:36:12.7675)
2015-08-26 10:36:12.7675|Info|      Executando timer: id:69, (10:36:12.7685)
2015-08-26 10:36:12.7675|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:12.7715|Info|      Encerrado timer: id:69, (10:36:12.7715)
2015-08-26 10:36:12.7715|Info|      Executando timer: id:70, (10:36:12.7725)
2015-08-26 10:36:12.7715|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:12.7715|Info|  Settimeout: id:74, (64) ms
2015-08-26 10:36:12.8371|Info|      Encerrado timer: id:70, (10:36:12.8371)
2015-08-26 10:36:12.8371|Info|      Executando timer: id:71, (10:36:12.8371)
2015-08-26 10:36:12.8371|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:12.8371|Info|      Encerrado timer: id:71, (10:36:12.8371)
2015-08-26 10:36:12.8371|Info|      Executando timer: id:72, (10:36:12.8371)
2015-08-26 10:36:12.8371|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:12.8371|Info|      Encerrado timer: id:72, (10:36:12.8371)
2015-08-26 10:36:12.8528|Info|      Executando timer: id:73, (10:36:12.8528)
2015-08-26 10:36:12.8528|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:12.8528|Info|  Settimeout: id:75, (13) ms
2015-08-26 10:36:12.9035|Info|      Encerrado timer: id:73, (10:36:12.9035)
2015-08-26 10:36:12.9035|Info|      Executando timer: id:74, (10:36:12.9035)
2015-08-26 10:36:12.9035|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:12.9035|Info|      Encerrado timer: id:74, (10:36:12.9055)
2015-08-26 10:36:12.9035|Info|      Executando timer: id:75, (10:36:12.9055)
2015-08-26 10:36:12.9035|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:12.9035|Info|  Settimeout: id:76, (32) ms
2015-08-26 10:36:12.9590|Info|  Settimeout: id:77, (96) ms
2015-08-26 10:36:13.0224|Info|      Encerrado timer: id:75, (10:36:13.0224)
2015-08-26 10:36:13.0224|Info|      Executando timer: id:76, (10:36:13.0224)
2015-08-26 10:36:13.0224|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:13.0224|Info|      Encerrado timer: id:76, (10:36:13.0224)
2015-08-26 10:36:13.0578|Info|      Executando timer: id:77, (10:36:13.0577)
2015-08-26 10:36:13.0578|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:13.0578|Info|  Settimeout: id:78, (13) ms
2015-08-26 10:36:13.1204|Info|      Encerrado timer: id:77, (10:36:13.1204)
2015-08-26 10:36:13.1204|Info|      Executando timer: id:78, (10:36:13.1204)
2015-08-26 10:36:13.1204|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:13.1204|Info| PASS - debounce asap recursively
2015-08-26 10:36:13.1204|Info|  Settimeout: id:79, (100) ms
2015-08-26 10:36:13.1829|Info|  Settimeout: id:80, (200) ms
2015-08-26 10:36:13.2334|Info|      Encerrado timer: id:78, (10:36:13.2334)
2015-08-26 10:36:13.2334|Info|      Executando timer: id:79, (10:36:13.2354)
2015-08-26 10:36:13.2334|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:13.2395|Info|      Encerrado timer: id:79, (10:36:13.2395)
2015-08-26 10:36:13.3892|Info|      Executando timer: id:80, (10:36:13.3892)
2015-08-26 10:36:13.3892|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:13.3892|Info|  Settimeout: id:81, (100) ms
2015-08-26 10:36:13.4517|Info|  Settimeout: id:82, (13) ms
2015-08-26 10:36:13.5070|Info|      Encerrado timer: id:80, (10:36:13.5070)
2015-08-26 10:36:13.5070|Info|      Executando timer: id:82, (10:36:13.5070)
2015-08-26 10:36:13.5070|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:13.5070|Info| PASS - debounce after system time is set backwards
2015-08-26 10:36:13.5070|Info|  Settimeout: id:83, (32) ms
2015-08-26 10:36:13.5726|Info|  Settimeout: id:84, (100) ms
2015-08-26 10:36:13.6350|Info|      Encerrado timer: id:82, (10:36:13.6350)
2015-08-26 10:36:13.6350|Info|      Executando timer: id:81, (10:36:13.6350)
2015-08-26 10:36:13.6350|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:13.6350|Info|      Encerrado timer: id:81, (10:36:13.6350)
2015-08-26 10:36:13.6350|Info|      Executando timer: id:83, (10:36:13.6350)
2015-08-26 10:36:13.6350|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:13.6350|Info|  Settimeout: id:85, (32) ms
2015-08-26 10:36:13.6857|Info|      Encerrado timer: id:83, (10:36:13.6857)
2015-08-26 10:36:13.6857|Info|      Executando timer: id:84, (10:36:13.6857)
2015-08-26 10:36:13.6857|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:13.6857|Info|  Settimeout: id:86, (13) ms
2015-08-26 10:36:13.7556|Info|      Encerrado timer: id:84, (10:36:13.7556)
2015-08-26 10:36:13.7556|Info|      Executando timer: id:85, (10:36:13.7556)
2015-08-26 10:36:13.7556|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:13.7556|Info|      Encerrado timer: id:85, (10:36:13.7556)
2015-08-26 10:36:13.7556|Info|      Executando timer: id:86, (10:36:13.7556)
2015-08-26 10:36:13.7556|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:13.7556|Info| PASS - once
2015-08-26 10:36:13.7556|Info| PASS - Recursive onced function.
2015-08-26 10:36:13.7556|Info| PASS - wrap
2015-08-26 10:36:13.7556|Info| PASS - negate
2015-08-26 10:36:13.7556|Info| PASS - compose
2015-08-26 10:36:13.7556|Info| PASS - after
2015-08-26 10:36:13.7556|Info| PASS - before
2015-08-26 10:36:13.7556|Info| PASS - iteratee
2015-08-26 10:36:13.7556|Info|----------------------------------------
2015-08-26 10:36:13.7556|Info|Objects
2015-08-26 10:36:13.7556|Info|----------------------------------------
2015-08-26 10:36:13.7556|Info| PASS - keys
2015-08-26 10:36:13.7556|Info| PASS - allKeys
2015-08-26 10:36:13.7712|Info| PASS - values
2015-08-26 10:36:13.7712|Info| PASS - pairs
2015-08-26 10:36:13.7712|Info| PASS - invert
2015-08-26 10:36:13.7712|Info| PASS - functions
2015-08-26 10:36:13.7712|Info| PASS - methods
2015-08-26 10:36:13.7712|Info| PASS - extend
2015-08-26 10:36:13.7712|Info| PASS - extendOwn
2015-08-26 10:36:13.7712|Info| PASS - pick
2015-08-26 10:36:13.7712|Info| PASS - omit
2015-08-26 10:36:13.7712|Info| PASS - defaults
2015-08-26 10:36:13.7712|Info| PASS - clone
2015-08-26 10:36:13.7712|Info| PASS - create
2015-08-26 10:36:13.7868|Info| PASS - isEqual
2015-08-26 10:36:13.7868|Info| PASS - isEmpty
2015-08-26 10:36:13.7868|Info| PASS - isArguments
2015-08-26 10:36:13.7868|Info| PASS - isObject
2015-08-26 10:36:13.7868|Info| PASS - isArray
2015-08-26 10:36:13.7868|Info| PASS - isString
2015-08-26 10:36:13.7868|Info| PASS - isNumber
2015-08-26 10:36:13.7868|Info| PASS - isBoolean
2015-08-26 10:36:13.7868|Info| PASS - isFunction
2015-08-26 10:36:13.7868|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-26 10:36:13.7868|Info|    PASS | EQ | can extract the keys from an object
2015-08-26 10:36:13.7868|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 10:36:13.7868|Info|    PASS | EQ | ok
2015-08-26 10:36:13.7868|Info|    PASS | EQ | ok
2015-08-26 10:36:13.7868|Info|    PASS | EQ | ok
2015-08-26 10:36:13.7868|Info|    PASS | EQ | ok
2015-08-26 10:36:13.7868|Info|    PASS | EQ | ok
2015-08-26 10:36:13.7868|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 10:36:13.8025|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-26 10:36:13.8025|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 10:36:13.8025|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8025|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 10:36:13.8025|Info|    PASS | EQ | should include inherited keys
2015-08-26 10:36:13.8025|Info|    PASS | EQ | should get keys from constructor
2015-08-26 10:36:13.8025|Info|    PASS | EQ | can extract the values from an object
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 10:36:13.8025|Info|    PASS | EQ | can convert an object into pairs
2015-08-26 10:36:13.8025|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 10:36:13.8025|Info|    PASS | EQ | can invert an object
2015-08-26 10:36:13.8025|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-26 10:36:13.8025|Info|    PASS | EQ | can invert an object with "length"
2015-08-26 10:36:13.8025|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-26 10:36:13.8025|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-26 10:36:13.8025|Info|    PASS | EQ | alias for functions
2015-08-26 10:36:13.8025|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-26 10:36:13.8025|Info|    PASS | EQ | properties in source override destination
2015-08-26 10:36:13.8181|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 10:36:13.8181|Info|    PASS | EQ | can extend from multiple source objects
2015-08-26 10:36:13.8181|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-26 10:36:13.8181|Info|    PASS | EQ | extend copies undefined values
2015-08-26 10:36:13.8181|Info|    PASS | EQ | extend copies all properties from source
2015-08-26 10:36:13.8181|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-26 10:36:13.8181|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 10:36:13.8181|Info|    PASS | EQ | extending null results in null
2015-08-26 10:36:13.8181|Info|    PASS | OK | extending undefined results in undefined
2015-08-26 10:36:13.8181|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-26 10:36:13.8181|Info|    PASS | EQ | properties in source override destination
2015-08-26 10:36:13.8181|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 10:36:13.8181|Info|    PASS | EQ | can assign from multiple source objects
2015-08-26 10:36:13.8181|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-26 10:36:13.8181|Info|    PASS | EQ | assign copies undefined values
2015-08-26 10:36:13.8181|Info|    PASS | EQ | assign copies own properties from source
2015-08-26 10:36:13.8181|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 10:36:13.8181|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:36:13.8181|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:36:13.8326|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:36:13.8326|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:36:13.8326|Info|    PASS | OK | assigning undefined results in undefined
2015-08-26 10:36:13.8326|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can restrict properties to those named
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can pick numeric properties
2015-08-26 10:36:13.8326|Info|    PASS | EQ | Called with null/undefined
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | Called with null/undefined
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can iterate primitives
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can accept a predicate and context
2015-08-26 10:36:13.8326|Info|    PASS | EQ | include prototype props
2015-08-26 10:36:13.8326|Info|    PASS | EQ | function is given context
2015-08-26 10:36:13.8326|Info|    PASS | EQ | does not set own property if property not in object
2015-08-26 10:36:13.8326|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 10:36:13.8326|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 10:36:13.8326|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can omit a single named property
2015-08-26 10:36:13.8326|Info|    PASS | EQ | can omit several named properties
2015-08-26 10:36:13.8487|Info|    PASS | EQ | can omit properties named in an array
2015-08-26 10:36:13.8487|Info|    PASS | EQ | can omit numeric properties
2015-08-26 10:36:13.8487|Info|    PASS | EQ | non objects return empty object
2015-08-26 10:36:13.8487|Info|    PASS | EQ | null/undefined return empty object
2015-08-26 10:36:13.8487|Info|    PASS | EQ | returns empty object for primitives
2015-08-26 10:36:13.8487|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8487|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8487|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8487|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8487|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8487|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8487|Info|    PASS | EQ | can accept a predicate
2015-08-26 10:36:13.8487|Info|    PASS | EQ | include prototype props
2015-08-26 10:36:13.8487|Info|    PASS | EQ | function is given context
2015-08-26 10:36:13.8487|Info|    PASS | EQ | value exists
2015-08-26 10:36:13.8487|Info|    PASS | EQ | value exists
2015-08-26 10:36:13.8487|Info|    PASS | EQ | default applied
2015-08-26 10:36:13.8487|Info|    PASS | EQ | null isn't overridden
2015-08-26 10:36:13.8487|Info|    PASS | EQ | value exists
2015-08-26 10:36:13.8487|Info|    PASS | EQ | NaN isn't overridden
2015-08-26 10:36:13.8487|Info|    PASS | EQ | new value is added, first one wins
2015-08-26 10:36:13.8487|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 10:36:13.8487|Info|    PASS | EQ | result is null if destination is null
2015-08-26 10:36:13.8487|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-26 10:36:13.8487|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-26 10:36:13.8487|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-26 10:36:13.8487|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-26 10:36:13.8487|Info|    PASS | OK | non objects should not be changed by clone
2015-08-26 10:36:13.8487|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 10:36:13.8487|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 10:36:13.8487|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:36:13.8487|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:36:13.8487|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:36:13.8487|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:36:13.8487|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-26 10:36:13.8487|Info|    PASS | EQ | object should inherit prototype
2015-08-26 10:36:13.8487|Info|    PASS | EQ | properties should be added to object
2015-08-26 10:36:13.8487|Info|    PASS | EQ | ok
2015-08-26 10:36:13.8487|Info|    PASS | EQ | should only add own properties
2015-08-26 10:36:13.8487|Info|    PASS | EQ | `null` is equal to `null`
2015-08-26 10:36:13.8487|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-26 10:36:13.8487|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-26 10:36:13.8487|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Identical string primitives are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-26 10:36:13.8734|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Identical number primitives are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-26 10:36:13.8734|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-26 10:36:13.8734|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-26 10:36:13.8734|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-26 10:36:13.8891|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Invalid dates are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Flag order is not significant
2015-08-26 10:36:13.8891|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-26 10:36:13.8891|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Empty object literals are equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Empty array literals are equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-26 10:36:13.8891|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Object instances are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-26 10:36:13.9047|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-26 10:36:13.9203|Info|    PASS | EQ | Cyclic structures are equal
2015-08-26 10:36:13.9203|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-26 10:36:13.9203|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-26 10:36:13.9203|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-26 10:36:13.9203|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-26 10:36:13.9203|Info|    PASS | EQ | `isEqual` can be chained
2015-08-26 10:36:13.9203|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-26 10:36:13.9203|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-26 10:36:13.9203|Info|    PASS | EQ | [1] is not empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | [] is empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | {one : 1} is not empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | {} is empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | null is empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | undefined is empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | the empty string is empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | but other strings are not
2015-08-26 10:36:13.9203|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-26 10:36:13.9203|Info|    PASS | EQ | empty arguments object is empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-26 10:36:13.9203|Info|    PASS | EQ | a string is not an arguments object
2015-08-26 10:36:13.9203|Info|    PASS | EQ | a function is not an arguments object
2015-08-26 10:36:13.9203|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-26 10:36:13.9203|Info|    PASS | EQ | but not when it's converted into an array
2015-08-26 10:36:13.9203|Info|    PASS | EQ | and not vanilla arrays.
2015-08-26 10:36:13.9203|Info|    PASS | EQ | the arguments object is object
2015-08-26 10:36:13.9359|Info|    PASS | EQ | and arrays
2015-08-26 10:36:13.9359|Info|    PASS | EQ | and functions
2015-08-26 10:36:13.9359|Info|    PASS | EQ | but not null
2015-08-26 10:36:13.9359|Info|    PASS | EQ | and not undefined
2015-08-26 10:36:13.9359|Info|    PASS | EQ | and not string
2015-08-26 10:36:13.9359|Info|    PASS | EQ | and not number
2015-08-26 10:36:13.9359|Info|    PASS | EQ | and not boolean
2015-08-26 10:36:13.9359|Info|    PASS | EQ | but new String()
2015-08-26 10:36:13.9359|Info|    PASS | EQ | undefined vars are not arrays
2015-08-26 10:36:13.9359|Info|    PASS | EQ | the arguments object is not an array
2015-08-26 10:36:13.9359|Info|    PASS | EQ | but arrays are
2015-08-26 10:36:13.9359|Info|    PASS | EQ | but strings are
2015-08-26 10:36:13.9359|Info|    PASS | EQ | string literals are
2015-08-26 10:36:13.9359|Info|    PASS | EQ | so are String objects
2015-08-26 10:36:13.9359|Info|    PASS | EQ | ok
2015-08-26 10:36:13.9359|Info|    PASS | EQ | a string is not a number
2015-08-26 10:36:13.9359|Info|    PASS | EQ | the arguments object is not a number
2015-08-26 10:36:13.9359|Info|    PASS | EQ | undefined is not a number
2015-08-26 10:36:13.9359|Info|    PASS | EQ | but numbers are
2015-08-26 10:36:13.9359|Info|    PASS | EQ | NaN *is* a number
2015-08-26 10:36:13.9359|Info|    PASS | EQ | Infinity is a number
2015-08-26 10:36:13.9359|Info|    PASS | EQ | numeric strings are not numbers
2015-08-26 10:36:13.9359|Info|    PASS | EQ | a number is not a boolean
2015-08-26 10:36:13.9359|Info|    PASS | EQ | a string is not a boolean
2015-08-26 10:36:13.9359|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-26 10:36:13.9359|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-26 10:36:13.9359|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-26 10:36:13.9359|Info|    PASS | EQ | undefined is not a boolean
2015-08-26 10:36:13.9516|Info|    PASS | EQ | NaN is not a boolean
2015-08-26 10:36:13.9516|Info|    PASS | EQ | null is not a boolean
2015-08-26 10:36:13.9516|Info|    PASS | EQ | but true is
2015-08-26 10:36:13.9516|Info|    PASS | EQ | and so is false
2015-08-26 10:36:13.9516|Info|    PASS | EQ | undefined vars are not functions
2015-08-26 10:36:13.9516|Info|    PASS | EQ | arrays are not functions
2015-08-26 10:36:13.9516|Info|    PASS | EQ | strings are not functions
2015-08-26 10:36:13.9516|Info|    PASS | EQ | but functions are
2015-08-26 10:36:13.9516|Info|    PASS | EQ | even anonymous ones
2015-08-26 10:36:13.9516|Info|    FAIL | OK | Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined
2015-08-26 10:36:13.9516|Info| PASS - isDate
2015-08-26 10:36:13.9516|Info| PASS - isRegExp
2015-08-26 10:36:13.9516|Info| PASS - isFinite
2015-08-26 10:36:13.9516|Info| PASS - isNaN
2015-08-26 10:36:13.9516|Info| PASS - isNull
2015-08-26 10:36:13.9516|Info| PASS - isUndefined
2015-08-26 10:36:13.9516|Info| PASS - isError
2015-08-26 10:36:13.9516|Info| PASS - tap
2015-08-26 10:36:13.9516|Info| PASS - has
2015-08-26 10:36:13.9516|Info| PASS - isMatch
2015-08-26 10:36:13.9516|Info| PASS - matcher
2015-08-26 10:36:13.9672|Info| PASS - matcher 
2015-08-26 10:36:13.9672|Info| PASS - findKey
2015-08-26 10:36:13.9672|Info| PASS - mapObject
2015-08-26 10:36:13.9740|Info|----------------------------------------
2015-08-26 10:36:13.9740|Info|Utility
2015-08-26 10:36:13.9740|Info|----------------------------------------
2015-08-26 10:36:13.9740|Info| PASS - #750 - Return _ instance.
2015-08-26 10:36:13.9740|Info| PASS - identity
2015-08-26 10:36:13.9740|Info| PASS - constant
2015-08-26 10:36:13.9740|Info| PASS - noop
2015-08-26 10:36:13.9740|Info| PASS - property
2015-08-26 10:36:13.9740|Info| PASS - propertyOf
2015-08-26 10:36:13.9740|Info| PASS - random
2015-08-26 10:36:13.9740|Info| PASS - now
2015-08-26 10:36:13.9740|Info| PASS - uniqueId
2015-08-26 10:36:13.9740|Info| PASS - times
2015-08-26 10:36:13.9890|Info| PASS - mixin
2015-08-26 10:36:13.9890|Info| PASS - _.escape
2015-08-26 10:36:13.9890|Info| PASS - _.unescape
2015-08-26 10:36:13.9890|Info| PASS - _.escape & unescape
2015-08-26 10:36:13.9890|Info| PASS - template
2015-08-26 10:36:13.9890|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-26 10:36:13.9890|Info| PASS - _.template handles \u2028 & \u2029
2015-08-26 10:36:13.9890|Info| PASS - result calls functions and returns primitives
2015-08-26 10:36:13.9890|Info| PASS - result returns a default value if object is null or undefined
2015-08-26 10:36:13.9890|Info| PASS - result returns a default value if property of object is missing
2015-08-26 10:36:13.9890|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-26 10:36:13.9890|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-26 10:36:14.0050|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-26 10:36:14.0050|Info| PASS - result fallback can use a function
2015-08-26 10:36:14.0050|Info| PASS - _.templateSettings.variable
2015-08-26 10:36:14.0050|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-26 10:36:14.0050|Info| PASS - #556 - undefined template variables.
2015-08-26 10:36:14.0050|Info| PASS - interpolate evaluates code only once.
2015-08-26 10:36:14.0050|Info| PASS - #746 - _.template settings are not modified.
2015-08-26 10:36:14.0050|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-26 10:36:14.0050|Info|  Settimeout: id:87, (100) ms
2015-08-26 10:36:14.0710|Info|  Settimeout: id:88, (50) ms
2015-08-26 10:36:14.1335|Info|  Settimeout: id:89, (150) ms
2015-08-26 10:36:14.1913|Info|      Encerrado timer: id:86, (10:36:14.1913)
2015-08-26 10:36:14.1913|Info|      Executando timer: id:87, (10:36:14.1913)
2015-08-26 10:36:14.1913|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:14.1913|Info|      Encerrado timer: id:87, (10:36:14.1913)
2015-08-26 10:36:14.1913|Info|      Executando timer: id:88, (10:36:14.1913)
2015-08-26 10:36:14.1913|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:36:14.1913|Info|      Encerrado timer: id:88, (10:36:14.1913)
2015-08-26 10:36:14.2851|Info|      Executando timer: id:89, (10:36:14.2851)
2015-08-26 10:36:14.2851|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:36:14.2915|Info|  Settimeout: id:90, (13) ms
2015-08-26 10:36:14.3569|Info|      Encerrado timer: id:89, (10:36:14.3569)
2015-08-26 10:36:14.3569|Info|      Executando timer: id:90, (10:36:14.3569)
2015-08-26 10:36:14.3569|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:14.3569|Info|  Settimeout: id:91, (100) ms
2015-08-26 10:36:14.4195|Info|  Settimeout: id:92, (50) ms
2015-08-26 10:36:14.4701|Info|  Settimeout: id:93, (150) ms
2015-08-26 10:36:14.5372|Info|  Settimeout: id:94, (160) ms
2015-08-26 10:36:14.5997|Info|  Settimeout: id:95, (230) ms
2015-08-26 10:36:14.6503|Info|  Settimeout: id:96, (300) ms
2015-08-26 10:36:14.7033|Info|      Encerrado timer: id:90, (10:36:14.7033)
2015-08-26 10:36:14.7033|Info|      Executando timer: id:91, (10:36:14.7033)
2015-08-26 10:36:14.7033|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:14.7033|Info|      Encerrado timer: id:91, (10:36:14.7033)
2015-08-26 10:36:14.7033|Info|      Executando timer: id:92, (10:36:14.7033)
2015-08-26 10:36:14.7033|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:14.7033|Info|  Settimeout: id:97, (100) ms
2015-08-26 10:36:14.7658|Info|      Encerrado timer: id:92, (10:36:14.7658)
2015-08-26 10:36:14.7658|Info|      Executando timer: id:93, (10:36:14.7658)
2015-08-26 10:36:14.7658|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:14.7658|Info|      Encerrado timer: id:93, (10:36:14.7658)
2015-08-26 10:36:14.7658|Info|      Executando timer: id:94, (10:36:14.7658)
2015-08-26 10:36:14.7658|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:14.7658|Info|      Encerrado timer: id:94, (10:36:14.7658)
2015-08-26 10:36:14.8121|Info|      Executando timer: id:97, (10:36:14.8121)
2015-08-26 10:36:14.8121|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:14.8121|Info|      Encerrado timer: id:97, (10:36:14.8131)
2015-08-26 10:36:14.8398|Info|      Executando timer: id:95, (10:36:14.8398)
2015-08-26 10:36:14.8398|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:14.8398|Info|  Settimeout: id:98, (73) ms
2015-08-26 10:36:14.9022|Info|      Encerrado timer: id:95, (10:36:14.9022)
2015-08-26 10:36:14.9179|Info|      Executando timer: id:98, (10:36:14.9179)
2015-08-26 10:36:14.9179|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:14.9179|Info|      Encerrado timer: id:98, (10:36:14.9179)
2015-08-26 10:36:14.9524|Info|      Executando timer: id:96, (10:36:14.9524)
2015-08-26 10:36:14.9524|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:14.9524|Info|  Settimeout: id:99, (13) ms
2015-08-26 10:36:15.0065|Info|      Encerrado timer: id:96, (10:36:15.0065)
2015-08-26 10:36:15.0065|Info|      Executando timer: id:99, (10:36:15.0065)
2015-08-26 10:36:15.0065|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:15.0065|Info|  Settimeout: id:100, (32) ms
2015-08-26 10:36:15.0690|Info|  Settimeout: id:101, (96) ms
2015-08-26 10:36:15.1199|Info|      Encerrado timer: id:99, (10:36:15.1199)
2015-08-26 10:36:15.1199|Info|      Executando timer: id:100, (10:36:15.1209)
2015-08-26 10:36:15.1199|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:15.1199|Info|      Encerrado timer: id:100, (10:36:15.1239)
2015-08-26 10:36:15.1719|Info|      Executando timer: id:101, (10:36:15.1719)
2015-08-26 10:36:15.1719|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:15.1719|Info|  Settimeout: id:102, (13) ms
2015-08-26 10:36:15.2344|Info|      Encerrado timer: id:101, (10:36:15.2344)
2015-08-26 10:36:15.2344|Info|      Executando timer: id:102, (10:36:15.2344)
2015-08-26 10:36:15.2344|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:15.2425|Info|  Settimeout: id:103, (100) ms
2015-08-26 10:36:15.3059|Info|  Settimeout: id:104, (50) ms
2015-08-26 10:36:15.3685|Info|  Settimeout: id:105, (60) ms
2015-08-26 10:36:15.4195|Info|  Settimeout: id:106, (200) ms
2015-08-26 10:36:15.4718|Info|  Settimeout: id:107, (250) ms
2015-08-26 10:36:15.5235|Info|  Settimeout: id:108, (350) ms
2015-08-26 10:36:15.5742|Info|      Encerrado timer: id:102, (10:36:15.5742)
2015-08-26 10:36:15.5742|Info|      Executando timer: id:103, (10:36:15.5742)
2015-08-26 10:36:15.5742|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:15.5742|Info|      Encerrado timer: id:103, (10:36:15.5762)
2015-08-26 10:36:15.5742|Info|      Executando timer: id:104, (10:36:15.5762)
2015-08-26 10:36:15.5742|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:15.5742|Info|  Settimeout: id:109, (100) ms
2015-08-26 10:36:15.6388|Info|      Encerrado timer: id:104, (10:36:15.6388)
2015-08-26 10:36:15.6388|Info|      Executando timer: id:105, (10:36:15.6388)
2015-08-26 10:36:15.6388|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:15.6388|Info|      Encerrado timer: id:105, (10:36:15.6388)
2015-08-26 10:36:15.6388|Info|      Executando timer: id:106, (10:36:15.6388)
2015-08-26 10:36:15.6388|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:15.6388|Info|      Encerrado timer: id:106, (10:36:15.6388)
2015-08-26 10:36:15.6857|Info|      Executando timer: id:109, (10:36:15.6857)
2015-08-26 10:36:15.6857|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:15.6857|Info|      Encerrado timer: id:109, (10:36:15.6857)
2015-08-26 10:36:15.7244|Info|      Executando timer: id:107, (10:36:15.7244)
2015-08-26 10:36:15.7244|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:15.7244|Info|      Encerrado timer: id:107, (10:36:15.7304)
2015-08-26 10:36:15.8762|Info|      Executando timer: id:108, (10:36:15.8762)
2015-08-26 10:36:15.8792|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:15.8792|Info|  Settimeout: id:110, (13) ms
2015-08-26 10:36:15.9386|Info|      Encerrado timer: id:108, (10:36:15.9386)
2015-08-26 10:36:15.9386|Info|      Executando timer: id:110, (10:36:15.9386)
2015-08-26 10:36:15.9386|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:15.9386|Info|  Settimeout: id:111, (32) ms
2015-08-26 10:36:15.9892|Info|  Settimeout: id:112, (100) ms
2015-08-26 10:36:16.0413|Info|      Encerrado timer: id:110, (10:36:16.0413)
2015-08-26 10:36:16.0413|Info|      Executando timer: id:111, (10:36:16.0432)
2015-08-26 10:36:16.0413|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:16.0413|Info|  Settimeout: id:113, (32) ms
2015-08-26 10:36:16.1052|Info|      Encerrado timer: id:111, (10:36:16.1052)
2015-08-26 10:36:16.1052|Info|      Executando timer: id:113, (10:36:16.1052)
2015-08-26 10:36:16.1052|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:16.1052|Info|      Encerrado timer: id:113, (10:36:16.1052)
2015-08-26 10:36:16.1052|Info|      Executando timer: id:112, (10:36:16.1052)
2015-08-26 10:36:16.1052|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:16.1052|Info|  Settimeout: id:114, (13) ms
2015-08-26 10:36:16.1678|Info|      Encerrado timer: id:112, (10:36:16.1678)
2015-08-26 10:36:16.1678|Info|      Executando timer: id:114, (10:36:16.1678)
2015-08-26 10:36:16.1678|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:16.1678|Info|----------------------------------------
2015-08-26 10:36:16.1678|Info|Functions
2015-08-26 10:36:16.1678|Info|----------------------------------------
2015-08-26 10:36:16.1678|Info| PASS - throttle re-entrant
2015-08-26 10:36:16.1678|Info|  Settimeout: id:115, (64) ms
2015-08-26 10:36:16.2225|Info|  Settimeout: id:116, (16) ms
2015-08-26 10:36:16.2850|Info|  Settimeout: id:117, (32) ms
2015-08-26 10:36:16.3475|Info|  Settimeout: id:118, (48) ms
2015-08-26 10:36:16.4065|Info|  Settimeout: id:119, (128) ms
2015-08-26 10:36:16.4689|Info|      Encerrado timer: id:114, (10:36:16.4689)
2015-08-26 10:36:16.4689|Info|      Executando timer: id:115, (10:36:16.4689)
2015-08-26 10:36:16.4689|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:16.4689|Info|      Encerrado timer: id:115, (10:36:16.4689)
2015-08-26 10:36:16.4689|Info|      Executando timer: id:116, (10:36:16.4689)
2015-08-26 10:36:16.4689|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:16.4689|Info|  Settimeout: id:120, (64) ms
2015-08-26 10:36:16.5190|Info|      Encerrado timer: id:116, (10:36:16.5190)
2015-08-26 10:36:16.5200|Info|      Executando timer: id:117, (10:36:16.5200)
2015-08-26 10:36:16.5200|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:16.5200|Info|      Encerrado timer: id:117, (10:36:16.5230)
2015-08-26 10:36:16.5200|Info|      Executando timer: id:118, (10:36:16.5240)
2015-08-26 10:36:16.5200|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:16.5200|Info|      Encerrado timer: id:118, (10:36:16.5270)
2015-08-26 10:36:16.5370|Info|      Executando timer: id:119, (10:36:16.5370)
2015-08-26 10:36:16.5370|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:16.5370|Info|  Settimeout: id:121, (13) ms
2015-08-26 10:36:16.6036|Info|      Encerrado timer: id:119, (10:36:16.6036)
2015-08-26 10:36:16.6036|Info|      Executando timer: id:121, (10:36:16.6036)
2015-08-26 10:36:16.6036|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:16.6036|Info|  Settimeout: id:122, (32) ms
2015-08-26 10:36:16.6661|Info|  Settimeout: id:123, (100) ms
2015-08-26 10:36:16.7228|Info|      Encerrado timer: id:121, (10:36:16.7228)
2015-08-26 10:36:16.7228|Info|      Executando timer: id:120, (10:36:16.7228)
2015-08-26 10:36:16.7228|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:16.7228|Info|      Encerrado timer: id:120, (10:36:16.7228)
2015-08-26 10:36:16.7228|Info|      Executando timer: id:122, (10:36:16.7228)
2015-08-26 10:36:16.7228|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:16.7228|Info|  Settimeout: id:124, (32) ms
2015-08-26 10:36:16.7853|Info|      Encerrado timer: id:122, (10:36:16.7853)
2015-08-26 10:36:16.7853|Info|      Executando timer: id:123, (10:36:16.7853)
2015-08-26 10:36:16.7853|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:16.7853|Info|  Settimeout: id:125, (13) ms
2015-08-26 10:36:16.8353|Info|      Encerrado timer: id:123, (10:36:16.8353)
2015-08-26 10:36:16.8353|Info|      Executando timer: id:124, (10:36:16.8363)
2015-08-26 10:36:16.8353|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:16.8353|Info|      Encerrado timer: id:124, (10:36:16.8393)
2015-08-26 10:36:16.8353|Info|      Executando timer: id:125, (10:36:16.8403)
2015-08-26 10:36:16.8353|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:16.8353|Info|  Settimeout: id:126, (100) ms
2015-08-26 10:36:16.9064|Info|  Settimeout: id:127, (50) ms
2015-08-26 10:36:16.9689|Info|  Settimeout: id:128, (150) ms
2015-08-26 10:36:17.0192|Info|      Encerrado timer: id:125, (10:36:17.0192)
2015-08-26 10:36:17.0202|Info|      Executando timer: id:126, (10:36:17.0202)
2015-08-26 10:36:17.0202|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:17.0202|Info|      Encerrado timer: id:126, (10:36:17.0232)
2015-08-26 10:36:17.0202|Info|      Executando timer: id:127, (10:36:17.0242)
2015-08-26 10:36:17.0202|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:36:17.0202|Info|      Encerrado timer: id:127, (10:36:17.0272)
2015-08-26 10:36:17.1243|Info|      Executando timer: id:128, (10:36:17.1243)
2015-08-26 10:36:17.1243|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:36:17.1303|Info|  Settimeout: id:129, (13) ms
2015-08-26 10:36:17.1897|Info|      Encerrado timer: id:128, (10:36:17.1897)
2015-08-26 10:36:17.1897|Info|      Executando timer: id:129, (10:36:17.1897)
2015-08-26 10:36:17.1897|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:17.1897|Info|  Settimeout: id:130, (100) ms
2015-08-26 10:36:17.2522|Info|  Settimeout: id:131, (50) ms
2015-08-26 10:36:17.3030|Info|  Settimeout: id:132, (150) ms
2015-08-26 10:36:17.3563|Info|  Settimeout: id:133, (160) ms
2015-08-26 10:36:17.4189|Info|  Settimeout: id:134, (230) ms
2015-08-26 10:36:17.4698|Info|  Settimeout: id:135, (300) ms
2015-08-26 10:36:17.5222|Info|      Encerrado timer: id:129, (10:36:17.5222)
2015-08-26 10:36:17.5222|Info|      Executando timer: id:130, (10:36:17.5232)
2015-08-26 10:36:17.5222|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:17.5222|Info|      Encerrado timer: id:130, (10:36:17.5262)
2015-08-26 10:36:17.5222|Info|      Executando timer: id:131, (10:36:17.5272)
2015-08-26 10:36:17.5222|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:17.5222|Info|  Settimeout: id:136, (99) ms
2015-08-26 10:36:17.5898|Info|      Encerrado timer: id:131, (10:36:17.5898)
2015-08-26 10:36:17.5898|Info|      Executando timer: id:132, (10:36:17.5898)
2015-08-26 10:36:17.5898|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:17.5898|Info|      Encerrado timer: id:132, (10:36:17.5926)
2015-08-26 10:36:17.5898|Info|      Executando timer: id:133, (10:36:17.5926)
2015-08-26 10:36:17.5898|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:17.5898|Info|      Encerrado timer: id:133, (10:36:17.5956)
2015-08-26 10:36:17.6403|Info|      Executando timer: id:136, (10:36:17.6403)
2015-08-26 10:36:17.6403|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:17.6403|Info|      Encerrado timer: id:136, (10:36:17.6403)
2015-08-26 10:36:17.6560|Info|      Executando timer: id:134, (10:36:17.6560)
2015-08-26 10:36:17.6560|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:17.6560|Info|  Settimeout: id:137, (85) ms
2015-08-26 10:36:17.7185|Info|      Encerrado timer: id:134, (10:36:17.7185)
2015-08-26 10:36:17.7498|Info|      Executando timer: id:137, (10:36:17.7498)
2015-08-26 10:36:17.7498|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:17.7547|Info|      Encerrado timer: id:137, (10:36:17.7547)
2015-08-26 10:36:17.7728|Info|      Executando timer: id:135, (10:36:17.7728)
2015-08-26 10:36:17.7728|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:17.7728|Info|  Settimeout: id:138, (13) ms
2015-08-26 10:36:17.8388|Info|      Encerrado timer: id:135, (10:36:17.8388)
2015-08-26 10:36:17.8388|Info|      Executando timer: id:138, (10:36:17.8388)
2015-08-26 10:36:17.8388|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:17.8388|Info|  Settimeout: id:139, (32) ms
2015-08-26 10:36:17.9014|Info|  Settimeout: id:140, (96) ms
2015-08-26 10:36:17.9554|Info|      Encerrado timer: id:138, (10:36:17.9554)
2015-08-26 10:36:17.9554|Info|      Executando timer: id:139, (10:36:17.9554)
2015-08-26 10:36:17.9554|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:17.9554|Info|      Encerrado timer: id:139, (10:36:17.9554)
2015-08-26 10:36:18.0022|Info|      Executando timer: id:140, (10:36:18.0022)
2015-08-26 10:36:18.0022|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:18.0022|Info|  Settimeout: id:141, (13) ms
2015-08-26 10:36:18.0524|Info|      Encerrado timer: id:140, (10:36:18.0524)
2015-08-26 10:36:18.0524|Info|      Executando timer: id:141, (10:36:18.0534)
2015-08-26 10:36:18.0524|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:18.0524|Info|  Settimeout: id:142, (100) ms
2015-08-26 10:36:18.1218|Info|  Settimeout: id:143, (50) ms
2015-08-26 10:36:18.1843|Info|  Settimeout: id:144, (60) ms
2015-08-26 10:36:18.2351|Info|  Settimeout: id:145, (200) ms
2015-08-26 10:36:18.2898|Info|  Settimeout: id:146, (250) ms
2015-08-26 10:36:18.3523|Info|  Settimeout: id:147, (350) ms
2015-08-26 10:36:18.4031|Info|      Encerrado timer: id:141, (10:36:18.4031)
2015-08-26 10:36:18.4031|Info|      Executando timer: id:142, (10:36:18.4051)
2015-08-26 10:36:18.4031|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:18.4031|Info|      Encerrado timer: id:142, (10:36:18.4082)
2015-08-26 10:36:18.4031|Info|      Executando timer: id:143, (10:36:18.4082)
2015-08-26 10:36:18.4031|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:18.4031|Info|  Settimeout: id:148, (100) ms
2015-08-26 10:36:18.4708|Info|      Encerrado timer: id:143, (10:36:18.4708)
2015-08-26 10:36:18.4708|Info|      Executando timer: id:144, (10:36:18.4708)
2015-08-26 10:36:18.4708|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:18.4708|Info|      Encerrado timer: id:144, (10:36:18.4708)
2015-08-26 10:36:18.4708|Info|      Executando timer: id:145, (10:36:18.4708)
2015-08-26 10:36:18.4708|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:18.4708|Info|      Encerrado timer: id:145, (10:36:18.4708)
2015-08-26 10:36:18.5333|Info|      Executando timer: id:148, (10:36:18.5333)
2015-08-26 10:36:18.5333|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:18.5333|Info|      Encerrado timer: id:148, (10:36:18.5333)
2015-08-26 10:36:18.5419|Info|      Executando timer: id:146, (10:36:18.5419)
2015-08-26 10:36:18.5419|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:18.5419|Info|      Encerrado timer: id:146, (10:36:18.5439)
2015-08-26 10:36:18.7057|Info|      Executando timer: id:147, (10:36:18.7057)
2015-08-26 10:36:18.7057|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:18.7077|Info|  Settimeout: id:149, (13) ms
2015-08-26 10:36:18.7729|Info|      Encerrado timer: id:147, (10:36:18.7729)
2015-08-26 10:36:18.7729|Info|      Executando timer: id:149, (10:36:18.7729)
2015-08-26 10:36:18.7729|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:18.7729|Info|  Settimeout: id:150, (64) ms
2015-08-26 10:36:18.8354|Info|  Settimeout: id:151, (16) ms
2015-08-26 10:36:18.8864|Info|  Settimeout: id:152, (32) ms
2015-08-26 10:36:18.9374|Info|  Settimeout: id:153, (48) ms
2015-08-26 10:36:18.9999|Info|  Settimeout: id:154, (128) ms
2015-08-26 10:36:19.0507|Info|      Encerrado timer: id:149, (10:36:19.0507)
2015-08-26 10:36:19.0517|Info|      Executando timer: id:150, (10:36:19.0517)
2015-08-26 10:36:19.0517|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:19.0517|Info|      Encerrado timer: id:150, (10:36:19.0537)
2015-08-26 10:36:19.0517|Info|      Executando timer: id:151, (10:36:19.0547)
2015-08-26 10:36:19.0517|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:19.0517|Info|  Settimeout: id:155, (64) ms
2015-08-26 10:36:19.1208|Info|      Encerrado timer: id:151, (10:36:19.1208)
2015-08-26 10:36:19.1208|Info|      Executando timer: id:152, (10:36:19.1208)
2015-08-26 10:36:19.1208|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:19.1208|Info|      Encerrado timer: id:152, (10:36:19.1208)
2015-08-26 10:36:19.1208|Info|      Executando timer: id:153, (10:36:19.1208)
2015-08-26 10:36:19.1208|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:19.1208|Info|      Encerrado timer: id:153, (10:36:19.1208)
2015-08-26 10:36:19.1364|Info|      Executando timer: id:154, (10:36:19.1364)
2015-08-26 10:36:19.1364|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:19.1364|Info|  Settimeout: id:156, (13) ms
2015-08-26 10:36:19.1864|Info|      Encerrado timer: id:154, (10:36:19.1864)
2015-08-26 10:36:19.1864|Info|      Executando timer: id:155, (10:36:19.1874)
2015-08-26 10:36:19.1864|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:19.1864|Info|      Encerrado timer: id:155, (10:36:19.1894)
2015-08-26 10:36:19.1864|Info|      Executando timer: id:156, (10:36:19.1904)
2015-08-26 10:36:19.1864|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:19.1934|Info|  Settimeout: id:157, (32) ms
2015-08-26 10:36:19.2545|Info|  Settimeout: id:158, (100) ms
2015-08-26 10:36:19.3170|Info|      Encerrado timer: id:156, (10:36:19.3170)
2015-08-26 10:36:19.3170|Info|      Executando timer: id:157, (10:36:19.3170)
2015-08-26 10:36:19.3170|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:19.3170|Info|  Settimeout: id:159, (32) ms
2015-08-26 10:36:19.3672|Info|      Encerrado timer: id:157, (10:36:19.3672)
2015-08-26 10:36:19.3672|Info|      Executando timer: id:158, (10:36:19.3692)
2015-08-26 10:36:19.3672|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:19.3672|Info|  Settimeout: id:160, (13) ms
2015-08-26 10:36:19.4379|Info|      Encerrado timer: id:158, (10:36:19.4379)
2015-08-26 10:36:19.4379|Info|      Executando timer: id:159, (10:36:19.4379)
2015-08-26 10:36:19.4379|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:19.4379|Info|      Encerrado timer: id:159, (10:36:19.4379)
2015-08-26 10:36:19.4379|Info|      Executando timer: id:160, (10:36:19.4379)
2015-08-26 10:36:19.4379|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:19.4379|Info|  Settimeout: id:161, (100) ms
2015-08-26 10:36:19.4885|Info|  Settimeout: id:162, (50) ms
2015-08-26 10:36:19.5427|Info|  Settimeout: id:163, (150) ms
2015-08-26 10:36:19.6072|Info|      Encerrado timer: id:160, (10:36:19.6072)
2015-08-26 10:36:19.6072|Info|      Executando timer: id:162, (10:36:19.6077)
2015-08-26 10:36:19.6072|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:36:19.6072|Info|      Encerrado timer: id:162, (10:36:19.6097)
2015-08-26 10:36:19.6072|Info|      Executando timer: id:161, (10:36:19.6107)
2015-08-26 10:36:19.6072|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:19.6072|Info|      Encerrado timer: id:161, (10:36:19.6127)
2015-08-26 10:36:19.7052|Info|      Executando timer: id:163, (10:36:19.7052)
2015-08-26 10:36:19.7052|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:36:19.7052|Info|  Settimeout: id:164, (13) ms
2015-08-26 10:36:19.7677|Info|      Encerrado timer: id:163, (10:36:19.7677)
2015-08-26 10:36:19.7677|Info|      Executando timer: id:164, (10:36:19.7677)
2015-08-26 10:36:19.7677|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:19.7677|Info| PASS - delay
2015-08-26 10:36:19.7677|Info|  Settimeout: id:165, (100) ms
2015-08-26 10:36:19.8186|Info|  Settimeout: id:166, (50) ms
2015-08-26 10:36:19.8729|Info|  Settimeout: id:167, (150) ms
2015-08-26 10:36:19.9354|Info|  Settimeout: id:168, (160) ms
2015-08-26 10:36:19.9859|Info|  Settimeout: id:169, (230) ms
2015-08-26 10:36:20.0535|Info|  Settimeout: id:170, (300) ms
2015-08-26 10:36:20.1059|Info|      Encerrado timer: id:164, (10:36:20.1059)
2015-08-26 10:36:20.1059|Info|      Executando timer: id:165, (10:36:20.1059)
2015-08-26 10:36:20.1059|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:20.1137|Info|      Encerrado timer: id:165, (10:36:20.1137)
2015-08-26 10:36:20.1137|Info|      Executando timer: id:166, (10:36:20.1157)
2015-08-26 10:36:20.1137|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:20.1137|Info|  Settimeout: id:171, (92) ms
2015-08-26 10:36:20.1885|Info|      Encerrado timer: id:166, (10:36:20.1885)
2015-08-26 10:36:20.1885|Info|      Executando timer: id:167, (10:36:20.1885)
2015-08-26 10:36:20.1885|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:20.1885|Info|      Encerrado timer: id:167, (10:36:20.1885)
2015-08-26 10:36:20.1885|Info|      Executando timer: id:168, (10:36:20.1885)
2015-08-26 10:36:20.1885|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:20.1885|Info|      Encerrado timer: id:168, (10:36:20.1885)
2015-08-26 10:36:20.2198|Info|      Executando timer: id:169, (10:36:20.2198)
2015-08-26 10:36:20.2198|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:20.2198|Info|      Encerrado timer: id:169, (10:36:20.2198)
2015-08-26 10:36:20.3710|Info|      Executando timer: id:170, (10:36:20.3710)
2015-08-26 10:36:20.3710|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:20.3710|Info|  Settimeout: id:172, (13) ms
2015-08-26 10:36:20.4216|Info|      Encerrado timer: id:170, (10:36:20.4216)
2015-08-26 10:36:20.4216|Info|      Executando timer: id:172, (10:36:20.4236)
2015-08-26 10:36:20.4216|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:20.4266|Info| FAIL - throttle repeatedly with results
2015-08-26 10:36:20.4266|Info|    PASS | EQ | ok
2015-08-26 10:36:20.4266|Info|    PASS | EQ | append was throttled successfully
2015-08-26 10:36:20.4266|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 10:36:20.4266|Info|    PASS | EQ | delayed the function
2015-08-26 10:36:20.4266|Info|    PASS | EQ | incr was called once
2015-08-26 10:36:20.4266|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:20.4266|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 10:36:20.4266|Info|    PASS | EQ | incr was called twice
2015-08-26 10:36:20.4266|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:20.4266|Info|    PASS | EQ | incr was called trailing
2015-08-26 10:36:20.4266|Info|  Settimeout: id:173, (32) ms
2015-08-26 10:36:20.4901|Info|  Settimeout: id:174, (96) ms
2015-08-26 10:36:20.5526|Info|      Encerrado timer: id:172, (10:36:20.5526)
2015-08-26 10:36:20.5526|Info|      Executando timer: id:173, (10:36:20.5526)
2015-08-26 10:36:20.5526|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:20.5526|Info|      Encerrado timer: id:173, (10:36:20.5526)
2015-08-26 10:36:20.5888|Info|      Executando timer: id:174, (10:36:20.5888)
2015-08-26 10:36:20.5888|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:20.5888|Info|  Settimeout: id:175, (13) ms
2015-08-26 10:36:20.6549|Info|      Encerrado timer: id:174, (10:36:20.6549)
2015-08-26 10:36:20.6549|Info|      Executando timer: id:175, (10:36:20.6549)
2015-08-26 10:36:20.6549|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:20.6549|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-26 10:36:20.6549|Info|    PASS | EQ | ok
2015-08-26 10:36:20.6549|Info|    PASS | EQ | append was throttled successfully
2015-08-26 10:36:20.6549|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 10:36:20.6549|Info|    PASS | EQ | delayed the function
2015-08-26 10:36:20.6549|Info|    PASS | EQ | incr was called once
2015-08-26 10:36:20.6549|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:20.6549|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 10:36:20.6705|Info|    PASS | EQ | incr was called twice
2015-08-26 10:36:20.6705|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:20.6705|Info|    PASS | EQ | incr was called trailing
2015-08-26 10:36:20.6705|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 10:36:20.6705|Info|    PASS | EQ | okay
2015-08-26 10:36:20.6705|Info|  Settimeout: id:176, (100) ms
2015-08-26 10:36:20.7330|Info|  Settimeout: id:177, (50) ms
2015-08-26 10:36:20.7887|Info|  Settimeout: id:178, (60) ms
2015-08-26 10:36:20.8512|Info|  Settimeout: id:179, (200) ms
2015-08-26 10:36:20.9022|Info|  Settimeout: id:180, (250) ms
2015-08-26 10:36:20.9556|Info|  Settimeout: id:181, (350) ms
2015-08-26 10:36:21.0181|Info|      Encerrado timer: id:175, (10:36:21.0181)
2015-08-26 10:36:21.0181|Info|      Executando timer: id:177, (10:36:21.0181)
2015-08-26 10:36:21.0181|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.0181|Info|      Encerrado timer: id:177, (10:36:21.0181)
2015-08-26 10:36:21.0181|Info|      Executando timer: id:178, (10:36:21.0181)
2015-08-26 10:36:21.0181|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.0181|Info|  Settimeout: id:182, (100) ms
2015-08-26 10:36:21.0845|Info|      Encerrado timer: id:178, (10:36:21.0845)
2015-08-26 10:36:21.0845|Info|      Executando timer: id:179, (10:36:21.0845)
2015-08-26 10:36:21.0845|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.0845|Info|      Encerrado timer: id:179, (10:36:21.0865)
2015-08-26 10:36:21.1400|Info|      Executando timer: id:182, (10:36:21.1400)
2015-08-26 10:36:21.1400|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:36:21.1400|Info|      Encerrado timer: id:182, (10:36:21.1400)
2015-08-26 10:36:21.1556|Info|      Executando timer: id:180, (10:36:21.1556)
2015-08-26 10:36:21.1556|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.1556|Info|      Encerrado timer: id:180, (10:36:21.1556)
2015-08-26 10:36:21.3204|Info|      Executando timer: id:181, (10:36:21.3204)
2015-08-26 10:36:21.3204|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.3204|Info|  Settimeout: id:183, (13) ms
2015-08-26 10:36:21.3712|Info|      Encerrado timer: id:181, (10:36:21.3712)
2015-08-26 10:36:21.3712|Info|      Executando timer: id:183, (10:36:21.3722)
2015-08-26 10:36:21.3712|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:21.3712|Info| FAIL - more throttle does not trigger leading call when leading is set to false
2015-08-26 10:36:21.3712|Info|    PASS | EQ | ok
2015-08-26 10:36:21.3712|Info|    PASS | EQ | append was throttled successfully
2015-08-26 10:36:21.3712|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 10:36:21.3792|Info|    PASS | EQ | delayed the function
2015-08-26 10:36:21.3792|Info|    PASS | EQ | incr was called once
2015-08-26 10:36:21.3792|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:21.3792|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 10:36:21.3792|Info|    PASS | EQ | incr was called twice
2015-08-26 10:36:21.3792|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:21.3792|Info|    PASS | EQ | incr was called trailing
2015-08-26 10:36:21.3792|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 10:36:21.3792|Info|    PASS | EQ | okay
2015-08-26 10:36:21.3792|Info|    PASS | EQ | ok
2015-08-26 10:36:21.3792|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 10:36:21.3792|Info|    PASS | EQ | ok
2015-08-26 10:36:21.3792|Info|  Settimeout: id:184, (64) ms
2015-08-26 10:36:21.4528|Info|  Settimeout: id:185, (16) ms
2015-08-26 10:36:21.5153|Info|  Settimeout: id:186, (32) ms
2015-08-26 10:36:21.5728|Info|  Settimeout: id:187, (48) ms
2015-08-26 10:36:21.6229|Info|  Settimeout: id:188, (128) ms
2015-08-26 10:36:21.6745|Info|      Encerrado timer: id:183, (10:36:21.6745)
2015-08-26 10:36:21.6745|Info|      Executando timer: id:184, (10:36:21.6755)
2015-08-26 10:36:21.6775|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:21.6775|Info|      Encerrado timer: id:184, (10:36:21.6795)
2015-08-26 10:36:21.6775|Info|      Executando timer: id:185, (10:36:21.6805)
2015-08-26 10:36:21.6775|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.6775|Info|  Settimeout: id:189, (64) ms
2015-08-26 10:36:21.7375|Info|      Encerrado timer: id:185, (10:36:21.7375)
2015-08-26 10:36:21.7375|Info|      Executando timer: id:186, (10:36:21.7375)
2015-08-26 10:36:21.7375|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.7375|Info|      Encerrado timer: id:186, (10:36:21.7375)
2015-08-26 10:36:21.7375|Info|      Executando timer: id:187, (10:36:21.7375)
2015-08-26 10:36:21.7375|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.7375|Info|      Encerrado timer: id:187, (10:36:21.7375)
2015-08-26 10:36:21.7531|Info|      Executando timer: id:189, (10:36:21.7531)
2015-08-26 10:36:21.7531|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:21.7531|Info|  Settimeout: id:190, (48) ms
2015-08-26 10:36:21.8156|Info|      Encerrado timer: id:189, (10:36:21.8156)
2015-08-26 10:36:21.8156|Info|      Executando timer: id:188, (10:36:21.8156)
2015-08-26 10:36:21.8156|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:21.8156|Info|  Settimeout: id:191, (13) ms
2015-08-26 10:36:21.8660|Info|      Encerrado timer: id:188, (10:36:21.8660)
2015-08-26 10:36:21.8660|Info|      Executando timer: id:190, (10:36:21.8660)
2015-08-26 10:36:21.8660|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:21.8660|Info|      Encerrado timer: id:190, (10:36:21.8680)
2015-08-26 10:36:21.8660|Info|      Executando timer: id:191, (10:36:21.8689)
2015-08-26 10:36:21.8660|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:21.8660|Info| FAIL - debounce asap
2015-08-26 10:36:21.8660|Info|    PASS | EQ | ok
2015-08-26 10:36:21.8660|Info|    PASS | EQ | append was throttled successfully
2015-08-26 10:36:21.8660|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 10:36:21.8660|Info|    PASS | EQ | delayed the function
2015-08-26 10:36:21.8660|Info|    PASS | EQ | incr was called once
2015-08-26 10:36:21.8660|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:21.8660|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 10:36:21.8660|Info|    PASS | EQ | incr was called twice
2015-08-26 10:36:21.8660|Info|    PASS | EQ | incr was throttled
2015-08-26 10:36:21.8660|Info|    PASS | EQ | incr was called trailing
2015-08-26 10:36:21.8660|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 10:36:21.8660|Info|    PASS | EQ | okay
2015-08-26 10:36:21.8660|Info|    PASS | EQ | ok
2015-08-26 10:36:21.8660|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 10:36:21.8660|Info|    PASS | EQ | ok
2015-08-26 10:36:21.8660|Info|    PASS | EQ | ok
2015-08-26 10:36:21.8660|Info|    PASS | EQ | ok
2015-08-26 10:36:21.8660|Info|    PASS | EQ | incr was called immediately
2015-08-26 10:36:21.8660|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-26 10:36:21.8660|Info|  Settimeout: id:192, (32) ms
2015-08-26 10:36:21.9288|Info|  Settimeout: id:193, (100) ms
2015-08-26 10:36:21.9912|Info|      Encerrado timer: id:191, (10:36:21.9912)
2015-08-26 10:36:21.9912|Info|      Executando timer: id:192, (10:36:21.9912)
2015-08-26 10:36:21.9912|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:21.9912|Info|  Settimeout: id:194, (32) ms
2015-08-26 10:36:22.0555|Info|      Encerrado timer: id:192, (10:36:22.0555)
2015-08-26 10:36:22.0555|Info|      Executando timer: id:194, (10:36:22.0555)
2015-08-26 10:36:22.0555|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:36:22.0555|Info|      Encerrado timer: id:194, (10:36:22.0555)
2015-08-26 10:36:22.0555|Info|      Executando timer: id:193, (10:36:22.0555)
2015-08-26 10:36:22.0555|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:36:22.0555|Info|  Settimeout: id:195, (13) ms
2015-08-26 10:36:22.1057|Info|      Encerrado timer: id:193, (10:36:22.1057)
2015-08-26 10:36:22.1057|Info|      Executando timer: id:195, (10:36:22.1066)
2015-08-26 10:36:22.1057|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:36:22.1057|Info| PASS - debounce re-entrant
2015-08-26 10:36:22.1057|Info|----------------------------------------
2015-08-26 10:36:22.1057|Info|    PASS: 1369  FAIL: 5  TOTAL: 1374
2015-08-26 10:36:22.1057|Info|    Finished in 15481 milliseconds.
2015-08-26 10:36:22.1057|Info|----------------------------------------
2015-08-26 10:36:22.1176|Info|      Encerrado timer: id:195, (10:36:22.1176)
2015-08-26 10:36:22.1176|Info|Encerrando os testes
2015-08-26 10:36:22.1176|Info|Total:1374, Sucesso: 1369, Falha: 5
2015-08-26 10:36:22.1176|Info|16 segundos para avaliar o individuo underscore.js
2015-08-26 10:36:22.1176|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [21]:1:23
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [81]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:36:22.1176|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [107]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle re-entrant: append was throttled successfully, expected: a1a2c1c2b1b2, actual: a1a2c1c2,     at Script Document [8]:1906:13
    at Script Document [12]:2026:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [131]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [155]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at Script Document [8]:1906:13
    at Script Document [12]:2106:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [177]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (Script Document [12]:2900:65)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
    at Array.<anonymous> (Script Document [8]:643:4)
    at Script Document [181]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [185]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [205]:1:24
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:36:22.1176|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [225]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [247]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at Script Document [8]:1906:13
    at Script Document [12]:2106:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [255]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [263]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [283]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:36:22.1176|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [303]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [317]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at Script Document [8]:1906:13
    at Script Document [12]:2106:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [325]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [349]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:36:22.1176|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [367]:1:25
2015-08-26 10:36:22.1176|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [383]:1:25
2015-08-26 10:43:04.3529|Info|Iniciando os testes
2015-08-26 10:43:06.7660|Info|Encerrando os testes
2015-08-26 10:43:06.7817|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 10:43:06.7817|Info|2 segundos para avaliar o individuo global.js
2015-08-26 10:43:26.7255|Info|  Settimeout: id:0, (500) ms
2015-08-26 10:43:26.8546|Info|Iniciando os testes
2015-08-26 10:43:26.8546|Info|  Settimeout: id:1, (13) ms
2015-08-26 10:43:26.8747|Info|      Executando timer: id:1, (10:43:26.8747)
2015-08-26 10:43:26.9307|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:26.9477|Info|----------------------------------------
2015-08-26 10:43:26.9477|Info|Arrays
2015-08-26 10:43:26.9477|Info|----------------------------------------
2015-08-26 10:43:26.9477|Info| PASS - first
2015-08-26 10:43:26.9477|Info| PASS - head
2015-08-26 10:43:26.9477|Info| PASS - take
2015-08-26 10:43:26.9477|Info| PASS - rest
2015-08-26 10:43:26.9477|Info| PASS - tail
2015-08-26 10:43:26.9607|Info| PASS - drop
2015-08-26 10:43:26.9607|Info| PASS - initial
2015-08-26 10:43:26.9607|Info| PASS - last
2015-08-26 10:43:26.9607|Info| PASS - compact
2015-08-26 10:43:27.6282|Info| PASS - flatten
2015-08-26 10:43:27.6302|Info| PASS - without
2015-08-26 10:43:27.6302|Info| PASS - sortedIndex
2015-08-26 10:43:27.6302|Info| PASS - uniq
2015-08-26 10:43:27.6302|Info| PASS - unique
2015-08-26 10:43:27.6302|Info| PASS - intersection
2015-08-26 10:43:27.6302|Info| PASS - union
2015-08-26 10:43:27.6302|Info| PASS - difference
2015-08-26 10:43:27.6302|Info| PASS - zip
2015-08-26 10:43:27.6302|Info| PASS - unzip
2015-08-26 10:43:27.6302|Info| PASS - object
2015-08-26 10:43:27.6302|Info| PASS - indexOf
2015-08-26 10:43:27.6462|Info| PASS - indexOf with NaN
2015-08-26 10:43:27.6462|Info| PASS - indexOf with +- 0
2015-08-26 10:43:27.6462|Info| PASS - lastIndexOf
2015-08-26 10:43:27.6462|Info| PASS - lastIndexOf with NaN
2015-08-26 10:43:27.6462|Info| PASS - lastIndexOf with +- 0
2015-08-26 10:43:27.6462|Info| PASS - findIndex
2015-08-26 10:43:27.6462|Info| PASS - findLastIndex
2015-08-26 10:43:27.6462|Info| PASS - range
2015-08-26 10:43:27.6462|Info|----------------------------------------
2015-08-26 10:43:27.6462|Info|Chaining
2015-08-26 10:43:27.6462|Info|----------------------------------------
2015-08-26 10:43:27.6462|Info| PASS - map/flatten/reduce
2015-08-26 10:43:27.6462|Info| PASS - select/reject/sortBy
2015-08-26 10:43:27.6462|Info| PASS - select/reject/sortBy in functional style
2015-08-26 10:43:27.6612|Info| PASS - reverse/concat/unshift/pop/map
2015-08-26 10:43:27.6612|Info| PASS - splice
2015-08-26 10:43:27.6612|Info| PASS - shift
2015-08-26 10:43:27.6612|Info| PASS - pop
2015-08-26 10:43:27.6612|Info| PASS - chaining works in small stages
2015-08-26 10:43:27.6612|Info| PASS - #1562: Engine proxies for chained functions
2015-08-26 10:43:27.6612|Info|----------------------------------------
2015-08-26 10:43:27.6612|Info|Collections
2015-08-26 10:43:27.6612|Info|----------------------------------------
2015-08-26 10:43:27.6612|Info| PASS - each
2015-08-26 10:43:27.6612|Info| PASS - forEach
2015-08-26 10:43:27.6612|Info| PASS - lookupIterator with contexts
2015-08-26 10:43:27.6772|Info| PASS - Iterating objects with sketchy length properties
2015-08-26 10:43:27.6772|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-26 10:43:27.6772|Info| PASS - map
2015-08-26 10:43:27.6772|Info| PASS - collect
2015-08-26 10:43:27.6772|Info| PASS - reduce
2015-08-26 10:43:27.6772|Info| PASS - foldl
2015-08-26 10:43:27.6772|Info| PASS - reduceRight
2015-08-26 10:43:27.6772|Info| PASS - foldr
2015-08-26 10:43:27.6922|Info| PASS - find
2015-08-26 10:43:27.6922|Info| PASS - detect
2015-08-26 10:43:27.6922|Info| PASS - filter
2015-08-26 10:43:27.6922|Info| PASS - select
2015-08-26 10:43:27.6922|Info| PASS - reject
2015-08-26 10:43:27.6922|Info| PASS - every
2015-08-26 10:43:27.6922|Info| PASS - all
2015-08-26 10:43:27.6922|Info| PASS - some
2015-08-26 10:43:27.6922|Info| PASS - any
2015-08-26 10:43:27.6922|Info| PASS - includes
2015-08-26 10:43:27.6922|Info| PASS - include
2015-08-26 10:43:27.6922|Info| PASS - contains
2015-08-26 10:43:27.6922|Info| PASS - includes with NaN
2015-08-26 10:43:27.6922|Info| PASS - includes with +- 0
2015-08-26 10:43:27.7102|Info| PASS - invoke
2015-08-26 10:43:27.7102|Info| PASS - invoke w/ function reference
2015-08-26 10:43:27.7102|Info| PASS - invoke when strings have a call method
2015-08-26 10:43:27.7102|Info| PASS - pluck
2015-08-26 10:43:27.7102|Info| PASS - where
2015-08-26 10:43:27.7102|Info| PASS - findWhere
2015-08-26 10:43:27.7523|Info| PASS - max
2015-08-26 10:43:27.7903|Info| PASS - min
2015-08-26 10:43:27.7903|Info| PASS - sortBy
2015-08-26 10:43:27.7903|Info| PASS - groupBy
2015-08-26 10:43:27.7903|Info| PASS - indexBy
2015-08-26 10:43:27.7903|Info| PASS - countBy
2015-08-26 10:43:27.7903|Info| PASS - shuffle
2015-08-26 10:43:27.7903|Info| PASS - sample
2015-08-26 10:43:27.8063|Info| PASS - toArray
2015-08-26 10:43:27.8063|Info| PASS - size
2015-08-26 10:43:27.8063|Info| PASS - partition
2015-08-26 10:43:27.8063|Info|----------------------------------------
2015-08-26 10:43:27.8063|Info|Functions
2015-08-26 10:43:27.8063|Info|----------------------------------------
2015-08-26 10:43:27.8063|Info| PASS - bind
2015-08-26 10:43:27.8063|Info| PASS - partial
2015-08-26 10:43:27.8173|Info| PASS - bindAll
2015-08-26 10:43:27.8173|Info| PASS - memoize
2015-08-26 10:43:27.8173|Info|  Settimeout: id:2, (100) ms
2015-08-26 10:43:27.8724|Info|  Settimeout: id:3, (50) ms
2015-08-26 10:43:27.9244|Info|  Settimeout: id:4, (150) ms
2015-08-26 10:43:27.9764|Info|      Encerrado timer: id:1, (10:43:27.9764)
2015-08-26 10:43:27.9764|Info|      Executando timer: id:0, (10:43:27.9794)
2015-08-26 10:43:27.9764|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 10:43:27.9764|Info|  Settimeout: id:5, (500) ms
2015-08-26 10:43:28.0325|Info|      Encerrado timer: id:0, (10:43:28.0325)
2015-08-26 10:43:28.0325|Info|      Executando timer: id:2, (10:43:28.0325)
2015-08-26 10:43:28.0325|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.0325|Info|      Encerrado timer: id:2, (10:43:28.0345)
2015-08-26 10:43:28.0355|Info|      Executando timer: id:3, (10:43:28.0355)
2015-08-26 10:43:28.0355|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:43:28.0355|Info|      Encerrado timer: id:3, (10:43:28.0385)
2015-08-26 10:43:28.0765|Info|      Executando timer: id:4, (10:43:28.0765)
2015-08-26 10:43:28.0765|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:43:28.0765|Info|  Settimeout: id:6, (13) ms
2015-08-26 10:43:28.1295|Info|      Encerrado timer: id:4, (10:43:28.1295)
2015-08-26 10:43:28.1295|Info|      Executando timer: id:6, (10:43:28.1305)
2015-08-26 10:43:28.1295|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:28.1295|Info|  Settimeout: id:7, (1) ms
2015-08-26 10:43:28.1836|Info|  Settimeout: id:8, (50) ms
2015-08-26 10:43:28.2386|Info|      Encerrado timer: id:6, (10:43:28.2386)
2015-08-26 10:43:28.2386|Info|      Executando timer: id:7, (10:43:28.2396)
2015-08-26 10:43:28.2386|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.2386|Info|      Encerrado timer: id:7, (10:43:28.2416)
2015-08-26 10:43:28.2386|Info|      Executando timer: id:8, (10:43:28.2416)
2015-08-26 10:43:28.2386|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.2386|Info|  Settimeout: id:9, (13) ms
2015-08-26 10:43:28.2947|Info|      Encerrado timer: id:8, (10:43:28.2947)
2015-08-26 10:43:28.2947|Info|      Executando timer: id:9, (10:43:28.2957)
2015-08-26 10:43:28.2947|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:28.2947|Info| PASS - defer
2015-08-26 10:43:28.2947|Info|  Settimeout: id:10, (32) ms
2015-08-26 10:43:28.3507|Info|  Settimeout: id:11, (64) ms
2015-08-26 10:43:28.4017|Info|      Encerrado timer: id:9, (10:43:28.4017)
2015-08-26 10:43:28.4017|Info|      Executando timer: id:10, (10:43:28.4027)
2015-08-26 10:43:28.4017|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:28.4017|Info|      Encerrado timer: id:10, (10:43:28.4037)
2015-08-26 10:43:28.4168|Info|      Executando timer: id:11, (10:43:28.4168)
2015-08-26 10:43:28.4168|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.4168|Info|  Settimeout: id:12, (13) ms
2015-08-26 10:43:28.4698|Info|      Encerrado timer: id:11, (10:43:28.4698)
2015-08-26 10:43:28.4698|Info|      Executando timer: id:12, (10:43:28.4698)
2015-08-26 10:43:28.4698|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:28.4698|Info| PASS - throttle
2015-08-26 10:43:28.4698|Info|  Settimeout: id:13, (32) ms
2015-08-26 10:43:28.5238|Info|  Settimeout: id:14, (64) ms
2015-08-26 10:43:28.5759|Info|  Settimeout: id:15, (96) ms
2015-08-26 10:43:28.6269|Info|      Encerrado timer: id:12, (10:43:28.6269)
2015-08-26 10:43:28.6269|Info|      Executando timer: id:5, (10:43:28.6269)
2015-08-26 10:43:28.6269|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 10:43:28.6269|Info|      Encerrado timer: id:5, (10:43:28.6289)
2015-08-26 10:43:28.6299|Info|      Executando timer: id:13, (10:43:28.6299)
2015-08-26 10:43:28.6299|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:28.6299|Info|      Encerrado timer: id:13, (10:43:28.6309)
2015-08-26 10:43:28.6299|Info|      Executando timer: id:14, (10:43:28.6319)
2015-08-26 10:43:28.6299|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.6299|Info|  Settimeout: id:16, (29) ms
2015-08-26 10:43:28.6849|Info|      Encerrado timer: id:14, (10:43:28.6849)
2015-08-26 10:43:28.6849|Info|      Executando timer: id:16, (10:43:28.6859)
2015-08-26 10:43:28.6849|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:28.6849|Info|      Encerrado timer: id:16, (10:43:28.6879)
2015-08-26 10:43:28.6849|Info|      Executando timer: id:15, (10:43:28.6889)
2015-08-26 10:43:28.6849|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.6849|Info|  Settimeout: id:17, (13) ms
2015-08-26 10:43:28.7410|Info|      Encerrado timer: id:15, (10:43:28.7410)
2015-08-26 10:43:28.7410|Info|      Executando timer: id:17, (10:43:28.7420)
2015-08-26 10:43:28.7410|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:28.7410|Info| PASS - throttle arguments
2015-08-26 10:43:28.7410|Info|  Settimeout: id:18, (64) ms
2015-08-26 10:43:28.7960|Info|      Encerrado timer: id:17, (10:43:28.7960)
2015-08-26 10:43:28.8110|Info|      Executando timer: id:18, (10:43:28.8110)
2015-08-26 10:43:28.8110|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.8110|Info|  Settimeout: id:19, (13) ms
2015-08-26 10:43:28.8641|Info|      Encerrado timer: id:18, (10:43:28.8641)
2015-08-26 10:43:28.8641|Info|      Executando timer: id:19, (10:43:28.8651)
2015-08-26 10:43:28.8641|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:28.8641|Info| PASS - throttle once
2015-08-26 10:43:28.8641|Info|  Settimeout: id:20, (32) ms
2015-08-26 10:43:28.9181|Info|  Settimeout: id:21, (64) ms
2015-08-26 10:43:28.9691|Info|      Encerrado timer: id:19, (10:43:28.9691)
2015-08-26 10:43:28.9691|Info|      Executando timer: id:20, (10:43:28.9691)
2015-08-26 10:43:28.9691|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:28.9691|Info|      Encerrado timer: id:20, (10:43:28.9711)
2015-08-26 10:43:28.9842|Info|      Executando timer: id:21, (10:43:28.9842)
2015-08-26 10:43:28.9842|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:28.9842|Info|  Settimeout: id:22, (13) ms
2015-08-26 10:43:29.0362|Info|      Encerrado timer: id:21, (10:43:29.0362)
2015-08-26 10:43:29.0362|Info|      Executando timer: id:22, (10:43:29.0362)
2015-08-26 10:43:29.0362|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:29.0362|Info| PASS - throttle twice
2015-08-26 10:43:29.0362|Info|  Settimeout: id:23, (30) ms
2015-08-26 10:43:29.0892|Info|  Settimeout: id:24, (85) ms
2015-08-26 10:43:29.1403|Info|      Encerrado timer: id:22, (10:43:29.1403)
2015-08-26 10:43:29.1403|Info|      Executando timer: id:23, (10:43:29.1403)
2015-08-26 10:43:29.1403|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:29.1403|Info|      Encerrado timer: id:23, (10:43:29.1423)
2015-08-26 10:43:29.1763|Info|      Executando timer: id:24, (10:43:29.1763)
2015-08-26 10:43:29.1763|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:29.1763|Info|  Settimeout: id:25, (13) ms
2015-08-26 10:43:29.2293|Info|      Encerrado timer: id:24, (10:43:29.2293)
2015-08-26 10:43:29.2293|Info|      Executando timer: id:25, (10:43:29.2293)
2015-08-26 10:43:29.2293|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:29.2293|Info| PASS - more throttling
2015-08-26 10:43:29.2293|Info|  Settimeout: id:26, (100) ms
2015-08-26 10:43:29.2834|Info|  Settimeout: id:27, (50) ms
2015-08-26 10:43:29.3344|Info|  Settimeout: id:28, (150) ms
2015-08-26 10:43:29.3854|Info|  Settimeout: id:29, (160) ms
2015-08-26 10:43:29.4365|Info|  Settimeout: id:30, (230) ms
2015-08-26 10:43:29.4875|Info|  Settimeout: id:31, (300) ms
2015-08-26 10:43:29.5385|Info|      Encerrado timer: id:25, (10:43:29.5385)
2015-08-26 10:43:29.5385|Info|      Executando timer: id:26, (10:43:29.5395)
2015-08-26 10:43:29.5385|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:29.5385|Info|      Encerrado timer: id:26, (10:43:29.5405)
2015-08-26 10:43:29.5385|Info|      Executando timer: id:27, (10:43:29.5415)
2015-08-26 10:43:29.5385|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:29.5385|Info|  Settimeout: id:32, (98) ms
2015-08-26 10:43:29.5936|Info|      Encerrado timer: id:27, (10:43:29.5936)
2015-08-26 10:43:29.5936|Info|      Executando timer: id:28, (10:43:29.5946)
2015-08-26 10:43:29.5936|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:29.5936|Info|      Encerrado timer: id:28, (10:43:29.5956)
2015-08-26 10:43:29.5936|Info|      Executando timer: id:29, (10:43:29.5966)
2015-08-26 10:43:29.5936|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:29.5936|Info|      Encerrado timer: id:29, (10:43:29.5976)
2015-08-26 10:43:29.6426|Info|      Executando timer: id:32, (10:43:29.6426)
2015-08-26 10:43:29.6426|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:29.6666|Info|      Encerrado timer: id:32, (10:43:29.6666)
2015-08-26 10:43:29.6666|Info|      Executando timer: id:30, (10:43:29.6687)
2015-08-26 10:43:29.6666|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:29.6666|Info|  Settimeout: id:33, (97) ms
2015-08-26 10:43:29.7207|Info|      Encerrado timer: id:30, (10:43:29.7207)
2015-08-26 10:43:29.7687|Info|      Executando timer: id:33, (10:43:29.7687)
2015-08-26 10:43:29.7687|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:29.7707|Info|      Encerrado timer: id:33, (10:43:29.7707)
2015-08-26 10:43:29.7887|Info|      Executando timer: id:31, (10:43:29.7887)
2015-08-26 10:43:29.7887|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:29.7887|Info|  Settimeout: id:34, (13) ms
2015-08-26 10:43:29.8418|Info|      Encerrado timer: id:31, (10:43:29.8418)
2015-08-26 10:43:29.8418|Info|      Executando timer: id:34, (10:43:29.8428)
2015-08-26 10:43:29.8418|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:29.8418|Info|  Settimeout: id:35, (32) ms
2015-08-26 10:43:29.8968|Info|  Settimeout: id:36, (96) ms
2015-08-26 10:43:29.9478|Info|      Encerrado timer: id:34, (10:43:29.9478)
2015-08-26 10:43:29.9478|Info|      Executando timer: id:35, (10:43:29.9478)
2015-08-26 10:43:29.9478|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:29.9478|Info|      Encerrado timer: id:35, (10:43:29.9498)
2015-08-26 10:43:29.9949|Info|      Executando timer: id:36, (10:43:29.9949)
2015-08-26 10:43:29.9949|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:29.9949|Info|  Settimeout: id:37, (13) ms
2015-08-26 10:43:30.0469|Info|      Encerrado timer: id:36, (10:43:30.0469)
2015-08-26 10:43:30.0469|Info|      Executando timer: id:37, (10:43:30.0469)
2015-08-26 10:43:30.0469|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:30.0469|Info|  Settimeout: id:38, (60) ms
2015-08-26 10:43:30.1009|Info|  Settimeout: id:39, (96) ms
2015-08-26 10:43:30.1520|Info|      Encerrado timer: id:37, (10:43:30.1520)
2015-08-26 10:43:30.1520|Info|      Executando timer: id:38, (10:43:30.1530)
2015-08-26 10:43:30.1520|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:30.1520|Info|      Encerrado timer: id:38, (10:43:30.1540)
2015-08-26 10:43:30.1990|Info|      Executando timer: id:39, (10:43:30.1990)
2015-08-26 10:43:30.1990|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:30.1990|Info|  Settimeout: id:40, (13) ms
2015-08-26 10:43:30.2510|Info|      Encerrado timer: id:39, (10:43:30.2510)
2015-08-26 10:43:30.2510|Info|      Executando timer: id:40, (10:43:30.2510)
2015-08-26 10:43:30.2510|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:30.2510|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-08-26 10:43:30.2510|Info|  Settimeout: id:41, (100) ms
2015-08-26 10:43:30.3051|Info|  Settimeout: id:42, (50) ms
2015-08-26 10:43:30.3561|Info|  Settimeout: id:43, (60) ms
2015-08-26 10:43:30.4072|Info|  Settimeout: id:44, (200) ms
2015-08-26 10:43:30.4582|Info|  Settimeout: id:45, (250) ms
2015-08-26 10:43:30.5092|Info|  Settimeout: id:46, (350) ms
2015-08-26 10:43:30.5603|Info|      Encerrado timer: id:40, (10:43:30.5603)
2015-08-26 10:43:30.5603|Info|      Executando timer: id:41, (10:43:30.5603)
2015-08-26 10:43:30.5603|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:30.5603|Info|      Encerrado timer: id:41, (10:43:30.5623)
2015-08-26 10:43:30.5603|Info|      Executando timer: id:42, (10:43:30.5623)
2015-08-26 10:43:30.5603|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:30.5603|Info|  Settimeout: id:47, (100) ms
2015-08-26 10:43:30.6153|Info|      Encerrado timer: id:42, (10:43:30.6153)
2015-08-26 10:43:30.6153|Info|      Executando timer: id:43, (10:43:30.6163)
2015-08-26 10:43:30.6153|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:30.6153|Info|      Encerrado timer: id:43, (10:43:30.6183)
2015-08-26 10:43:30.6153|Info|      Executando timer: id:44, (10:43:30.6193)
2015-08-26 10:43:30.6153|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:30.6153|Info|      Encerrado timer: id:44, (10:43:30.6213)
2015-08-26 10:43:30.6663|Info|      Executando timer: id:47, (10:43:30.6663)
2015-08-26 10:43:30.6663|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:30.6663|Info|      Encerrado timer: id:47, (10:43:30.6683)
2015-08-26 10:43:30.7104|Info|      Executando timer: id:45, (10:43:30.7104)
2015-08-26 10:43:30.7104|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:30.7104|Info|      Encerrado timer: id:45, (10:43:30.7124)
2015-08-26 10:43:30.8605|Info|      Executando timer: id:46, (10:43:30.8605)
2015-08-26 10:43:30.8605|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:30.8605|Info|  Settimeout: id:48, (13) ms
2015-08-26 10:43:30.9125|Info|      Encerrado timer: id:46, (10:43:30.9125)
2015-08-26 10:43:30.9125|Info|      Executando timer: id:48, (10:43:30.9135)
2015-08-26 10:43:30.9125|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:30.9125|Info|  Settimeout: id:49, (100) ms
2015-08-26 10:43:31.0156|Info|  Settimeout: id:50, (99) ms
2015-08-26 10:43:31.1147|Info|  Settimeout: id:51, (100) ms
2015-08-26 10:43:31.2147|Info|  Settimeout: id:52, (100) ms
2015-08-26 10:43:31.2658|Info|  Settimeout: id:53, (200) ms
2015-08-26 10:43:31.3168|Info|      Encerrado timer: id:48, (10:43:31.3168)
2015-08-26 10:43:31.3168|Info|      Executando timer: id:52, (10:43:31.3178)
2015-08-26 10:43:31.3168|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:31.3168|Info|      Encerrado timer: id:52, (10:43:31.3198)
2015-08-26 10:43:31.4679|Info|      Executando timer: id:53, (10:43:31.4679)
2015-08-26 10:43:31.4679|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:31.4679|Info|  Settimeout: id:54, (13) ms
2015-08-26 10:43:31.5210|Info|      Encerrado timer: id:53, (10:43:31.5210)
2015-08-26 10:43:31.5210|Info|      Executando timer: id:54, (10:43:31.5220)
2015-08-26 10:43:31.5210|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:31.5210|Info| PASS - one more throttle with leading: false test
2015-08-26 10:43:31.5210|Info|  Settimeout: id:55, (96) ms
2015-08-26 10:43:31.5750|Info|      Encerrado timer: id:54, (10:43:31.5750)
2015-08-26 10:43:31.6220|Info|      Executando timer: id:55, (10:43:31.6220)
2015-08-26 10:43:31.6220|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:31.6220|Info|  Settimeout: id:56, (96) ms
2015-08-26 10:43:31.6741|Info|      Encerrado timer: id:55, (10:43:31.6741)
2015-08-26 10:43:31.7211|Info|      Executando timer: id:56, (10:43:31.7211)
2015-08-26 10:43:31.7211|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:31.7231|Info|  Settimeout: id:57, (13) ms
2015-08-26 10:43:31.7731|Info|      Encerrado timer: id:56, (10:43:31.7731)
2015-08-26 10:43:31.7731|Info|      Executando timer: id:57, (10:43:31.7731)
2015-08-26 10:43:31.7731|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:31.7731|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-26 10:43:31.7731|Info|  Settimeout: id:58, (200) ms
2015-08-26 10:43:31.8272|Info|      Encerrado timer: id:57, (10:43:31.8272)
2015-08-26 10:43:31.9773|Info|      Executando timer: id:58, (10:43:31.9773)
2015-08-26 10:43:31.9773|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:31.9773|Info|  Settimeout: id:59, (13) ms
2015-08-26 10:43:32.0323|Info|      Encerrado timer: id:58, (10:43:32.0323)
2015-08-26 10:43:32.0323|Info|      Executando timer: id:59, (10:43:32.0323)
2015-08-26 10:43:32.0323|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:32.0323|Info| PASS - throttle continues to function after system time is set backwards
2015-08-26 10:43:32.0363|Info|  Settimeout: id:60, (32) ms
2015-08-26 10:43:32.0874|Info|  Settimeout: id:61, (100) ms
2015-08-26 10:43:32.1384|Info|      Encerrado timer: id:59, (10:43:32.1384)
2015-08-26 10:43:32.1384|Info|      Executando timer: id:60, (10:43:32.1394)
2015-08-26 10:43:32.1384|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:32.1384|Info|  Settimeout: id:62, (32) ms
2015-08-26 10:43:32.1924|Info|      Encerrado timer: id:60, (10:43:32.1924)
2015-08-26 10:43:32.1924|Info|      Executando timer: id:62, (10:43:32.1934)
2015-08-26 10:43:32.1924|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:32.1924|Info|      Encerrado timer: id:62, (10:43:32.1954)
2015-08-26 10:43:32.1924|Info|      Executando timer: id:61, (10:43:32.1954)
2015-08-26 10:43:32.1924|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:32.1924|Info|  Settimeout: id:63, (13) ms
2015-08-26 10:43:32.2485|Info|      Encerrado timer: id:61, (10:43:32.2485)
2015-08-26 10:43:32.2485|Info|      Executando timer: id:63, (10:43:32.2485)
2015-08-26 10:43:32.2485|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:32.2485|Info| PASS - throttle re-entrant
2015-08-26 10:43:32.2485|Info|  Settimeout: id:64, (32) ms
2015-08-26 10:43:32.3025|Info|  Settimeout: id:65, (16) ms
2015-08-26 10:43:32.3545|Info|  Settimeout: id:66, (96) ms
2015-08-26 10:43:32.4056|Info|      Encerrado timer: id:63, (10:43:32.4056)
2015-08-26 10:43:32.4056|Info|      Executando timer: id:64, (10:43:32.4066)
2015-08-26 10:43:32.4056|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:32.4056|Info|      Encerrado timer: id:64, (10:43:32.4086)
2015-08-26 10:43:32.4056|Info|      Executando timer: id:65, (10:43:32.4086)
2015-08-26 10:43:32.4056|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:32.4106|Info|  Settimeout: id:67, (32) ms
2015-08-26 10:43:32.4616|Info|      Encerrado timer: id:65, (10:43:32.4616)
2015-08-26 10:43:32.4616|Info|      Executando timer: id:67, (10:43:32.4626)
2015-08-26 10:43:32.4616|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:32.4616|Info|      Encerrado timer: id:67, (10:43:32.4636)
2015-08-26 10:43:32.4616|Info|      Executando timer: id:66, (10:43:32.4646)
2015-08-26 10:43:32.4616|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:32.4616|Info|  Settimeout: id:68, (13) ms
2015-08-26 10:43:32.5167|Info|      Encerrado timer: id:66, (10:43:32.5167)
2015-08-26 10:43:32.5167|Info|      Executando timer: id:68, (10:43:32.5177)
2015-08-26 10:43:32.5167|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:32.5167|Info|  Settimeout: id:69, (64) ms
2015-08-26 10:43:32.5707|Info|  Settimeout: id:70, (16) ms
2015-08-26 10:43:32.6217|Info|  Settimeout: id:71, (32) ms
2015-08-26 10:43:32.6728|Info|  Settimeout: id:72, (48) ms
2015-08-26 10:43:32.7238|Info|  Settimeout: id:73, (128) ms
2015-08-26 10:43:32.7748|Info|      Encerrado timer: id:68, (10:43:32.7748)
2015-08-26 10:43:32.7748|Info|      Executando timer: id:69, (10:43:32.7758)
2015-08-26 10:43:32.7748|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:32.7748|Info|      Encerrado timer: id:69, (10:43:32.7778)
2015-08-26 10:43:32.7748|Info|      Executando timer: id:70, (10:43:32.7778)
2015-08-26 10:43:32.7748|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:32.7748|Info|  Settimeout: id:74, (64) ms
2015-08-26 10:43:32.8309|Info|      Encerrado timer: id:70, (10:43:32.8309)
2015-08-26 10:43:32.8309|Info|      Executando timer: id:71, (10:43:32.8309)
2015-08-26 10:43:32.8309|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:32.8329|Info|      Encerrado timer: id:71, (10:43:32.8329)
2015-08-26 10:43:32.8329|Info|      Executando timer: id:72, (10:43:32.8339)
2015-08-26 10:43:32.8329|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:32.8329|Info|      Encerrado timer: id:72, (10:43:32.8349)
2015-08-26 10:43:32.8329|Info|      Executando timer: id:74, (10:43:32.8459)
2015-08-26 10:43:32.8329|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:32.8329|Info|  Settimeout: id:75, (51) ms
2015-08-26 10:43:32.8979|Info|      Encerrado timer: id:74, (10:43:32.8979)
2015-08-26 10:43:32.8979|Info|      Executando timer: id:73, (10:43:32.8989)
2015-08-26 10:43:32.8979|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:32.8979|Info|  Settimeout: id:76, (13) ms
2015-08-26 10:43:32.9520|Info|      Encerrado timer: id:73, (10:43:32.9520)
2015-08-26 10:43:32.9520|Info|      Executando timer: id:75, (10:43:32.9530)
2015-08-26 10:43:32.9520|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:32.9520|Info|      Encerrado timer: id:75, (10:43:32.9540)
2015-08-26 10:43:32.9520|Info|      Executando timer: id:76, (10:43:32.9550)
2015-08-26 10:43:32.9520|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:32.9520|Info|  Settimeout: id:77, (32) ms
2015-08-26 10:43:33.0070|Info|  Settimeout: id:78, (96) ms
2015-08-26 10:43:33.0580|Info|      Encerrado timer: id:76, (10:43:33.0580)
2015-08-26 10:43:33.0580|Info|      Executando timer: id:77, (10:43:33.0580)
2015-08-26 10:43:33.0580|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:33.0580|Info|      Encerrado timer: id:77, (10:43:33.0610)
2015-08-26 10:43:33.1051|Info|      Executando timer: id:78, (10:43:33.1051)
2015-08-26 10:43:33.1051|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:33.1051|Info|  Settimeout: id:79, (13) ms
2015-08-26 10:43:33.1571|Info|      Encerrado timer: id:78, (10:43:33.1571)
2015-08-26 10:43:33.1571|Info|      Executando timer: id:79, (10:43:33.1571)
2015-08-26 10:43:33.1571|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:33.1571|Info| PASS - debounce asap recursively
2015-08-26 10:43:33.1571|Info|  Settimeout: id:80, (100) ms
2015-08-26 10:43:33.2112|Info|  Settimeout: id:81, (200) ms
2015-08-26 10:43:33.2622|Info|      Encerrado timer: id:79, (10:43:33.2622)
2015-08-26 10:43:33.2622|Info|      Executando timer: id:80, (10:43:33.2632)
2015-08-26 10:43:33.2622|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:33.2622|Info|      Encerrado timer: id:80, (10:43:33.2652)
2015-08-26 10:43:33.4133|Info|      Executando timer: id:81, (10:43:33.4133)
2015-08-26 10:43:33.4133|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:33.4133|Info|  Settimeout: id:82, (100) ms
2015-08-26 10:43:33.4653|Info|  Settimeout: id:83, (13) ms
2015-08-26 10:43:33.5164|Info|      Encerrado timer: id:81, (10:43:33.5164)
2015-08-26 10:43:33.5164|Info|      Executando timer: id:83, (10:43:33.5164)
2015-08-26 10:43:33.5164|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:33.5164|Info| PASS - debounce after system time is set backwards
2015-08-26 10:43:33.5164|Info|  Settimeout: id:84, (32) ms
2015-08-26 10:43:33.5704|Info|  Settimeout: id:85, (100) ms
2015-08-26 10:43:33.6214|Info|      Encerrado timer: id:83, (10:43:33.6214)
2015-08-26 10:43:33.6214|Info|      Executando timer: id:82, (10:43:33.6214)
2015-08-26 10:43:33.6214|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:33.6214|Info|      Encerrado timer: id:82, (10:43:33.6234)
2015-08-26 10:43:33.6214|Info|      Executando timer: id:84, (10:43:33.6244)
2015-08-26 10:43:33.6214|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:33.6214|Info|  Settimeout: id:86, (32) ms
2015-08-26 10:43:33.6765|Info|      Encerrado timer: id:84, (10:43:33.6765)
2015-08-26 10:43:33.6765|Info|      Executando timer: id:86, (10:43:33.6765)
2015-08-26 10:43:33.6765|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:33.6765|Info|      Encerrado timer: id:86, (10:43:33.6785)
2015-08-26 10:43:33.6765|Info|      Executando timer: id:85, (10:43:33.6795)
2015-08-26 10:43:33.6765|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:33.6765|Info|  Settimeout: id:87, (13) ms
2015-08-26 10:43:33.7315|Info|      Encerrado timer: id:85, (10:43:33.7315)
2015-08-26 10:43:33.7315|Info|      Executando timer: id:87, (10:43:33.7325)
2015-08-26 10:43:33.7315|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:33.7315|Info| PASS - debounce re-entrant
2015-08-26 10:43:33.7315|Info| PASS - once
2015-08-26 10:43:33.7315|Info| PASS - Recursive onced function.
2015-08-26 10:43:33.7315|Info| PASS - wrap
2015-08-26 10:43:33.7385|Info| PASS - negate
2015-08-26 10:43:33.7385|Info| PASS - compose
2015-08-26 10:43:33.7385|Info| PASS - after
2015-08-26 10:43:33.7385|Info| PASS - before
2015-08-26 10:43:33.7385|Info| PASS - iteratee
2015-08-26 10:43:33.7385|Info|----------------------------------------
2015-08-26 10:43:33.7385|Info|Objects
2015-08-26 10:43:33.7385|Info|----------------------------------------
2015-08-26 10:43:33.7385|Info| PASS - keys
2015-08-26 10:43:33.7545|Info| PASS - allKeys
2015-08-26 10:43:33.7545|Info| PASS - values
2015-08-26 10:43:33.7545|Info| PASS - pairs
2015-08-26 10:43:33.7545|Info| PASS - invert
2015-08-26 10:43:33.7545|Info| PASS - functions
2015-08-26 10:43:33.7545|Info| PASS - methods
2015-08-26 10:43:33.7545|Info| PASS - extend
2015-08-26 10:43:33.7545|Info| PASS - extendOwn
2015-08-26 10:43:33.7545|Info| PASS - pick
2015-08-26 10:43:33.7545|Info| PASS - omit
2015-08-26 10:43:33.7545|Info| PASS - defaults
2015-08-26 10:43:33.7545|Info| PASS - clone
2015-08-26 10:43:33.7545|Info| PASS - create
2015-08-26 10:43:33.7756|Info| PASS - isEqual
2015-08-26 10:43:33.7756|Info| PASS - isEmpty
2015-08-26 10:43:33.7756|Info| PASS - isArguments
2015-08-26 10:43:33.7756|Info| PASS - isObject
2015-08-26 10:43:33.7756|Info| PASS - isArray
2015-08-26 10:43:33.7756|Info| PASS - isString
2015-08-26 10:43:33.7756|Info| PASS - isNumber
2015-08-26 10:43:33.7756|Info| PASS - isBoolean
2015-08-26 10:43:33.7856|Info| PASS - isFunction
2015-08-26 10:43:33.7856|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-26 10:43:33.7856|Info|    PASS | EQ | can extract the keys from an object
2015-08-26 10:43:33.7856|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 10:43:33.7856|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-26 10:43:33.7856|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 10:43:33.7856|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.7856|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8016|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8016|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8016|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8016|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8016|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 10:43:33.8016|Info|    PASS | EQ | should include inherited keys
2015-08-26 10:43:33.8016|Info|    PASS | EQ | should get keys from constructor
2015-08-26 10:43:33.8016|Info|    PASS | EQ | can extract the values from an object
2015-08-26 10:43:33.8016|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 10:43:33.8016|Info|    PASS | EQ | can convert an object into pairs
2015-08-26 10:43:33.8016|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 10:43:33.8016|Info|    PASS | EQ | can invert an object
2015-08-26 10:43:33.8016|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-26 10:43:33.8016|Info|    PASS | EQ | can invert an object with "length"
2015-08-26 10:43:33.8016|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-26 10:43:33.8016|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-26 10:43:33.8016|Info|    PASS | EQ | alias for functions
2015-08-26 10:43:33.8016|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-26 10:43:33.8016|Info|    PASS | EQ | properties in source override destination
2015-08-26 10:43:33.8016|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 10:43:33.8016|Info|    PASS | EQ | can extend from multiple source objects
2015-08-26 10:43:33.8176|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-26 10:43:33.8176|Info|    PASS | EQ | extend copies undefined values
2015-08-26 10:43:33.8176|Info|    PASS | EQ | extend copies all properties from source
2015-08-26 10:43:33.8176|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-26 10:43:33.8176|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 10:43:33.8176|Info|    PASS | EQ | extending null results in null
2015-08-26 10:43:33.8176|Info|    PASS | OK | extending undefined results in undefined
2015-08-26 10:43:33.8176|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-26 10:43:33.8176|Info|    PASS | EQ | properties in source override destination
2015-08-26 10:43:33.8176|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 10:43:33.8176|Info|    PASS | EQ | can assign from multiple source objects
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assign copies undefined values
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assign copies own properties from source
2015-08-26 10:43:33.8176|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 10:43:33.8176|Info|    PASS | OK | assigning undefined results in undefined
2015-08-26 10:43:33.8176|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-26 10:43:33.8176|Info|    PASS | EQ | can restrict properties to those named
2015-08-26 10:43:33.8176|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-26 10:43:33.8176|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-26 10:43:33.8326|Info|    PASS | EQ | can pick numeric properties
2015-08-26 10:43:33.8326|Info|    PASS | EQ | Called with null/undefined
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | Called with null/undefined
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | can iterate primitives
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8326|Info|    PASS | EQ | can accept a predicate and context
2015-08-26 10:43:33.8326|Info|    PASS | EQ | include prototype props
2015-08-26 10:43:33.8326|Info|    PASS | EQ | function is given context
2015-08-26 10:43:33.8326|Info|    PASS | EQ | does not set own property if property not in object
2015-08-26 10:43:33.8326|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 10:43:33.8326|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 10:43:33.8326|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 10:43:33.8326|Info|    PASS | EQ | can omit a single named property
2015-08-26 10:43:33.8326|Info|    PASS | EQ | can omit several named properties
2015-08-26 10:43:33.8326|Info|    PASS | EQ | can omit properties named in an array
2015-08-26 10:43:33.8326|Info|    PASS | EQ | can omit numeric properties
2015-08-26 10:43:33.8326|Info|    PASS | EQ | non objects return empty object
2015-08-26 10:43:33.8326|Info|    PASS | EQ | null/undefined return empty object
2015-08-26 10:43:33.8326|Info|    PASS | EQ | returns empty object for primitives
2015-08-26 10:43:33.8486|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8486|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8486|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8486|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8486|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8486|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8486|Info|    PASS | EQ | can accept a predicate
2015-08-26 10:43:33.8486|Info|    PASS | EQ | include prototype props
2015-08-26 10:43:33.8486|Info|    PASS | EQ | function is given context
2015-08-26 10:43:33.8486|Info|    PASS | EQ | value exists
2015-08-26 10:43:33.8486|Info|    PASS | EQ | value exists
2015-08-26 10:43:33.8486|Info|    PASS | EQ | default applied
2015-08-26 10:43:33.8486|Info|    PASS | EQ | null isn't overridden
2015-08-26 10:43:33.8486|Info|    PASS | EQ | value exists
2015-08-26 10:43:33.8486|Info|    PASS | EQ | NaN isn't overridden
2015-08-26 10:43:33.8486|Info|    PASS | EQ | new value is added, first one wins
2015-08-26 10:43:33.8486|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 10:43:33.8486|Info|    PASS | EQ | result is null if destination is null
2015-08-26 10:43:33.8486|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-26 10:43:33.8486|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-26 10:43:33.8486|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-26 10:43:33.8486|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-26 10:43:33.8486|Info|    PASS | OK | non objects should not be changed by clone
2015-08-26 10:43:33.8486|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 10:43:33.8486|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 10:43:33.8486|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:43:33.8636|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:43:33.8636|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:43:33.8636|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 10:43:33.8636|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-26 10:43:33.8636|Info|    PASS | EQ | object should inherit prototype
2015-08-26 10:43:33.8636|Info|    PASS | EQ | properties should be added to object
2015-08-26 10:43:33.8636|Info|    PASS | EQ | ok
2015-08-26 10:43:33.8636|Info|    PASS | EQ | should only add own properties
2015-08-26 10:43:33.8636|Info|    PASS | EQ | `null` is equal to `null`
2015-08-26 10:43:33.8636|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-26 10:43:33.8636|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-26 10:43:33.8636|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-26 10:43:33.8636|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-26 10:43:33.8636|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-26 10:43:33.8636|Info|    PASS | EQ | Identical string primitives are equal
2015-08-26 10:43:33.8636|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-26 10:43:33.8636|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-26 10:43:33.8636|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-26 10:43:33.8636|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-26 10:43:33.8636|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-26 10:43:33.8636|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-26 10:43:33.8636|Info|    PASS | EQ | Identical number primitives are equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-26 10:43:33.8796|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-26 10:43:33.8796|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-26 10:43:33.8796|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-26 10:43:33.8796|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-26 10:43:33.8796|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-26 10:43:33.8796|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Invalid dates are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Flag order is not significant
2015-08-26 10:43:33.8956|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-26 10:43:33.8956|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Empty object literals are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Empty array literals are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-26 10:43:33.8956|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Object instances are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Cyclic structures are equal
2015-08-26 10:43:33.9106|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-26 10:43:33.9267|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-26 10:43:33.9267|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-26 10:43:33.9267|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-26 10:43:33.9267|Info|    PASS | EQ | `isEqual` can be chained
2015-08-26 10:43:33.9267|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-26 10:43:33.9267|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-26 10:43:33.9267|Info|    PASS | EQ | [1] is not empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | [] is empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | {one : 1} is not empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | {} is empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | null is empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | undefined is empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | the empty string is empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | but other strings are not
2015-08-26 10:43:33.9267|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-26 10:43:33.9267|Info|    PASS | EQ | empty arguments object is empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-26 10:43:33.9267|Info|    PASS | EQ | a string is not an arguments object
2015-08-26 10:43:33.9417|Info|    PASS | EQ | a function is not an arguments object
2015-08-26 10:43:33.9417|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-26 10:43:33.9417|Info|    PASS | EQ | but not when it's converted into an array
2015-08-26 10:43:33.9417|Info|    PASS | EQ | and not vanilla arrays.
2015-08-26 10:43:33.9417|Info|    PASS | EQ | the arguments object is object
2015-08-26 10:43:33.9417|Info|    PASS | EQ | and arrays
2015-08-26 10:43:33.9417|Info|    PASS | EQ | and functions
2015-08-26 10:43:33.9417|Info|    PASS | EQ | but not null
2015-08-26 10:43:33.9417|Info|    PASS | EQ | and not undefined
2015-08-26 10:43:33.9417|Info|    PASS | EQ | and not string
2015-08-26 10:43:33.9417|Info|    PASS | EQ | and not number
2015-08-26 10:43:33.9417|Info|    PASS | EQ | and not boolean
2015-08-26 10:43:33.9417|Info|    PASS | EQ | but new String()
2015-08-26 10:43:33.9417|Info|    PASS | EQ | undefined vars are not arrays
2015-08-26 10:43:33.9417|Info|    PASS | EQ | the arguments object is not an array
2015-08-26 10:43:33.9417|Info|    PASS | EQ | but arrays are
2015-08-26 10:43:33.9417|Info|    PASS | EQ | but strings are
2015-08-26 10:43:33.9417|Info|    PASS | EQ | string literals are
2015-08-26 10:43:33.9417|Info|    PASS | EQ | so are String objects
2015-08-26 10:43:33.9417|Info|    PASS | EQ | ok
2015-08-26 10:43:33.9417|Info|    PASS | EQ | a string is not a number
2015-08-26 10:43:33.9417|Info|    PASS | EQ | the arguments object is not a number
2015-08-26 10:43:33.9417|Info|    PASS | EQ | undefined is not a number
2015-08-26 10:43:33.9417|Info|    PASS | EQ | but numbers are
2015-08-26 10:43:33.9417|Info|    PASS | EQ | NaN *is* a number
2015-08-26 10:43:33.9597|Info|    PASS | EQ | Infinity is a number
2015-08-26 10:43:33.9597|Info|    PASS | EQ | numeric strings are not numbers
2015-08-26 10:43:33.9597|Info|    PASS | EQ | a number is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | a string is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | undefined is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | NaN is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | null is not a boolean
2015-08-26 10:43:33.9597|Info|    PASS | EQ | but true is
2015-08-26 10:43:33.9597|Info|    PASS | EQ | and so is false
2015-08-26 10:43:33.9597|Info|    PASS | EQ | undefined vars are not functions
2015-08-26 10:43:33.9597|Info|    PASS | EQ | arrays are not functions
2015-08-26 10:43:33.9597|Info|    PASS | EQ | strings are not functions
2015-08-26 10:43:33.9597|Info|    PASS | EQ | but functions are
2015-08-26 10:43:33.9597|Info|    PASS | EQ | even anonymous ones
2015-08-26 10:43:33.9597|Info|    FAIL | OK | Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined
2015-08-26 10:43:33.9597|Info| PASS - isDate
2015-08-26 10:43:33.9737|Info| PASS - isRegExp
2015-08-26 10:43:33.9737|Info| PASS - isFinite
2015-08-26 10:43:33.9737|Info| PASS - isNaN
2015-08-26 10:43:33.9737|Info| PASS - isNull
2015-08-26 10:43:33.9737|Info| PASS - isUndefined
2015-08-26 10:43:33.9737|Info| PASS - isError
2015-08-26 10:43:33.9737|Info| PASS - tap
2015-08-26 10:43:33.9737|Info| PASS - has
2015-08-26 10:43:33.9737|Info| PASS - isMatch
2015-08-26 10:43:33.9737|Info| PASS - matcher
2015-08-26 10:43:33.9737|Info| PASS - matcher 
2015-08-26 10:43:33.9887|Info| PASS - findKey
2015-08-26 10:43:33.9887|Info| PASS - mapObject
2015-08-26 10:43:33.9887|Info|----------------------------------------
2015-08-26 10:43:33.9887|Info|Utility
2015-08-26 10:43:33.9887|Info|----------------------------------------
2015-08-26 10:43:33.9887|Info| PASS - #750 - Return _ instance.
2015-08-26 10:43:33.9887|Info| PASS - identity
2015-08-26 10:43:33.9887|Info| PASS - constant
2015-08-26 10:43:33.9887|Info| PASS - noop
2015-08-26 10:43:33.9887|Info| PASS - property
2015-08-26 10:43:33.9887|Info| PASS - propertyOf
2015-08-26 10:43:33.9887|Info| PASS - random
2015-08-26 10:43:33.9887|Info| PASS - now
2015-08-26 10:43:34.0047|Info| PASS - uniqueId
2015-08-26 10:43:34.0047|Info| PASS - times
2015-08-26 10:43:34.0047|Info| PASS - mixin
2015-08-26 10:43:34.0047|Info| PASS - _.escape
2015-08-26 10:43:34.0047|Info| PASS - _.unescape
2015-08-26 10:43:34.0047|Info| PASS - _.escape & unescape
2015-08-26 10:43:34.0047|Info| PASS - template
2015-08-26 10:43:34.0047|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-26 10:43:34.0047|Info| PASS - _.template handles \u2028 & \u2029
2015-08-26 10:43:34.0047|Info| PASS - result calls functions and returns primitives
2015-08-26 10:43:34.0047|Info| PASS - result returns a default value if object is null or undefined
2015-08-26 10:43:34.0207|Info| PASS - result returns a default value if property of object is missing
2015-08-26 10:43:34.0207|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-26 10:43:34.0207|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-26 10:43:34.0207|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-26 10:43:34.0207|Info| PASS - result fallback can use a function
2015-08-26 10:43:34.0207|Info| PASS - _.templateSettings.variable
2015-08-26 10:43:34.0207|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-26 10:43:34.0207|Info| PASS - #556 - undefined template variables.
2015-08-26 10:43:34.0207|Info| PASS - interpolate evaluates code only once.
2015-08-26 10:43:34.0207|Info| PASS - #746 - _.template settings are not modified.
2015-08-26 10:43:34.0207|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-26 10:43:34.0207|Info|  Settimeout: id:88, (100) ms
2015-08-26 10:43:34.0838|Info|  Settimeout: id:89, (50) ms
2015-08-26 10:43:34.1358|Info|  Settimeout: id:90, (150) ms
2015-08-26 10:43:34.1878|Info|      Encerrado timer: id:87, (10:43:34.1878)
2015-08-26 10:43:34.1878|Info|      Executando timer: id:88, (10:43:34.1898)
2015-08-26 10:43:34.1878|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:34.1918|Info|      Encerrado timer: id:88, (10:43:34.1918)
2015-08-26 10:43:34.1918|Info|      Executando timer: id:89, (10:43:34.1928)
2015-08-26 10:43:34.1918|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:43:34.1918|Info|      Encerrado timer: id:89, (10:43:34.1959)
2015-08-26 10:43:34.2879|Info|      Executando timer: id:90, (10:43:34.2879)
2015-08-26 10:43:34.2879|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:43:34.2879|Info|  Settimeout: id:91, (13) ms
2015-08-26 10:43:34.3410|Info|      Encerrado timer: id:90, (10:43:34.3410)
2015-08-26 10:43:34.3410|Info|      Executando timer: id:91, (10:43:34.3420)
2015-08-26 10:43:34.3410|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:34.3410|Info|  Settimeout: id:92, (100) ms
2015-08-26 10:43:34.3960|Info|  Settimeout: id:93, (50) ms
2015-08-26 10:43:34.4480|Info|  Settimeout: id:94, (150) ms
2015-08-26 10:43:34.4991|Info|  Settimeout: id:95, (160) ms
2015-08-26 10:43:34.5501|Info|  Settimeout: id:96, (230) ms
2015-08-26 10:43:34.6011|Info|  Settimeout: id:97, (300) ms
2015-08-26 10:43:34.6522|Info|      Encerrado timer: id:91, (10:43:34.6522)
2015-08-26 10:43:34.6522|Info|      Executando timer: id:92, (10:43:34.6532)
2015-08-26 10:43:34.6522|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:34.6522|Info|      Encerrado timer: id:92, (10:43:34.6552)
2015-08-26 10:43:34.6522|Info|      Executando timer: id:93, (10:43:34.6562)
2015-08-26 10:43:34.6522|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:34.6522|Info|  Settimeout: id:98, (97) ms
2015-08-26 10:43:34.7092|Info|      Encerrado timer: id:93, (10:43:34.7092)
2015-08-26 10:43:34.7092|Info|      Executando timer: id:94, (10:43:34.7102)
2015-08-26 10:43:34.7092|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:34.7092|Info|      Encerrado timer: id:94, (10:43:34.7112)
2015-08-26 10:43:34.7092|Info|      Executando timer: id:95, (10:43:34.7122)
2015-08-26 10:43:34.7092|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:34.7092|Info|      Encerrado timer: id:95, (10:43:34.7132)
2015-08-26 10:43:34.7572|Info|      Executando timer: id:98, (10:43:34.7572)
2015-08-26 10:43:34.7572|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:34.7572|Info|      Encerrado timer: id:98, (10:43:34.7593)
2015-08-26 10:43:34.7823|Info|      Executando timer: id:96, (10:43:34.7823)
2015-08-26 10:43:34.7823|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:34.7823|Info|  Settimeout: id:99, (76) ms
2015-08-26 10:43:34.8353|Info|      Encerrado timer: id:96, (10:43:34.8353)
2015-08-26 10:43:34.8623|Info|      Executando timer: id:99, (10:43:34.8623)
2015-08-26 10:43:34.8623|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:34.8643|Info|      Encerrado timer: id:99, (10:43:34.8643)
2015-08-26 10:43:34.9034|Info|      Executando timer: id:97, (10:43:34.9034)
2015-08-26 10:43:34.9034|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:34.9034|Info|  Settimeout: id:100, (13) ms
2015-08-26 10:43:34.9630|Info|      Encerrado timer: id:97, (10:43:34.9630)
2015-08-26 10:43:34.9630|Info|      Executando timer: id:100, (10:43:34.9630)
2015-08-26 10:43:34.9630|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:34.9630|Info|  Settimeout: id:101, (32) ms
2015-08-26 10:43:35.0149|Info|  Settimeout: id:102, (96) ms
2015-08-26 10:43:35.0678|Info|      Encerrado timer: id:100, (10:43:35.0678)
2015-08-26 10:43:35.0678|Info|      Executando timer: id:101, (10:43:35.0678)
2015-08-26 10:43:35.0678|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:35.0678|Info|      Encerrado timer: id:101, (10:43:35.0678)
2015-08-26 10:43:35.1147|Info|      Executando timer: id:102, (10:43:35.1147)
2015-08-26 10:43:35.1147|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:35.1147|Info|  Settimeout: id:103, (13) ms
2015-08-26 10:43:35.1648|Info|      Encerrado timer: id:102, (10:43:35.1648)
2015-08-26 10:43:35.1648|Info|      Executando timer: id:103, (10:43:35.1658)
2015-08-26 10:43:35.1648|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:35.1648|Info|  Settimeout: id:104, (100) ms
2015-08-26 10:43:35.2232|Info|  Settimeout: id:105, (50) ms
2015-08-26 10:43:35.2857|Info|  Settimeout: id:106, (60) ms
2015-08-26 10:43:35.3359|Info|  Settimeout: id:107, (200) ms
2015-08-26 10:43:35.3865|Info|  Settimeout: id:108, (250) ms
2015-08-26 10:43:35.4516|Info|  Settimeout: id:109, (350) ms
2015-08-26 10:43:35.5026|Info|      Encerrado timer: id:103, (10:43:35.5026)
2015-08-26 10:43:35.5026|Info|      Executando timer: id:104, (10:43:35.5026)
2015-08-26 10:43:35.5026|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:35.5026|Info|      Encerrado timer: id:104, (10:43:35.5026)
2015-08-26 10:43:35.5026|Info|      Executando timer: id:105, (10:43:35.5026)
2015-08-26 10:43:35.5026|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:35.5026|Info|  Settimeout: id:110, (100) ms
2015-08-26 10:43:35.5652|Info|      Encerrado timer: id:105, (10:43:35.5652)
2015-08-26 10:43:35.5652|Info|      Executando timer: id:106, (10:43:35.5652)
2015-08-26 10:43:35.5652|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:35.5652|Info|      Encerrado timer: id:106, (10:43:35.5652)
2015-08-26 10:43:35.5652|Info|      Executando timer: id:107, (10:43:35.5652)
2015-08-26 10:43:35.5652|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:35.5652|Info|      Encerrado timer: id:107, (10:43:35.5652)
2015-08-26 10:43:35.6121|Info|      Executando timer: id:110, (10:43:35.6121)
2015-08-26 10:43:35.6121|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:35.6121|Info|      Encerrado timer: id:110, (10:43:35.6121)
2015-08-26 10:43:35.6381|Info|      Executando timer: id:108, (10:43:35.6381)
2015-08-26 10:43:35.6381|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:35.6381|Info|      Encerrado timer: id:108, (10:43:35.6431)
2015-08-26 10:43:35.8040|Info|      Executando timer: id:109, (10:43:35.8040)
2015-08-26 10:43:35.8040|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:35.8040|Info|  Settimeout: id:111, (13) ms
2015-08-26 10:43:35.8677|Info|      Encerrado timer: id:109, (10:43:35.8677)
2015-08-26 10:43:35.8677|Info|      Executando timer: id:111, (10:43:35.8677)
2015-08-26 10:43:35.8677|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:35.8677|Info|  Settimeout: id:112, (32) ms
2015-08-26 10:43:35.9302|Info|  Settimeout: id:113, (16) ms
2015-08-26 10:43:35.9835|Info|  Settimeout: id:114, (96) ms
2015-08-26 10:43:36.0459|Info|      Encerrado timer: id:111, (10:43:36.0459)
2015-08-26 10:43:36.0459|Info|      Executando timer: id:112, (10:43:36.0459)
2015-08-26 10:43:36.0459|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:36.0459|Info|      Encerrado timer: id:112, (10:43:36.0459)
2015-08-26 10:43:36.0459|Info|      Executando timer: id:113, (10:43:36.0459)
2015-08-26 10:43:36.0459|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:36.0459|Info|  Settimeout: id:115, (32) ms
2015-08-26 10:43:36.0972|Info|      Encerrado timer: id:113, (10:43:36.0972)
2015-08-26 10:43:36.1012|Info|      Executando timer: id:115, (10:43:36.1012)
2015-08-26 10:43:36.1012|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:36.1012|Info|      Encerrado timer: id:115, (10:43:36.1082)
2015-08-26 10:43:36.1012|Info|      Executando timer: id:114, (10:43:36.1092)
2015-08-26 10:43:36.1012|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:36.1012|Info|  Settimeout: id:116, (13) ms
2015-08-26 10:43:36.1657|Info|      Encerrado timer: id:114, (10:43:36.1657)
2015-08-26 10:43:36.1657|Info|      Executando timer: id:116, (10:43:36.1657)
2015-08-26 10:43:36.1657|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:36.1657|Info|  Settimeout: id:117, (64) ms
2015-08-26 10:43:36.2282|Info|  Settimeout: id:118, (16) ms
2015-08-26 10:43:36.2848|Info|  Settimeout: id:119, (32) ms
2015-08-26 10:43:36.3355|Info|  Settimeout: id:120, (48) ms
2015-08-26 10:43:36.3995|Info|  Settimeout: id:121, (128) ms
2015-08-26 10:43:36.4668|Info|      Encerrado timer: id:116, (10:43:36.4668)
2015-08-26 10:43:36.4668|Info|      Executando timer: id:117, (10:43:36.4668)
2015-08-26 10:43:36.4668|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:36.4668|Info|      Encerrado timer: id:117, (10:43:36.4668)
2015-08-26 10:43:36.4668|Info|      Executando timer: id:118, (10:43:36.4668)
2015-08-26 10:43:36.4668|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:36.4668|Info|  Settimeout: id:122, (64) ms
2015-08-26 10:43:36.5293|Info|      Encerrado timer: id:118, (10:43:36.5293)
2015-08-26 10:43:36.5293|Info|      Executando timer: id:119, (10:43:36.5293)
2015-08-26 10:43:36.5293|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:36.5293|Info|      Encerrado timer: id:119, (10:43:36.5293)
2015-08-26 10:43:36.5293|Info|      Executando timer: id:120, (10:43:36.5293)
2015-08-26 10:43:36.5293|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:36.5293|Info|      Encerrado timer: id:120, (10:43:36.5293)
2015-08-26 10:43:36.5449|Info|      Executando timer: id:121, (10:43:36.5449)
2015-08-26 10:43:36.5449|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:36.5449|Info|  Settimeout: id:123, (13) ms
2015-08-26 10:43:36.5953|Info|      Encerrado timer: id:121, (10:43:36.5953)
2015-08-26 10:43:36.5953|Info|      Executando timer: id:122, (10:43:36.5953)
2015-08-26 10:43:36.5953|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:36.5953|Info|      Encerrado timer: id:122, (10:43:36.5973)
2015-08-26 10:43:36.5983|Info|      Executando timer: id:123, (10:43:36.5983)
2015-08-26 10:43:36.5983|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:36.5983|Info|  Settimeout: id:124, (100) ms
2015-08-26 10:43:36.6649|Info|  Settimeout: id:125, (50) ms
2015-08-26 10:43:36.7155|Info|  Settimeout: id:126, (150) ms
2015-08-26 10:43:36.7839|Info|      Encerrado timer: id:123, (10:43:36.7839)
2015-08-26 10:43:36.7839|Info|      Executando timer: id:124, (10:43:36.7839)
2015-08-26 10:43:36.7839|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:36.7839|Info|      Encerrado timer: id:124, (10:43:36.7839)
2015-08-26 10:43:36.7839|Info|      Executando timer: id:125, (10:43:36.7839)
2015-08-26 10:43:36.7839|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:43:36.7839|Info|      Encerrado timer: id:125, (10:43:36.7839)
2015-08-26 10:43:36.8723|Info|      Executando timer: id:126, (10:43:36.8723)
2015-08-26 10:43:36.8723|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:43:36.8723|Info|  Settimeout: id:127, (13) ms
2015-08-26 10:43:36.9352|Info|      Encerrado timer: id:126, (10:43:36.9352)
2015-08-26 10:43:36.9352|Info|      Executando timer: id:127, (10:43:36.9352)
2015-08-26 10:43:36.9352|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:36.9352|Info|  Settimeout: id:128, (100) ms
2015-08-26 10:43:36.9977|Info|  Settimeout: id:129, (50) ms
2015-08-26 10:43:37.0480|Info|  Settimeout: id:130, (150) ms
2015-08-26 10:43:37.1004|Info|  Settimeout: id:131, (160) ms
2015-08-26 10:43:37.1629|Info|  Settimeout: id:132, (230) ms
2015-08-26 10:43:37.2138|Info|  Settimeout: id:133, (300) ms
2015-08-26 10:43:37.2672|Info|      Encerrado timer: id:127, (10:43:37.2672)
2015-08-26 10:43:37.2672|Info|      Executando timer: id:128, (10:43:37.2672)
2015-08-26 10:43:37.2672|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:37.2672|Info|      Encerrado timer: id:128, (10:43:37.2672)
2015-08-26 10:43:37.2672|Info|      Executando timer: id:129, (10:43:37.2672)
2015-08-26 10:43:37.2672|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:37.2672|Info|  Settimeout: id:134, (100) ms
2015-08-26 10:43:37.3347|Info|      Encerrado timer: id:129, (10:43:37.3347)
2015-08-26 10:43:37.3347|Info|      Executando timer: id:130, (10:43:37.3367)
2015-08-26 10:43:37.3347|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:37.3347|Info|      Encerrado timer: id:130, (10:43:37.3427)
2015-08-26 10:43:37.3347|Info|      Executando timer: id:131, (10:43:37.3447)
2015-08-26 10:43:37.3347|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:37.3487|Info|      Encerrado timer: id:131, (10:43:37.3487)
2015-08-26 10:43:37.3848|Info|      Executando timer: id:134, (10:43:37.3848)
2015-08-26 10:43:37.3848|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:37.3848|Info|      Encerrado timer: id:134, (10:43:37.3860)
2015-08-26 10:43:37.4017|Info|      Executando timer: id:132, (10:43:37.4017)
2015-08-26 10:43:37.4017|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:37.4017|Info|  Settimeout: id:135, (84) ms
2015-08-26 10:43:37.4642|Info|      Encerrado timer: id:132, (10:43:37.4642)
2015-08-26 10:43:37.4955|Info|      Executando timer: id:135, (10:43:37.4955)
2015-08-26 10:43:37.4955|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:37.4955|Info|      Encerrado timer: id:135, (10:43:37.4955)
2015-08-26 10:43:37.5158|Info|      Executando timer: id:133, (10:43:37.5158)
2015-08-26 10:43:37.5158|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:37.5158|Info|  Settimeout: id:136, (13) ms
2015-08-26 10:43:37.5832|Info|      Encerrado timer: id:133, (10:43:37.5832)
2015-08-26 10:43:37.5832|Info|      Executando timer: id:136, (10:43:37.5832)
2015-08-26 10:43:37.5832|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:37.5832|Info|  Settimeout: id:137, (32) ms
2015-08-26 10:43:37.6457|Info|  Settimeout: id:138, (96) ms
2015-08-26 10:43:37.6966|Info|      Encerrado timer: id:136, (10:43:37.6966)
2015-08-26 10:43:37.6966|Info|      Executando timer: id:137, (10:43:37.6976)
2015-08-26 10:43:37.6966|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:37.6966|Info|      Encerrado timer: id:137, (10:43:37.6996)
2015-08-26 10:43:37.7452|Info|      Executando timer: id:138, (10:43:37.7452)
2015-08-26 10:43:37.7452|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:37.7452|Info|  Settimeout: id:139, (13) ms
2015-08-26 10:43:37.8012|Info|      Encerrado timer: id:138, (10:43:37.8012)
2015-08-26 10:43:37.8012|Info|      Executando timer: id:139, (10:43:37.8012)
2015-08-26 10:43:37.8012|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:37.8012|Info|  Settimeout: id:140, (100) ms
2015-08-26 10:43:37.8513|Info|  Settimeout: id:141, (50) ms
2015-08-26 10:43:37.9169|Info|  Settimeout: id:142, (60) ms
2015-08-26 10:43:37.9795|Info|  Settimeout: id:143, (200) ms
2015-08-26 10:43:38.0342|Info|  Settimeout: id:144, (250) ms
2015-08-26 10:43:38.0967|Info|  Settimeout: id:145, (350) ms
2015-08-26 10:43:38.1475|Info|      Encerrado timer: id:139, (10:43:38.1475)
2015-08-26 10:43:38.1475|Info|      Executando timer: id:140, (10:43:38.1495)
2015-08-26 10:43:38.1475|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:38.1475|Info|      Encerrado timer: id:140, (10:43:38.1555)
2015-08-26 10:43:38.1475|Info|      Executando timer: id:141, (10:43:38.1575)
2015-08-26 10:43:38.1605|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:38.1605|Info|  Settimeout: id:146, (100) ms
2015-08-26 10:43:38.2169|Info|      Encerrado timer: id:141, (10:43:38.2169)
2015-08-26 10:43:38.2169|Info|      Executando timer: id:142, (10:43:38.2169)
2015-08-26 10:43:38.2169|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:38.2169|Info|      Encerrado timer: id:142, (10:43:38.2169)
2015-08-26 10:43:38.2169|Info|      Executando timer: id:143, (10:43:38.2169)
2015-08-26 10:43:38.2169|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:38.2169|Info|      Encerrado timer: id:143, (10:43:38.2169)
2015-08-26 10:43:38.2794|Info|      Executando timer: id:146, (10:43:38.2794)
2015-08-26 10:43:38.2794|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:38.2794|Info|      Encerrado timer: id:146, (10:43:38.2794)
2015-08-26 10:43:38.2951|Info|      Executando timer: id:144, (10:43:38.2951)
2015-08-26 10:43:38.2951|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:38.3024|Info|      Encerrado timer: id:144, (10:43:38.3014)
2015-08-26 10:43:38.4530|Info|      Executando timer: id:145, (10:43:38.4530)
2015-08-26 10:43:38.4530|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:38.4590|Info|  Settimeout: id:147, (13) ms
2015-08-26 10:43:38.5191|Info|      Encerrado timer: id:145, (10:43:38.5191)
2015-08-26 10:43:38.5191|Info|      Executando timer: id:147, (10:43:38.5191)
2015-08-26 10:43:38.5191|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:38.5191|Info|  Settimeout: id:148, (32) ms
2015-08-26 10:43:38.5816|Info|  Settimeout: id:149, (16) ms
2015-08-26 10:43:38.6317|Info|  Settimeout: id:150, (96) ms
2015-08-26 10:43:38.6831|Info|      Encerrado timer: id:147, (10:43:38.6831)
2015-08-26 10:43:38.6831|Info|      Executando timer: id:148, (10:43:38.6831)
2015-08-26 10:43:38.6831|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:38.6831|Info|      Encerrado timer: id:148, (10:43:38.6831)
2015-08-26 10:43:38.6831|Info|      Executando timer: id:149, (10:43:38.6831)
2015-08-26 10:43:38.6831|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:38.6831|Info|  Settimeout: id:151, (32) ms
2015-08-26 10:43:38.7612|Info|      Encerrado timer: id:149, (10:43:38.7612)
2015-08-26 10:43:38.7612|Info|      Executando timer: id:150, (10:43:38.7612)
2015-08-26 10:43:38.7612|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:38.7612|Info|  Settimeout: id:152, (13) ms
2015-08-26 10:43:38.8115|Info|      Encerrado timer: id:150, (10:43:38.8115)
2015-08-26 10:43:38.8115|Info|      Executando timer: id:151, (10:43:38.8125)
2015-08-26 10:43:38.8115|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:38.8115|Info|      Encerrado timer: id:151, (10:43:38.8155)
2015-08-26 10:43:38.8115|Info|      Executando timer: id:152, (10:43:38.8165)
2015-08-26 10:43:38.8175|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:38.8175|Info|----------------------------------------
2015-08-26 10:43:38.8175|Info|Functions
2015-08-26 10:43:38.8175|Info|----------------------------------------
2015-08-26 10:43:38.8175|Info| PASS - debounce
2015-08-26 10:43:38.8175|Info|  Settimeout: id:153, (64) ms
2015-08-26 10:43:38.8700|Info|  Settimeout: id:154, (16) ms
2015-08-26 10:43:38.9325|Info|  Settimeout: id:155, (32) ms
2015-08-26 10:43:38.9859|Info|  Settimeout: id:156, (48) ms
2015-08-26 10:43:39.0483|Info|  Settimeout: id:157, (128) ms
2015-08-26 10:43:39.0987|Info|      Encerrado timer: id:152, (10:43:39.0987)
2015-08-26 10:43:39.0987|Info|      Executando timer: id:154, (10:43:39.1007)
2015-08-26 10:43:39.0987|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:39.0987|Info|      Encerrado timer: id:154, (10:43:39.1057)
2015-08-26 10:43:39.0987|Info|      Executando timer: id:153, (10:43:39.1077)
2015-08-26 10:43:39.0987|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:39.0987|Info|  Settimeout: id:158, (58) ms
2015-08-26 10:43:39.1671|Info|      Encerrado timer: id:153, (10:43:39.1671)
2015-08-26 10:43:39.1671|Info|      Executando timer: id:155, (10:43:39.1671)
2015-08-26 10:43:39.1671|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:39.1671|Info|      Encerrado timer: id:155, (10:43:39.1671)
2015-08-26 10:43:39.1671|Info|      Executando timer: id:156, (10:43:39.1671)
2015-08-26 10:43:39.1671|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:39.1671|Info|      Encerrado timer: id:156, (10:43:39.1671)
2015-08-26 10:43:39.1828|Info|      Executando timer: id:157, (10:43:39.1828)
2015-08-26 10:43:39.1828|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:39.1828|Info|  Settimeout: id:159, (13) ms
2015-08-26 10:43:39.2453|Info|      Encerrado timer: id:157, (10:43:39.2453)
2015-08-26 10:43:39.2453|Info|      Executando timer: id:158, (10:43:39.2453)
2015-08-26 10:43:39.2453|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 10:43:39.2453|Info|      Encerrado timer: id:158, (10:43:39.2453)
2015-08-26 10:43:39.2453|Info|      Executando timer: id:159, (10:43:39.2453)
2015-08-26 10:43:39.2453|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:39.2453|Info| PASS - debounce asap
2015-08-26 10:43:39.2453|Info|  Settimeout: id:160, (100) ms
2015-08-26 10:43:39.3186|Info|  Settimeout: id:161, (50) ms
2015-08-26 10:43:39.3706|Info|  Settimeout: id:162, (150) ms
2015-08-26 10:43:39.4224|Info|      Encerrado timer: id:159, (10:43:39.4224)
2015-08-26 10:43:39.4224|Info|      Executando timer: id:160, (10:43:39.4234)
2015-08-26 10:43:39.4224|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:39.4264|Info|      Encerrado timer: id:160, (10:43:39.4264)
2015-08-26 10:43:39.4264|Info|      Executando timer: id:161, (10:43:39.4274)
2015-08-26 10:43:39.4264|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 10:43:39.4264|Info|      Encerrado timer: id:161, (10:43:39.4295)
2015-08-26 10:43:39.5331|Info|      Executando timer: id:162, (10:43:39.5331)
2015-08-26 10:43:39.5331|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 10:43:39.5331|Info|  Settimeout: id:163, (13) ms
2015-08-26 10:43:39.5993|Info|      Encerrado timer: id:162, (10:43:39.5993)
2015-08-26 10:43:39.5993|Info|      Executando timer: id:163, (10:43:39.6013)
2015-08-26 10:43:39.5993|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:39.5993|Info| FAIL - delay
2015-08-26 10:43:39.5993|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:39.5993|Info|    PASS | EQ | ok
2015-08-26 10:43:39.5993|Info|    PASS | EQ | ok
2015-08-26 10:43:39.5993|Info|    PASS | EQ | incr was called immediately
2015-08-26 10:43:39.5993|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:39.6153|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 10:43:39.6153|Info|    PASS | EQ | delayed the function
2015-08-26 10:43:39.6153|Info|  Settimeout: id:164, (100) ms
2015-08-26 10:43:39.6836|Info|  Settimeout: id:165, (50) ms
2015-08-26 10:43:39.7461|Info|  Settimeout: id:166, (150) ms
2015-08-26 10:43:39.8016|Info|  Settimeout: id:167, (160) ms
2015-08-26 10:43:39.8641|Info|  Settimeout: id:168, (230) ms
2015-08-26 10:43:39.9149|Info|  Settimeout: id:169, (300) ms
2015-08-26 10:43:39.9816|Info|      Encerrado timer: id:163, (10:43:39.9816)
2015-08-26 10:43:39.9816|Info|      Executando timer: id:164, (10:43:39.9816)
2015-08-26 10:43:39.9816|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:39.9816|Info|      Encerrado timer: id:164, (10:43:39.9816)
2015-08-26 10:43:39.9816|Info|      Executando timer: id:165, (10:43:39.9816)
2015-08-26 10:43:39.9816|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:39.9816|Info|  Settimeout: id:170, (100) ms
2015-08-26 10:43:40.0597|Info|      Encerrado timer: id:165, (10:43:40.0597)
2015-08-26 10:43:40.0597|Info|      Executando timer: id:166, (10:43:40.0597)
2015-08-26 10:43:40.0597|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.0597|Info|      Encerrado timer: id:166, (10:43:40.0650)
2015-08-26 10:43:40.0670|Info|      Executando timer: id:167, (10:43:40.0670)
2015-08-26 10:43:40.0670|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.0670|Info|      Encerrado timer: id:167, (10:43:40.0700)
2015-08-26 10:43:40.0981|Info|      Executando timer: id:170, (10:43:40.0981)
2015-08-26 10:43:40.0981|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:40.0981|Info|      Encerrado timer: id:170, (10:43:40.1010)
2015-08-26 10:43:40.0981|Info|      Executando timer: id:168, (10:43:40.1020)
2015-08-26 10:43:40.0981|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.0981|Info|  Settimeout: id:171, (97) ms
2015-08-26 10:43:40.1666|Info|      Encerrado timer: id:168, (10:43:40.1666)
2015-08-26 10:43:40.2135|Info|      Executando timer: id:171, (10:43:40.2135)
2015-08-26 10:43:40.2135|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:40.2135|Info|      Encerrado timer: id:171, (10:43:40.2184)
2015-08-26 10:43:40.2135|Info|      Executando timer: id:169, (10:43:40.2204)
2015-08-26 10:43:40.2235|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.2235|Info|  Settimeout: id:172, (13) ms
2015-08-26 10:43:40.2846|Info|      Encerrado timer: id:169, (10:43:40.2846)
2015-08-26 10:43:40.2846|Info|      Executando timer: id:172, (10:43:40.2846)
2015-08-26 10:43:40.2846|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:40.2846|Info| FAIL - throttle repeatedly with results
2015-08-26 10:43:40.2846|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:40.2846|Info|    PASS | EQ | ok
2015-08-26 10:43:40.2846|Info|    PASS | EQ | ok
2015-08-26 10:43:40.3002|Info|    PASS | EQ | incr was called immediately
2015-08-26 10:43:40.3002|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:40.3002|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 10:43:40.3002|Info|    PASS | EQ | delayed the function
2015-08-26 10:43:40.3002|Info|    PASS | EQ | incr was called once
2015-08-26 10:43:40.3002|Info|    PASS | EQ | incr was throttled
2015-08-26 10:43:40.3002|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 10:43:40.3002|Info|    PASS | EQ | incr was called twice
2015-08-26 10:43:40.3002|Info|    PASS | EQ | incr was throttled
2015-08-26 10:43:40.3158|Info|    PASS | EQ | incr was called trailing
2015-08-26 10:43:40.3158|Info|  Settimeout: id:173, (32) ms
2015-08-26 10:43:40.3784|Info|  Settimeout: id:174, (96) ms
2015-08-26 10:43:40.4286|Info|      Encerrado timer: id:172, (10:43:40.4286)
2015-08-26 10:43:40.4286|Info|      Executando timer: id:173, (10:43:40.4306)
2015-08-26 10:43:40.4286|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:40.4286|Info|      Encerrado timer: id:173, (10:43:40.4346)
2015-08-26 10:43:40.4828|Info|      Executando timer: id:174, (10:43:40.4828)
2015-08-26 10:43:40.4828|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.4828|Info|  Settimeout: id:175, (13) ms
2015-08-26 10:43:40.5331|Info|      Encerrado timer: id:174, (10:43:40.5331)
2015-08-26 10:43:40.5331|Info|      Executando timer: id:175, (10:43:40.5351)
2015-08-26 10:43:40.5381|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:40.5381|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-26 10:43:40.5381|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:40.5381|Info|    PASS | EQ | ok
2015-08-26 10:43:40.5381|Info|    PASS | EQ | ok
2015-08-26 10:43:40.5381|Info|    PASS | EQ | incr was called immediately
2015-08-26 10:43:40.5381|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:40.5381|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 10:43:40.5381|Info|    PASS | EQ | delayed the function
2015-08-26 10:43:40.5381|Info|    PASS | EQ | incr was called once
2015-08-26 10:43:40.5511|Info|    PASS | EQ | incr was throttled
2015-08-26 10:43:40.5511|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 10:43:40.5511|Info|    PASS | EQ | incr was called twice
2015-08-26 10:43:40.5511|Info|    PASS | EQ | incr was throttled
2015-08-26 10:43:40.5511|Info|    PASS | EQ | incr was called trailing
2015-08-26 10:43:40.5511|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 10:43:40.5511|Info|    PASS | EQ | okay
2015-08-26 10:43:40.5511|Info|  Settimeout: id:176, (100) ms
2015-08-26 10:43:40.6170|Info|  Settimeout: id:177, (50) ms
2015-08-26 10:43:40.6795|Info|  Settimeout: id:178, (60) ms
2015-08-26 10:43:40.7300|Info|  Settimeout: id:179, (200) ms
2015-08-26 10:43:40.7831|Info|  Settimeout: id:180, (250) ms
2015-08-26 10:43:40.8456|Info|  Settimeout: id:181, (350) ms
2015-08-26 10:43:40.8964|Info|      Encerrado timer: id:175, (10:43:40.8964)
2015-08-26 10:43:40.8964|Info|      Executando timer: id:176, (10:43:40.8984)
2015-08-26 10:43:40.8964|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:40.8964|Info|      Encerrado timer: id:176, (10:43:40.9024)
2015-08-26 10:43:40.8964|Info|      Executando timer: id:177, (10:43:40.9035)
2015-08-26 10:43:40.8964|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.8964|Info|  Settimeout: id:182, (100) ms
2015-08-26 10:43:40.9660|Info|      Encerrado timer: id:177, (10:43:40.9660)
2015-08-26 10:43:40.9660|Info|      Executando timer: id:178, (10:43:40.9660)
2015-08-26 10:43:40.9660|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.9660|Info|      Encerrado timer: id:178, (10:43:40.9660)
2015-08-26 10:43:40.9660|Info|      Executando timer: id:179, (10:43:40.9660)
2015-08-26 10:43:40.9660|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:40.9660|Info|      Encerrado timer: id:179, (10:43:40.9660)
2015-08-26 10:43:41.0099|Info|      Executando timer: id:182, (10:43:41.0099)
2015-08-26 10:43:41.0099|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 10:43:41.0099|Info|      Encerrado timer: id:182, (10:43:41.0139)
2015-08-26 10:43:41.0369|Info|      Executando timer: id:180, (10:43:41.0369)
2015-08-26 10:43:41.0369|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:41.0369|Info|      Encerrado timer: id:180, (10:43:41.0370)
2015-08-26 10:43:41.1997|Info|      Executando timer: id:181, (10:43:41.1997)
2015-08-26 10:43:41.1997|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 10:43:41.1997|Info|  Settimeout: id:183, (13) ms
2015-08-26 10:43:41.2673|Info|      Encerrado timer: id:181, (10:43:41.2673)
2015-08-26 10:43:41.2673|Info|      Executando timer: id:183, (10:43:41.2673)
2015-08-26 10:43:41.2673|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 10:43:41.2673|Info| FAIL - more throttle does not trigger leading call when leading is set to false
2015-08-26 10:43:41.2673|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:41.2673|Info|    PASS | EQ | ok
2015-08-26 10:43:41.2673|Info|    PASS | EQ | ok
2015-08-26 10:43:41.2673|Info|    PASS | EQ | incr was called immediately
2015-08-26 10:43:41.2673|Info|    PASS | EQ | incr was debounced
2015-08-26 10:43:41.2673|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 10:43:41.2673|Info|    PASS | EQ | delayed the function
2015-08-26 10:43:41.2673|Info|    PASS | EQ | incr was called once
2015-08-26 10:43:41.2673|Info|    PASS | EQ | incr was throttled
2015-08-26 10:43:41.2828|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 10:43:41.2828|Info|    PASS | EQ | incr was called twice
2015-08-26 10:43:41.2828|Info|    PASS | EQ | incr was throttled
2015-08-26 10:43:41.2828|Info|    PASS | EQ | incr was called trailing
2015-08-26 10:43:41.2828|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 10:43:41.2828|Info|    PASS | EQ | okay
2015-08-26 10:43:41.2828|Info|    PASS | EQ | ok
2015-08-26 10:43:41.2828|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 10:43:41.2828|Info|    PASS | EQ | ok
2015-08-26 10:43:41.2828|Info|----------------------------------------
2015-08-26 10:43:41.2828|Info|    PASS: 1369  FAIL: 5  TOTAL: 1374
2015-08-26 10:43:41.2828|Info|    Finished in 14349 milliseconds.
2015-08-26 10:43:41.2828|Info|----------------------------------------
2015-08-26 10:43:41.2985|Info|      Encerrado timer: id:183, (10:43:41.2985)
2015-08-26 10:43:41.2985|Info|Encerrando os testes
2015-08-26 10:43:41.2985|Info|Total:1374, Sucesso: 1369, Falha: 5
2015-08-26 10:43:41.2985|Info|15 segundos para avaliar o individuo underscore.js
2015-08-26 10:43:41.2985|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [21]:1:23
2015-08-26 10:43:41.2985|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [81]:1:24
2015-08-26 10:43:41.2985|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:43:41.2985|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [107]:1:24
2015-08-26 10:43:41.2985|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [143]:1:24
2015-08-26 10:43:41.2985|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [157]:1:24
2015-08-26 10:43:41.2985|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at Script Document [12]:2898:5
    at Script Document [12]:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (Script Document [12]:2900:65)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
    at Array.<anonymous> (Script Document [8]:643:4)
    at Script Document [183]:1:24
2015-08-26 10:43:41.2985|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [187]:1:24
2015-08-26 10:43:41.2985|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [207]:1:24
2015-08-26 10:43:41.2985|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:43:41.3141|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [227]:1:25
2015-08-26 10:43:41.3141|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2037:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [239]:1:25
2015-08-26 10:43:41.3141|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:2053:25
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [251]:1:25
2015-08-26 10:43:41.3167|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [259]:1:25
2015-08-26 10:43:41.3167|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [279]:1:25
2015-08-26 10:43:41.3167|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:43:41.3167|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [299]:1:25
2015-08-26 10:43:41.3167|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at Script Document [8]:1906:13
    at Array.<anonymous> (Script Document [12]:1812:32)
    at Script Document [331]:1:25
2015-08-26 10:43:41.3167|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1890:20
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [351]:1:25
2015-08-26 10:43:41.3167|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at Script Document [8]:1906:13
    at Object.<anonymous> (Script Document [12]:1909:16)
    at Object.Test.run (Script Document [8]:894:28)
    at Script Document [8]:1023:11
    at process (Script Document [8]:583:24)
    at begin (Script Document [8]:628:2)
2015-08-26 10:43:41.3167|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at Script Document [8]:1906:13
    at Script Document [12]:1943:7
    at Array.<anonymous> (Script Document [11]:768:19)
    at Script Document [371]:1:25
2015-08-26 10:44:47.6319|Info|Iniciando os testes
2015-08-26 10:44:50.0817|Info|Encerrando os testes
2015-08-26 10:44:50.0817|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 10:44:50.0817|Info|2 segundos para avaliar o individuo global.js
2015-08-26 11:00:26.2258|Info|Iniciando os testes
2015-08-26 11:00:28.8159|Info|Encerrando os testes
2015-08-26 11:00:28.8179|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:00:28.8179|Info|3 segundos para avaliar o individuo global.js
2015-08-26 11:27:57.7137|Info|  Settimeout: id:0, (500) ms
2015-08-26 11:27:57.7764|Info|Iniciando os testes
2015-08-26 11:27:57.7764|Info|  Settimeout: id:1, (13) ms
2015-08-26 11:27:57.7954|Info|      Executando timer: id:1, (11:27:57.7954)
2015-08-26 11:27:57.8738|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:27:57.8738|Info|----------------------------------------
2015-08-26 11:27:57.8738|Info|    PASS: 0  FAIL: 0  TOTAL: 0
2015-08-26 11:27:57.8738|Info|    Finished in 0 milliseconds.
2015-08-26 11:27:57.8738|Info|----------------------------------------
2015-08-26 11:27:57.8738|Info|      Encerrado timer: id:1, (11:27:57.8749)
2015-08-26 11:27:58.2398|Info|      Executando timer: id:0, (11:27:58.2398)
2015-08-26 11:27:58.2398|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 11:27:58.2398|Info|  Settimeout: id:2, (500) ms
2015-08-26 11:27:58.2900|Info|      Encerrado timer: id:0, (11:27:58.2900)
2015-08-26 11:27:58.7530|Info|      Executando timer: id:2, (11:27:58.7530)
2015-08-26 11:27:58.7530|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 11:27:58.7530|Info|      Encerrado timer: id:2, (11:27:58.7530)
2015-08-26 11:27:58.7530|Info|Encerrando os testes
2015-08-26 11:27:58.7530|Info|Total:0, Sucesso: 0, Falha: 0
2015-08-26 11:27:58.7686|Info|1 segundos para avaliar o individuo lodash.js
2015-08-26 11:27:59.0685|Info|Iniciando os testes
2015-08-26 11:27:59.0685|Info|Encerrando os testes
2015-08-26 11:27:59.0685|Info|Total:0, Sucesso: 0, Falha: 0
2015-08-26 11:27:59.0685|Info|0 segundos para avaliar o individuo global.js
2015-08-26 11:27:59.2204|Info|  Settimeout: id:0, (500) ms
2015-08-26 11:27:59.2713|Info|Iniciando os testes
2015-08-26 11:27:59.2713|Info|  Settimeout: id:1, (13) ms
2015-08-26 11:27:59.2883|Info|      Executando timer: id:1, (11:27:59.2883)
2015-08-26 11:27:59.3254|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:27:59.3254|Info|----------------------------------------
2015-08-26 11:27:59.3254|Info|    PASS: 0  FAIL: 0  TOTAL: 0
2015-08-26 11:27:59.3254|Info|    Finished in 0 milliseconds.
2015-08-26 11:27:59.3254|Info|----------------------------------------
2015-08-26 11:27:59.3254|Info|      Encerrado timer: id:1, (11:27:59.3254)
2015-08-26 11:27:59.7338|Info|      Executando timer: id:0, (11:27:59.7338)
2015-08-26 11:27:59.7338|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 11:27:59.7412|Info|  Settimeout: id:2, (500) ms
2015-08-26 11:27:59.7951|Info|      Encerrado timer: id:0, (11:27:59.7951)
2015-08-26 11:28:00.2573|Info|      Executando timer: id:2, (11:28:00.2573)
2015-08-26 11:28:00.2573|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 11:28:00.2573|Info|      Encerrado timer: id:2, (11:28:00.2573)
2015-08-26 11:28:00.2573|Info|Encerrando os testes
2015-08-26 11:28:00.2573|Info|Total:0, Sucesso: 0, Falha: 0
2015-08-26 11:28:00.2729|Info|1 segundos para avaliar o individuo underscore.js
2015-08-26 11:30:03.5542|Info|  Settimeout: id:0, (500) ms
2015-08-26 11:30:04.0929|Info|      Executando timer: id:0, (11:30:04.0929)
2015-08-26 11:30:04.1866|Info|Iniciando os testes
2015-08-26 11:30:04.2135|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 11:30:04.2135|Info|  Settimeout: id:1, (500) ms
2015-08-26 11:30:04.2755|Info|      Encerrado timer: id:0, (11:30:04.2755)
2015-08-26 11:30:04.2755|Info|  Settimeout: id:2, (13) ms
2015-08-26 11:30:04.2981|Info|      Executando timer: id:2, (11:30:04.2981)
2015-08-26 11:30:04.3261|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:04.3655|Info|  Settimeout: id:3, (13) ms
2015-08-26 11:30:04.4273|Info|      Encerrado timer: id:2, (11:30:04.4273)
2015-08-26 11:30:04.4273|Info|      Executando timer: id:3, (11:30:04.4296)
2015-08-26 11:30:04.4273|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:04.4976|Info|  Settimeout: id:4, (32) ms
2015-08-26 11:30:04.5592|Info|  Settimeout: id:5, (96) ms
2015-08-26 11:30:04.6217|Info|      Encerrado timer: id:3, (11:30:04.6217)
2015-08-26 11:30:04.6217|Info|      Executando timer: id:4, (11:30:04.6217)
2015-08-26 11:30:04.6217|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:04.6217|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:04.6217|Info|      Encerrado timer: id:4, (11:30:04.6217)
2015-08-26 11:30:04.6686|Info|      Executando timer: id:5, (11:30:04.6686)
2015-08-26 11:30:04.6777|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:30:04.6777|Info|  Settimeout: id:6, (13) ms
2015-08-26 11:30:04.7431|Info|      Encerrado timer: id:5, (11:30:04.7431)
2015-08-26 11:30:04.7431|Info|      Executando timer: id:6, (11:30:04.7431)
2015-08-26 11:30:04.7431|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:04.7431|Info|  Settimeout: id:7, (32) ms
2015-08-26 11:30:04.8056|Info|  Settimeout: id:8, (64) ms
2015-08-26 11:30:04.8606|Info|  Settimeout: id:9, (128) ms
2015-08-26 11:30:04.9231|Info|      Encerrado timer: id:6, (11:30:04.9231)
2015-08-26 11:30:04.9231|Info|      Executando timer: id:1, (11:30:04.9231)
2015-08-26 11:30:04.9231|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 11:30:04.9231|Info|      Encerrado timer: id:1, (11:30:04.9231)
2015-08-26 11:30:04.9231|Info|      Executando timer: id:7, (11:30:04.9231)
2015-08-26 11:30:04.9231|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:04.9231|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:04.9231|Info|      Encerrado timer: id:7, (11:30:04.9231)
2015-08-26 11:30:04.9386|Info|      Executando timer: id:8, (11:30:04.9386)
2015-08-26 11:30:04.9386|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-26 11:30:04.9386|Info|  Settimeout: id:10, (32) ms
2015-08-26 11:30:04.9891|Info|      Encerrado timer: id:8, (11:30:04.9891)
2015-08-26 11:30:04.9891|Info|      Executando timer: id:10, (11:30:04.9912)
2015-08-26 11:30:04.9891|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:04.9891|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:04.9891|Info|      Encerrado timer: id:10, (11:30:04.9981)
2015-08-26 11:30:04.9891|Info|      Executando timer: id:9, (11:30:05.0011)
2015-08-26 11:30:04.9891|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-26 11:30:05.0051|Info|  Settimeout: id:11, (32) ms
2015-08-26 11:30:05.0581|Info|  Settimeout: id:12, (13) ms
2015-08-26 11:30:05.1206|Info|      Encerrado timer: id:9, (11:30:05.1206)
2015-08-26 11:30:05.1206|Info|      Executando timer: id:11, (11:30:05.1206)
2015-08-26 11:30:05.1206|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.1206|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:05.1303|Info|      Encerrado timer: id:11, (11:30:05.1303)
2015-08-26 11:30:05.1303|Info|      Executando timer: id:12, (11:30:05.1323)
2015-08-26 11:30:05.1303|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:05.1303|Info|  Settimeout: id:13, (32) ms
2015-08-26 11:30:05.1932|Info|  Settimeout: id:14, (64) ms
2015-08-26 11:30:05.2557|Info|      Encerrado timer: id:12, (11:30:05.2557)
2015-08-26 11:30:05.2557|Info|      Executando timer: id:13, (11:30:05.2557)
2015-08-26 11:30:05.2557|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.2557|Info|      Encerrado timer: id:13, (11:30:05.2557)
2015-08-26 11:30:05.2713|Info|      Executando timer: id:14, (11:30:05.2713)
2015-08-26 11:30:05.2713|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-26 11:30:05.2713|Info|  Settimeout: id:15, (32) ms
2015-08-26 11:30:05.3220|Info|  Settimeout: id:16, (13) ms
2015-08-26 11:30:05.3754|Info|      Encerrado timer: id:14, (11:30:05.3754)
2015-08-26 11:30:05.3754|Info|      Executando timer: id:15, (11:30:05.3754)
2015-08-26 11:30:05.3754|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.3754|Info|      Encerrado timer: id:15, (11:30:05.3754)
2015-08-26 11:30:05.3754|Info|      Executando timer: id:16, (11:30:05.3754)
2015-08-26 11:30:05.3754|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:05.3754|Info|  Settimeout: id:17, (32) ms
2015-08-26 11:30:05.4261|Info|  Settimeout: id:18, (64) ms
2015-08-26 11:30:05.4926|Info|      Encerrado timer: id:16, (11:30:05.4926)
2015-08-26 11:30:05.4926|Info|      Executando timer: id:17, (11:30:05.4926)
2015-08-26 11:30:05.4926|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.4926|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:05.4926|Info|      Encerrado timer: id:17, (11:30:05.4926)
2015-08-26 11:30:05.5082|Info|      Executando timer: id:18, (11:30:05.5082)
2015-08-26 11:30:05.5082|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:30:05.5082|Info|  Settimeout: id:19, (13) ms
2015-08-26 11:30:05.5864|Info|      Encerrado timer: id:18, (11:30:05.5864)
2015-08-26 11:30:05.5864|Info|      Executando timer: id:19, (11:30:05.5864)
2015-08-26 11:30:05.5864|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:05.5864|Info|  Settimeout: id:20, (32) ms
2015-08-26 11:30:05.6579|Info|  Settimeout: id:21, (32) ms
2015-08-26 11:30:05.7204|Info|  Settimeout: id:22, (32) ms
2015-08-26 11:30:05.7707|Info|  Settimeout: id:23, (64) ms
2015-08-26 11:30:05.8240|Info|      Encerrado timer: id:19, (11:30:05.8240)
2015-08-26 11:30:05.8240|Info|      Executando timer: id:20, (11:30:05.8240)
2015-08-26 11:30:05.8240|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.8240|Info|      Encerrado timer: id:20, (11:30:05.8240)
2015-08-26 11:30:05.8240|Info|      Executando timer: id:21, (11:30:05.8299)
2015-08-26 11:30:05.8240|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.8349|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:05.8349|Info|      Encerrado timer: id:21, (11:30:05.8359)
2015-08-26 11:30:05.8349|Info|      Executando timer: id:22, (11:30:05.8369)
2015-08-26 11:30:05.8349|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.8349|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:05.8349|Info|      Encerrado timer: id:22, (11:30:05.8429)
2015-08-26 11:30:05.8349|Info|      Executando timer: id:23, (11:30:05.8438)
2015-08-26 11:30:05.8349|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-26 11:30:05.8349|Info|  Settimeout: id:24, (32) ms
2015-08-26 11:30:05.8942|Info|  Settimeout: id:25, (13) ms
2015-08-26 11:30:05.9584|Info|      Encerrado timer: id:23, (11:30:05.9584)
2015-08-26 11:30:05.9584|Info|      Executando timer: id:24, (11:30:05.9584)
2015-08-26 11:30:05.9584|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:05.9584|Info|      Encerrado timer: id:24, (11:30:05.9584)
2015-08-26 11:30:05.9584|Info|      Executando timer: id:25, (11:30:05.9584)
2015-08-26 11:30:05.9584|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:05.9584|Info|  Settimeout: id:26, (32) ms
2015-08-26 11:30:06.0210|Info|  Settimeout: id:27, (32) ms
2015-08-26 11:30:06.0718|Info|  Settimeout: id:28, (64) ms
2015-08-26 11:30:06.1264|Info|      Encerrado timer: id:25, (11:30:06.1264)
2015-08-26 11:30:06.1264|Info|      Executando timer: id:26, (11:30:06.1264)
2015-08-26 11:30:06.1264|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:06.1264|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:06.1264|Info|      Encerrado timer: id:26, (11:30:06.1264)
2015-08-26 11:30:06.1264|Info|      Executando timer: id:27, (11:30:06.1264)
2015-08-26 11:30:06.1264|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:06.1264|Info|      Encerrado timer: id:27, (11:30:06.1264)
2015-08-26 11:30:06.1420|Info|      Executando timer: id:28, (11:30:06.1420)
2015-08-26 11:30:06.1420|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-26 11:30:06.1420|Info|  Settimeout: id:29, (13) ms
2015-08-26 11:30:06.2084|Info|      Encerrado timer: id:28, (11:30:06.2084)
2015-08-26 11:30:06.2084|Info|      Executando timer: id:29, (11:30:06.2094)
2015-08-26 11:30:06.2084|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:06.2084|Info|  Settimeout: id:30, (128) ms
2015-08-26 11:30:06.2754|Info|  Settimeout: id:31, (64) ms
2015-08-26 11:30:06.3379|Info|  Settimeout: id:32, (96) ms
2015-08-26 11:30:06.3933|Info|  Settimeout: id:33, (128) ms
2015-08-26 11:30:06.4558|Info|  Settimeout: id:34, (64) ms
2015-08-26 11:30:06.5224|Info|  Settimeout: id:35, (128) ms
2015-08-26 11:30:06.5748|Info|  Settimeout: id:36, (64) ms
2015-08-26 11:30:06.6374|Info|  Settimeout: id:37, (1) ms
2015-08-26 11:30:06.6874|Info|      Encerrado timer: id:29, (11:30:06.6874)
2015-08-26 11:30:06.6874|Info|      Executando timer: id:32, (11:30:06.6884)
2015-08-26 11:30:06.6874|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:06.6874|Info|  Settimeout: id:38, (42) ms
2015-08-26 11:30:06.7428|Info|      Encerrado timer: id:32, (11:30:06.7428)
2015-08-26 11:30:06.7428|Info|      Executando timer: id:35, (11:30:06.7428)
2015-08-26 11:30:06.7428|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:06.7428|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:06.7428|Info|      Encerrado timer: id:35, (11:30:06.7428)
2015-08-26 11:30:06.7428|Info|      Executando timer: id:37, (11:30:06.7428)
2015-08-26 11:30:06.7428|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-26 11:30:06.7428|Info|  Settimeout: id:39, (13) ms
2015-08-26 11:30:06.8053|Info|      Encerrado timer: id:37, (11:30:06.8053)
2015-08-26 11:30:06.8053|Info|      Executando timer: id:38, (11:30:06.8053)
2015-08-26 11:30:06.8053|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:06.8053|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:06.8053|Info|      Encerrado timer: id:38, (11:30:06.8053)
2015-08-26 11:30:06.8053|Info|      Executando timer: id:39, (11:30:06.8053)
2015-08-26 11:30:06.8053|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:06.8053|Info|  Settimeout: id:40, (64) ms
2015-08-26 11:30:06.8560|Info|  Settimeout: id:41, (32) ms
2015-08-26 11:30:06.9094|Info|  Settimeout: id:42, (128) ms
2015-08-26 11:30:06.9719|Info|      Encerrado timer: id:39, (11:30:06.9719)
2015-08-26 11:30:06.9719|Info|      Executando timer: id:41, (11:30:06.9719)
2015-08-26 11:30:06.9719|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:06.9742|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:06.9742|Info|      Encerrado timer: id:41, (11:30:06.9752)
2015-08-26 11:30:07.0426|Info|      Executando timer: id:42, (11:30:07.0426)
2015-08-26 11:30:07.0426|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:30:07.0426|Info|  Settimeout: id:43, (13) ms
2015-08-26 11:30:07.1051|Info|      Encerrado timer: id:42, (11:30:07.1051)
2015-08-26 11:30:07.1051|Info|      Executando timer: id:43, (11:30:07.1051)
2015-08-26 11:30:07.1051|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:07.1051|Info|  Settimeout: id:44, (32) ms
2015-08-26 11:30:07.1603|Info|  Settimeout: id:45, (9) ms
2015-08-26 11:30:07.2228|Info|  Settimeout: id:46, (64) ms
2015-08-26 11:30:07.2853|Info|      Encerrado timer: id:43, (11:30:07.2853)
2015-08-26 11:30:07.2901|Info|      Executando timer: id:46, (11:30:07.2901)
2015-08-26 11:30:07.2901|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-26 11:30:07.2901|Info|  Settimeout: id:47, (13) ms
2015-08-26 11:30:07.3512|Info|      Encerrado timer: id:46, (11:30:07.3512)
2015-08-26 11:30:07.3512|Info|      Executando timer: id:47, (11:30:07.3532)
2015-08-26 11:30:07.3512|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:07.3722|Info|  Settimeout: id:48, (1) ms
2015-08-26 11:30:07.4254|Info|  Settimeout: id:49, (32) ms
2015-08-26 11:30:07.4777|Info|      Encerrado timer: id:47, (11:30:07.4777)
2015-08-26 11:30:07.4777|Info|      Executando timer: id:48, (11:30:07.4777)
2015-08-26 11:30:07.4777|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:07.4777|Info|      Encerrado timer: id:48, (11:30:07.4777)
2015-08-26 11:30:07.4777|Info|      Executando timer: id:49, (11:30:07.4777)
2015-08-26 11:30:07.4777|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:07.4777|Info|  Settimeout: id:50, (13) ms
2015-08-26 11:30:07.5402|Info|      Encerrado timer: id:49, (11:30:07.5402)
2015-08-26 11:30:07.5402|Info|      Executando timer: id:50, (11:30:07.5402)
2015-08-26 11:30:07.5402|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:07.5402|Info|  Settimeout: id:51, (1) ms
2015-08-26 11:30:07.6027|Info|  Settimeout: id:52, (32) ms
2015-08-26 11:30:07.6594|Info|      Encerrado timer: id:50, (11:30:07.6594)
2015-08-26 11:30:07.6594|Info|      Executando timer: id:51, (11:30:07.6594)
2015-08-26 11:30:07.6594|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:07.6594|Info|      Encerrado timer: id:51, (11:30:07.6594)
2015-08-26 11:30:07.6594|Info|      Executando timer: id:52, (11:30:07.6594)
2015-08-26 11:30:07.6594|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-26 11:30:07.6594|Info|  Settimeout: id:53, (13) ms
2015-08-26 11:30:07.7219|Info|      Encerrado timer: id:52, (11:30:07.7219)
2015-08-26 11:30:07.7219|Info|      Executando timer: id:53, (11:30:07.7219)
2015-08-26 11:30:07.7219|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:07.7219|Info|  Settimeout: id:54, (1) ms
2015-08-26 11:30:07.7748|Info|  Settimeout: id:55, (32) ms
2015-08-26 11:30:07.8424|Info|      Encerrado timer: id:53, (11:30:07.8424)
2015-08-26 11:30:07.8424|Info|      Executando timer: id:55, (11:30:07.8424)
2015-08-26 11:30:07.8424|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:07.8424|Info|  Settimeout: id:56, (13) ms
2015-08-26 11:30:07.8926|Info|      Encerrado timer: id:55, (11:30:07.8926)
2015-08-26 11:30:07.8926|Info|      Executando timer: id:56, (11:30:07.8935)
2015-08-26 11:30:07.8955|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:07.8955|Info|  Settimeout: id:57, (32) ms
2015-08-26 11:30:07.9487|Info|  Settimeout: id:58, (1) ms
2015-08-26 11:30:08.0082|Info|  Settimeout: id:59, (64) ms
2015-08-26 11:30:08.0706|Info|      Encerrado timer: id:56, (11:30:08.0706)
2015-08-26 11:30:08.0706|Info|      Executando timer: id:57, (11:30:08.0706)
2015-08-26 11:30:08.0706|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:08.0706|Info|      Encerrado timer: id:57, (11:30:08.0706)
2015-08-26 11:30:08.0706|Info|      Executando timer: id:58, (11:30:08.0706)
2015-08-26 11:30:08.0706|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:08.0862|Info|      Encerrado timer: id:58, (11:30:08.0862)
2015-08-26 11:30:08.0862|Info|      Executando timer: id:59, (11:30:08.0862)
2015-08-26 11:30:08.0862|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:08.0990|Info|  Settimeout: id:60, (13) ms
2015-08-26 11:30:08.1591|Info|      Encerrado timer: id:59, (11:30:08.1591)
2015-08-26 11:30:08.1591|Info|      Executando timer: id:60, (11:30:08.1591)
2015-08-26 11:30:08.1591|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:08.1591|Info|  Settimeout: id:61, (32) ms
2015-08-26 11:30:08.2216|Info|  Settimeout: id:62, (64) ms
2015-08-26 11:30:08.2717|Info|      Encerrado timer: id:60, (11:30:08.2717)
2015-08-26 11:30:08.2717|Info|      Executando timer: id:61, (11:30:08.2737)
2015-08-26 11:30:08.2717|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:08.2717|Info|      Encerrado timer: id:61, (11:30:08.2757)
2015-08-26 11:30:08.2938|Info|      Executando timer: id:62, (11:30:08.2938)
2015-08-26 11:30:08.2938|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-26 11:30:08.2938|Info|  Settimeout: id:63, (13) ms
2015-08-26 11:30:08.3564|Info|      Encerrado timer: id:62, (11:30:08.3564)
2015-08-26 11:30:08.3564|Info|      Executando timer: id:63, (11:30:08.3564)
2015-08-26 11:30:08.3564|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:08.3564|Info|  Settimeout: id:64, (32) ms
2015-08-26 11:30:08.4123|Info|  Settimeout: id:65, (64) ms
2015-08-26 11:30:08.4757|Info|      Encerrado timer: id:63, (11:30:08.4757)
2015-08-26 11:30:08.4913|Info|      Executando timer: id:65, (11:30:08.4913)
2015-08-26 11:30:08.4913|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:08.4913|Info|  Settimeout: id:66, (13) ms
2015-08-26 11:30:08.5538|Info|      Encerrado timer: id:65, (11:30:08.5538)
2015-08-26 11:30:08.5538|Info|      Executando timer: id:66, (11:30:08.5538)
2015-08-26 11:30:08.5538|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:10.4757|Info|  Settimeout: id:67, (13) ms
2015-08-26 11:30:10.5403|Info|      Encerrado timer: id:66, (11:30:10.5403)
2015-08-26 11:30:10.5403|Info|      Executando timer: id:67, (11:30:10.5403)
2015-08-26 11:30:10.5403|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-26 11:30:10.6440|Info|----------------------------------------
2015-08-26 11:30:10.6440|Info|lodash.isNil
2015-08-26 11:30:10.6440|Info|----------------------------------------
2015-08-26 11:30:10.6440|Info| FAIL - should work with nulls from another realm
2015-08-26 11:30:10.6440|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-08-26 11:30:10.8722|Info|  Settimeout: id:68, (32) ms
2015-08-26 11:30:10.9229|Info|      Encerrado timer: id:67, (11:30:10.9229)
2015-08-26 11:30:10.9229|Info|      Executando timer: id:68, (11:30:10.9229)
2015-08-26 11:30:10.9229|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-08-26 11:30:10.9229|Info|  Settimeout: id:69, (13) ms
2015-08-26 11:30:10.9766|Info|      Encerrado timer: id:68, (11:30:10.9766)
2015-08-26 11:30:10.9766|Info|      Executando timer: id:69, (11:30:10.9766)
2015-08-26 11:30:10.9766|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:11.1101|Info|  Settimeout: id:70, (32) ms
2015-08-26 11:30:11.1726|Info|  Settimeout: id:71, (64) ms
2015-08-26 11:30:11.2233|Info|      Encerrado timer: id:69, (11:30:11.2233)
2015-08-26 11:30:11.2440|Info|      Executando timer: id:71, (11:30:11.2440)
2015-08-26 11:30:11.2440|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:11.2440|Info|  Settimeout: id:72, (13) ms
2015-08-26 11:30:11.3065|Info|      Encerrado timer: id:71, (11:30:11.3065)
2015-08-26 11:30:11.3065|Info|      Executando timer: id:72, (11:30:11.3065)
2015-08-26 11:30:11.3065|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:11.3065|Info|  Settimeout: id:73, (32) ms
2015-08-26 11:30:11.3690|Info|  Settimeout: id:74, (64) ms
2015-08-26 11:30:11.4197|Info|      Encerrado timer: id:72, (11:30:11.4197)
2015-08-26 11:30:11.4197|Info|      Executando timer: id:73, (11:30:11.4197)
2015-08-26 11:30:11.4197|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:11.4197|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:11.4197|Info|      Encerrado timer: id:73, (11:30:11.4227)
2015-08-26 11:30:11.4435|Info|      Executando timer: id:74, (11:30:11.4435)
2015-08-26 11:30:11.4435|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:11.4435|Info|  Settimeout: id:75, (10) ms
2015-08-26 11:30:11.5060|Info|  Settimeout: id:76, (13) ms
2015-08-26 11:30:11.5595|Info|      Encerrado timer: id:74, (11:30:11.5595)
2015-08-26 11:30:11.5595|Info|      Executando timer: id:76, (11:30:11.5595)
2015-08-26 11:30:11.5595|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:11.5595|Info|  Settimeout: id:77, (32) ms
2015-08-26 11:30:11.6220|Info|  Settimeout: id:78, (64) ms
2015-08-26 11:30:11.6845|Info|      Encerrado timer: id:76, (11:30:11.6845)
2015-08-26 11:30:11.6845|Info|      Executando timer: id:78, (11:30:11.6896)
2015-08-26 11:30:11.6845|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:30:11.6946|Info|  Settimeout: id:79, (13) ms
2015-08-26 11:30:11.7576|Info|      Encerrado timer: id:78, (11:30:11.7576)
2015-08-26 11:30:11.7576|Info|      Executando timer: id:79, (11:30:11.7576)
2015-08-26 11:30:11.7576|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:11.7576|Info|  Settimeout: id:80, (64) ms
2015-08-26 11:30:11.8200|Info|      Encerrado timer: id:79, (11:30:11.8200)
2015-08-26 11:30:11.8357|Info|      Executando timer: id:80, (11:30:11.8357)
2015-08-26 11:30:11.8357|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:30:11.8357|Info|  Settimeout: id:81, (13) ms
2015-08-26 11:30:11.9104|Info|      Encerrado timer: id:80, (11:30:11.9104)
2015-08-26 11:30:11.9104|Info|      Executando timer: id:81, (11:30:11.9104)
2015-08-26 11:30:11.9104|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:11.9154|Info|  Settimeout: id:82, (32) ms
2015-08-26 11:30:11.9772|Info|  Settimeout: id:83, (32) ms
2015-08-26 11:30:12.0278|Info|  Settimeout: id:84, (32) ms
2015-08-26 11:30:12.0918|Info|  Settimeout: id:85, (32) ms
2015-08-26 11:30:12.1543|Info|  Settimeout: id:86, (32) ms
2015-08-26 11:30:12.2102|Info|  Settimeout: id:87, (32) ms
2015-08-26 11:30:12.2727|Info|  Settimeout: id:88, (1) ms
2015-08-26 11:30:12.3250|Info|      Encerrado timer: id:81, (11:30:12.3250)
2015-08-26 11:30:12.3250|Info|      Executando timer: id:87, (11:30:12.3270)
2015-08-26 11:30:12.3250|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:12.3250|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:12.3250|Info|      Encerrado timer: id:87, (11:30:12.3320)
2015-08-26 11:30:12.3330|Info|      Executando timer: id:88, (11:30:12.3330)
2015-08-26 11:30:12.3330|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-26 11:30:12.3330|Info|  Settimeout: id:89, (13) ms
2015-08-26 11:30:12.3921|Info|      Encerrado timer: id:88, (11:30:12.3921)
2015-08-26 11:30:12.3921|Info|      Executando timer: id:89, (11:30:12.3921)
2015-08-26 11:30:12.3921|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:12.3921|Info|  Settimeout: id:90, (32) ms
2015-08-26 11:30:12.4426|Info|  Settimeout: id:91, (32) ms
2015-08-26 11:30:12.4948|Info|  Settimeout: id:92, (32) ms
2015-08-26 11:30:12.5586|Info|  Settimeout: id:93, (32) ms
2015-08-26 11:30:12.6142|Info|  Settimeout: id:94, (32) ms
2015-08-26 11:30:12.6769|Info|  Settimeout: id:95, (32) ms
2015-08-26 11:30:12.7394|Info|  Settimeout: id:96, (1) ms
2015-08-26 11:30:12.7917|Info|      Encerrado timer: id:89, (11:30:12.7917)
2015-08-26 11:30:12.7917|Info|      Executando timer: id:95, (11:30:12.7947)
2015-08-26 11:30:12.7917|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:12.8018|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:12.8018|Info|      Encerrado timer: id:95, (11:30:12.8037)
2015-08-26 11:30:12.8018|Info|      Executando timer: id:96, (11:30:12.8047)
2015-08-26 11:30:12.8018|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-26 11:30:12.8018|Info|  Settimeout: id:97, (13) ms
2015-08-26 11:30:12.8578|Info|      Encerrado timer: id:96, (11:30:12.8578)
2015-08-26 11:30:12.8578|Info|      Executando timer: id:97, (11:30:12.8578)
2015-08-26 11:30:12.8578|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:12.8578|Info|  Settimeout: id:98, (32) ms
2015-08-26 11:30:12.9203|Info|  Settimeout: id:99, (128) ms
2015-08-26 11:30:12.9705|Info|      Encerrado timer: id:97, (11:30:12.9705)
2015-08-26 11:30:12.9705|Info|      Executando timer: id:98, (11:30:12.9714)
2015-08-26 11:30:12.9705|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:12.9734|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:12.9734|Info|      Encerrado timer: id:98, (11:30:12.9744)
2015-08-26 11:30:13.0557|Info|      Executando timer: id:99, (11:30:13.0557)
2015-08-26 11:30:13.0557|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:30:13.0557|Info|  Settimeout: id:100, (13) ms
2015-08-26 11:30:13.1085|Info|      Encerrado timer: id:99, (11:30:13.1085)
2015-08-26 11:30:13.1085|Info|      Executando timer: id:100, (11:30:13.1095)
2015-08-26 11:30:13.1085|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:13.1145|Info|  Settimeout: id:101, (32) ms
2015-08-26 11:30:13.1756|Info|  Settimeout: id:102, (64) ms
2015-08-26 11:30:13.2381|Info|  Settimeout: id:103, (64) ms
2015-08-26 11:30:13.2884|Info|  Settimeout: id:104, (256) ms
2015-08-26 11:30:13.3426|Info|      Encerrado timer: id:100, (11:30:13.3426)
2015-08-26 11:30:13.3426|Info|      Executando timer: id:101, (11:30:13.3426)
2015-08-26 11:30:13.3426|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:13.3426|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:13.3426|Info|      Encerrado timer: id:101, (11:30:13.3426)
2015-08-26 11:30:13.3426|Info|      Executando timer: id:102, (11:30:13.3426)
2015-08-26 11:30:13.3426|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:13.3426|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:13.3426|Info|      Encerrado timer: id:102, (11:30:13.3426)
2015-08-26 11:30:13.3426|Info|      Executando timer: id:103, (11:30:13.3426)
2015-08-26 11:30:13.3426|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:13.3426|Info|      Encerrado timer: id:103, (11:30:13.3426)
2015-08-26 11:30:13.5543|Info|      Executando timer: id:104, (11:30:13.5543)
2015-08-26 11:30:13.5543|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-08-26 11:30:13.5543|Info|  Settimeout: id:105, (13) ms
2015-08-26 11:30:13.6045|Info|      Encerrado timer: id:104, (11:30:13.6045)
2015-08-26 11:30:13.6045|Info|      Executando timer: id:105, (11:30:13.6055)
2015-08-26 11:30:13.6045|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:13.6045|Info|  Settimeout: id:106, (64) ms
2015-08-26 11:30:13.6743|Info|  Settimeout: id:107, (96) ms
2015-08-26 11:30:13.7249|Info|  Settimeout: id:108, (192) ms
2015-08-26 11:30:13.7784|Info|      Encerrado timer: id:105, (11:30:13.7784)
2015-08-26 11:30:13.7784|Info|      Executando timer: id:106, (11:30:13.7784)
2015-08-26 11:30:13.7784|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:13.7784|Info|      Encerrado timer: id:106, (11:30:13.7784)
2015-08-26 11:30:13.7784|Info|      Executando timer: id:107, (11:30:13.7784)
2015-08-26 11:30:13.7784|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-08-26 11:30:13.7784|Info|  Settimeout: id:109, (64) ms
2015-08-26 11:30:13.8409|Info|      Encerrado timer: id:107, (11:30:13.8409)
2015-08-26 11:30:13.8565|Info|      Executando timer: id:109, (11:30:13.8565)
2015-08-26 11:30:13.8565|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:13.8565|Info|      Encerrado timer: id:109, (11:30:13.8565)
2015-08-26 11:30:13.9277|Info|      Executando timer: id:108, (11:30:13.9277)
2015-08-26 11:30:13.9277|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-08-26 11:30:13.9277|Info|  Settimeout: id:110, (13) ms
2015-08-26 11:30:13.9780|Info|      Encerrado timer: id:108, (11:30:13.9780)
2015-08-26 11:30:13.9780|Info|      Executando timer: id:110, (11:30:13.9780)
2015-08-26 11:30:13.9780|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:13.9780|Info|  Settimeout: id:111, (0) ms
2015-08-26 11:30:14.0282|Info|  Settimeout: id:112, (32) ms
2015-08-26 11:30:14.0923|Info|      Encerrado timer: id:110, (11:30:14.0923)
2015-08-26 11:30:14.0923|Info|      Executando timer: id:111, (11:30:14.0923)
2015-08-26 11:30:14.0923|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:14.0923|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:14.0923|Info|      Encerrado timer: id:111, (11:30:14.0923)
2015-08-26 11:30:14.0923|Info|      Executando timer: id:112, (11:30:14.0923)
2015-08-26 11:30:14.0923|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:30:14.0923|Info|  Settimeout: id:113, (0) ms
2015-08-26 11:30:14.1548|Info|  Settimeout: id:114, (13) ms
2015-08-26 11:30:14.2048|Info|      Encerrado timer: id:112, (11:30:14.2048)
2015-08-26 11:30:14.2048|Info|      Executando timer: id:113, (11:30:14.2068)
2015-08-26 11:30:14.2088|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:14.2088|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:14.2088|Info|      Encerrado timer: id:113, (11:30:14.2109)
2015-08-26 11:30:14.2088|Info|      Executando timer: id:114, (11:30:14.2109)
2015-08-26 11:30:14.2088|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:14.2088|Info|  Settimeout: id:115, (32) ms
2015-08-26 11:30:14.2735|Info|  Settimeout: id:116, (64) ms
2015-08-26 11:30:14.3360|Info|      Encerrado timer: id:114, (11:30:14.3360)
2015-08-26 11:30:14.3360|Info|      Executando timer: id:115, (11:30:14.3360)
2015-08-26 11:30:14.3360|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:14.3360|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:14.3360|Info|      Encerrado timer: id:115, (11:30:14.3463)
2015-08-26 11:30:14.3493|Info|      Executando timer: id:116, (11:30:14.3493)
2015-08-26 11:30:14.3493|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-26 11:30:14.3493|Info|  Settimeout: id:117, (13) ms
2015-08-26 11:30:14.4083|Info|      Encerrado timer: id:116, (11:30:14.4083)
2015-08-26 11:30:14.4083|Info|      Executando timer: id:117, (11:30:14.4083)
2015-08-26 11:30:14.4083|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:14.4083|Info|  Settimeout: id:118, (32) ms
2015-08-26 11:30:14.4622|Info|  Settimeout: id:119, (256) ms
2015-08-26 11:30:14.5263|Info|      Encerrado timer: id:117, (11:30:14.5263)
2015-08-26 11:30:14.5263|Info|      Executando timer: id:118, (11:30:14.5263)
2015-08-26 11:30:14.5263|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:14.5263|Info|  Settimeout: id:120, (32) ms
2015-08-26 11:30:14.5888|Info|!timeoutId && !maxTimeoutId false
2015-08-26 11:30:14.5888|Info|      Encerrado timer: id:118, (11:30:14.5888)
2015-08-26 11:30:14.5888|Info|      Executando timer: id:120, (11:30:14.5888)
2015-08-26 11:30:14.5888|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:14.5888|Info|  Settimeout: id:121, (32) ms
2015-08-26 11:30:14.6513|Info|!timeoutId && !maxTimeoutId false
2015-08-26 11:30:14.6513|Info|      Encerrado timer: id:120, (11:30:14.6513)
2015-08-26 11:30:14.6513|Info|      Executando timer: id:121, (11:30:14.6513)
2015-08-26 11:30:14.6513|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:14.6607|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:14.6607|Info|      Encerrado timer: id:121, (11:30:14.6627)
2015-08-26 11:30:14.7257|Info|      Executando timer: id:119, (11:30:14.7257)
2015-08-26 11:30:14.7257|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-26 11:30:14.7257|Info|  Settimeout: id:122, (13) ms
2015-08-26 11:30:14.7882|Info|      Encerrado timer: id:119, (11:30:14.7882)
2015-08-26 11:30:14.7882|Info|      Executando timer: id:122, (11:30:14.7882)
2015-08-26 11:30:14.7882|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:14.7882|Info|  Settimeout: id:123, (32) ms
2015-08-26 11:30:14.8427|Info|  Settimeout: id:124, (64) ms
2015-08-26 11:30:14.9052|Info|      Encerrado timer: id:122, (11:30:14.9052)
2015-08-26 11:30:14.9052|Info|      Executando timer: id:123, (11:30:14.9052)
2015-08-26 11:30:14.9052|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:14.9052|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:14.9052|Info|      Encerrado timer: id:123, (11:30:14.9052)
2015-08-26 11:30:14.9209|Info|      Executando timer: id:124, (11:30:14.9209)
2015-08-26 11:30:14.9209|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:30:14.9209|Info|  Settimeout: id:125, (32) ms
2015-08-26 11:30:14.9755|Info|  Settimeout: id:126, (13) ms
2015-08-26 11:30:15.0429|Info|      Encerrado timer: id:124, (11:30:15.0429)
2015-08-26 11:30:15.0429|Info|      Executando timer: id:125, (11:30:15.0429)
2015-08-26 11:30:15.0429|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:15.0429|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:15.0429|Info|      Encerrado timer: id:125, (11:30:15.0429)
2015-08-26 11:30:15.0429|Info|      Executando timer: id:126, (11:30:15.0429)
2015-08-26 11:30:15.0429|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:15.0429|Info|  Settimeout: id:127, (32) ms
2015-08-26 11:30:15.0937|Info|  Settimeout: id:128, (64) ms
2015-08-26 11:30:15.1601|Info|      Encerrado timer: id:126, (11:30:15.1601)
2015-08-26 11:30:15.1601|Info|      Executando timer: id:128, (11:30:15.1601)
2015-08-26 11:30:15.1601|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-26 11:30:15.1601|Info|  Settimeout: id:129, (13) ms
2015-08-26 11:30:15.2227|Info|      Encerrado timer: id:128, (11:30:15.2227)
2015-08-26 11:30:15.2227|Info|      Executando timer: id:129, (11:30:15.2227)
2015-08-26 11:30:15.2227|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:15.2227|Info|  Settimeout: id:130, (32) ms
2015-08-26 11:30:15.2852|Info|  Settimeout: id:131, (32) ms
2015-08-26 11:30:15.3434|Info|  Settimeout: id:132, (64) ms
2015-08-26 11:30:15.4059|Info|      Encerrado timer: id:129, (11:30:15.4059)
2015-08-26 11:30:15.4059|Info|      Executando timer: id:131, (11:30:15.4059)
2015-08-26 11:30:15.4059|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:30:15.4059|Info|      Encerrado timer: id:131, (11:30:15.4059)
2015-08-26 11:30:15.4127|Info|      Executando timer: id:132, (11:30:15.4127)
2015-08-26 11:30:15.4127|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:30:15.4127|Info|  Settimeout: id:133, (13) ms
2015-08-26 11:30:15.4770|Info|      Encerrado timer: id:132, (11:30:15.4770)
2015-08-26 11:30:15.4770|Info|      Executando timer: id:133, (11:30:15.4770)
2015-08-26 11:30:15.4770|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:15.4770|Info|  Settimeout: id:134, (32) ms
2015-08-26 11:30:15.5380|Info|      Encerrado timer: id:133, (11:30:15.5380)
2015-08-26 11:30:15.5380|Info|      Executando timer: id:134, (11:30:15.5380)
2015-08-26 11:30:15.5380|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:30:15.5380|Info|  Settimeout: id:135, (13) ms
2015-08-26 11:30:15.6006|Info|      Encerrado timer: id:134, (11:30:15.6006)
2015-08-26 11:30:15.6006|Info|      Executando timer: id:135, (11:30:15.6006)
2015-08-26 11:30:15.6006|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:15.6006|Info|  Settimeout: id:136, (32) ms
2015-08-26 11:30:15.6604|Info|  Settimeout: id:137, (64) ms
2015-08-26 11:30:15.7230|Info|      Encerrado timer: id:135, (11:30:15.7230)
2015-08-26 11:30:15.7230|Info|      Executando timer: id:136, (11:30:15.7230)
2015-08-26 11:30:15.7230|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:15.7230|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:15.7230|Info|      Encerrado timer: id:136, (11:30:15.7230)
2015-08-26 11:30:15.7386|Info|      Executando timer: id:137, (11:30:15.7386)
2015-08-26 11:30:15.7386|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-26 11:30:15.7386|Info|  Settimeout: id:138, (13) ms
2015-08-26 11:30:15.7891|Info|      Encerrado timer: id:137, (11:30:15.7891)
2015-08-26 11:30:15.7891|Info|      Executando timer: id:138, (11:30:15.7891)
2015-08-26 11:30:15.7891|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:15.7891|Info|  Settimeout: id:139, (32) ms
2015-08-26 11:30:15.8573|Info|  Settimeout: id:140, (256) ms
2015-08-26 11:30:15.9087|Info|      Encerrado timer: id:138, (11:30:15.9087)
2015-08-26 11:30:15.9117|Info|      Executando timer: id:139, (11:30:15.9117)
2015-08-26 11:30:15.9117|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:15.9117|Info|  Settimeout: id:141, (32) ms
2015-08-26 11:30:15.9757|Info|!timeoutId && !maxTimeoutId false
2015-08-26 11:30:15.9757|Info|      Encerrado timer: id:139, (11:30:15.9757)
2015-08-26 11:30:15.9757|Info|      Executando timer: id:141, (11:30:15.9757)
2015-08-26 11:30:15.9757|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:15.9757|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:15.9757|Info|      Encerrado timer: id:141, (11:30:15.9757)
2015-08-26 11:30:16.1248|Info|      Executando timer: id:140, (11:30:16.1248)
2015-08-26 11:30:16.1248|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-26 11:30:16.1248|Info|  Settimeout: id:142, (13) ms
2015-08-26 11:30:16.1873|Info|      Encerrado timer: id:140, (11:30:16.1873)
2015-08-26 11:30:16.1873|Info|      Executando timer: id:142, (11:30:16.1873)
2015-08-26 11:30:16.1873|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:16.1873|Info|  Settimeout: id:143, (64) ms
2015-08-26 11:30:16.2379|Info|      Encerrado timer: id:142, (11:30:16.2379)
2015-08-26 11:30:16.2767|Info|      Executando timer: id:143, (11:30:16.2767)
2015-08-26 11:30:16.2767|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:30:16.2767|Info|  Settimeout: id:144, (13) ms
2015-08-26 11:30:16.3392|Info|      Encerrado timer: id:143, (11:30:16.3392)
2015-08-26 11:30:16.3392|Info|      Executando timer: id:144, (11:30:16.3392)
2015-08-26 11:30:16.3392|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:16.3392|Info|  Settimeout: id:145, (32) ms
2015-08-26 11:30:16.3894|Info|  Settimeout: id:146, (64) ms
2015-08-26 11:30:16.4427|Info|      Encerrado timer: id:144, (11:30:16.4427)
2015-08-26 11:30:16.4583|Info|      Executando timer: id:146, (11:30:16.4583)
2015-08-26 11:30:16.4583|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-26 11:30:16.4583|Info|  Settimeout: id:147, (13) ms
2015-08-26 11:30:16.5130|Info|      Encerrado timer: id:146, (11:30:16.5130)
2015-08-26 11:30:16.5130|Info|      Executando timer: id:147, (11:30:16.5150)
2015-08-26 11:30:16.5130|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:16.5210|Info|  Settimeout: id:148, (64) ms
2015-08-26 11:30:16.5765|Info|      Encerrado timer: id:147, (11:30:16.5765)
2015-08-26 11:30:16.5921|Info|      Executando timer: id:148, (11:30:16.5921)
2015-08-26 11:30:16.5921|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:30:16.5921|Info|  Settimeout: id:149, (13) ms
2015-08-26 11:30:16.6546|Info|      Encerrado timer: id:148, (11:30:16.6546)
2015-08-26 11:30:16.6546|Info|      Executando timer: id:149, (11:30:16.6546)
2015-08-26 11:30:16.6546|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:16.7743|Info|  Settimeout: id:150, (32) ms
2015-08-26 11:30:16.8369|Info|  Settimeout: id:151, (1) ms
2015-08-26 11:30:16.8937|Info|  Settimeout: id:152, (64) ms
2015-08-26 11:30:16.9562|Info|      Encerrado timer: id:149, (11:30:16.9562)
2015-08-26 11:30:16.9562|Info|      Executando timer: id:150, (11:30:16.9562)
2015-08-26 11:30:16.9562|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:16.9562|Info|      Encerrado timer: id:150, (11:30:16.9562)
2015-08-26 11:30:16.9562|Info|      Executando timer: id:151, (11:30:16.9562)
2015-08-26 11:30:16.9562|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:16.9562|Info|      Encerrado timer: id:151, (11:30:16.9562)
2015-08-26 11:30:16.9718|Info|      Executando timer: id:152, (11:30:16.9718)
2015-08-26 11:30:16.9718|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:16.9718|Info|  Settimeout: id:153, (13) ms
2015-08-26 11:30:17.0224|Info|      Encerrado timer: id:152, (11:30:17.0224)
2015-08-26 11:30:17.0224|Info|      Executando timer: id:153, (11:30:17.0234)
2015-08-26 11:30:17.0224|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:17.0224|Info|  Settimeout: id:154, (32) ms
2015-08-26 11:30:17.0910|Info|  Settimeout: id:155, (64) ms
2015-08-26 11:30:17.1535|Info|      Encerrado timer: id:153, (11:30:17.1535)
2015-08-26 11:30:17.1535|Info|      Executando timer: id:155, (11:30:17.1572)
2015-08-26 11:30:17.1535|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:17.1535|Info|  Settimeout: id:156, (13) ms
2015-08-26 11:30:17.2252|Info|      Encerrado timer: id:155, (11:30:17.2252)
2015-08-26 11:30:17.2252|Info|      Executando timer: id:156, (11:30:17.2252)
2015-08-26 11:30:17.2252|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:17.2252|Info|  Settimeout: id:157, (32) ms
2015-08-26 11:30:17.2815|Info|  Settimeout: id:158, (64) ms
2015-08-26 11:30:17.3344|Info|      Encerrado timer: id:156, (11:30:17.3344)
2015-08-26 11:30:17.3344|Info|      Executando timer: id:157, (11:30:17.3354)
2015-08-26 11:30:17.3344|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:17.3344|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:17.3344|Info|      Encerrado timer: id:157, (11:30:17.3374)
2015-08-26 11:30:17.3602|Info|      Executando timer: id:158, (11:30:17.3602)
2015-08-26 11:30:17.3602|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:17.3602|Info|  Settimeout: id:159, (9) ms
2015-08-26 11:30:17.4227|Info|  Settimeout: id:160, (13) ms
2015-08-26 11:30:17.4747|Info|      Encerrado timer: id:158, (11:30:17.4747)
2015-08-26 11:30:17.4747|Info|      Executando timer: id:160, (11:30:17.4757)
2015-08-26 11:30:17.4747|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:17.4747|Info|  Settimeout: id:161, (32) ms
2015-08-26 11:30:17.5441|Info|  Settimeout: id:162, (1) ms
2015-08-26 11:30:17.6066|Info|  Settimeout: id:163, (64) ms
2015-08-26 11:30:17.6694|Info|      Encerrado timer: id:160, (11:30:17.6694)
2015-08-26 11:30:17.6694|Info|      Executando timer: id:161, (11:30:17.6694)
2015-08-26 11:30:17.6694|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:17.6694|Info|      Encerrado timer: id:161, (11:30:17.6694)
2015-08-26 11:30:17.6694|Info|      Executando timer: id:162, (11:30:17.6694)
2015-08-26 11:30:17.6694|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:17.6694|Info|      Encerrado timer: id:162, (11:30:17.6694)
2015-08-26 11:30:17.6850|Info|      Executando timer: id:163, (11:30:17.6850)
2015-08-26 11:30:17.6850|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:17.6850|Info|  Settimeout: id:164, (13) ms
2015-08-26 11:30:17.7475|Info|      Encerrado timer: id:163, (11:30:17.7475)
2015-08-26 11:30:17.7475|Info|      Executando timer: id:164, (11:30:17.7475)
2015-08-26 11:30:17.7475|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:17.7475|Info|  Settimeout: id:165, (32) ms
2015-08-26 11:30:17.7978|Info|  Settimeout: id:166, (64) ms
2015-08-26 11:30:17.8577|Info|      Encerrado timer: id:164, (11:30:17.8577)
2015-08-26 11:30:17.8733|Info|      Executando timer: id:166, (11:30:17.8733)
2015-08-26 11:30:17.8733|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:17.8733|Info|  Settimeout: id:167, (13) ms
2015-08-26 11:30:17.9358|Info|      Encerrado timer: id:166, (11:30:17.9358)
2015-08-26 11:30:17.9358|Info|      Executando timer: id:167, (11:30:17.9375)
2015-08-26 11:30:17.9358|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:17.9358|Info|  Settimeout: id:168, (32) ms
2015-08-26 11:30:18.0099|Info|  Settimeout: id:169, (64) ms
2015-08-26 11:30:18.0613|Info|      Encerrado timer: id:167, (11:30:18.0613)
2015-08-26 11:30:18.0613|Info|      Executando timer: id:168, (11:30:18.0613)
2015-08-26 11:30:18.0769|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:18.0769|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:18.0769|Info|      Encerrado timer: id:168, (11:30:18.0769)
2015-08-26 11:30:18.0925|Info|      Executando timer: id:169, (11:30:18.0925)
2015-08-26 11:30:18.0925|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:18.0925|Info|  Settimeout: id:170, (13) ms
2015-08-26 11:30:18.1588|Info|  Settimeout: id:171, (13) ms
2015-08-26 11:30:18.2213|Info|      Encerrado timer: id:169, (11:30:18.2213)
2015-08-26 11:30:18.2213|Info|      Executando timer: id:171, (11:30:18.2213)
2015-08-26 11:30:18.2213|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:18.2213|Info|  Settimeout: id:172, (32) ms
2015-08-26 11:30:18.2716|Info|  Settimeout: id:173, (1) ms
2015-08-26 11:30:18.3248|Info|  Settimeout: id:174, (64) ms
2015-08-26 11:30:18.3873|Info|      Encerrado timer: id:171, (11:30:18.3873)
2015-08-26 11:30:18.3873|Info|      Executando timer: id:172, (11:30:18.3873)
2015-08-26 11:30:18.3873|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:18.3873|Info|      Encerrado timer: id:172, (11:30:18.3873)
2015-08-26 11:30:18.3873|Info|      Executando timer: id:173, (11:30:18.3873)
2015-08-26 11:30:18.3873|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:18.3873|Info|      Encerrado timer: id:173, (11:30:18.3873)
2015-08-26 11:30:18.4030|Info|      Executando timer: id:174, (11:30:18.4030)
2015-08-26 11:30:18.4030|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:18.4030|Info|  Settimeout: id:175, (13) ms
2015-08-26 11:30:18.4617|Info|      Encerrado timer: id:174, (11:30:18.4617)
2015-08-26 11:30:18.4617|Info|      Executando timer: id:175, (11:30:18.4617)
2015-08-26 11:30:18.4617|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:18.4617|Info|  Settimeout: id:176, (32) ms
2015-08-26 11:30:18.5242|Info|  Settimeout: id:177, (64) ms
2015-08-26 11:30:18.5754|Info|      Encerrado timer: id:175, (11:30:18.5754)
2015-08-26 11:30:18.5909|Info|      Executando timer: id:177, (11:30:18.5909)
2015-08-26 11:30:18.5909|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:18.5909|Info|  Settimeout: id:178, (13) ms
2015-08-26 11:30:18.6565|Info|      Encerrado timer: id:177, (11:30:18.6565)
2015-08-26 11:30:18.6565|Info|      Executando timer: id:178, (11:30:18.6565)
2015-08-26 11:30:18.6565|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:18.6565|Info|  Settimeout: id:179, (32) ms
2015-08-26 11:30:18.7189|Info|  Settimeout: id:180, (64) ms
2015-08-26 11:30:18.7762|Info|      Encerrado timer: id:178, (11:30:18.7762)
2015-08-26 11:30:18.7762|Info|      Executando timer: id:179, (11:30:18.7762)
2015-08-26 11:30:18.7762|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:18.7762|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:18.7762|Info|      Encerrado timer: id:179, (11:30:18.7762)
2015-08-26 11:30:18.7918|Info|      Executando timer: id:180, (11:30:18.7918)
2015-08-26 11:30:18.7918|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:18.7918|Info|  Settimeout: id:181, (16) ms
2015-08-26 11:30:18.8544|Info|  Settimeout: id:182, (13) ms
2015-08-26 11:30:18.9048|Info|      Encerrado timer: id:180, (11:30:18.9048)
2015-08-26 11:30:18.9048|Info|      Executando timer: id:182, (11:30:18.9068)
2015-08-26 11:30:18.9048|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:18.9119|Info|  Settimeout: id:183, (32) ms
2015-08-26 11:30:18.9744|Info|  Settimeout: id:184, (1) ms
2015-08-26 11:30:19.0369|Info|  Settimeout: id:185, (64) ms
2015-08-26 11:30:19.0942|Info|      Encerrado timer: id:182, (11:30:19.0942)
2015-08-26 11:30:19.0942|Info|      Executando timer: id:183, (11:30:19.0942)
2015-08-26 11:30:19.0942|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:19.0942|Info|      Encerrado timer: id:183, (11:30:19.0942)
2015-08-26 11:30:19.0942|Info|      Executando timer: id:184, (11:30:19.0942)
2015-08-26 11:30:19.0942|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:19.0942|Info|      Encerrado timer: id:184, (11:30:19.0942)
2015-08-26 11:30:19.1098|Info|      Executando timer: id:185, (11:30:19.1098)
2015-08-26 11:30:19.1098|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:19.1098|Info|  Settimeout: id:186, (13) ms
2015-08-26 11:30:19.1723|Info|      Encerrado timer: id:185, (11:30:19.1723)
2015-08-26 11:30:19.1723|Info|      Executando timer: id:186, (11:30:19.1723)
2015-08-26 11:30:19.1723|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:19.1723|Info|  Settimeout: id:187, (32) ms
2015-08-26 11:30:19.2227|Info|  Settimeout: id:188, (64) ms
2015-08-26 11:30:19.2756|Info|      Encerrado timer: id:186, (11:30:19.2756)
2015-08-26 11:30:19.2913|Info|      Executando timer: id:188, (11:30:19.2913)
2015-08-26 11:30:19.2913|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:19.2913|Info|  Settimeout: id:189, (13) ms
2015-08-26 11:30:19.3431|Info|      Encerrado timer: id:188, (11:30:19.3431)
2015-08-26 11:30:19.3431|Info|      Executando timer: id:189, (11:30:19.3461)
2015-08-26 11:30:19.3481|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:19.3481|Info|  Settimeout: id:190, (32) ms
2015-08-26 11:30:19.4087|Info|  Settimeout: id:191, (64) ms
2015-08-26 11:30:19.4712|Info|      Encerrado timer: id:189, (11:30:19.4712)
2015-08-26 11:30:19.4712|Info|      Executando timer: id:190, (11:30:19.4712)
2015-08-26 11:30:19.4712|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:19.4712|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:19.4712|Info|      Encerrado timer: id:190, (11:30:19.4712)
2015-08-26 11:30:19.4868|Info|      Executando timer: id:191, (11:30:19.4868)
2015-08-26 11:30:19.4868|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:19.4868|Info|  Settimeout: id:192, (16) ms
2015-08-26 11:30:19.5371|Info|  Settimeout: id:193, (13) ms
2015-08-26 11:30:19.5925|Info|      Encerrado timer: id:191, (11:30:19.5925)
2015-08-26 11:30:19.5925|Info|      Executando timer: id:193, (11:30:19.5925)
2015-08-26 11:30:19.5925|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:19.5925|Info|  Settimeout: id:194, (32) ms
2015-08-26 11:30:19.6478|Info|  Settimeout: id:195, (1) ms
2015-08-26 11:30:19.6983|Info|  Settimeout: id:196, (64) ms
2015-08-26 11:30:19.7583|Info|      Encerrado timer: id:193, (11:30:19.7583)
2015-08-26 11:30:19.7583|Info|      Executando timer: id:194, (11:30:19.7583)
2015-08-26 11:30:19.7583|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:19.7583|Info|      Encerrado timer: id:194, (11:30:19.7583)
2015-08-26 11:30:19.7583|Info|      Executando timer: id:195, (11:30:19.7583)
2015-08-26 11:30:19.7583|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:19.7583|Info|      Encerrado timer: id:195, (11:30:19.7583)
2015-08-26 11:30:19.7739|Info|      Executando timer: id:196, (11:30:19.7739)
2015-08-26 11:30:19.7739|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:19.7739|Info|  Settimeout: id:197, (13) ms
2015-08-26 11:30:19.8248|Info|      Encerrado timer: id:196, (11:30:19.8248)
2015-08-26 11:30:19.8248|Info|      Executando timer: id:197, (11:30:19.8258)
2015-08-26 11:30:19.8248|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:19.8248|Info|  Settimeout: id:198, (32) ms
2015-08-26 11:30:19.8922|Info|  Settimeout: id:199, (64) ms
2015-08-26 11:30:19.9547|Info|      Encerrado timer: id:197, (11:30:19.9547)
2015-08-26 11:30:19.9704|Info|      Executando timer: id:199, (11:30:19.9704)
2015-08-26 11:30:19.9704|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:19.9704|Info|  Settimeout: id:200, (13) ms
2015-08-26 11:30:20.0205|Info|      Encerrado timer: id:199, (11:30:20.0205)
2015-08-26 11:30:20.0205|Info|      Executando timer: id:200, (11:30:20.0214)
2015-08-26 11:30:20.0205|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:20.0205|Info|  Settimeout: id:201, (32) ms
2015-08-26 11:30:20.0759|Info|  Settimeout: id:202, (64) ms
2015-08-26 11:30:20.1293|Info|      Encerrado timer: id:200, (11:30:20.1293)
2015-08-26 11:30:20.1293|Info|      Executando timer: id:201, (11:30:20.1293)
2015-08-26 11:30:20.1293|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:20.1293|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:20.1293|Info|      Encerrado timer: id:201, (11:30:20.1293)
2015-08-26 11:30:20.1450|Info|      Executando timer: id:202, (11:30:20.1450)
2015-08-26 11:30:20.1450|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:20.1450|Info|  Settimeout: id:203, (11) ms
2015-08-26 11:30:20.2125|Info|  Settimeout: id:204, (13) ms
2015-08-26 11:30:20.2750|Info|      Encerrado timer: id:202, (11:30:20.2750)
2015-08-26 11:30:20.2750|Info|      Executando timer: id:204, (11:30:20.2750)
2015-08-26 11:30:20.2750|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:20.2750|Info|  Settimeout: id:205, (32) ms
2015-08-26 11:30:20.3253|Info|  Settimeout: id:206, (1) ms
2015-08-26 11:30:20.3910|Info|  Settimeout: id:207, (64) ms
2015-08-26 11:30:20.4535|Info|      Encerrado timer: id:204, (11:30:20.4535)
2015-08-26 11:30:20.4535|Info|      Executando timer: id:205, (11:30:20.4535)
2015-08-26 11:30:20.4535|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:20.4535|Info|      Encerrado timer: id:205, (11:30:20.4535)
2015-08-26 11:30:20.4535|Info|      Executando timer: id:206, (11:30:20.4535)
2015-08-26 11:30:20.4535|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:20.4535|Info|      Encerrado timer: id:206, (11:30:20.4535)
2015-08-26 11:30:20.4691|Info|      Executando timer: id:207, (11:30:20.4691)
2015-08-26 11:30:20.4691|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:20.4691|Info|  Settimeout: id:208, (13) ms
2015-08-26 11:30:20.5258|Info|      Encerrado timer: id:207, (11:30:20.5258)
2015-08-26 11:30:20.5258|Info|      Executando timer: id:208, (11:30:20.5258)
2015-08-26 11:30:20.5258|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:20.5258|Info|  Settimeout: id:209, (32) ms
2015-08-26 11:30:20.5764|Info|  Settimeout: id:210, (64) ms
2015-08-26 11:30:20.6311|Info|      Encerrado timer: id:208, (11:30:20.6311)
2015-08-26 11:30:20.6311|Info|      Executando timer: id:210, (11:30:20.6441)
2015-08-26 11:30:20.6461|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:20.6461|Info|  Settimeout: id:211, (13) ms
2015-08-26 11:30:20.7085|Info|      Encerrado timer: id:210, (11:30:20.7085)
2015-08-26 11:30:20.7085|Info|      Executando timer: id:211, (11:30:20.7085)
2015-08-26 11:30:20.7085|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:20.7085|Info|  Settimeout: id:212, (32) ms
2015-08-26 11:30:20.7710|Info|  Settimeout: id:213, (64) ms
2015-08-26 11:30:20.9357|Info|      Encerrado timer: id:211, (11:30:20.9357)
2015-08-26 11:30:20.9357|Info|      Executando timer: id:212, (11:30:20.9357)
2015-08-26 11:30:20.9357|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:20.9357|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:20.9357|Info|      Encerrado timer: id:212, (11:30:20.9357)
2015-08-26 11:30:20.9513|Info|      Executando timer: id:213, (11:30:20.9513)
2015-08-26 11:30:20.9513|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:20.9513|Info|  Settimeout: id:214, (11) ms
2015-08-26 11:30:21.0252|Info|  Settimeout: id:215, (13) ms
2015-08-26 11:30:21.0754|Info|      Encerrado timer: id:213, (11:30:21.0754)
2015-08-26 11:30:21.0754|Info|      Executando timer: id:215, (11:30:21.0774)
2015-08-26 11:30:21.0754|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:21.0844|Info|  Settimeout: id:216, (32) ms
2015-08-26 11:30:21.1443|Info|  Settimeout: id:217, (1) ms
2015-08-26 11:30:21.2068|Info|  Settimeout: id:218, (64) ms
2015-08-26 11:30:21.2592|Info|      Encerrado timer: id:215, (11:30:21.2592)
2015-08-26 11:30:21.2592|Info|      Executando timer: id:216, (11:30:21.2612)
2015-08-26 11:30:21.2592|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:21.2592|Info|      Encerrado timer: id:216, (11:30:21.2662)
2015-08-26 11:30:21.2592|Info|      Executando timer: id:217, (11:30:21.2672)
2015-08-26 11:30:21.2592|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:21.2712|Info|      Encerrado timer: id:217, (11:30:21.2712)
2015-08-26 11:30:21.2712|Info|      Executando timer: id:218, (11:30:21.2743)
2015-08-26 11:30:21.2712|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:21.2712|Info|  Settimeout: id:219, (13) ms
2015-08-26 11:30:21.3412|Info|      Encerrado timer: id:218, (11:30:21.3412)
2015-08-26 11:30:21.3412|Info|      Executando timer: id:219, (11:30:21.3412)
2015-08-26 11:30:21.3412|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:21.3412|Info|  Settimeout: id:220, (32) ms
2015-08-26 11:30:21.4037|Info|  Settimeout: id:221, (64) ms
2015-08-26 11:30:21.4601|Info|      Encerrado timer: id:219, (11:30:21.4601)
2015-08-26 11:30:21.4757|Info|      Executando timer: id:221, (11:30:21.4757)
2015-08-26 11:30:21.4757|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:21.4757|Info|  Settimeout: id:222, (13) ms
2015-08-26 11:30:21.5382|Info|      Encerrado timer: id:221, (11:30:21.5382)
2015-08-26 11:30:21.5382|Info|      Executando timer: id:222, (11:30:21.5382)
2015-08-26 11:30:21.5382|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:21.5382|Info|  Settimeout: id:223, (32) ms
2015-08-26 11:30:21.5891|Info|  Settimeout: id:224, (64) ms
2015-08-26 11:30:21.6422|Info|      Encerrado timer: id:222, (11:30:21.6422)
2015-08-26 11:30:21.6422|Info|      Executando timer: id:223, (11:30:21.6422)
2015-08-26 11:30:21.6422|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:21.6422|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:21.6422|Info|      Encerrado timer: id:223, (11:30:21.6422)
2015-08-26 11:30:21.6578|Info|      Executando timer: id:224, (11:30:21.6578)
2015-08-26 11:30:21.6578|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:21.6578|Info|  Settimeout: id:225, (16) ms
2015-08-26 11:30:21.7129|Info|  Settimeout: id:226, (13) ms
2015-08-26 11:30:21.7760|Info|      Encerrado timer: id:224, (11:30:21.7760)
2015-08-26 11:30:21.7760|Info|      Executando timer: id:226, (11:30:21.7760)
2015-08-26 11:30:21.7916|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:21.7916|Info|  Settimeout: id:227, (32) ms
2015-08-26 11:30:21.8542|Info|  Settimeout: id:228, (1) ms
2015-08-26 11:30:21.9122|Info|  Settimeout: id:229, (64) ms
2015-08-26 11:30:21.9747|Info|      Encerrado timer: id:226, (11:30:21.9747)
2015-08-26 11:30:21.9747|Info|      Executando timer: id:227, (11:30:21.9747)
2015-08-26 11:30:21.9747|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:21.9747|Info|      Encerrado timer: id:227, (11:30:21.9747)
2015-08-26 11:30:21.9747|Info|      Executando timer: id:228, (11:30:21.9747)
2015-08-26 11:30:21.9747|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:21.9747|Info|      Encerrado timer: id:228, (11:30:21.9747)
2015-08-26 11:30:21.9903|Info|      Executando timer: id:229, (11:30:21.9903)
2015-08-26 11:30:21.9903|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:21.9903|Info|  Settimeout: id:230, (13) ms
2015-08-26 11:30:22.0409|Info|      Encerrado timer: id:229, (11:30:22.0409)
2015-08-26 11:30:22.0409|Info|      Executando timer: id:230, (11:30:22.0419)
2015-08-26 11:30:22.0409|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:22.0409|Info|  Settimeout: id:231, (32) ms
2015-08-26 11:30:22.0986|Info|  Settimeout: id:232, (64) ms
2015-08-26 11:30:22.1576|Info|      Encerrado timer: id:230, (11:30:22.1576)
2015-08-26 11:30:22.1732|Info|      Executando timer: id:232, (11:30:22.1732)
2015-08-26 11:30:22.1732|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:22.1789|Info|  Settimeout: id:233, (13) ms
2015-08-26 11:30:22.2409|Info|      Encerrado timer: id:232, (11:30:22.2409)
2015-08-26 11:30:22.2409|Info|      Executando timer: id:233, (11:30:22.2409)
2015-08-26 11:30:22.2409|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:22.2409|Info|  Settimeout: id:234, (32) ms
2015-08-26 11:30:22.3034|Info|  Settimeout: id:235, (64) ms
2015-08-26 11:30:22.3541|Info|      Encerrado timer: id:233, (11:30:22.3541)
2015-08-26 11:30:22.3541|Info|      Executando timer: id:234, (11:30:22.3551)
2015-08-26 11:30:22.3541|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:22.3541|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:22.3541|Info|      Encerrado timer: id:234, (11:30:22.3601)
2015-08-26 11:30:22.3779|Info|      Executando timer: id:235, (11:30:22.3779)
2015-08-26 11:30:22.3779|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:22.3779|Info|  Settimeout: id:236, (13) ms
2015-08-26 11:30:22.4405|Info|  Settimeout: id:237, (13) ms
2015-08-26 11:30:22.4958|Info|      Encerrado timer: id:235, (11:30:22.4958)
2015-08-26 11:30:22.4958|Info|      Executando timer: id:237, (11:30:22.4988)
2015-08-26 11:30:22.4958|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:22.4958|Info|  Settimeout: id:238, (32) ms
2015-08-26 11:30:22.5589|Info|  Settimeout: id:239, (1) ms
2015-08-26 11:30:22.6093|Info|  Settimeout: id:240, (64) ms
2015-08-26 11:30:22.6627|Info|      Encerrado timer: id:237, (11:30:22.6627)
2015-08-26 11:30:22.6627|Info|      Executando timer: id:238, (11:30:22.6647)
2015-08-26 11:30:22.6627|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:22.6627|Info|      Encerrado timer: id:238, (11:30:22.6697)
2015-08-26 11:30:22.6827|Info|      Executando timer: id:239, (11:30:22.6827)
2015-08-26 11:30:22.6827|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:22.6827|Info|      Encerrado timer: id:239, (11:30:22.6907)
2015-08-26 11:30:22.6927|Info|      Executando timer: id:240, (11:30:22.6927)
2015-08-26 11:30:22.6927|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:22.6927|Info|  Settimeout: id:241, (13) ms
2015-08-26 11:30:22.7583|Info|      Encerrado timer: id:240, (11:30:22.7583)
2015-08-26 11:30:22.7583|Info|      Executando timer: id:241, (11:30:22.7583)
2015-08-26 11:30:22.7583|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:22.7583|Info|  Settimeout: id:242, (32) ms
2015-08-26 11:30:22.8093|Info|  Settimeout: id:243, (64) ms
2015-08-26 11:30:22.8757|Info|      Encerrado timer: id:241, (11:30:22.8757)
2015-08-26 11:30:22.8914|Info|      Executando timer: id:243, (11:30:22.8914)
2015-08-26 11:30:22.8914|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:22.8914|Info|  Settimeout: id:244, (13) ms
2015-08-26 11:30:22.9539|Info|      Encerrado timer: id:243, (11:30:22.9539)
2015-08-26 11:30:22.9539|Info|      Executando timer: id:244, (11:30:22.9539)
2015-08-26 11:30:22.9539|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:22.9539|Info|  Settimeout: id:245, (32) ms
2015-08-26 11:30:23.0044|Info|  Settimeout: id:246, (64) ms
2015-08-26 11:30:23.0584|Info|      Encerrado timer: id:244, (11:30:23.0584)
2015-08-26 11:30:23.0584|Info|      Executando timer: id:245, (11:30:23.0584)
2015-08-26 11:30:23.0584|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:23.0584|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:23.0584|Info|      Encerrado timer: id:245, (11:30:23.0584)
2015-08-26 11:30:23.0740|Info|      Executando timer: id:246, (11:30:23.0740)
2015-08-26 11:30:23.0740|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:23.0740|Info|  Settimeout: id:247, (16) ms
2015-08-26 11:30:23.1263|Info|  Settimeout: id:248, (13) ms
2015-08-26 11:30:23.1781|Info|      Encerrado timer: id:246, (11:30:23.1781)
2015-08-26 11:30:23.1781|Info|      Executando timer: id:248, (11:30:23.1781)
2015-08-26 11:30:23.1781|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:23.1781|Info|  Settimeout: id:249, (32) ms
2015-08-26 11:30:23.2406|Info|  Settimeout: id:250, (1) ms
2015-08-26 11:30:23.2912|Info|  Settimeout: id:251, (64) ms
2015-08-26 11:30:23.3582|Info|      Encerrado timer: id:248, (11:30:23.3582)
2015-08-26 11:30:23.3582|Info|      Executando timer: id:249, (11:30:23.3582)
2015-08-26 11:30:23.3582|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:30:23.3582|Info|      Encerrado timer: id:249, (11:30:23.3582)
2015-08-26 11:30:23.3582|Info|      Executando timer: id:250, (11:30:23.3582)
2015-08-26 11:30:23.3582|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:30:23.3738|Info|      Encerrado timer: id:250, (11:30:23.3738)
2015-08-26 11:30:23.3738|Info|      Executando timer: id:251, (11:30:23.3738)
2015-08-26 11:30:23.3738|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:30:23.3738|Info|  Settimeout: id:252, (13) ms
2015-08-26 11:30:23.4364|Info|      Encerrado timer: id:251, (11:30:23.4364)
2015-08-26 11:30:23.4364|Info|      Executando timer: id:252, (11:30:23.4364)
2015-08-26 11:30:23.4364|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:23.4447|Info|----------------------------------------
2015-08-26 11:30:23.4447|Info|lodash.delay
2015-08-26 11:30:23.4447|Info|----------------------------------------
2015-08-26 11:30:23.4447|Info| FAIL - should delay `func` execution
2015-08-26 11:30:23.4447|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:30:23.4447|Info|  Settimeout: id:253, (32) ms
2015-08-26 11:30:23.5102|Info|  Settimeout: id:254, (64) ms
2015-08-26 11:30:23.5727|Info|      Encerrado timer: id:252, (11:30:23.5727)
2015-08-26 11:30:23.5883|Info|      Executando timer: id:254, (11:30:23.5883)
2015-08-26 11:30:23.5883|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:30:23.5883|Info|  Settimeout: id:255, (13) ms
2015-08-26 11:30:23.6430|Info|      Encerrado timer: id:254, (11:30:23.6430)
2015-08-26 11:30:23.6430|Info|      Executando timer: id:255, (11:30:23.6430)
2015-08-26 11:30:23.6430|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:23.6430|Info|----------------------------------------
2015-08-26 11:30:23.6430|Info|lodash.throttle
2015-08-26 11:30:23.6430|Info|----------------------------------------
2015-08-26 11:30:23.6430|Info| FAIL - should throttle a function
2015-08-26 11:30:23.6430|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:30:23.6430|Info|  Settimeout: id:256, (32) ms
2015-08-26 11:30:23.7055|Info|  Settimeout: id:257, (64) ms
2015-08-26 11:30:23.7560|Info|      Encerrado timer: id:255, (11:30:23.7560)
2015-08-26 11:30:23.7560|Info|      Executando timer: id:256, (11:30:23.7581)
2015-08-26 11:30:23.7560|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:30:23.7560|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:30:23.7560|Info|      Encerrado timer: id:256, (11:30:23.7671)
2015-08-26 11:30:23.7751|Info|      Executando timer: id:257, (11:30:23.7751)
2015-08-26 11:30:23.7751|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:30:23.7751|Info|  Settimeout: id:258, (18) ms
2015-08-26 11:30:23.8417|Info|  Settimeout: id:259, (13) ms
2015-08-26 11:30:23.9042|Info|      Encerrado timer: id:257, (11:30:23.9042)
2015-08-26 11:30:23.9042|Info|      Executando timer: id:259, (11:30:23.9042)
2015-08-26 11:30:23.9042|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:23.9121|Info| FAIL - subsequent calls should return the result of the first call
2015-08-26 11:30:23.9121|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:30:23.9121|Info|    FAIL | EQ | ok | Expected: y, Actual: y
2015-08-26 11:30:23.9121|Info|----------------------------------------
2015-08-26 11:30:23.9121|Info|    PASS: 4447  FAIL: 4  TOTAL: 4451
2015-08-26 11:30:23.9271|Info|    Finished in 19594 milliseconds.
2015-08-26 11:30:23.9271|Info|----------------------------------------
2015-08-26 11:30:23.9444|Info|      Encerrado timer: id:259, (11:30:23.9444)
2015-08-26 11:30:23.9444|Info|Encerrando os testes
2015-08-26 11:30:23.9444|Info|Total:4451, Sucesso: 4447, Falha: 4
2015-08-26 11:30:23.9444|Info|20 segundos para avaliar o individuo lodash.js
2015-08-26 11:30:23.9444|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [109]:1:24
2015-08-26 11:30:23.9444|Info|FAILED: lodash.isNil: should work with nulls from another realm: Expected 2 assertions, but 1 were run, ,     at V8Runtime:lodashTest:7765:5
    at V8Runtime:lodashTest:7774:4
    at V8Runtime:lodashTest:17424:3
2015-08-26 11:30:23.9444|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [131]:1:24
2015-08-26 11:30:23.9444|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [137]:1:24
2015-08-26 11:30:23.9444|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [261]:1:25
2015-08-26 11:30:23.9444|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [267]:1:25
2015-08-26 11:30:23.9444|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [273]:1:25
2015-08-26 11:30:23.9444|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [279]:1:25
2015-08-26 11:30:23.9444|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [285]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [291]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [297]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [303]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [309]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [315]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [321]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [327]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [333]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [339]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [345]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [351]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [357]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [363]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [369]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [375]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [381]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [387]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [393]:1:25
2015-08-26 11:30:23.9600|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [399]:1:25
2015-08-26 11:30:23.9756|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [405]:1:25
2015-08-26 11:30:23.9756|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [411]:1:25
2015-08-26 11:30:23.9756|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [417]:1:25
2015-08-26 11:30:23.9756|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [423]:1:25
2015-08-26 11:30:23.9756|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [429]:1:25
2015-08-26 11:30:23.9756|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [435]:1:25
2015-08-26 11:30:24.7269|Info|Iniciando os testes
2015-08-26 11:30:27.1927|Info|Encerrando os testes
2015-08-26 11:30:27.1927|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:30:27.1927|Info|2 segundos para avaliar o individuo global.js
2015-08-26 11:30:27.3229|Info|  Settimeout: id:0, (500) ms
2015-08-26 11:30:27.4436|Info|Iniciando os testes
2015-08-26 11:30:27.4436|Info|  Settimeout: id:1, (13) ms
2015-08-26 11:30:27.4749|Info|      Executando timer: id:1, (11:30:27.4749)
2015-08-26 11:30:27.5061|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:27.5061|Info|----------------------------------------
2015-08-26 11:30:27.5061|Info|Arrays
2015-08-26 11:30:27.5061|Info|----------------------------------------
2015-08-26 11:30:27.5061|Info| PASS - first
2015-08-26 11:30:27.5061|Info| PASS - head
2015-08-26 11:30:27.5061|Info| PASS - take
2015-08-26 11:30:27.5061|Info| PASS - rest
2015-08-26 11:30:27.5061|Info| PASS - tail
2015-08-26 11:30:27.5217|Info| PASS - drop
2015-08-26 11:30:27.5217|Info| PASS - initial
2015-08-26 11:30:27.5217|Info| PASS - last
2015-08-26 11:30:27.5217|Info| PASS - compact
2015-08-26 11:30:28.0282|Info| PASS - flatten
2015-08-26 11:30:28.0282|Info| PASS - without
2015-08-26 11:30:28.0282|Info| PASS - sortedIndex
2015-08-26 11:30:28.0282|Info| PASS - uniq
2015-08-26 11:30:28.0282|Info| PASS - unique
2015-08-26 11:30:28.0438|Info| PASS - intersection
2015-08-26 11:30:28.0438|Info| PASS - union
2015-08-26 11:30:28.0438|Info| PASS - difference
2015-08-26 11:30:28.0438|Info| PASS - zip
2015-08-26 11:30:28.0438|Info| PASS - unzip
2015-08-26 11:30:28.0438|Info| PASS - object
2015-08-26 11:30:28.0438|Info| PASS - indexOf
2015-08-26 11:30:28.0595|Info| PASS - indexOf with NaN
2015-08-26 11:30:28.0595|Info| PASS - indexOf with +- 0
2015-08-26 11:30:28.0595|Info| PASS - lastIndexOf
2015-08-26 11:30:28.0595|Info| PASS - lastIndexOf with NaN
2015-08-26 11:30:28.0595|Info| PASS - lastIndexOf with +- 0
2015-08-26 11:30:28.0595|Info| PASS - findIndex
2015-08-26 11:30:28.0595|Info| PASS - findLastIndex
2015-08-26 11:30:28.0595|Info| PASS - range
2015-08-26 11:30:28.0595|Info|----------------------------------------
2015-08-26 11:30:28.0595|Info|Chaining
2015-08-26 11:30:28.0595|Info|----------------------------------------
2015-08-26 11:30:28.0595|Info| PASS - map/flatten/reduce
2015-08-26 11:30:28.0595|Info| PASS - select/reject/sortBy
2015-08-26 11:30:28.0595|Info| PASS - select/reject/sortBy in functional style
2015-08-26 11:30:28.0751|Info| PASS - reverse/concat/unshift/pop/map
2015-08-26 11:30:28.0751|Info| PASS - splice
2015-08-26 11:30:28.0751|Info| PASS - shift
2015-08-26 11:30:28.0751|Info| PASS - pop
2015-08-26 11:30:28.0751|Info| PASS - chaining works in small stages
2015-08-26 11:30:28.0751|Info| PASS - #1562: Engine proxies for chained functions
2015-08-26 11:30:28.0751|Info|----------------------------------------
2015-08-26 11:30:28.0751|Info|Collections
2015-08-26 11:30:28.0751|Info|----------------------------------------
2015-08-26 11:30:28.0751|Info| PASS - each
2015-08-26 11:30:28.0751|Info| PASS - forEach
2015-08-26 11:30:28.0751|Info| PASS - lookupIterator with contexts
2015-08-26 11:30:28.0751|Info| PASS - Iterating objects with sketchy length properties
2015-08-26 11:30:28.0907|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-26 11:30:28.0907|Info| PASS - map
2015-08-26 11:30:28.0907|Info| PASS - collect
2015-08-26 11:30:28.0907|Info| PASS - reduce
2015-08-26 11:30:28.0907|Info| PASS - foldl
2015-08-26 11:30:28.0907|Info| PASS - reduceRight
2015-08-26 11:30:28.0907|Info| PASS - foldr
2015-08-26 11:30:28.0907|Info| PASS - find
2015-08-26 11:30:28.0907|Info| PASS - detect
2015-08-26 11:30:28.0907|Info| PASS - filter
2015-08-26 11:30:28.0907|Info| PASS - select
2015-08-26 11:30:28.0907|Info| PASS - reject
2015-08-26 11:30:28.0907|Info| PASS - every
2015-08-26 11:30:28.0907|Info| PASS - all
2015-08-26 11:30:28.1063|Info| PASS - some
2015-08-26 11:30:28.1063|Info| PASS - any
2015-08-26 11:30:28.1063|Info| PASS - includes
2015-08-26 11:30:28.1063|Info| PASS - include
2015-08-26 11:30:28.1063|Info| PASS - contains
2015-08-26 11:30:28.1063|Info| PASS - includes with NaN
2015-08-26 11:30:28.1063|Info| PASS - includes with +- 0
2015-08-26 11:30:28.1063|Info| PASS - invoke
2015-08-26 11:30:28.1063|Info| PASS - invoke w/ function reference
2015-08-26 11:30:28.1063|Info| PASS - invoke when strings have a call method
2015-08-26 11:30:28.1063|Info| PASS - pluck
2015-08-26 11:30:28.1063|Info| PASS - where
2015-08-26 11:30:28.1063|Info| PASS - findWhere
2015-08-26 11:30:28.1482|Info| PASS - max
2015-08-26 11:30:28.1802|Info| PASS - min
2015-08-26 11:30:28.1802|Info| PASS - sortBy
2015-08-26 11:30:28.1802|Info| PASS - groupBy
2015-08-26 11:30:28.1802|Info| PASS - indexBy
2015-08-26 11:30:28.1802|Info| PASS - countBy
2015-08-26 11:30:28.1802|Info| PASS - shuffle
2015-08-26 11:30:28.1802|Info| PASS - sample
2015-08-26 11:30:28.1802|Info| PASS - toArray
2015-08-26 11:30:28.1802|Info| PASS - size
2015-08-26 11:30:28.1802|Info| PASS - partition
2015-08-26 11:30:28.1922|Info|----------------------------------------
2015-08-26 11:30:28.1922|Info|Functions
2015-08-26 11:30:28.1922|Info|----------------------------------------
2015-08-26 11:30:28.1922|Info| PASS - bind
2015-08-26 11:30:28.1922|Info| PASS - partial
2015-08-26 11:30:28.1922|Info| PASS - bindAll
2015-08-26 11:30:28.1922|Info| PASS - memoize
2015-08-26 11:30:28.1922|Info|  Settimeout: id:2, (100) ms
2015-08-26 11:30:28.2578|Info|  Settimeout: id:3, (50) ms
2015-08-26 11:30:28.3087|Info|  Settimeout: id:4, (150) ms
2015-08-26 11:30:28.3762|Info|      Encerrado timer: id:1, (11:30:28.3762)
2015-08-26 11:30:28.3762|Info|      Executando timer: id:0, (11:30:28.3762)
2015-08-26 11:30:28.3762|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 11:30:28.3762|Info|  Settimeout: id:5, (500) ms
2015-08-26 11:30:28.4387|Info|      Encerrado timer: id:0, (11:30:28.4387)
2015-08-26 11:30:28.4387|Info|      Executando timer: id:2, (11:30:28.4387)
2015-08-26 11:30:28.4387|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:28.4387|Info|      Encerrado timer: id:2, (11:30:28.4387)
2015-08-26 11:30:28.4387|Info|      Executando timer: id:3, (11:30:28.4387)
2015-08-26 11:30:28.4387|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:30:28.4543|Info|      Encerrado timer: id:3, (11:30:28.4543)
2015-08-26 11:30:28.4700|Info|      Executando timer: id:4, (11:30:28.4700)
2015-08-26 11:30:28.4700|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:30:28.4759|Info|  Settimeout: id:6, (13) ms
2015-08-26 11:30:28.5433|Info|      Encerrado timer: id:4, (11:30:28.5433)
2015-08-26 11:30:28.5433|Info|      Executando timer: id:6, (11:30:28.5433)
2015-08-26 11:30:28.5433|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:28.5433|Info|  Settimeout: id:7, (1) ms
2015-08-26 11:30:28.6058|Info|  Settimeout: id:8, (50) ms
2015-08-26 11:30:28.6563|Info|      Encerrado timer: id:6, (11:30:28.6563)
2015-08-26 11:30:28.6563|Info|      Executando timer: id:7, (11:30:28.6583)
2015-08-26 11:30:28.6563|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:28.6633|Info|      Encerrado timer: id:7, (11:30:28.6633)
2015-08-26 11:30:28.6633|Info|      Executando timer: id:8, (11:30:28.6653)
2015-08-26 11:30:28.6633|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:28.6633|Info|  Settimeout: id:9, (13) ms
2015-08-26 11:30:28.7253|Info|      Encerrado timer: id:8, (11:30:28.7253)
2015-08-26 11:30:28.7253|Info|      Executando timer: id:9, (11:30:28.7253)
2015-08-26 11:30:28.7253|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:28.7253|Info| PASS - defer
2015-08-26 11:30:28.7253|Info|  Settimeout: id:10, (32) ms
2015-08-26 11:30:28.7878|Info|  Settimeout: id:11, (64) ms
2015-08-26 11:30:28.8440|Info|      Encerrado timer: id:9, (11:30:28.8440)
2015-08-26 11:30:28.8440|Info|      Executando timer: id:10, (11:30:28.8440)
2015-08-26 11:30:28.8440|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:28.8440|Info|      Encerrado timer: id:10, (11:30:28.8440)
2015-08-26 11:30:28.8596|Info|      Executando timer: id:11, (11:30:28.8596)
2015-08-26 11:30:28.8596|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:28.8596|Info|  Settimeout: id:12, (13) ms
2015-08-26 11:30:28.9222|Info|      Encerrado timer: id:11, (11:30:28.9222)
2015-08-26 11:30:28.9222|Info|      Executando timer: id:12, (11:30:28.9222)
2015-08-26 11:30:28.9222|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:28.9222|Info| PASS - throttle
2015-08-26 11:30:28.9222|Info|  Settimeout: id:13, (32) ms
2015-08-26 11:30:28.9728|Info|  Settimeout: id:14, (64) ms
2015-08-26 11:30:29.0262|Info|  Settimeout: id:15, (96) ms
2015-08-26 11:30:29.0887|Info|      Encerrado timer: id:12, (11:30:29.0887)
2015-08-26 11:30:29.0887|Info|      Executando timer: id:5, (11:30:29.0887)
2015-08-26 11:30:29.0887|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 11:30:29.0887|Info|      Encerrado timer: id:5, (11:30:29.0887)
2015-08-26 11:30:29.0887|Info|      Executando timer: id:13, (11:30:29.0887)
2015-08-26 11:30:29.0887|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:29.0887|Info|      Encerrado timer: id:13, (11:30:29.0887)
2015-08-26 11:30:29.0887|Info|      Executando timer: id:14, (11:30:29.0887)
2015-08-26 11:30:29.1043|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:29.1043|Info|  Settimeout: id:16, (16) ms
2015-08-26 11:30:29.1580|Info|      Encerrado timer: id:14, (11:30:29.1580)
2015-08-26 11:30:29.1580|Info|      Executando timer: id:16, (11:30:29.1589)
2015-08-26 11:30:29.1580|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:29.1609|Info|      Encerrado timer: id:16, (11:30:29.1609)
2015-08-26 11:30:29.1609|Info|      Executando timer: id:15, (11:30:29.1619)
2015-08-26 11:30:29.1609|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:29.1609|Info|  Settimeout: id:17, (13) ms
2015-08-26 11:30:29.2169|Info|      Encerrado timer: id:15, (11:30:29.2169)
2015-08-26 11:30:29.2169|Info|      Executando timer: id:17, (11:30:29.2169)
2015-08-26 11:30:29.2169|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:29.2169|Info| PASS - throttle arguments
2015-08-26 11:30:29.2169|Info|  Settimeout: id:18, (64) ms
2015-08-26 11:30:29.2729|Info|      Encerrado timer: id:17, (11:30:29.2729)
2015-08-26 11:30:29.2729|Info|      Executando timer: id:18, (11:30:29.2850)
2015-08-26 11:30:29.2869|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:29.4948|Info|  Settimeout: id:19, (13) ms
2015-08-26 11:30:29.5573|Info|      Encerrado timer: id:18, (11:30:29.5573)
2015-08-26 11:30:29.5573|Info|      Executando timer: id:19, (11:30:29.5573)
2015-08-26 11:30:29.5573|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:29.5573|Info| PASS - throttle once
2015-08-26 11:30:29.5573|Info|  Settimeout: id:20, (32) ms
2015-08-26 11:30:29.6075|Info|  Settimeout: id:21, (64) ms
2015-08-26 11:30:29.6593|Info|      Encerrado timer: id:19, (11:30:29.6593)
2015-08-26 11:30:29.6593|Info|      Executando timer: id:20, (11:30:29.6602)
2015-08-26 11:30:29.6617|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:29.6617|Info|      Encerrado timer: id:20, (11:30:29.6617)
2015-08-26 11:30:29.6774|Info|      Executando timer: id:21, (11:30:29.6774)
2015-08-26 11:30:29.6931|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:29.6931|Info|  Settimeout: id:22, (13) ms
2015-08-26 11:30:29.7439|Info|      Encerrado timer: id:21, (11:30:29.7439)
2015-08-26 11:30:29.7439|Info|      Executando timer: id:22, (11:30:29.7451)
2015-08-26 11:30:29.7439|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:29.7439|Info| PASS - throttle twice
2015-08-26 11:30:29.7439|Info|  Settimeout: id:23, (30) ms
2015-08-26 11:30:29.8076|Info|  Settimeout: id:24, (85) ms
2015-08-26 11:30:29.8701|Info|      Encerrado timer: id:22, (11:30:29.8701)
2015-08-26 11:30:29.8701|Info|      Executando timer: id:23, (11:30:29.8701)
2015-08-26 11:30:29.8701|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:29.8701|Info|      Encerrado timer: id:23, (11:30:29.8701)
2015-08-26 11:30:29.8944|Info|      Executando timer: id:24, (11:30:29.8944)
2015-08-26 11:30:29.8964|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:29.8964|Info|  Settimeout: id:25, (1) ms
2015-08-26 11:30:29.9599|Info|  Settimeout: id:26, (13) ms
2015-08-26 11:30:30.0224|Info|      Encerrado timer: id:24, (11:30:30.0224)
2015-08-26 11:30:30.0224|Info|      Executando timer: id:25, (11:30:30.0224)
2015-08-26 11:30:30.0224|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:30.0224|Info|      Encerrado timer: id:25, (11:30:30.0224)
2015-08-26 11:30:30.0224|Info|      Executando timer: id:26, (11:30:30.0224)
2015-08-26 11:30:30.0224|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:30.0224|Info|  Settimeout: id:27, (100) ms
2015-08-26 11:30:30.0925|Info|  Settimeout: id:28, (50) ms
2015-08-26 11:30:30.1550|Info|  Settimeout: id:29, (150) ms
2015-08-26 11:30:30.2054|Info|  Settimeout: id:30, (160) ms
2015-08-26 11:30:30.2612|Info|  Settimeout: id:31, (230) ms
2015-08-26 11:30:30.3237|Info|  Settimeout: id:32, (300) ms
2015-08-26 11:30:30.3743|Info|      Encerrado timer: id:26, (11:30:30.3743)
2015-08-26 11:30:30.3743|Info|      Executando timer: id:27, (11:30:30.3763)
2015-08-26 11:30:30.3743|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:30.3813|Info|      Encerrado timer: id:27, (11:30:30.3813)
2015-08-26 11:30:30.3813|Info|      Executando timer: id:28, (11:30:30.3833)
2015-08-26 11:30:30.3813|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:30.3813|Info|  Settimeout: id:33, (95) ms
2015-08-26 11:30:30.4413|Info|      Encerrado timer: id:28, (11:30:30.4413)
2015-08-26 11:30:30.4413|Info|      Executando timer: id:29, (11:30:30.4413)
2015-08-26 11:30:30.4413|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:30.4413|Info|      Encerrado timer: id:29, (11:30:30.4413)
2015-08-26 11:30:30.4413|Info|      Executando timer: id:30, (11:30:30.4413)
2015-08-26 11:30:30.4413|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:30.4413|Info|      Encerrado timer: id:30, (11:30:30.4413)
2015-08-26 11:30:30.4881|Info|      Executando timer: id:33, (11:30:30.4881)
2015-08-26 11:30:30.4881|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:30.4881|Info|      Encerrado timer: id:33, (11:30:30.4881)
2015-08-26 11:30:30.5038|Info|      Executando timer: id:31, (11:30:30.5038)
2015-08-26 11:30:30.5038|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:30.5038|Info|  Settimeout: id:34, (84) ms
2015-08-26 11:30:30.5616|Info|      Encerrado timer: id:31, (11:30:30.5616)
2015-08-26 11:30:30.5929|Info|      Executando timer: id:34, (11:30:30.5929)
2015-08-26 11:30:30.5929|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:30.5929|Info|      Encerrado timer: id:34, (11:30:30.5929)
2015-08-26 11:30:30.6397|Info|      Executando timer: id:32, (11:30:30.6397)
2015-08-26 11:30:30.6397|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:30.6397|Info|  Settimeout: id:35, (13) ms
2015-08-26 11:30:30.6906|Info|      Encerrado timer: id:32, (11:30:30.6906)
2015-08-26 11:30:30.6925|Info|      Executando timer: id:35, (11:30:30.6925)
2015-08-26 11:30:30.6925|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:30.6925|Info|  Settimeout: id:36, (32) ms
2015-08-26 11:30:30.7573|Info|  Settimeout: id:37, (96) ms
2015-08-26 11:30:30.8198|Info|      Encerrado timer: id:35, (11:30:30.8198)
2015-08-26 11:30:30.8198|Info|      Executando timer: id:36, (11:30:30.8198)
2015-08-26 11:30:30.8198|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:30.8198|Info|      Encerrado timer: id:36, (11:30:30.8300)
2015-08-26 11:30:30.8561|Info|      Executando timer: id:37, (11:30:30.8561)
2015-08-26 11:30:30.8561|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:30.8561|Info|  Settimeout: id:38, (13) ms
2015-08-26 11:30:30.9256|Info|      Encerrado timer: id:37, (11:30:30.9256)
2015-08-26 11:30:30.9256|Info|      Executando timer: id:38, (11:30:30.9256)
2015-08-26 11:30:30.9256|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:30.9256|Info|  Settimeout: id:39, (60) ms
2015-08-26 11:30:30.9763|Info|  Settimeout: id:40, (96) ms
2015-08-26 11:30:31.0439|Info|      Encerrado timer: id:38, (11:30:31.0439)
2015-08-26 11:30:31.0439|Info|      Executando timer: id:39, (11:30:31.0439)
2015-08-26 11:30:31.0439|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:31.0439|Info|      Encerrado timer: id:39, (11:30:31.0439)
2015-08-26 11:30:31.0751|Info|      Executando timer: id:40, (11:30:31.0751)
2015-08-26 11:30:31.0751|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:31.0751|Info|  Settimeout: id:41, (13) ms
2015-08-26 11:30:31.1376|Info|      Encerrado timer: id:40, (11:30:31.1376)
2015-08-26 11:30:31.1376|Info|      Executando timer: id:41, (11:30:31.1376)
2015-08-26 11:30:31.1376|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:31.1455|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-08-26 11:30:31.1455|Info|  Settimeout: id:42, (100) ms
2015-08-26 11:30:31.2099|Info|  Settimeout: id:43, (50) ms
2015-08-26 11:30:31.2724|Info|  Settimeout: id:44, (60) ms
2015-08-26 11:30:31.3225|Info|  Settimeout: id:45, (200) ms
2015-08-26 11:30:31.3755|Info|  Settimeout: id:46, (250) ms
2015-08-26 11:30:31.4380|Info|  Settimeout: id:47, (350) ms
2015-08-26 11:30:31.4884|Info|      Encerrado timer: id:41, (11:30:31.4884)
2015-08-26 11:30:31.4904|Info|      Executando timer: id:42, (11:30:31.4904)
2015-08-26 11:30:31.4904|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:31.4904|Info|      Encerrado timer: id:42, (11:30:31.4951)
2015-08-26 11:30:31.4904|Info|      Executando timer: id:43, (11:30:31.4951)
2015-08-26 11:30:31.4904|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:31.4904|Info|  Settimeout: id:48, (100) ms
2015-08-26 11:30:31.5577|Info|      Encerrado timer: id:43, (11:30:31.5577)
2015-08-26 11:30:31.5577|Info|      Executando timer: id:44, (11:30:31.5577)
2015-08-26 11:30:31.5577|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:31.5577|Info|      Encerrado timer: id:44, (11:30:31.5577)
2015-08-26 11:30:31.5577|Info|      Executando timer: id:45, (11:30:31.5577)
2015-08-26 11:30:31.5577|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:31.5577|Info|      Encerrado timer: id:45, (11:30:31.5577)
2015-08-26 11:30:31.6091|Info|      Executando timer: id:48, (11:30:31.6091)
2015-08-26 11:30:31.6091|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:31.6141|Info|      Encerrado timer: id:48, (11:30:31.6141)
2015-08-26 11:30:31.6311|Info|      Executando timer: id:46, (11:30:31.6311)
2015-08-26 11:30:31.6311|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:31.6311|Info|      Encerrado timer: id:46, (11:30:31.6341)
2015-08-26 11:30:31.7937|Info|      Executando timer: id:47, (11:30:31.7937)
2015-08-26 11:30:31.7937|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:31.7937|Info|  Settimeout: id:49, (13) ms
2015-08-26 11:30:31.8563|Info|      Encerrado timer: id:47, (11:30:31.8563)
2015-08-26 11:30:31.8563|Info|      Executando timer: id:49, (11:30:31.8563)
2015-08-26 11:30:31.8563|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:31.8563|Info|  Settimeout: id:50, (100) ms
2015-08-26 11:30:31.9566|Info|  Settimeout: id:51, (100) ms
2015-08-26 11:30:32.0710|Info|  Settimeout: id:52, (100) ms
2015-08-26 11:30:32.1713|Info|  Settimeout: id:53, (100) ms
2015-08-26 11:30:32.2271|Info|  Settimeout: id:54, (200) ms
2015-08-26 11:30:32.2922|Info|      Encerrado timer: id:49, (11:30:32.2922)
2015-08-26 11:30:32.2922|Info|      Executando timer: id:53, (11:30:32.2922)
2015-08-26 11:30:32.2922|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:32.2922|Info|      Encerrado timer: id:53, (11:30:32.2922)
2015-08-26 11:30:32.4434|Info|      Executando timer: id:54, (11:30:32.4434)
2015-08-26 11:30:32.4434|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:32.4434|Info|  Settimeout: id:55, (13) ms
2015-08-26 11:30:32.5059|Info|      Encerrado timer: id:54, (11:30:32.5059)
2015-08-26 11:30:32.5059|Info|      Executando timer: id:55, (11:30:32.5059)
2015-08-26 11:30:32.5059|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:32.5059|Info| PASS - one more throttle with leading: false test
2015-08-26 11:30:32.5059|Info|  Settimeout: id:56, (96) ms
2015-08-26 11:30:32.5722|Info|      Encerrado timer: id:55, (11:30:32.5722)
2015-08-26 11:30:32.6252|Info|      Executando timer: id:56, (11:30:32.6252)
2015-08-26 11:30:32.6252|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:32.6252|Info|  Settimeout: id:57, (96) ms
2015-08-26 11:30:32.6764|Info|      Encerrado timer: id:56, (11:30:32.6764)
2015-08-26 11:30:32.7438|Info|      Executando timer: id:57, (11:30:32.7438)
2015-08-26 11:30:32.7438|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:32.7438|Info|  Settimeout: id:58, (13) ms
2015-08-26 11:30:32.8063|Info|      Encerrado timer: id:57, (11:30:32.8063)
2015-08-26 11:30:32.8063|Info|      Executando timer: id:58, (11:30:32.8063)
2015-08-26 11:30:32.8063|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:32.8063|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-26 11:30:32.8063|Info|  Settimeout: id:59, (200) ms
2015-08-26 11:30:32.8570|Info|      Encerrado timer: id:58, (11:30:32.8570)
2015-08-26 11:30:33.0180|Info|      Executando timer: id:59, (11:30:33.0180)
2015-08-26 11:30:33.0180|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:33.0210|Info|  Settimeout: id:60, (13) ms
2015-08-26 11:30:33.0775|Info|      Encerrado timer: id:59, (11:30:33.0775)
2015-08-26 11:30:33.0775|Info|      Executando timer: id:60, (11:30:33.0775)
2015-08-26 11:30:33.0775|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:33.0775|Info| PASS - throttle continues to function after system time is set backwards
2015-08-26 11:30:33.0775|Info|  Settimeout: id:61, (32) ms
2015-08-26 11:30:33.1400|Info|  Settimeout: id:62, (100) ms
2015-08-26 11:30:33.1901|Info|      Encerrado timer: id:60, (11:30:33.1901)
2015-08-26 11:30:33.1901|Info|      Executando timer: id:61, (11:30:33.1910)
2015-08-26 11:30:33.1930|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:33.1930|Info|  Settimeout: id:63, (32) ms
2015-08-26 11:30:33.2590|Info|      Encerrado timer: id:61, (11:30:33.2590)
2015-08-26 11:30:33.2590|Info|      Executando timer: id:62, (11:30:33.2590)
2015-08-26 11:30:33.2590|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:33.2590|Info|  Settimeout: id:64, (13) ms
2015-08-26 11:30:33.3216|Info|      Encerrado timer: id:62, (11:30:33.3216)
2015-08-26 11:30:33.3216|Info|      Executando timer: id:63, (11:30:33.3216)
2015-08-26 11:30:33.3216|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:33.3216|Info|      Encerrado timer: id:63, (11:30:33.3274)
2015-08-26 11:30:33.3216|Info|      Executando timer: id:64, (11:30:33.3294)
2015-08-26 11:30:33.3216|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:33.3324|Info|  Settimeout: id:65, (32) ms
2015-08-26 11:30:33.3929|Info|  Settimeout: id:66, (16) ms
2015-08-26 11:30:33.4553|Info|  Settimeout: id:67, (96) ms
2015-08-26 11:30:33.5061|Info|      Encerrado timer: id:64, (11:30:33.5061)
2015-08-26 11:30:33.5061|Info|      Executando timer: id:65, (11:30:33.5061)
2015-08-26 11:30:33.5061|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:33.5061|Info|      Encerrado timer: id:65, (11:30:33.5110)
2015-08-26 11:30:33.5061|Info|      Executando timer: id:66, (11:30:33.5120)
2015-08-26 11:30:33.5061|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:33.5061|Info|  Settimeout: id:68, (32) ms
2015-08-26 11:30:33.5761|Info|      Encerrado timer: id:66, (11:30:33.5761)
2015-08-26 11:30:33.5761|Info|      Executando timer: id:67, (11:30:33.5761)
2015-08-26 11:30:33.5761|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:33.5761|Info|  Settimeout: id:69, (13) ms
2015-08-26 11:30:33.6386|Info|      Encerrado timer: id:67, (11:30:33.6386)
2015-08-26 11:30:33.6386|Info|      Executando timer: id:68, (11:30:33.6386)
2015-08-26 11:30:33.6386|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:33.6466|Info|      Encerrado timer: id:68, (11:30:33.6466)
2015-08-26 11:30:33.6466|Info|      Executando timer: id:69, (11:30:33.6486)
2015-08-26 11:30:33.6466|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:33.6466|Info| PASS - debounce
2015-08-26 11:30:33.6466|Info|  Settimeout: id:70, (64) ms
2015-08-26 11:30:33.7064|Info|  Settimeout: id:71, (16) ms
2015-08-26 11:30:33.7597|Info|  Settimeout: id:72, (32) ms
2015-08-26 11:30:33.8101|Info|  Settimeout: id:73, (48) ms
2015-08-26 11:30:33.8752|Info|  Settimeout: id:74, (128) ms
2015-08-26 11:30:33.9376|Info|      Encerrado timer: id:69, (11:30:33.9376)
2015-08-26 11:30:33.9376|Info|      Executando timer: id:70, (11:30:33.9376)
2015-08-26 11:30:33.9376|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:33.9376|Info|      Encerrado timer: id:70, (11:30:33.9376)
2015-08-26 11:30:33.9376|Info|      Executando timer: id:71, (11:30:33.9376)
2015-08-26 11:30:33.9376|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:33.9376|Info|  Settimeout: id:75, (64) ms
2015-08-26 11:30:33.9881|Info|      Encerrado timer: id:71, (11:30:33.9881)
2015-08-26 11:30:33.9881|Info|      Executando timer: id:72, (11:30:33.9881)
2015-08-26 11:30:33.9891|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:33.9891|Info|      Encerrado timer: id:72, (11:30:33.9901)
2015-08-26 11:30:33.9891|Info|      Executando timer: id:73, (11:30:33.9901)
2015-08-26 11:30:33.9891|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:33.9891|Info|      Encerrado timer: id:73, (11:30:33.9911)
2015-08-26 11:30:34.0119|Info|      Executando timer: id:74, (11:30:34.0119)
2015-08-26 11:30:34.0119|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:34.0119|Info|  Settimeout: id:76, (13) ms
2015-08-26 11:30:34.0744|Info|      Encerrado timer: id:74, (11:30:34.0744)
2015-08-26 11:30:34.0744|Info|      Executando timer: id:75, (11:30:34.0744)
2015-08-26 11:30:34.0744|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:34.0744|Info|      Encerrado timer: id:75, (11:30:34.0744)
2015-08-26 11:30:34.0744|Info|      Executando timer: id:76, (11:30:34.0744)
2015-08-26 11:30:34.0744|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:34.0744|Info|  Settimeout: id:77, (32) ms
2015-08-26 11:30:34.1248|Info|  Settimeout: id:78, (96) ms
2015-08-26 11:30:34.1773|Info|      Encerrado timer: id:76, (11:30:34.1773)
2015-08-26 11:30:34.1773|Info|      Executando timer: id:77, (11:30:34.1773)
2015-08-26 11:30:34.1773|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:34.1773|Info|      Encerrado timer: id:77, (11:30:34.1855)
2015-08-26 11:30:34.2236|Info|      Executando timer: id:78, (11:30:34.2236)
2015-08-26 11:30:34.2236|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:34.2236|Info|  Settimeout: id:79, (13) ms
2015-08-26 11:30:34.2782|Info|      Encerrado timer: id:78, (11:30:34.2782)
2015-08-26 11:30:34.2782|Info|      Executando timer: id:79, (11:30:34.2782)
2015-08-26 11:30:34.2782|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:34.2782|Info| PASS - debounce asap recursively
2015-08-26 11:30:34.2782|Info|  Settimeout: id:80, (100) ms
2015-08-26 11:30:34.3407|Info|  Settimeout: id:81, (200) ms
2015-08-26 11:30:34.4032|Info|      Encerrado timer: id:79, (11:30:34.4032)
2015-08-26 11:30:34.4032|Info|      Executando timer: id:80, (11:30:34.4032)
2015-08-26 11:30:34.4032|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:34.4032|Info|      Encerrado timer: id:80, (11:30:34.4032)
2015-08-26 11:30:34.5536|Info|      Executando timer: id:81, (11:30:34.5536)
2015-08-26 11:30:34.5536|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:34.5536|Info|  Settimeout: id:82, (100) ms
2015-08-26 11:30:34.6108|Info|  Settimeout: id:83, (13) ms
2015-08-26 11:30:34.6734|Info|      Encerrado timer: id:81, (11:30:34.6734)
2015-08-26 11:30:34.6734|Info|      Executando timer: id:83, (11:30:34.6734)
2015-08-26 11:30:34.6734|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:34.6734|Info| PASS - debounce after system time is set backwards
2015-08-26 11:30:34.6734|Info|  Settimeout: id:84, (32) ms
2015-08-26 11:30:34.7268|Info|  Settimeout: id:85, (100) ms
2015-08-26 11:30:34.7775|Info|      Encerrado timer: id:83, (11:30:34.7775)
2015-08-26 11:30:34.7775|Info|      Executando timer: id:82, (11:30:34.7775)
2015-08-26 11:30:34.7775|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:34.7775|Info|      Encerrado timer: id:82, (11:30:34.7775)
2015-08-26 11:30:34.7775|Info|      Executando timer: id:84, (11:30:34.7775)
2015-08-26 11:30:34.7775|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:34.7775|Info|  Settimeout: id:86, (32) ms
2015-08-26 11:30:34.8400|Info|      Encerrado timer: id:84, (11:30:34.8400)
2015-08-26 11:30:34.9110|Info|      Executando timer: id:86, (11:30:34.9110)
2015-08-26 11:30:34.9110|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:34.9266|Info|      Encerrado timer: id:86, (11:30:34.9266)
2015-08-26 11:30:34.9266|Info|      Executando timer: id:85, (11:30:34.9266)
2015-08-26 11:30:34.9266|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:34.9266|Info|  Settimeout: id:87, (13) ms
2015-08-26 11:30:34.9891|Info|      Encerrado timer: id:85, (11:30:34.9891)
2015-08-26 11:30:34.9891|Info|      Executando timer: id:87, (11:30:34.9891)
2015-08-26 11:30:34.9891|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:34.9891|Info| PASS - debounce re-entrant
2015-08-26 11:30:34.9891|Info| PASS - once
2015-08-26 11:30:34.9891|Info| PASS - Recursive onced function.
2015-08-26 11:30:34.9891|Info| PASS - wrap
2015-08-26 11:30:34.9891|Info| PASS - negate
2015-08-26 11:30:34.9891|Info| PASS - compose
2015-08-26 11:30:34.9891|Info| PASS - after
2015-08-26 11:30:34.9891|Info| PASS - before
2015-08-26 11:30:34.9891|Info| PASS - iteratee
2015-08-26 11:30:34.9891|Info|----------------------------------------
2015-08-26 11:30:34.9891|Info|Objects
2015-08-26 11:30:34.9891|Info|----------------------------------------
2015-08-26 11:30:34.9891|Info| PASS - keys
2015-08-26 11:30:34.9891|Info| PASS - allKeys
2015-08-26 11:30:35.0047|Info| PASS - values
2015-08-26 11:30:35.0047|Info| PASS - pairs
2015-08-26 11:30:35.0047|Info| PASS - invert
2015-08-26 11:30:35.0047|Info| PASS - functions
2015-08-26 11:30:35.0047|Info| PASS - methods
2015-08-26 11:30:35.0047|Info| PASS - extend
2015-08-26 11:30:35.0047|Info| PASS - extendOwn
2015-08-26 11:30:35.0047|Info| PASS - pick
2015-08-26 11:30:35.0047|Info| PASS - omit
2015-08-26 11:30:35.0047|Info| PASS - defaults
2015-08-26 11:30:35.0047|Info| PASS - clone
2015-08-26 11:30:35.0047|Info| PASS - create
2015-08-26 11:30:35.0204|Info| PASS - isEqual
2015-08-26 11:30:35.0204|Info| PASS - isEmpty
2015-08-26 11:30:35.0204|Info| PASS - isArguments
2015-08-26 11:30:35.0204|Info| PASS - isObject
2015-08-26 11:30:35.0204|Info| PASS - isArray
2015-08-26 11:30:35.0204|Info| PASS - isString
2015-08-26 11:30:35.0204|Info| PASS - isNumber
2015-08-26 11:30:35.0204|Info| PASS - isBoolean
2015-08-26 11:30:35.0204|Info| PASS - isFunction
2015-08-26 11:30:35.0204|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-26 11:30:35.0204|Info|    PASS | EQ | can extract the keys from an object
2015-08-26 11:30:35.0204|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 11:30:35.0204|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 11:30:35.0360|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-26 11:30:35.0360|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 11:30:35.0360|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0360|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 11:30:35.0360|Info|    PASS | EQ | should include inherited keys
2015-08-26 11:30:35.0360|Info|    PASS | EQ | should get keys from constructor
2015-08-26 11:30:35.0360|Info|    PASS | EQ | can extract the values from an object
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 11:30:35.0360|Info|    PASS | EQ | can convert an object into pairs
2015-08-26 11:30:35.0360|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 11:30:35.0516|Info|    PASS | EQ | can invert an object
2015-08-26 11:30:35.0516|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-26 11:30:35.0516|Info|    PASS | EQ | can invert an object with "length"
2015-08-26 11:30:35.0516|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-26 11:30:35.0516|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-26 11:30:35.0516|Info|    PASS | EQ | alias for functions
2015-08-26 11:30:35.0516|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-26 11:30:35.0516|Info|    PASS | EQ | properties in source override destination
2015-08-26 11:30:35.0516|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 11:30:35.0516|Info|    PASS | EQ | can extend from multiple source objects
2015-08-26 11:30:35.0516|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-26 11:30:35.0516|Info|    PASS | EQ | extend copies undefined values
2015-08-26 11:30:35.0516|Info|    PASS | EQ | extend copies all properties from source
2015-08-26 11:30:35.0516|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-26 11:30:35.0516|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:30:35.0516|Info|    PASS | EQ | extending null results in null
2015-08-26 11:30:35.0516|Info|    PASS | OK | extending undefined results in undefined
2015-08-26 11:30:35.0516|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-26 11:30:35.0516|Info|    PASS | EQ | properties in source override destination
2015-08-26 11:30:35.0516|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 11:30:35.0516|Info|    PASS | EQ | can assign from multiple source objects
2015-08-26 11:30:35.0516|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-26 11:30:35.0670|Info|    PASS | EQ | assign copies undefined values
2015-08-26 11:30:35.0670|Info|    PASS | EQ | assign copies own properties from source
2015-08-26 11:30:35.0670|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:30:35.0670|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:30:35.0670|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:30:35.0670|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:30:35.0670|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:30:35.0670|Info|    PASS | OK | assigning undefined results in undefined
2015-08-26 11:30:35.0670|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can restrict properties to those named
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can pick numeric properties
2015-08-26 11:30:35.0670|Info|    PASS | EQ | Called with null/undefined
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | Called with null/undefined
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can iterate primitives
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can accept a predicate and context
2015-08-26 11:30:35.0670|Info|    PASS | EQ | include prototype props
2015-08-26 11:30:35.0670|Info|    PASS | EQ | function is given context
2015-08-26 11:30:35.0670|Info|    PASS | EQ | does not set own property if property not in object
2015-08-26 11:30:35.0670|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:30:35.0670|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:30:35.0670|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can omit a single named property
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can omit several named properties
2015-08-26 11:30:35.0670|Info|    PASS | EQ | can omit properties named in an array
2015-08-26 11:30:35.0938|Info|    PASS | EQ | can omit numeric properties
2015-08-26 11:30:35.0938|Info|    PASS | EQ | non objects return empty object
2015-08-26 11:30:35.0938|Info|    PASS | EQ | null/undefined return empty object
2015-08-26 11:30:35.0938|Info|    PASS | EQ | returns empty object for primitives
2015-08-26 11:30:35.0938|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0938|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0938|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0938|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0938|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0938|Info|    PASS | EQ | ok
2015-08-26 11:30:35.0938|Info|    PASS | EQ | can accept a predicate
2015-08-26 11:30:35.0938|Info|    PASS | EQ | include prototype props
2015-08-26 11:30:35.0938|Info|    PASS | EQ | function is given context
2015-08-26 11:30:35.0938|Info|    PASS | EQ | value exists
2015-08-26 11:30:35.0938|Info|    PASS | EQ | value exists
2015-08-26 11:30:35.0938|Info|    PASS | EQ | default applied
2015-08-26 11:30:35.0938|Info|    PASS | EQ | null isn't overridden
2015-08-26 11:30:35.0938|Info|    PASS | EQ | value exists
2015-08-26 11:30:35.0938|Info|    PASS | EQ | NaN isn't overridden
2015-08-26 11:30:35.0938|Info|    PASS | EQ | new value is added, first one wins
2015-08-26 11:30:35.0938|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:30:35.0938|Info|    PASS | EQ | result is null if destination is null
2015-08-26 11:30:35.0938|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-26 11:30:35.0938|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-26 11:30:35.0938|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-26 11:30:35.0938|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-26 11:30:35.0938|Info|    PASS | OK | non objects should not be changed by clone
2015-08-26 11:30:35.0938|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 11:30:35.0938|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 11:30:35.1094|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:30:35.1094|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:30:35.1094|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:30:35.1094|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:30:35.1094|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-26 11:30:35.1094|Info|    PASS | EQ | object should inherit prototype
2015-08-26 11:30:35.1094|Info|    PASS | EQ | properties should be added to object
2015-08-26 11:30:35.1094|Info|    PASS | EQ | ok
2015-08-26 11:30:35.1094|Info|    PASS | EQ | should only add own properties
2015-08-26 11:30:35.1094|Info|    PASS | EQ | `null` is equal to `null`
2015-08-26 11:30:35.1094|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-26 11:30:35.1094|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-26 11:30:35.1094|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Identical string primitives are equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-26 11:30:35.1094|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Identical number primitives are equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-26 11:30:35.1094|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-26 11:30:35.1094|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-26 11:30:35.1250|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-26 11:30:35.1250|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-26 11:30:35.1250|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-26 11:30:35.1250|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Invalid dates are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-26 11:30:35.1250|Info|    PASS | EQ | Flag order is not significant
2015-08-26 11:30:35.1250|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-26 11:30:35.1406|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Empty object literals are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Empty array literals are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Object instances are equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-26 11:30:35.1406|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Cyclic structures are equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | `isEqual` can be chained
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-26 11:30:35.1563|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-26 11:30:35.1563|Info|    PASS | EQ | [1] is not empty
2015-08-26 11:30:35.1563|Info|    PASS | EQ | [] is empty
2015-08-26 11:30:35.1563|Info|    PASS | EQ | {one : 1} is not empty
2015-08-26 11:30:35.1563|Info|    PASS | EQ | {} is empty
2015-08-26 11:30:35.1563|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-26 11:30:35.1563|Info|    PASS | EQ | null is empty
2015-08-26 11:30:35.1563|Info|    PASS | EQ | undefined is empty
2015-08-26 11:30:35.1563|Info|    PASS | EQ | the empty string is empty
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but other strings are not
2015-08-26 11:30:35.1719|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-26 11:30:35.1719|Info|    PASS | EQ | empty arguments object is empty
2015-08-26 11:30:35.1719|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-26 11:30:35.1719|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-26 11:30:35.1719|Info|    PASS | EQ | a string is not an arguments object
2015-08-26 11:30:35.1719|Info|    PASS | EQ | a function is not an arguments object
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but not when it's converted into an array
2015-08-26 11:30:35.1719|Info|    PASS | EQ | and not vanilla arrays.
2015-08-26 11:30:35.1719|Info|    PASS | EQ | the arguments object is object
2015-08-26 11:30:35.1719|Info|    PASS | EQ | and arrays
2015-08-26 11:30:35.1719|Info|    PASS | EQ | and functions
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but not null
2015-08-26 11:30:35.1719|Info|    PASS | EQ | and not undefined
2015-08-26 11:30:35.1719|Info|    PASS | EQ | and not string
2015-08-26 11:30:35.1719|Info|    PASS | EQ | and not number
2015-08-26 11:30:35.1719|Info|    PASS | EQ | and not boolean
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but new String()
2015-08-26 11:30:35.1719|Info|    PASS | EQ | undefined vars are not arrays
2015-08-26 11:30:35.1719|Info|    PASS | EQ | the arguments object is not an array
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but arrays are
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but strings are
2015-08-26 11:30:35.1719|Info|    PASS | EQ | string literals are
2015-08-26 11:30:35.1719|Info|    PASS | EQ | so are String objects
2015-08-26 11:30:35.1719|Info|    PASS | EQ | ok
2015-08-26 11:30:35.1719|Info|    PASS | EQ | a string is not a number
2015-08-26 11:30:35.1719|Info|    PASS | EQ | the arguments object is not a number
2015-08-26 11:30:35.1719|Info|    PASS | EQ | undefined is not a number
2015-08-26 11:30:35.1719|Info|    PASS | EQ | but numbers are
2015-08-26 11:30:35.1875|Info|    PASS | EQ | NaN *is* a number
2015-08-26 11:30:35.1875|Info|    PASS | EQ | Infinity is a number
2015-08-26 11:30:35.1875|Info|    PASS | EQ | numeric strings are not numbers
2015-08-26 11:30:35.1875|Info|    PASS | EQ | a number is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | a string is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | undefined is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | NaN is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | null is not a boolean
2015-08-26 11:30:35.1875|Info|    PASS | EQ | but true is
2015-08-26 11:30:35.1875|Info|    PASS | EQ | and so is false
2015-08-26 11:30:35.1875|Info|    PASS | EQ | undefined vars are not functions
2015-08-26 11:30:35.1875|Info|    PASS | EQ | arrays are not functions
2015-08-26 11:30:35.1875|Info|    PASS | EQ | strings are not functions
2015-08-26 11:30:35.1875|Info|    PASS | EQ | but functions are
2015-08-26 11:30:35.1875|Info|    PASS | EQ | even anonymous ones
2015-08-26 11:30:35.1875|Info|    FAIL | OK | Died on test #1     at V8Runtime [3]:underscoreTests:2898:5
    at V8Runtime [3]:underscoreTests:3251:2: window is not defined
2015-08-26 11:30:35.1875|Info| PASS - isDate
2015-08-26 11:30:35.1875|Info| PASS - isRegExp
2015-08-26 11:30:35.1875|Info| PASS - isFinite
2015-08-26 11:30:35.1875|Info| PASS - isNaN
2015-08-26 11:30:35.1875|Info| PASS - isNull
2015-08-26 11:30:35.1875|Info| PASS - isUndefined
2015-08-26 11:30:35.2031|Info| PASS - isError
2015-08-26 11:30:35.2031|Info| PASS - tap
2015-08-26 11:30:35.2031|Info| PASS - has
2015-08-26 11:30:35.2031|Info| PASS - isMatch
2015-08-26 11:30:35.2097|Info| PASS - matcher
2015-08-26 11:30:35.2097|Info| PASS - matcher 
2015-08-26 11:30:35.2097|Info| PASS - findKey
2015-08-26 11:30:35.2097|Info| PASS - mapObject
2015-08-26 11:30:35.2097|Info|----------------------------------------
2015-08-26 11:30:35.2097|Info|Utility
2015-08-26 11:30:35.2097|Info|----------------------------------------
2015-08-26 11:30:35.2097|Info| PASS - #750 - Return _ instance.
2015-08-26 11:30:35.2097|Info| PASS - identity
2015-08-26 11:30:35.2097|Info| PASS - constant
2015-08-26 11:30:35.2097|Info| PASS - noop
2015-08-26 11:30:35.2097|Info| PASS - property
2015-08-26 11:30:35.2097|Info| PASS - propertyOf
2015-08-26 11:30:35.2247|Info| PASS - random
2015-08-26 11:30:35.2247|Info| PASS - now
2015-08-26 11:30:35.2247|Info| PASS - uniqueId
2015-08-26 11:30:35.2247|Info| PASS - times
2015-08-26 11:30:35.2247|Info| PASS - mixin
2015-08-26 11:30:35.2247|Info| PASS - _.escape
2015-08-26 11:30:35.2247|Info| PASS - _.unescape
2015-08-26 11:30:35.2247|Info| PASS - _.escape & unescape
2015-08-26 11:30:35.2247|Info| PASS - template
2015-08-26 11:30:35.2247|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-26 11:30:35.2247|Info| PASS - _.template handles \u2028 & \u2029
2015-08-26 11:30:35.2247|Info| PASS - result calls functions and returns primitives
2015-08-26 11:30:35.2247|Info| PASS - result returns a default value if object is null or undefined
2015-08-26 11:30:35.2247|Info| PASS - result returns a default value if property of object is missing
2015-08-26 11:30:35.2247|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-26 11:30:35.2247|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-26 11:30:35.2434|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-26 11:30:35.2434|Info| PASS - result fallback can use a function
2015-08-26 11:30:35.2434|Info| PASS - _.templateSettings.variable
2015-08-26 11:30:35.2434|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-26 11:30:35.2434|Info| PASS - #556 - undefined template variables.
2015-08-26 11:30:35.2434|Info| PASS - interpolate evaluates code only once.
2015-08-26 11:30:35.2434|Info| PASS - #746 - _.template settings are not modified.
2015-08-26 11:30:35.2434|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-26 11:30:35.2434|Info|  Settimeout: id:88, (100) ms
2015-08-26 11:30:35.3059|Info|  Settimeout: id:89, (50) ms
2015-08-26 11:30:35.3685|Info|  Settimeout: id:90, (150) ms
2015-08-26 11:30:35.4272|Info|      Encerrado timer: id:87, (11:30:35.4272)
2015-08-26 11:30:35.4272|Info|      Executando timer: id:88, (11:30:35.4272)
2015-08-26 11:30:35.4272|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:35.4272|Info|      Encerrado timer: id:88, (11:30:35.4272)
2015-08-26 11:30:35.4272|Info|      Executando timer: id:89, (11:30:35.4272)
2015-08-26 11:30:35.4272|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:30:35.4272|Info|      Encerrado timer: id:89, (11:30:35.4272)
2015-08-26 11:30:35.5227|Info|      Executando timer: id:90, (11:30:35.5227)
2015-08-26 11:30:35.5227|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:30:35.5227|Info|  Settimeout: id:91, (13) ms
2015-08-26 11:30:35.5918|Info|      Encerrado timer: id:90, (11:30:35.5918)
2015-08-26 11:30:35.5918|Info|      Executando timer: id:91, (11:30:35.5918)
2015-08-26 11:30:35.5918|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:35.5918|Info|  Settimeout: id:92, (30) ms
2015-08-26 11:30:35.6543|Info|  Settimeout: id:93, (85) ms
2015-08-26 11:30:35.7048|Info|      Encerrado timer: id:91, (11:30:35.7048)
2015-08-26 11:30:35.7048|Info|      Executando timer: id:92, (11:30:35.7048)
2015-08-26 11:30:35.7048|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:35.7078|Info|      Encerrado timer: id:92, (11:30:35.7078)
2015-08-26 11:30:35.7409|Info|      Executando timer: id:93, (11:30:35.7409)
2015-08-26 11:30:35.7409|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:35.7409|Info|  Settimeout: id:94, (13) ms
2015-08-26 11:30:35.8076|Info|      Encerrado timer: id:93, (11:30:35.8076)
2015-08-26 11:30:35.8076|Info|      Executando timer: id:94, (11:30:35.8076)
2015-08-26 11:30:35.8076|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:35.8076|Info|----------------------------------------
2015-08-26 11:30:35.8076|Info|Functions
2015-08-26 11:30:35.8076|Info|----------------------------------------
2015-08-26 11:30:35.8076|Info| PASS - more throttling
2015-08-26 11:30:35.8076|Info|  Settimeout: id:95, (100) ms
2015-08-26 11:30:35.8772|Info|  Settimeout: id:96, (50) ms
2015-08-26 11:30:35.9397|Info|  Settimeout: id:97, (150) ms
2015-08-26 11:30:36.0022|Info|  Settimeout: id:98, (160) ms
2015-08-26 11:30:36.0589|Info|  Settimeout: id:99, (230) ms
2015-08-26 11:30:36.1214|Info|  Settimeout: id:100, (300) ms
2015-08-26 11:30:36.1719|Info|      Encerrado timer: id:94, (11:30:36.1719)
2015-08-26 11:30:36.1719|Info|      Executando timer: id:95, (11:30:36.1729)
2015-08-26 11:30:36.1719|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:36.1719|Info|      Encerrado timer: id:95, (11:30:36.1749)
2015-08-26 11:30:36.1719|Info|      Executando timer: id:96, (11:30:36.1749)
2015-08-26 11:30:36.1719|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:36.1769|Info|  Settimeout: id:101, (98) ms
2015-08-26 11:30:36.2280|Info|      Encerrado timer: id:96, (11:30:36.2280)
2015-08-26 11:30:36.2280|Info|      Executando timer: id:97, (11:30:36.2290)
2015-08-26 11:30:36.2280|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:36.2280|Info|      Encerrado timer: id:97, (11:30:36.2300)
2015-08-26 11:30:36.2280|Info|      Executando timer: id:98, (11:30:36.2310)
2015-08-26 11:30:36.2280|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:36.2280|Info|      Encerrado timer: id:98, (11:30:36.2320)
2015-08-26 11:30:36.2765|Info|      Executando timer: id:101, (11:30:36.2765)
2015-08-26 11:30:36.2765|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:36.2765|Info|      Encerrado timer: id:101, (11:30:36.2765)
2015-08-26 11:30:36.3077|Info|      Executando timer: id:99, (11:30:36.3077)
2015-08-26 11:30:36.3077|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:36.3077|Info|  Settimeout: id:102, (69) ms
2015-08-26 11:30:36.3751|Info|      Encerrado timer: id:99, (11:30:36.3751)
2015-08-26 11:30:36.3907|Info|      Executando timer: id:102, (11:30:36.3907)
2015-08-26 11:30:36.3907|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:36.3907|Info|      Encerrado timer: id:102, (11:30:36.3907)
2015-08-26 11:30:36.4376|Info|      Executando timer: id:100, (11:30:36.4376)
2015-08-26 11:30:36.4376|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:36.4376|Info|  Settimeout: id:103, (13) ms
2015-08-26 11:30:36.4880|Info|      Encerrado timer: id:100, (11:30:36.4880)
2015-08-26 11:30:36.4889|Info|      Executando timer: id:103, (11:30:36.4889)
2015-08-26 11:30:36.4889|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:36.4889|Info|  Settimeout: id:104, (32) ms
2015-08-26 11:30:36.5576|Info|  Settimeout: id:105, (96) ms
2015-08-26 11:30:36.6201|Info|      Encerrado timer: id:103, (11:30:36.6201)
2015-08-26 11:30:36.6201|Info|      Executando timer: id:104, (11:30:36.6201)
2015-08-26 11:30:36.6303|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:36.6303|Info|      Encerrado timer: id:104, (11:30:36.6313)
2015-08-26 11:30:36.6564|Info|      Executando timer: id:105, (11:30:36.6564)
2015-08-26 11:30:36.6564|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:36.6564|Info|  Settimeout: id:106, (13) ms
2015-08-26 11:30:36.7094|Info|      Encerrado timer: id:105, (11:30:36.7094)
2015-08-26 11:30:36.7094|Info|      Executando timer: id:106, (11:30:36.7094)
2015-08-26 11:30:36.7094|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:36.7094|Info|  Settimeout: id:107, (100) ms
2015-08-26 11:30:36.7614|Info|  Settimeout: id:108, (50) ms
2015-08-26 11:30:36.8118|Info|  Settimeout: id:109, (60) ms
2015-08-26 11:30:36.8743|Info|  Settimeout: id:110, (200) ms
2015-08-26 11:30:36.9369|Info|  Settimeout: id:111, (250) ms
2015-08-26 11:30:36.9949|Info|  Settimeout: id:112, (350) ms
2015-08-26 11:30:37.0575|Info|      Encerrado timer: id:106, (11:30:37.0575)
2015-08-26 11:30:37.0575|Info|      Executando timer: id:108, (11:30:37.0575)
2015-08-26 11:30:37.0575|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:37.0575|Info|      Encerrado timer: id:108, (11:30:37.0575)
2015-08-26 11:30:37.0575|Info|      Executando timer: id:109, (11:30:37.0575)
2015-08-26 11:30:37.0575|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:37.0730|Info|  Settimeout: id:113, (84) ms
2015-08-26 11:30:37.1238|Info|      Encerrado timer: id:109, (11:30:37.1238)
2015-08-26 11:30:37.1238|Info|      Executando timer: id:110, (11:30:37.1238)
2015-08-26 11:30:37.1238|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:37.1238|Info|      Encerrado timer: id:110, (11:30:37.1258)
2015-08-26 11:30:37.1759|Info|      Executando timer: id:113, (11:30:37.1759)
2015-08-26 11:30:37.1759|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:37.1759|Info|      Encerrado timer: id:113, (11:30:37.1759)
2015-08-26 11:30:37.1915|Info|      Executando timer: id:111, (11:30:37.1915)
2015-08-26 11:30:37.1915|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:37.1915|Info|      Encerrado timer: id:111, (11:30:37.1915)
2015-08-26 11:30:37.3552|Info|      Executando timer: id:112, (11:30:37.3552)
2015-08-26 11:30:37.3552|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:37.3552|Info|  Settimeout: id:114, (13) ms
2015-08-26 11:30:37.4053|Info|      Encerrado timer: id:112, (11:30:37.4053)
2015-08-26 11:30:37.4053|Info|      Executando timer: id:114, (11:30:37.4073)
2015-08-26 11:30:37.4053|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:37.4113|Info|  Settimeout: id:115, (32) ms
2015-08-26 11:30:37.4757|Info|  Settimeout: id:116, (100) ms
2015-08-26 11:30:37.5382|Info|      Encerrado timer: id:114, (11:30:37.5382)
2015-08-26 11:30:37.5382|Info|      Executando timer: id:115, (11:30:37.5382)
2015-08-26 11:30:37.5382|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:37.5382|Info|  Settimeout: id:117, (32) ms
2015-08-26 11:30:37.5948|Info|      Encerrado timer: id:115, (11:30:37.5948)
2015-08-26 11:30:37.5948|Info|      Executando timer: id:117, (11:30:37.5948)
2015-08-26 11:30:37.5948|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:37.5948|Info|      Encerrado timer: id:117, (11:30:37.5948)
2015-08-26 11:30:37.5948|Info|      Executando timer: id:116, (11:30:37.5948)
2015-08-26 11:30:37.5948|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:37.5948|Info|  Settimeout: id:118, (13) ms
2015-08-26 11:30:37.6573|Info|      Encerrado timer: id:116, (11:30:37.6573)
2015-08-26 11:30:37.6573|Info|      Executando timer: id:118, (11:30:37.6573)
2015-08-26 11:30:37.6573|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:37.6573|Info| PASS - throttle re-entrant
2015-08-26 11:30:37.6573|Info|  Settimeout: id:119, (64) ms
2015-08-26 11:30:37.7093|Info|  Settimeout: id:120, (16) ms
2015-08-26 11:30:37.7619|Info|  Settimeout: id:121, (32) ms
2015-08-26 11:30:37.8265|Info|  Settimeout: id:122, (48) ms
2015-08-26 11:30:37.8770|Info|  Settimeout: id:123, (128) ms
2015-08-26 11:30:37.9406|Info|      Encerrado timer: id:118, (11:30:37.9406)
2015-08-26 11:30:37.9406|Info|      Executando timer: id:120, (11:30:37.9406)
2015-08-26 11:30:37.9406|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:37.9406|Info|      Encerrado timer: id:120, (11:30:37.9406)
2015-08-26 11:30:37.9406|Info|      Executando timer: id:119, (11:30:37.9406)
2015-08-26 11:30:37.9406|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:37.9406|Info|  Settimeout: id:124, (64) ms
2015-08-26 11:30:38.0031|Info|      Encerrado timer: id:119, (11:30:38.0031)
2015-08-26 11:30:38.0031|Info|      Executando timer: id:121, (11:30:38.0031)
2015-08-26 11:30:38.0031|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.0031|Info|      Encerrado timer: id:121, (11:30:38.0031)
2015-08-26 11:30:38.0031|Info|      Executando timer: id:122, (11:30:38.0031)
2015-08-26 11:30:38.0031|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.0031|Info|      Encerrado timer: id:122, (11:30:38.0031)
2015-08-26 11:30:38.0188|Info|      Executando timer: id:123, (11:30:38.0188)
2015-08-26 11:30:38.0188|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.0247|Info|  Settimeout: id:125, (13) ms
2015-08-26 11:30:38.0927|Info|      Encerrado timer: id:123, (11:30:38.0927)
2015-08-26 11:30:38.0927|Info|      Executando timer: id:124, (11:30:38.0927)
2015-08-26 11:30:38.0927|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:30:38.0927|Info|      Encerrado timer: id:124, (11:30:38.0927)
2015-08-26 11:30:38.0927|Info|      Executando timer: id:125, (11:30:38.0927)
2015-08-26 11:30:38.0927|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:38.0927|Info| PASS - debounce asap
2015-08-26 11:30:38.0927|Info|  Settimeout: id:126, (100) ms
2015-08-26 11:30:38.1551|Info|  Settimeout: id:127, (50) ms
2015-08-26 11:30:38.2101|Info|  Settimeout: id:128, (150) ms
2015-08-26 11:30:38.2624|Info|      Encerrado timer: id:125, (11:30:38.2624)
2015-08-26 11:30:38.2624|Info|      Executando timer: id:127, (11:30:38.2644)
2015-08-26 11:30:38.2624|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:30:38.2624|Info|      Encerrado timer: id:127, (11:30:38.2694)
2015-08-26 11:30:38.2714|Info|      Executando timer: id:126, (11:30:38.2714)
2015-08-26 11:30:38.2714|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.2714|Info|      Encerrado timer: id:126, (11:30:38.2744)
2015-08-26 11:30:38.3771|Info|      Executando timer: id:128, (11:30:38.3771)
2015-08-26 11:30:38.3771|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:30:38.3771|Info|  Settimeout: id:129, (13) ms
2015-08-26 11:30:38.4396|Info|      Encerrado timer: id:128, (11:30:38.4396)
2015-08-26 11:30:38.4396|Info|      Executando timer: id:129, (11:30:38.4396)
2015-08-26 11:30:38.4396|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:38.4396|Info| PASS - delay
2015-08-26 11:30:38.4396|Info|  Settimeout: id:130, (100) ms
2015-08-26 11:30:38.4901|Info|  Settimeout: id:131, (50) ms
2015-08-26 11:30:38.5432|Info|  Settimeout: id:132, (150) ms
2015-08-26 11:30:38.6057|Info|  Settimeout: id:133, (160) ms
2015-08-26 11:30:38.6565|Info|  Settimeout: id:134, (230) ms
2015-08-26 11:30:38.7105|Info|  Settimeout: id:135, (300) ms
2015-08-26 11:30:38.7620|Info|      Encerrado timer: id:129, (11:30:38.7620)
2015-08-26 11:30:38.7620|Info|      Executando timer: id:131, (11:30:38.7640)
2015-08-26 11:30:38.7620|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.7700|Info|      Encerrado timer: id:131, (11:30:38.7700)
2015-08-26 11:30:38.7700|Info|      Executando timer: id:132, (11:30:38.7720)
2015-08-26 11:30:38.7700|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.7700|Info|  Settimeout: id:136, (93) ms
2015-08-26 11:30:38.8285|Info|      Encerrado timer: id:132, (11:30:38.8285)
2015-08-26 11:30:38.9222|Info|      Executando timer: id:133, (11:30:38.9222)
2015-08-26 11:30:38.9222|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.9222|Info|      Encerrado timer: id:133, (11:30:38.9222)
2015-08-26 11:30:38.9222|Info|      Executando timer: id:134, (11:30:38.9222)
2015-08-26 11:30:38.9222|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:38.9222|Info|  Settimeout: id:137, (100) ms
2015-08-26 11:30:38.9727|Info|      Encerrado timer: id:134, (11:30:38.9727)
2015-08-26 11:30:39.0262|Info|      Executando timer: id:135, (11:30:39.0262)
2015-08-26 11:30:39.0262|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:39.0262|Info|  Settimeout: id:138, (13) ms
2015-08-26 11:30:39.0887|Info|      Encerrado timer: id:135, (11:30:39.0887)
2015-08-26 11:30:39.0887|Info|      Executando timer: id:137, (11:30:39.0887)
2015-08-26 11:30:39.0887|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:39.0887|Info|      Encerrado timer: id:137, (11:30:39.0887)
2015-08-26 11:30:39.0887|Info|      Executando timer: id:138, (11:30:39.0887)
2015-08-26 11:30:39.0887|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:39.0887|Info|  Settimeout: id:139, (32) ms
2015-08-26 11:30:39.1403|Info|  Settimeout: id:140, (96) ms
2015-08-26 11:30:39.2039|Info|      Encerrado timer: id:138, (11:30:39.2039)
2015-08-26 11:30:39.2039|Info|      Executando timer: id:139, (11:30:39.2039)
2015-08-26 11:30:39.2039|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:39.2039|Info|      Encerrado timer: id:139, (11:30:39.2039)
2015-08-26 11:30:39.2507|Info|      Executando timer: id:140, (11:30:39.2507)
2015-08-26 11:30:39.2507|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:39.2507|Info|  Settimeout: id:141, (13) ms
2015-08-26 11:30:39.3012|Info|      Encerrado timer: id:140, (11:30:39.3012)
2015-08-26 11:30:39.3012|Info|      Executando timer: id:141, (11:30:39.3022)
2015-08-26 11:30:39.3012|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:39.3012|Info|  Settimeout: id:142, (100) ms
2015-08-26 11:30:39.3596|Info|  Settimeout: id:143, (50) ms
2015-08-26 11:30:39.4102|Info|  Settimeout: id:144, (60) ms
2015-08-26 11:30:39.4785|Info|  Settimeout: id:145, (200) ms
2015-08-26 11:30:39.5410|Info|  Settimeout: id:146, (250) ms
2015-08-26 11:30:39.5916|Info|  Settimeout: id:147, (350) ms
2015-08-26 11:30:39.6597|Info|      Encerrado timer: id:141, (11:30:39.6597)
2015-08-26 11:30:39.6597|Info|      Executando timer: id:142, (11:30:39.6597)
2015-08-26 11:30:39.6597|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:39.6597|Info|      Encerrado timer: id:142, (11:30:39.6597)
2015-08-26 11:30:39.6597|Info|      Executando timer: id:143, (11:30:39.6597)
2015-08-26 11:30:39.6597|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:39.6597|Info|  Settimeout: id:148, (100) ms
2015-08-26 11:30:39.7378|Info|      Encerrado timer: id:143, (11:30:39.7378)
2015-08-26 11:30:39.7378|Info|      Executando timer: id:144, (11:30:39.7378)
2015-08-26 11:30:39.7378|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:39.7378|Info|      Encerrado timer: id:144, (11:30:39.7378)
2015-08-26 11:30:39.7378|Info|      Executando timer: id:145, (11:30:39.7378)
2015-08-26 11:30:39.7378|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:39.7378|Info|      Encerrado timer: id:145, (11:30:39.7378)
2015-08-26 11:30:39.7767|Info|      Executando timer: id:148, (11:30:39.7767)
2015-08-26 11:30:39.7767|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:39.7767|Info|      Encerrado timer: id:148, (11:30:39.7827)
2015-08-26 11:30:39.7947|Info|      Executando timer: id:146, (11:30:39.7947)
2015-08-26 11:30:39.7947|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:39.7947|Info|      Encerrado timer: id:146, (11:30:39.7958)
2015-08-26 11:30:39.9455|Info|      Executando timer: id:147, (11:30:39.9455)
2015-08-26 11:30:39.9455|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:39.9455|Info|  Settimeout: id:149, (13) ms
2015-08-26 11:30:40.0085|Info|      Encerrado timer: id:147, (11:30:40.0085)
2015-08-26 11:30:40.0085|Info|      Executando timer: id:149, (11:30:40.0085)
2015-08-26 11:30:40.0085|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:40.0085|Info|  Settimeout: id:150, (100) ms
2015-08-26 11:30:40.0710|Info|  Settimeout: id:151, (50) ms
2015-08-26 11:30:40.1279|Info|  Settimeout: id:152, (150) ms
2015-08-26 11:30:40.1904|Info|  Settimeout: id:153, (160) ms
2015-08-26 11:30:40.2412|Info|  Settimeout: id:154, (230) ms
2015-08-26 11:30:40.2926|Info|  Settimeout: id:155, (300) ms
2015-08-26 11:30:40.3600|Info|      Encerrado timer: id:149, (11:30:40.3600)
2015-08-26 11:30:40.3600|Info|      Executando timer: id:150, (11:30:40.3600)
2015-08-26 11:30:40.3600|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:40.3600|Info|      Encerrado timer: id:150, (11:30:40.3600)
2015-08-26 11:30:40.3600|Info|      Executando timer: id:151, (11:30:40.3600)
2015-08-26 11:30:40.3600|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:40.3600|Info|  Settimeout: id:156, (100) ms
2015-08-26 11:30:40.4271|Info|      Encerrado timer: id:151, (11:30:40.4271)
2015-08-26 11:30:40.4271|Info|      Executando timer: id:152, (11:30:40.4271)
2015-08-26 11:30:40.4271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:40.4271|Info|      Encerrado timer: id:152, (11:30:40.4271)
2015-08-26 11:30:40.4271|Info|      Executando timer: id:153, (11:30:40.4271)
2015-08-26 11:30:40.4271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:40.4271|Info|      Encerrado timer: id:153, (11:30:40.4271)
2015-08-26 11:30:40.4740|Info|      Executando timer: id:154, (11:30:40.4740)
2015-08-26 11:30:40.4740|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:40.4740|Info|      Encerrado timer: id:154, (11:30:40.4740)
2015-08-26 11:30:40.6099|Info|      Executando timer: id:155, (11:30:40.6099)
2015-08-26 11:30:40.6099|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:40.6099|Info|  Settimeout: id:157, (13) ms
2015-08-26 11:30:40.6724|Info|      Encerrado timer: id:155, (11:30:40.6724)
2015-08-26 11:30:40.6724|Info|      Executando timer: id:157, (11:30:40.6724)
2015-08-26 11:30:40.6724|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:40.6724|Info| FAIL - throttle repeatedly with results
2015-08-26 11:30:40.6724|Info|    PASS | EQ | ok
2015-08-26 11:30:40.6724|Info|    PASS | EQ | ok
2015-08-26 11:30:40.6724|Info|    PASS | EQ | ok
2015-08-26 11:30:40.6724|Info|    PASS | EQ | ok
2015-08-26 11:30:40.6724|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:30:40.6724|Info|    PASS | EQ | ok
2015-08-26 11:30:40.6724|Info|    PASS | EQ | ok
2015-08-26 11:30:40.6724|Info|    PASS | EQ | incr was called immediately
2015-08-26 11:30:40.6724|Info|    PASS | EQ | incr was debounced
2015-08-26 11:30:40.6724|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:30:40.6724|Info|    PASS | EQ | delayed the function
2015-08-26 11:30:40.6879|Info|    PASS | EQ | incr was called once
2015-08-26 11:30:40.6879|Info|    PASS | EQ | incr was throttled
2015-08-26 11:30:40.6879|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:30:40.6879|Info|    PASS | EQ | incr was called twice
2015-08-26 11:30:40.6879|Info|    PASS | EQ | incr was throttled
2015-08-26 11:30:40.6925|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:30:40.6925|Info|  Settimeout: id:158, (32) ms
2015-08-26 11:30:40.7452|Info|  Settimeout: id:159, (96) ms
2015-08-26 11:30:40.7960|Info|      Encerrado timer: id:157, (11:30:40.7960)
2015-08-26 11:30:40.7960|Info|      Executando timer: id:158, (11:30:40.8000)
2015-08-26 11:30:40.8030|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:40.8030|Info|      Encerrado timer: id:158, (11:30:40.8050)
2015-08-26 11:30:40.8445|Info|      Executando timer: id:159, (11:30:40.8445)
2015-08-26 11:30:40.8445|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:40.8508|Info|  Settimeout: id:160, (13) ms
2015-08-26 11:30:40.9092|Info|      Encerrado timer: id:159, (11:30:40.9092)
2015-08-26 11:30:40.9092|Info|      Executando timer: id:160, (11:30:40.9092)
2015-08-26 11:30:40.9092|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:40.9248|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-26 11:30:40.9248|Info|    PASS | EQ | ok
2015-08-26 11:30:40.9248|Info|    PASS | EQ | ok
2015-08-26 11:30:40.9248|Info|    PASS | EQ | ok
2015-08-26 11:30:40.9248|Info|    PASS | EQ | ok
2015-08-26 11:30:40.9248|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:30:40.9248|Info|    PASS | EQ | ok
2015-08-26 11:30:40.9248|Info|    PASS | EQ | ok
2015-08-26 11:30:40.9248|Info|    PASS | EQ | incr was called immediately
2015-08-26 11:30:40.9248|Info|    PASS | EQ | incr was debounced
2015-08-26 11:30:40.9248|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:30:40.9248|Info|    PASS | EQ | delayed the function
2015-08-26 11:30:40.9248|Info|    PASS | EQ | incr was called once
2015-08-26 11:30:40.9405|Info|    PASS | EQ | incr was throttled
2015-08-26 11:30:40.9405|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:30:40.9405|Info|    PASS | EQ | incr was called twice
2015-08-26 11:30:40.9405|Info|    PASS | EQ | incr was throttled
2015-08-26 11:30:40.9405|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:30:40.9405|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:30:40.9405|Info|    PASS | EQ | okay
2015-08-26 11:30:40.9405|Info|  Settimeout: id:161, (100) ms
2015-08-26 11:30:41.0030|Info|  Settimeout: id:162, (50) ms
2015-08-26 11:30:41.0606|Info|  Settimeout: id:163, (60) ms
2015-08-26 11:30:41.1231|Info|  Settimeout: id:164, (200) ms
2015-08-26 11:30:41.1739|Info|  Settimeout: id:165, (250) ms
2015-08-26 11:30:41.2273|Info|  Settimeout: id:166, (350) ms
2015-08-26 11:30:41.2898|Info|      Encerrado timer: id:160, (11:30:41.2898)
2015-08-26 11:30:41.2898|Info|      Executando timer: id:161, (11:30:41.2898)
2015-08-26 11:30:41.2898|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:41.2898|Info|      Encerrado timer: id:161, (11:30:41.2898)
2015-08-26 11:30:41.2898|Info|      Executando timer: id:162, (11:30:41.2898)
2015-08-26 11:30:41.2898|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:41.2898|Info|  Settimeout: id:167, (100) ms
2015-08-26 11:30:41.3443|Info|      Encerrado timer: id:162, (11:30:41.3443)
2015-08-26 11:30:41.3443|Info|      Executando timer: id:163, (11:30:41.3443)
2015-08-26 11:30:41.3443|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:41.3443|Info|      Encerrado timer: id:163, (11:30:41.3443)
2015-08-26 11:30:41.3443|Info|      Executando timer: id:164, (11:30:41.3443)
2015-08-26 11:30:41.3443|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:41.3443|Info|      Encerrado timer: id:164, (11:30:41.3443)
2015-08-26 11:30:41.4068|Info|      Executando timer: id:167, (11:30:41.4068)
2015-08-26 11:30:41.4068|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:30:41.4068|Info|      Encerrado timer: id:167, (11:30:41.4068)
2015-08-26 11:30:41.4381|Info|      Executando timer: id:165, (11:30:41.4381)
2015-08-26 11:30:41.4381|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:41.4381|Info|      Encerrado timer: id:165, (11:30:41.4381)
2015-08-26 11:30:41.5888|Info|      Executando timer: id:166, (11:30:41.5888)
2015-08-26 11:30:41.5888|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:30:41.5888|Info|  Settimeout: id:168, (13) ms
2015-08-26 11:30:41.6398|Info|      Encerrado timer: id:166, (11:30:41.6398)
2015-08-26 11:30:41.6398|Info|      Executando timer: id:168, (11:30:41.6408)
2015-08-26 11:30:41.6398|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:30:41.6398|Info| FAIL - more throttle does not trigger leading call when leading is set to false
2015-08-26 11:30:41.6398|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6458|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6458|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6458|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6458|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:30:41.6458|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6458|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6458|Info|    PASS | EQ | incr was called immediately
2015-08-26 11:30:41.6458|Info|    PASS | EQ | incr was debounced
2015-08-26 11:30:41.6458|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:30:41.6458|Info|    PASS | EQ | delayed the function
2015-08-26 11:30:41.6608|Info|    PASS | EQ | incr was called once
2015-08-26 11:30:41.6608|Info|    PASS | EQ | incr was throttled
2015-08-26 11:30:41.6608|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:30:41.6608|Info|    PASS | EQ | incr was called twice
2015-08-26 11:30:41.6608|Info|    PASS | EQ | incr was throttled
2015-08-26 11:30:41.6608|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:30:41.6608|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:30:41.6608|Info|    PASS | EQ | okay
2015-08-26 11:30:41.6608|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6608|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 11:30:41.6608|Info|    PASS | EQ | ok
2015-08-26 11:30:41.6608|Info|----------------------------------------
2015-08-26 11:30:41.6608|Info|    PASS: 1370  FAIL: 4  TOTAL: 1374
2015-08-26 11:30:41.6608|Info|    Finished in 14157 milliseconds.
2015-08-26 11:30:41.6608|Info|----------------------------------------
2015-08-26 11:30:41.6608|Info|      Encerrado timer: id:168, (11:30:41.6628)
2015-08-26 11:30:41.6784|Info|Encerrando os testes
2015-08-26 11:30:41.6784|Info|Total:1374, Sucesso: 1370, Falha: 4
2015-08-26 11:30:41.6784|Info|14 segundos para avaliar o individuo underscore.js
2015-08-26 11:30:41.6784|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime [3]:Qunit:1906:13
    at Array.<anonymous> (V8Runtime [3]:underscoreTests:1812:32)
    at Script Document [17]:1:23
2015-08-26 11:30:41.6784|Info|FAILED: Functions: more throttling: expected: 3, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1871:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [59]:1:24
2015-08-26 11:30:41.6784|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [79]:1:24
2015-08-26 11:30:41.6784|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:30:41.6784|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [105]:1:24
2015-08-26 11:30:41.6784|Info|FAILED: Functions: throttle re-entrant: append was throttled successfully, expected: a1a2c1c2b1b2, actual: a1a2c1c2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2026:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [129]:1:24
2015-08-26 11:30:41.6784|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [153]:1:24
2015-08-26 11:30:41.6784|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at V8Runtime [3]:underscoreTests:2898:5
    at V8Runtime [3]:underscoreTests:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:2900:65)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
    at Array.<anonymous> (V8Runtime [3]:Qunit:643:4)
    at Script Document [179]:1:24
2015-08-26 11:30:41.6784|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime [3]:Qunit:1906:13
    at Array.<anonymous> (V8Runtime [3]:underscoreTests:1812:32)
    at Script Document [183]:1:24
2015-08-26 11:30:41.6784|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [209]:1:25
2015-08-26 11:30:41.6784|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:30:41.6784|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [227]:1:25
2015-08-26 11:30:41.6943|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [271]:1:25
2015-08-26 11:30:41.6943|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 2, actual: 3,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1892:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [271]:1:25
2015-08-26 11:30:41.6943|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:30:41.6943|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [293]:1:25
2015-08-26 11:30:41.6943|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [309]:1:25
2015-08-26 11:30:41.6943|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:30:41.6943|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [329]:1:25
2015-08-26 11:30:46.3883|Info|Iniciando os testes
2015-08-26 11:30:48.7917|Info|Encerrando os testes
2015-08-26 11:30:48.7917|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:30:48.7917|Info|2 segundos para avaliar o individuo global.js
2015-08-26 11:35:33.2822|Info|  Settimeout: id:0, (500) ms
2015-08-26 11:35:33.3883|Info|Iniciando os testes
2015-08-26 11:35:33.3883|Info|  Settimeout: id:1, (13) ms
2015-08-26 11:35:33.4073|Info|      Executando timer: id:1, (11:35:33.4073)
2015-08-26 11:35:33.4603|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:33.4734|Info|----------------------------------------
2015-08-26 11:35:33.4734|Info|Arrays
2015-08-26 11:35:33.4734|Info|----------------------------------------
2015-08-26 11:35:33.4734|Info| PASS - first
2015-08-26 11:35:33.4734|Info| PASS - head
2015-08-26 11:35:33.4734|Info| PASS - take
2015-08-26 11:35:33.4734|Info| PASS - rest
2015-08-26 11:35:33.4734|Info| PASS - tail
2015-08-26 11:35:33.4734|Info| PASS - drop
2015-08-26 11:35:33.4734|Info| PASS - initial
2015-08-26 11:35:33.4734|Info| PASS - last
2015-08-26 11:35:33.4734|Info| PASS - compact
2015-08-26 11:35:34.0287|Info| PASS - flatten
2015-08-26 11:35:34.0287|Info| PASS - without
2015-08-26 11:35:34.0287|Info| PASS - sortedIndex
2015-08-26 11:35:34.0287|Info| PASS - uniq
2015-08-26 11:35:34.0287|Info| PASS - unique
2015-08-26 11:35:34.0357|Info| PASS - intersection
2015-08-26 11:35:34.0357|Info| PASS - union
2015-08-26 11:35:34.0357|Info| PASS - difference
2015-08-26 11:35:34.0357|Info| PASS - zip
2015-08-26 11:35:34.0357|Info| PASS - unzip
2015-08-26 11:35:34.0357|Info| PASS - object
2015-08-26 11:35:34.0357|Info| PASS - indexOf
2015-08-26 11:35:34.0357|Info| PASS - indexOf with NaN
2015-08-26 11:35:34.0357|Info| PASS - indexOf with +- 0
2015-08-26 11:35:34.0357|Info| PASS - lastIndexOf
2015-08-26 11:35:34.0357|Info| PASS - lastIndexOf with NaN
2015-08-26 11:35:34.0357|Info| PASS - lastIndexOf with +- 0
2015-08-26 11:35:34.0357|Info| PASS - findIndex
2015-08-26 11:35:34.0357|Info| PASS - findLastIndex
2015-08-26 11:35:34.0518|Info| PASS - range
2015-08-26 11:35:34.0518|Info|----------------------------------------
2015-08-26 11:35:34.0518|Info|Chaining
2015-08-26 11:35:34.0518|Info|----------------------------------------
2015-08-26 11:35:34.0518|Info| PASS - map/flatten/reduce
2015-08-26 11:35:34.0518|Info| PASS - select/reject/sortBy
2015-08-26 11:35:34.0518|Info| PASS - select/reject/sortBy in functional style
2015-08-26 11:35:34.0518|Info| PASS - reverse/concat/unshift/pop/map
2015-08-26 11:35:34.0518|Info| PASS - splice
2015-08-26 11:35:34.0518|Info| PASS - shift
2015-08-26 11:35:34.0518|Info| PASS - pop
2015-08-26 11:35:34.0518|Info| PASS - chaining works in small stages
2015-08-26 11:35:34.0518|Info| PASS - #1562: Engine proxies for chained functions
2015-08-26 11:35:34.0518|Info|----------------------------------------
2015-08-26 11:35:34.0518|Info|Collections
2015-08-26 11:35:34.0518|Info|----------------------------------------
2015-08-26 11:35:34.0668|Info| PASS - each
2015-08-26 11:35:34.0668|Info| PASS - forEach
2015-08-26 11:35:34.0668|Info| PASS - lookupIterator with contexts
2015-08-26 11:35:34.0668|Info| PASS - Iterating objects with sketchy length properties
2015-08-26 11:35:34.0668|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-26 11:35:34.0668|Info| PASS - map
2015-08-26 11:35:34.0668|Info| PASS - collect
2015-08-26 11:35:34.0668|Info| PASS - reduce
2015-08-26 11:35:34.0668|Info| PASS - foldl
2015-08-26 11:35:34.0828|Info| PASS - reduceRight
2015-08-26 11:35:34.0828|Info| PASS - foldr
2015-08-26 11:35:34.0828|Info| PASS - find
2015-08-26 11:35:34.0828|Info| PASS - detect
2015-08-26 11:35:34.0828|Info| PASS - filter
2015-08-26 11:35:34.0828|Info| PASS - select
2015-08-26 11:35:34.0828|Info| PASS - reject
2015-08-26 11:35:34.0828|Info| PASS - every
2015-08-26 11:35:34.0828|Info| PASS - all
2015-08-26 11:35:34.0828|Info| PASS - some
2015-08-26 11:35:34.0828|Info| PASS - any
2015-08-26 11:35:34.0828|Info| PASS - includes
2015-08-26 11:35:34.1048|Info| PASS - include
2015-08-26 11:35:34.1048|Info| PASS - contains
2015-08-26 11:35:34.1048|Info| PASS - includes with NaN
2015-08-26 11:35:34.1048|Info| PASS - includes with +- 0
2015-08-26 11:35:34.1048|Info| PASS - invoke
2015-08-26 11:35:34.1048|Info| PASS - invoke w/ function reference
2015-08-26 11:35:34.1048|Info| PASS - invoke when strings have a call method
2015-08-26 11:35:34.1048|Info| PASS - pluck
2015-08-26 11:35:34.1138|Info| PASS - where
2015-08-26 11:35:34.1138|Info| PASS - findWhere
2015-08-26 11:35:34.1458|Info| PASS - max
2015-08-26 11:35:34.1748|Info| PASS - min
2015-08-26 11:35:34.1769|Info| PASS - sortBy
2015-08-26 11:35:34.1769|Info| PASS - groupBy
2015-08-26 11:35:34.1769|Info| PASS - indexBy
2015-08-26 11:35:34.1769|Info| PASS - countBy
2015-08-26 11:35:34.1769|Info| PASS - shuffle
2015-08-26 11:35:34.1769|Info| PASS - sample
2015-08-26 11:35:34.1769|Info| PASS - toArray
2015-08-26 11:35:34.1769|Info| PASS - size
2015-08-26 11:35:34.1769|Info| PASS - partition
2015-08-26 11:35:34.1769|Info|----------------------------------------
2015-08-26 11:35:34.1769|Info|Functions
2015-08-26 11:35:34.1769|Info|----------------------------------------
2015-08-26 11:35:34.1769|Info| PASS - bind
2015-08-26 11:35:34.1919|Info| PASS - partial
2015-08-26 11:35:34.1919|Info| PASS - bindAll
2015-08-26 11:35:34.1919|Info| PASS - memoize
2015-08-26 11:35:34.1919|Info|  Settimeout: id:2, (100) ms
2015-08-26 11:35:34.2470|Info|  Settimeout: id:3, (50) ms
2015-08-26 11:35:34.2989|Info|  Settimeout: id:4, (150) ms
2015-08-26 11:35:34.3500|Info|      Encerrado timer: id:1, (11:35:34.3500)
2015-08-26 11:35:34.3500|Info|      Executando timer: id:0, (11:35:34.3530)
2015-08-26 11:35:34.3500|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 11:35:34.3500|Info|  Settimeout: id:5, (500) ms
2015-08-26 11:35:34.4061|Info|      Encerrado timer: id:0, (11:35:34.4061)
2015-08-26 11:35:34.4061|Info|      Executando timer: id:2, (11:35:34.4061)
2015-08-26 11:35:34.4061|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:34.4061|Info|      Encerrado timer: id:2, (11:35:34.4080)
2015-08-26 11:35:34.4061|Info|      Executando timer: id:3, (11:35:34.4080)
2015-08-26 11:35:34.4061|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:35:34.4110|Info|      Encerrado timer: id:3, (11:35:34.4110)
2015-08-26 11:35:34.4511|Info|      Executando timer: id:4, (11:35:34.4511)
2015-08-26 11:35:34.4511|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:35:34.4511|Info|  Settimeout: id:6, (13) ms
2015-08-26 11:35:34.5031|Info|      Encerrado timer: id:4, (11:35:34.5031)
2015-08-26 11:35:34.5051|Info|      Executando timer: id:6, (11:35:34.5051)
2015-08-26 11:35:34.5051|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:34.5051|Info|  Settimeout: id:7, (1) ms
2015-08-26 11:35:34.5642|Info|  Settimeout: id:8, (50) ms
2015-08-26 11:35:34.6152|Info|      Encerrado timer: id:6, (11:35:34.6152)
2015-08-26 11:35:34.6152|Info|      Executando timer: id:7, (11:35:34.6162)
2015-08-26 11:35:34.6152|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:34.6152|Info|      Encerrado timer: id:7, (11:35:34.6192)
2015-08-26 11:35:34.6152|Info|      Executando timer: id:8, (11:35:34.6212)
2015-08-26 11:35:34.6152|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:34.6152|Info|  Settimeout: id:9, (13) ms
2015-08-26 11:35:34.6753|Info|      Encerrado timer: id:8, (11:35:34.6753)
2015-08-26 11:35:34.6762|Info|      Executando timer: id:9, (11:35:34.6762)
2015-08-26 11:35:34.6762|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:34.6762|Info| PASS - defer
2015-08-26 11:35:34.6762|Info|  Settimeout: id:10, (32) ms
2015-08-26 11:35:34.7323|Info|  Settimeout: id:11, (64) ms
2015-08-26 11:35:34.7843|Info|      Encerrado timer: id:9, (11:35:34.7843)
2015-08-26 11:35:34.7843|Info|      Executando timer: id:10, (11:35:34.7853)
2015-08-26 11:35:34.7863|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:34.7863|Info|      Encerrado timer: id:10, (11:35:34.7883)
2015-08-26 11:35:34.7863|Info|      Executando timer: id:11, (11:35:34.7984)
2015-08-26 11:35:34.7863|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:34.8013|Info|  Settimeout: id:12, (13) ms
2015-08-26 11:35:34.8523|Info|      Encerrado timer: id:11, (11:35:34.8523)
2015-08-26 11:35:34.8523|Info|      Executando timer: id:12, (11:35:34.8543)
2015-08-26 11:35:34.8523|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:34.8523|Info| PASS - throttle
2015-08-26 11:35:34.8523|Info|  Settimeout: id:13, (32) ms
2015-08-26 11:35:34.9104|Info|  Settimeout: id:14, (64) ms
2015-08-26 11:35:34.9614|Info|  Settimeout: id:15, (96) ms
2015-08-26 11:35:35.0125|Info|      Encerrado timer: id:12, (11:35:35.0125)
2015-08-26 11:35:35.0125|Info|      Executando timer: id:5, (11:35:35.0134)
2015-08-26 11:35:35.0125|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 11:35:35.0125|Info|      Encerrado timer: id:5, (11:35:35.0155)
2015-08-26 11:35:35.0125|Info|      Executando timer: id:13, (11:35:35.0165)
2015-08-26 11:35:35.0125|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:35.0125|Info|      Encerrado timer: id:13, (11:35:35.0195)
2015-08-26 11:35:35.0204|Info|      Executando timer: id:14, (11:35:35.0204)
2015-08-26 11:35:35.0204|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:35.0204|Info|  Settimeout: id:16, (28) ms
2015-08-26 11:35:35.0765|Info|      Encerrado timer: id:14, (11:35:35.0765)
2015-08-26 11:35:35.0765|Info|      Executando timer: id:16, (11:35:35.0775)
2015-08-26 11:35:35.0765|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:35.0765|Info|      Encerrado timer: id:16, (11:35:35.0795)
2015-08-26 11:35:35.0765|Info|      Executando timer: id:15, (11:35:35.0805)
2015-08-26 11:35:35.0825|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:35.0825|Info|  Settimeout: id:17, (13) ms
2015-08-26 11:35:35.1346|Info|      Encerrado timer: id:15, (11:35:35.1346)
2015-08-26 11:35:35.1346|Info|      Executando timer: id:17, (11:35:35.1355)
2015-08-26 11:35:35.1346|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:35.1346|Info| PASS - throttle arguments
2015-08-26 11:35:35.1346|Info|  Settimeout: id:18, (64) ms
2015-08-26 11:35:35.1906|Info|      Encerrado timer: id:17, (11:35:35.1906)
2015-08-26 11:35:35.2056|Info|      Executando timer: id:18, (11:35:35.2056)
2015-08-26 11:35:35.2056|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:35.2086|Info|  Settimeout: id:19, (13) ms
2015-08-26 11:35:35.2606|Info|      Encerrado timer: id:18, (11:35:35.2606)
2015-08-26 11:35:35.2606|Info|      Executando timer: id:19, (11:35:35.2616)
2015-08-26 11:35:35.2606|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:35.2606|Info| PASS - throttle once
2015-08-26 11:35:35.2606|Info|  Settimeout: id:20, (32) ms
2015-08-26 11:35:35.3147|Info|  Settimeout: id:21, (64) ms
2015-08-26 11:35:35.3657|Info|      Encerrado timer: id:19, (11:35:35.3657)
2015-08-26 11:35:35.3657|Info|      Executando timer: id:20, (11:35:35.3657)
2015-08-26 11:35:35.3657|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:35.3657|Info|      Encerrado timer: id:20, (11:35:35.3677)
2015-08-26 11:35:35.3808|Info|      Executando timer: id:21, (11:35:35.3808)
2015-08-26 11:35:35.3808|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:35.3808|Info|  Settimeout: id:22, (13) ms
2015-08-26 11:35:35.4338|Info|      Encerrado timer: id:21, (11:35:35.4338)
2015-08-26 11:35:35.4338|Info|      Executando timer: id:22, (11:35:35.4338)
2015-08-26 11:35:35.4338|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:35.4338|Info| PASS - throttle twice
2015-08-26 11:35:35.4338|Info|  Settimeout: id:23, (30) ms
2015-08-26 11:35:35.4878|Info|  Settimeout: id:24, (85) ms
2015-08-26 11:35:35.5389|Info|      Encerrado timer: id:22, (11:35:35.5389)
2015-08-26 11:35:35.5389|Info|      Executando timer: id:23, (11:35:35.5389)
2015-08-26 11:35:35.5389|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:35.5389|Info|      Encerrado timer: id:23, (11:35:35.5408)
2015-08-26 11:35:35.5749|Info|      Executando timer: id:24, (11:35:35.5749)
2015-08-26 11:35:35.5749|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:35.5749|Info|  Settimeout: id:25, (13) ms
2015-08-26 11:35:35.6339|Info|      Encerrado timer: id:24, (11:35:35.6339)
2015-08-26 11:35:35.6339|Info|      Executando timer: id:25, (11:35:35.6349)
2015-08-26 11:35:35.6339|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:35.6339|Info| PASS - more throttling
2015-08-26 11:35:35.6339|Info|  Settimeout: id:26, (100) ms
2015-08-26 11:35:35.6919|Info|  Settimeout: id:27, (50) ms
2015-08-26 11:35:35.7430|Info|  Settimeout: id:28, (150) ms
2015-08-26 11:35:35.7940|Info|  Settimeout: id:29, (160) ms
2015-08-26 11:35:35.8471|Info|  Settimeout: id:30, (230) ms
2015-08-26 11:35:35.8981|Info|  Settimeout: id:31, (300) ms
2015-08-26 11:35:35.9491|Info|      Encerrado timer: id:25, (11:35:35.9491)
2015-08-26 11:35:35.9491|Info|      Executando timer: id:26, (11:35:35.9511)
2015-08-26 11:35:35.9491|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:35.9491|Info|      Encerrado timer: id:26, (11:35:35.9571)
2015-08-26 11:35:35.9591|Info|      Executando timer: id:27, (11:35:35.9591)
2015-08-26 11:35:35.9591|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:35.9591|Info|  Settimeout: id:32, (93) ms
2015-08-26 11:35:36.0172|Info|      Encerrado timer: id:27, (11:35:36.0172)
2015-08-26 11:35:36.0172|Info|      Executando timer: id:28, (11:35:36.0192)
2015-08-26 11:35:36.0212|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:36.0212|Info|      Encerrado timer: id:28, (11:35:36.0232)
2015-08-26 11:35:36.0212|Info|      Executando timer: id:29, (11:35:36.0252)
2015-08-26 11:35:36.0212|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:36.0212|Info|      Encerrado timer: id:29, (11:35:36.0302)
2015-08-26 11:35:36.0612|Info|      Executando timer: id:32, (11:35:36.0612)
2015-08-26 11:35:36.0612|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:36.0682|Info|      Encerrado timer: id:32, (11:35:36.0682)
2015-08-26 11:35:36.0682|Info|      Executando timer: id:30, (11:35:36.0792)
2015-08-26 11:35:36.0832|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:36.0832|Info|  Settimeout: id:33, (83) ms
2015-08-26 11:35:36.1433|Info|      Encerrado timer: id:30, (11:35:36.1433)
2015-08-26 11:35:36.1773|Info|      Executando timer: id:33, (11:35:36.1773)
2015-08-26 11:35:36.1773|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:36.1773|Info|      Encerrado timer: id:33, (11:35:36.1803)
2015-08-26 11:35:36.2003|Info|      Executando timer: id:31, (11:35:36.2003)
2015-08-26 11:35:36.2003|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:36.2003|Info|  Settimeout: id:34, (13) ms
2015-08-26 11:35:36.2554|Info|      Encerrado timer: id:31, (11:35:36.2554)
2015-08-26 11:35:36.2554|Info|      Executando timer: id:34, (11:35:36.2563)
2015-08-26 11:35:36.2554|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:36.2554|Info|  Settimeout: id:35, (32) ms
2015-08-26 11:35:36.3114|Info|  Settimeout: id:36, (96) ms
2015-08-26 11:35:36.3624|Info|      Encerrado timer: id:34, (11:35:36.3624)
2015-08-26 11:35:36.3644|Info|      Executando timer: id:35, (11:35:36.3644)
2015-08-26 11:35:36.3644|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:36.3644|Info|      Encerrado timer: id:35, (11:35:36.3684)
2015-08-26 11:35:36.4085|Info|      Executando timer: id:36, (11:35:36.4085)
2015-08-26 11:35:36.4104|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:36.4104|Info|  Settimeout: id:37, (13) ms
2015-08-26 11:35:36.4645|Info|      Encerrado timer: id:36, (11:35:36.4645)
2015-08-26 11:35:36.4645|Info|      Executando timer: id:37, (11:35:36.4665)
2015-08-26 11:35:36.4645|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:36.4645|Info|  Settimeout: id:38, (60) ms
2015-08-26 11:35:36.5245|Info|  Settimeout: id:39, (96) ms
2015-08-26 11:35:36.5766|Info|      Encerrado timer: id:37, (11:35:36.5766)
2015-08-26 11:35:36.5766|Info|      Executando timer: id:38, (11:35:36.5776)
2015-08-26 11:35:36.5766|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:36.5766|Info|      Encerrado timer: id:38, (11:35:36.5796)
2015-08-26 11:35:36.6236|Info|      Executando timer: id:39, (11:35:36.6236)
2015-08-26 11:35:36.6236|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:36.6236|Info|  Settimeout: id:40, (13) ms
2015-08-26 11:35:36.6786|Info|      Encerrado timer: id:39, (11:35:36.6786)
2015-08-26 11:35:36.6786|Info|      Executando timer: id:40, (11:35:36.6806)
2015-08-26 11:35:36.6786|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:36.6786|Info| PASS - throttle does not trigger leading call when leading is set to false
2015-08-26 11:35:36.6786|Info|  Settimeout: id:41, (100) ms
2015-08-26 11:35:36.7407|Info|  Settimeout: id:42, (50) ms
2015-08-26 11:35:36.7927|Info|  Settimeout: id:43, (60) ms
2015-08-26 11:35:36.8437|Info|  Settimeout: id:44, (200) ms
2015-08-26 11:35:36.8948|Info|  Settimeout: id:45, (250) ms
2015-08-26 11:35:36.9458|Info|  Settimeout: id:46, (350) ms
2015-08-26 11:35:36.9989|Info|      Encerrado timer: id:40, (11:35:36.9989)
2015-08-26 11:35:36.9989|Info|      Executando timer: id:41, (11:35:36.9999)
2015-08-26 11:35:36.9989|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:36.9989|Info|      Encerrado timer: id:41, (11:35:37.0039)
2015-08-26 11:35:37.0049|Info|      Executando timer: id:42, (11:35:37.0049)
2015-08-26 11:35:37.0049|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:37.0049|Info|  Settimeout: id:47, (100) ms
2015-08-26 11:35:37.0590|Info|      Encerrado timer: id:42, (11:35:37.0590)
2015-08-26 11:35:37.0590|Info|      Executando timer: id:43, (11:35:37.0609)
2015-08-26 11:35:37.0590|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:37.0590|Info|      Encerrado timer: id:43, (11:35:37.0629)
2015-08-26 11:35:37.0590|Info|      Executando timer: id:44, (11:35:37.0639)
2015-08-26 11:35:37.0590|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:37.0669|Info|      Encerrado timer: id:44, (11:35:37.0669)
2015-08-26 11:35:37.1099|Info|      Executando timer: id:47, (11:35:37.1099)
2015-08-26 11:35:37.1099|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:37.1099|Info|      Encerrado timer: id:47, (11:35:37.1129)
2015-08-26 11:35:37.1470|Info|      Executando timer: id:45, (11:35:37.1470)
2015-08-26 11:35:37.1470|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:37.1470|Info|      Encerrado timer: id:45, (11:35:37.1500)
2015-08-26 11:35:37.3001|Info|      Executando timer: id:46, (11:35:37.3001)
2015-08-26 11:35:37.3011|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:37.3011|Info|  Settimeout: id:48, (13) ms
2015-08-26 11:35:37.3521|Info|      Encerrado timer: id:46, (11:35:37.3521)
2015-08-26 11:35:37.3521|Info|      Executando timer: id:48, (11:35:37.3541)
2015-08-26 11:35:37.3521|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:37.3521|Info|  Settimeout: id:49, (100) ms
2015-08-26 11:35:37.4612|Info|  Settimeout: id:50, (100) ms
2015-08-26 11:35:37.5613|Info|  Settimeout: id:51, (100) ms
2015-08-26 11:35:37.6613|Info|  Settimeout: id:52, (100) ms
2015-08-26 11:35:37.7124|Info|  Settimeout: id:53, (200) ms
2015-08-26 11:35:37.7635|Info|      Encerrado timer: id:48, (11:35:37.7635)
2015-08-26 11:35:37.7635|Info|      Executando timer: id:52, (11:35:37.7644)
2015-08-26 11:35:37.7635|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:37.7635|Info|      Encerrado timer: id:52, (11:35:37.7664)
2015-08-26 11:35:37.9145|Info|      Executando timer: id:53, (11:35:37.9145)
2015-08-26 11:35:37.9145|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:37.9145|Info|  Settimeout: id:54, (13) ms
2015-08-26 11:35:37.9666|Info|      Encerrado timer: id:53, (11:35:37.9666)
2015-08-26 11:35:37.9666|Info|      Executando timer: id:54, (11:35:37.9666)
2015-08-26 11:35:37.9666|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:37.9666|Info| PASS - one more throttle with leading: false test
2015-08-26 11:35:37.9666|Info|  Settimeout: id:55, (96) ms
2015-08-26 11:35:38.0206|Info|      Encerrado timer: id:54, (11:35:38.0206)
2015-08-26 11:35:38.0676|Info|      Executando timer: id:55, (11:35:38.0676)
2015-08-26 11:35:38.0676|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:38.0676|Info|  Settimeout: id:56, (96) ms
2015-08-26 11:35:38.1237|Info|      Encerrado timer: id:55, (11:35:38.1237)
2015-08-26 11:35:38.1707|Info|      Executando timer: id:56, (11:35:38.1707)
2015-08-26 11:35:38.1707|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:38.1707|Info|  Settimeout: id:57, (13) ms
2015-08-26 11:35:38.2237|Info|      Encerrado timer: id:56, (11:35:38.2237)
2015-08-26 11:35:38.2237|Info|      Executando timer: id:57, (11:35:38.2237)
2015-08-26 11:35:38.2237|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:38.2237|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-26 11:35:38.2237|Info|  Settimeout: id:58, (200) ms
2015-08-26 11:35:38.2778|Info|      Encerrado timer: id:57, (11:35:38.2778)
2015-08-26 11:35:38.4289|Info|      Executando timer: id:58, (11:35:38.4289)
2015-08-26 11:35:38.4289|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:38.4289|Info|  Settimeout: id:59, (13) ms
2015-08-26 11:35:38.4859|Info|      Encerrado timer: id:58, (11:35:38.4859)
2015-08-26 11:35:38.4859|Info|      Executando timer: id:59, (11:35:38.4879)
2015-08-26 11:35:38.4899|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:38.4899|Info| PASS - throttle continues to function after system time is set backwards
2015-08-26 11:35:38.4899|Info|  Settimeout: id:60, (32) ms
2015-08-26 11:35:38.5460|Info|  Settimeout: id:61, (100) ms
2015-08-26 11:35:38.5970|Info|      Encerrado timer: id:59, (11:35:38.5970)
2015-08-26 11:35:38.5980|Info|      Executando timer: id:60, (11:35:38.5980)
2015-08-26 11:35:38.5980|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:38.5980|Info|  Settimeout: id:62, (32) ms
2015-08-26 11:35:38.6530|Info|      Encerrado timer: id:60, (11:35:38.6530)
2015-08-26 11:35:38.6530|Info|      Executando timer: id:62, (11:35:38.6540)
2015-08-26 11:35:38.6530|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:38.6530|Info|      Encerrado timer: id:62, (11:35:38.6560)
2015-08-26 11:35:38.6530|Info|      Executando timer: id:61, (11:35:38.6570)
2015-08-26 11:35:38.6530|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:38.6530|Info|  Settimeout: id:63, (13) ms
2015-08-26 11:35:38.7101|Info|      Encerrado timer: id:61, (11:35:38.7101)
2015-08-26 11:35:38.7101|Info|      Executando timer: id:63, (11:35:38.7111)
2015-08-26 11:35:38.7101|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:38.7101|Info| PASS - throttle re-entrant
2015-08-26 11:35:38.7101|Info|  Settimeout: id:64, (32) ms
2015-08-26 11:35:38.7661|Info|  Settimeout: id:65, (16) ms
2015-08-26 11:35:38.8172|Info|  Settimeout: id:66, (96) ms
2015-08-26 11:35:38.8692|Info|      Encerrado timer: id:63, (11:35:38.8692)
2015-08-26 11:35:38.8692|Info|      Executando timer: id:64, (11:35:38.8712)
2015-08-26 11:35:38.8692|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:38.8692|Info|      Encerrado timer: id:64, (11:35:38.8782)
2015-08-26 11:35:38.8802|Info|      Executando timer: id:65, (11:35:38.8802)
2015-08-26 11:35:38.8802|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:38.8802|Info|  Settimeout: id:67, (32) ms
2015-08-26 11:35:38.9382|Info|      Encerrado timer: id:65, (11:35:38.9382)
2015-08-26 11:35:38.9382|Info|      Executando timer: id:66, (11:35:38.9392)
2015-08-26 11:35:38.9443|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:38.9443|Info|  Settimeout: id:68, (13) ms
2015-08-26 11:35:38.9963|Info|      Encerrado timer: id:66, (11:35:38.9963)
2015-08-26 11:35:38.9963|Info|      Executando timer: id:67, (11:35:38.9973)
2015-08-26 11:35:38.9963|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:38.9963|Info|      Encerrado timer: id:67, (11:35:38.9983)
2015-08-26 11:35:38.9963|Info|      Executando timer: id:68, (11:35:38.9993)
2015-08-26 11:35:38.9963|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:38.9963|Info| PASS - debounce
2015-08-26 11:35:38.9963|Info|  Settimeout: id:69, (64) ms
2015-08-26 11:35:39.0514|Info|  Settimeout: id:70, (16) ms
2015-08-26 11:35:39.1023|Info|  Settimeout: id:71, (32) ms
2015-08-26 11:35:39.1534|Info|  Settimeout: id:72, (48) ms
2015-08-26 11:35:39.2054|Info|  Settimeout: id:73, (128) ms
2015-08-26 11:35:39.2575|Info|      Encerrado timer: id:68, (11:35:39.2575)
2015-08-26 11:35:39.2575|Info|      Executando timer: id:69, (11:35:39.2595)
2015-08-26 11:35:39.2575|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:39.2575|Info|      Encerrado timer: id:69, (11:35:39.2625)
2015-08-26 11:35:39.2575|Info|      Executando timer: id:70, (11:35:39.2635)
2015-08-26 11:35:39.2575|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:39.2575|Info|  Settimeout: id:74, (64) ms
2015-08-26 11:35:39.3205|Info|      Encerrado timer: id:70, (11:35:39.3205)
2015-08-26 11:35:39.3205|Info|      Executando timer: id:71, (11:35:39.3225)
2015-08-26 11:35:39.3205|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:39.3205|Info|      Encerrado timer: id:71, (11:35:39.3255)
2015-08-26 11:35:39.3205|Info|      Executando timer: id:72, (11:35:39.3265)
2015-08-26 11:35:39.3205|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:39.3205|Info|      Encerrado timer: id:72, (11:35:39.3285)
2015-08-26 11:35:39.3355|Info|      Executando timer: id:74, (11:35:39.3355)
2015-08-26 11:35:39.3355|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:39.3355|Info|  Settimeout: id:75, (55) ms
2015-08-26 11:35:39.3895|Info|      Encerrado timer: id:74, (11:35:39.3895)
2015-08-26 11:35:39.3895|Info|      Executando timer: id:73, (11:35:39.3895)
2015-08-26 11:35:39.3895|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:39.3895|Info|  Settimeout: id:76, (13) ms
2015-08-26 11:35:39.4436|Info|      Encerrado timer: id:73, (11:35:39.4436)
2015-08-26 11:35:39.4436|Info|      Executando timer: id:75, (11:35:39.4436)
2015-08-26 11:35:39.4436|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:39.4436|Info|      Encerrado timer: id:75, (11:35:39.4456)
2015-08-26 11:35:39.4436|Info|      Executando timer: id:76, (11:35:39.4456)
2015-08-26 11:35:39.4436|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:39.4436|Info|  Settimeout: id:77, (32) ms
2015-08-26 11:35:39.4987|Info|  Settimeout: id:78, (96) ms
2015-08-26 11:35:39.5497|Info|      Encerrado timer: id:76, (11:35:39.5497)
2015-08-26 11:35:39.5497|Info|      Executando timer: id:77, (11:35:39.5497)
2015-08-26 11:35:39.5517|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:39.5517|Info|      Encerrado timer: id:77, (11:35:39.5527)
2015-08-26 11:35:39.5968|Info|      Executando timer: id:78, (11:35:39.5968)
2015-08-26 11:35:39.5987|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:39.5987|Info|  Settimeout: id:79, (13) ms
2015-08-26 11:35:39.6568|Info|      Encerrado timer: id:78, (11:35:39.6568)
2015-08-26 11:35:39.6568|Info|      Executando timer: id:79, (11:35:39.6578)
2015-08-26 11:35:39.6568|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:39.6568|Info| PASS - debounce asap recursively
2015-08-26 11:35:39.6608|Info|  Settimeout: id:80, (100) ms
2015-08-26 11:35:39.7118|Info|  Settimeout: id:81, (200) ms
2015-08-26 11:35:39.7628|Info|      Encerrado timer: id:79, (11:35:39.7628)
2015-08-26 11:35:39.7628|Info|      Executando timer: id:80, (11:35:39.7638)
2015-08-26 11:35:39.7628|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:39.7628|Info|      Encerrado timer: id:80, (11:35:39.7658)
2015-08-26 11:35:39.9139|Info|      Executando timer: id:81, (11:35:39.9139)
2015-08-26 11:35:39.9139|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:39.9139|Info|  Settimeout: id:82, (100) ms
2015-08-26 11:35:39.9670|Info|  Settimeout: id:83, (13) ms
2015-08-26 11:35:40.0180|Info|      Encerrado timer: id:81, (11:35:40.0180)
2015-08-26 11:35:40.0180|Info|      Executando timer: id:83, (11:35:40.0190)
2015-08-26 11:35:40.0200|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:40.0200|Info| PASS - debounce after system time is set backwards
2015-08-26 11:35:40.0200|Info|  Settimeout: id:84, (32) ms
2015-08-26 11:35:40.0730|Info|  Settimeout: id:85, (100) ms
2015-08-26 11:35:40.1241|Info|      Encerrado timer: id:83, (11:35:40.1241)
2015-08-26 11:35:40.1241|Info|      Executando timer: id:82, (11:35:40.1251)
2015-08-26 11:35:40.1241|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:40.1241|Info|      Encerrado timer: id:82, (11:35:40.1261)
2015-08-26 11:35:40.1241|Info|      Executando timer: id:84, (11:35:40.1271)
2015-08-26 11:35:40.1241|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:40.1241|Info|  Settimeout: id:86, (32) ms
2015-08-26 11:35:40.1792|Info|      Encerrado timer: id:84, (11:35:40.1792)
2015-08-26 11:35:40.1792|Info|      Executando timer: id:86, (11:35:40.1792)
2015-08-26 11:35:40.1792|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:40.1792|Info|      Encerrado timer: id:86, (11:35:40.1811)
2015-08-26 11:35:40.1792|Info|      Executando timer: id:85, (11:35:40.1821)
2015-08-26 11:35:40.1792|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:40.1792|Info|  Settimeout: id:87, (13) ms
2015-08-26 11:35:40.2342|Info|      Encerrado timer: id:85, (11:35:40.2342)
2015-08-26 11:35:40.2342|Info|      Executando timer: id:87, (11:35:40.2342)
2015-08-26 11:35:40.2342|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:40.2342|Info| PASS - debounce re-entrant
2015-08-26 11:35:40.2342|Info| PASS - once
2015-08-26 11:35:40.2342|Info| PASS - Recursive onced function.
2015-08-26 11:35:40.2392|Info| PASS - wrap
2015-08-26 11:35:40.2392|Info| PASS - negate
2015-08-26 11:35:40.2392|Info| PASS - compose
2015-08-26 11:35:40.2392|Info| PASS - after
2015-08-26 11:35:40.2392|Info| PASS - before
2015-08-26 11:35:40.2392|Info| PASS - iteratee
2015-08-26 11:35:40.2392|Info|----------------------------------------
2015-08-26 11:35:40.2392|Info|Objects
2015-08-26 11:35:40.2392|Info|----------------------------------------
2015-08-26 11:35:40.2392|Info| PASS - keys
2015-08-26 11:35:40.2392|Info| PASS - allKeys
2015-08-26 11:35:40.2392|Info| PASS - values
2015-08-26 11:35:40.2392|Info| PASS - pairs
2015-08-26 11:35:40.2392|Info| PASS - invert
2015-08-26 11:35:40.2392|Info| PASS - functions
2015-08-26 11:35:40.2392|Info| PASS - methods
2015-08-26 11:35:40.2392|Info| PASS - extend
2015-08-26 11:35:40.2542|Info| PASS - extendOwn
2015-08-26 11:35:40.2542|Info| PASS - pick
2015-08-26 11:35:40.2542|Info| PASS - omit
2015-08-26 11:35:40.2542|Info| PASS - defaults
2015-08-26 11:35:40.2542|Info| PASS - clone
2015-08-26 11:35:40.2542|Info| PASS - create
2015-08-26 11:35:40.2542|Info| PASS - isEqual
2015-08-26 11:35:40.2542|Info| PASS - isEmpty
2015-08-26 11:35:40.2542|Info| PASS - isArguments
2015-08-26 11:35:40.2542|Info| PASS - isObject
2015-08-26 11:35:40.2542|Info| PASS - isArray
2015-08-26 11:35:40.2542|Info| PASS - isString
2015-08-26 11:35:40.2542|Info| PASS - isNumber
2015-08-26 11:35:40.2712|Info| PASS - isBoolean
2015-08-26 11:35:40.2712|Info| PASS - isFunction
2015-08-26 11:35:40.2712|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-26 11:35:40.2712|Info|    PASS | EQ | can extract the keys from an object
2015-08-26 11:35:40.2712|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 11:35:40.2712|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-26 11:35:40.2712|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 11:35:40.2712|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2712|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2862|Info|    PASS | EQ | ok
2015-08-26 11:35:40.2862|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 11:35:40.2862|Info|    PASS | EQ | should include inherited keys
2015-08-26 11:35:40.2862|Info|    PASS | EQ | should get keys from constructor
2015-08-26 11:35:40.2862|Info|    PASS | EQ | can extract the values from an object
2015-08-26 11:35:40.2862|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 11:35:40.2862|Info|    PASS | EQ | can convert an object into pairs
2015-08-26 11:35:40.2862|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 11:35:40.2862|Info|    PASS | EQ | can invert an object
2015-08-26 11:35:40.2862|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-26 11:35:40.2862|Info|    PASS | EQ | can invert an object with "length"
2015-08-26 11:35:40.2862|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-26 11:35:40.2862|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-26 11:35:40.2862|Info|    PASS | EQ | alias for functions
2015-08-26 11:35:40.2862|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-26 11:35:40.2862|Info|    PASS | EQ | properties in source override destination
2015-08-26 11:35:40.2862|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 11:35:40.2862|Info|    PASS | EQ | can extend from multiple source objects
2015-08-26 11:35:40.2862|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-26 11:35:40.2862|Info|    PASS | EQ | extend copies undefined values
2015-08-26 11:35:40.3012|Info|    PASS | EQ | extend copies all properties from source
2015-08-26 11:35:40.3012|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-26 11:35:40.3012|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:35:40.3012|Info|    PASS | EQ | extending null results in null
2015-08-26 11:35:40.3012|Info|    PASS | OK | extending undefined results in undefined
2015-08-26 11:35:40.3012|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-26 11:35:40.3012|Info|    PASS | EQ | properties in source override destination
2015-08-26 11:35:40.3012|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 11:35:40.3012|Info|    PASS | EQ | can assign from multiple source objects
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assign copies undefined values
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assign copies own properties from source
2015-08-26 11:35:40.3012|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:35:40.3012|Info|    PASS | OK | assigning undefined results in undefined
2015-08-26 11:35:40.3012|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-26 11:35:40.3012|Info|    PASS | EQ | can restrict properties to those named
2015-08-26 11:35:40.3012|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-26 11:35:40.3012|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-26 11:35:40.3172|Info|    PASS | EQ | can pick numeric properties
2015-08-26 11:35:40.3172|Info|    PASS | EQ | Called with null/undefined
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | Called with null/undefined
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | can iterate primitives
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3172|Info|    PASS | EQ | can accept a predicate and context
2015-08-26 11:35:40.3172|Info|    PASS | EQ | include prototype props
2015-08-26 11:35:40.3172|Info|    PASS | EQ | function is given context
2015-08-26 11:35:40.3172|Info|    PASS | EQ | does not set own property if property not in object
2015-08-26 11:35:40.3172|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:35:40.3172|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:35:40.3172|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:35:40.3172|Info|    PASS | EQ | can omit a single named property
2015-08-26 11:35:40.3172|Info|    PASS | EQ | can omit several named properties
2015-08-26 11:35:40.3172|Info|    PASS | EQ | can omit properties named in an array
2015-08-26 11:35:40.3172|Info|    PASS | EQ | can omit numeric properties
2015-08-26 11:35:40.3172|Info|    PASS | EQ | non objects return empty object
2015-08-26 11:35:40.3172|Info|    PASS | EQ | null/undefined return empty object
2015-08-26 11:35:40.3172|Info|    PASS | EQ | returns empty object for primitives
2015-08-26 11:35:40.3172|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3332|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3332|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3332|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3332|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3332|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3332|Info|    PASS | EQ | can accept a predicate
2015-08-26 11:35:40.3332|Info|    PASS | EQ | include prototype props
2015-08-26 11:35:40.3332|Info|    PASS | EQ | function is given context
2015-08-26 11:35:40.3332|Info|    PASS | EQ | value exists
2015-08-26 11:35:40.3332|Info|    PASS | EQ | value exists
2015-08-26 11:35:40.3332|Info|    PASS | EQ | default applied
2015-08-26 11:35:40.3332|Info|    PASS | EQ | null isn't overridden
2015-08-26 11:35:40.3332|Info|    PASS | EQ | value exists
2015-08-26 11:35:40.3332|Info|    PASS | EQ | NaN isn't overridden
2015-08-26 11:35:40.3332|Info|    PASS | EQ | new value is added, first one wins
2015-08-26 11:35:40.3332|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:35:40.3332|Info|    PASS | EQ | result is null if destination is null
2015-08-26 11:35:40.3332|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-26 11:35:40.3332|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-26 11:35:40.3332|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-26 11:35:40.3332|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-26 11:35:40.3332|Info|    PASS | OK | non objects should not be changed by clone
2015-08-26 11:35:40.3332|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 11:35:40.3332|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 11:35:40.3332|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:35:40.3332|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:35:40.3482|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:35:40.3482|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:35:40.3482|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-26 11:35:40.3482|Info|    PASS | EQ | object should inherit prototype
2015-08-26 11:35:40.3482|Info|    PASS | EQ | properties should be added to object
2015-08-26 11:35:40.3482|Info|    PASS | EQ | ok
2015-08-26 11:35:40.3482|Info|    PASS | EQ | should only add own properties
2015-08-26 11:35:40.3482|Info|    PASS | EQ | `null` is equal to `null`
2015-08-26 11:35:40.3482|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-26 11:35:40.3482|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-26 11:35:40.3482|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-26 11:35:40.3482|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-26 11:35:40.3482|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-26 11:35:40.3482|Info|    PASS | EQ | Identical string primitives are equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-26 11:35:40.3482|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | Identical number primitives are equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-26 11:35:40.3482|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-26 11:35:40.3643|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-26 11:35:40.3643|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-26 11:35:40.3643|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-26 11:35:40.3643|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-26 11:35:40.3643|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-26 11:35:40.3643|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Invalid dates are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Flag order is not significant
2015-08-26 11:35:40.3793|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-26 11:35:40.3793|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Empty object literals are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Empty array literals are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-26 11:35:40.3793|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Object instances are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Cyclic structures are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | `isEqual` can be chained
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-26 11:35:40.3953|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-26 11:35:40.3953|Info|    PASS | EQ | [1] is not empty
2015-08-26 11:35:40.3953|Info|    PASS | EQ | [] is empty
2015-08-26 11:35:40.3953|Info|    PASS | EQ | {one : 1} is not empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | {} is empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | null is empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | undefined is empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | the empty string is empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | but other strings are not
2015-08-26 11:35:40.4113|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-26 11:35:40.4113|Info|    PASS | EQ | empty arguments object is empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-26 11:35:40.4113|Info|    PASS | EQ | a string is not an arguments object
2015-08-26 11:35:40.4113|Info|    PASS | EQ | a function is not an arguments object
2015-08-26 11:35:40.4113|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-26 11:35:40.4113|Info|    PASS | EQ | but not when it's converted into an array
2015-08-26 11:35:40.4113|Info|    PASS | EQ | and not vanilla arrays.
2015-08-26 11:35:40.4113|Info|    PASS | EQ | the arguments object is object
2015-08-26 11:35:40.4113|Info|    PASS | EQ | and arrays
2015-08-26 11:35:40.4113|Info|    PASS | EQ | and functions
2015-08-26 11:35:40.4113|Info|    PASS | EQ | but not null
2015-08-26 11:35:40.4113|Info|    PASS | EQ | and not undefined
2015-08-26 11:35:40.4113|Info|    PASS | EQ | and not string
2015-08-26 11:35:40.4113|Info|    PASS | EQ | and not number
2015-08-26 11:35:40.4113|Info|    PASS | EQ | and not boolean
2015-08-26 11:35:40.4113|Info|    PASS | EQ | but new String()
2015-08-26 11:35:40.4113|Info|    PASS | EQ | undefined vars are not arrays
2015-08-26 11:35:40.4113|Info|    PASS | EQ | the arguments object is not an array
2015-08-26 11:35:40.4113|Info|    PASS | EQ | but arrays are
2015-08-26 11:35:40.4263|Info|    PASS | EQ | but strings are
2015-08-26 11:35:40.4263|Info|    PASS | EQ | string literals are
2015-08-26 11:35:40.4263|Info|    PASS | EQ | so are String objects
2015-08-26 11:35:40.4263|Info|    PASS | EQ | ok
2015-08-26 11:35:40.4263|Info|    PASS | EQ | a string is not a number
2015-08-26 11:35:40.4263|Info|    PASS | EQ | the arguments object is not a number
2015-08-26 11:35:40.4263|Info|    PASS | EQ | undefined is not a number
2015-08-26 11:35:40.4263|Info|    PASS | EQ | but numbers are
2015-08-26 11:35:40.4263|Info|    PASS | EQ | NaN *is* a number
2015-08-26 11:35:40.4263|Info|    PASS | EQ | Infinity is a number
2015-08-26 11:35:40.4263|Info|    PASS | EQ | numeric strings are not numbers
2015-08-26 11:35:40.4263|Info|    PASS | EQ | a number is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | a string is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | undefined is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | NaN is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | null is not a boolean
2015-08-26 11:35:40.4263|Info|    PASS | EQ | but true is
2015-08-26 11:35:40.4263|Info|    PASS | EQ | and so is false
2015-08-26 11:35:40.4263|Info|    PASS | EQ | undefined vars are not functions
2015-08-26 11:35:40.4263|Info|    PASS | EQ | arrays are not functions
2015-08-26 11:35:40.4263|Info|    PASS | EQ | strings are not functions
2015-08-26 11:35:40.4263|Info|    PASS | EQ | but functions are
2015-08-26 11:35:40.4263|Info|    PASS | EQ | even anonymous ones
2015-08-26 11:35:40.4263|Info|    FAIL | OK | Died on test #1     at V8Runtime:underscoreTests:2898:5
    at V8Runtime:underscoreTests:3251:2: window is not defined
2015-08-26 11:35:40.4263|Info| PASS - isDate
2015-08-26 11:35:40.4263|Info| PASS - isRegExp
2015-08-26 11:35:40.4423|Info| PASS - isFinite
2015-08-26 11:35:40.4423|Info| PASS - isNaN
2015-08-26 11:35:40.4423|Info| PASS - isNull
2015-08-26 11:35:40.4423|Info| PASS - isUndefined
2015-08-26 11:35:40.4423|Info| PASS - isError
2015-08-26 11:35:40.4423|Info| PASS - tap
2015-08-26 11:35:40.4423|Info| PASS - has
2015-08-26 11:35:40.4423|Info| PASS - isMatch
2015-08-26 11:35:40.4423|Info| PASS - matcher
2015-08-26 11:35:40.4423|Info| PASS - matcher 
2015-08-26 11:35:40.4573|Info| PASS - findKey
2015-08-26 11:35:40.4573|Info| PASS - mapObject
2015-08-26 11:35:40.4573|Info|----------------------------------------
2015-08-26 11:35:40.4573|Info|Utility
2015-08-26 11:35:40.4573|Info|----------------------------------------
2015-08-26 11:35:40.4573|Info| PASS - #750 - Return _ instance.
2015-08-26 11:35:40.4573|Info| PASS - identity
2015-08-26 11:35:40.4573|Info| PASS - constant
2015-08-26 11:35:40.4573|Info| PASS - noop
2015-08-26 11:35:40.4573|Info| PASS - property
2015-08-26 11:35:40.4573|Info| PASS - propertyOf
2015-08-26 11:35:40.4573|Info| PASS - random
2015-08-26 11:35:40.4573|Info| PASS - now
2015-08-26 11:35:40.4573|Info| PASS - uniqueId
2015-08-26 11:35:40.4573|Info| PASS - times
2015-08-26 11:35:40.4573|Info| PASS - mixin
2015-08-26 11:35:40.4573|Info| PASS - _.escape
2015-08-26 11:35:40.4733|Info| PASS - _.unescape
2015-08-26 11:35:40.4733|Info| PASS - _.escape & unescape
2015-08-26 11:35:40.4733|Info| PASS - template
2015-08-26 11:35:40.4733|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-26 11:35:40.4733|Info| PASS - _.template handles \u2028 & \u2029
2015-08-26 11:35:40.4733|Info| PASS - result calls functions and returns primitives
2015-08-26 11:35:40.4733|Info| PASS - result returns a default value if object is null or undefined
2015-08-26 11:35:40.4733|Info| PASS - result returns a default value if property of object is missing
2015-08-26 11:35:40.4733|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-26 11:35:40.4733|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-26 11:35:40.4733|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-26 11:35:40.4733|Info| PASS - result fallback can use a function
2015-08-26 11:35:40.4733|Info| PASS - _.templateSettings.variable
2015-08-26 11:35:40.4733|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-26 11:35:40.4893|Info| PASS - #556 - undefined template variables.
2015-08-26 11:35:40.4893|Info| PASS - interpolate evaluates code only once.
2015-08-26 11:35:40.4893|Info| PASS - #746 - _.template settings are not modified.
2015-08-26 11:35:40.4893|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-26 11:35:40.4893|Info|  Settimeout: id:88, (100) ms
2015-08-26 11:35:40.5444|Info|  Settimeout: id:89, (50) ms
2015-08-26 11:35:40.5954|Info|  Settimeout: id:90, (150) ms
2015-08-26 11:35:40.6465|Info|      Encerrado timer: id:87, (11:35:40.6465)
2015-08-26 11:35:40.6465|Info|      Executando timer: id:88, (11:35:40.6474)
2015-08-26 11:35:40.6465|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:40.6465|Info|      Encerrado timer: id:88, (11:35:40.6484)
2015-08-26 11:35:40.6465|Info|      Executando timer: id:89, (11:35:40.6494)
2015-08-26 11:35:40.6465|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:35:40.6465|Info|      Encerrado timer: id:89, (11:35:40.6514)
2015-08-26 11:35:40.7475|Info|      Executando timer: id:90, (11:35:40.7475)
2015-08-26 11:35:40.7475|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:35:40.7475|Info|  Settimeout: id:91, (13) ms
2015-08-26 11:35:40.7996|Info|      Encerrado timer: id:90, (11:35:40.7996)
2015-08-26 11:35:40.7996|Info|      Executando timer: id:91, (11:35:40.7996)
2015-08-26 11:35:40.7996|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:40.8016|Info|  Settimeout: id:92, (100) ms
2015-08-26 11:35:40.8526|Info|  Settimeout: id:93, (50) ms
2015-08-26 11:35:40.9036|Info|  Settimeout: id:94, (150) ms
2015-08-26 11:35:40.9557|Info|  Settimeout: id:95, (160) ms
2015-08-26 11:35:41.0077|Info|  Settimeout: id:96, (230) ms
2015-08-26 11:35:41.0607|Info|  Settimeout: id:97, (300) ms
2015-08-26 11:35:41.1138|Info|      Encerrado timer: id:91, (11:35:41.1138)
2015-08-26 11:35:41.1138|Info|      Executando timer: id:92, (11:35:41.1148)
2015-08-26 11:35:41.1138|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:41.1138|Info|      Encerrado timer: id:92, (11:35:41.1168)
2015-08-26 11:35:41.1138|Info|      Executando timer: id:93, (11:35:41.1178)
2015-08-26 11:35:41.1138|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:41.1138|Info|  Settimeout: id:98, (98) ms
2015-08-26 11:35:41.1708|Info|      Encerrado timer: id:93, (11:35:41.1708)
2015-08-26 11:35:41.1708|Info|      Executando timer: id:94, (11:35:41.1718)
2015-08-26 11:35:41.1708|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:41.1708|Info|      Encerrado timer: id:94, (11:35:41.1738)
2015-08-26 11:35:41.1708|Info|      Executando timer: id:95, (11:35:41.1748)
2015-08-26 11:35:41.1708|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:41.1768|Info|      Encerrado timer: id:95, (11:35:41.1768)
2015-08-26 11:35:41.2189|Info|      Executando timer: id:98, (11:35:41.2189)
2015-08-26 11:35:41.2189|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:41.2189|Info|      Encerrado timer: id:98, (11:35:41.2208)
2015-08-26 11:35:41.2409|Info|      Executando timer: id:96, (11:35:41.2409)
2015-08-26 11:35:41.2409|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:41.2409|Info|  Settimeout: id:99, (77) ms
2015-08-26 11:35:41.2940|Info|      Encerrado timer: id:96, (11:35:41.2940)
2015-08-26 11:35:41.3219|Info|      Executando timer: id:99, (11:35:41.3219)
2015-08-26 11:35:41.3219|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:41.3219|Info|      Encerrado timer: id:99, (11:35:41.3259)
2015-08-26 11:35:41.3650|Info|      Executando timer: id:97, (11:35:41.3650)
2015-08-26 11:35:41.3650|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:41.3650|Info|  Settimeout: id:100, (13) ms
2015-08-26 11:35:41.4200|Info|      Encerrado timer: id:97, (11:35:41.4200)
2015-08-26 11:35:41.4200|Info|      Executando timer: id:100, (11:35:41.4220)
2015-08-26 11:35:41.4200|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:41.4200|Info|  Settimeout: id:101, (32) ms
2015-08-26 11:35:41.4790|Info|  Settimeout: id:102, (96) ms
2015-08-26 11:35:41.5311|Info|      Encerrado timer: id:100, (11:35:41.5311)
2015-08-26 11:35:41.5311|Info|      Executando timer: id:101, (11:35:41.5321)
2015-08-26 11:35:41.5311|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:41.5311|Info|      Encerrado timer: id:101, (11:35:41.5351)
2015-08-26 11:35:41.5781|Info|      Executando timer: id:102, (11:35:41.5781)
2015-08-26 11:35:41.5781|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:41.5781|Info|  Settimeout: id:103, (13) ms
2015-08-26 11:35:41.6302|Info|      Encerrado timer: id:102, (11:35:41.6302)
2015-08-26 11:35:41.6302|Info|      Executando timer: id:103, (11:35:41.6311)
2015-08-26 11:35:41.6302|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:41.6302|Info|  Settimeout: id:104, (100) ms
2015-08-26 11:35:41.6832|Info|  Settimeout: id:105, (50) ms
2015-08-26 11:35:41.7342|Info|  Settimeout: id:106, (60) ms
2015-08-26 11:35:41.7873|Info|  Settimeout: id:107, (200) ms
2015-08-26 11:35:41.8403|Info|  Settimeout: id:108, (250) ms
2015-08-26 11:35:41.8913|Info|  Settimeout: id:109, (350) ms
2015-08-26 11:35:41.9424|Info|      Encerrado timer: id:103, (11:35:41.9424)
2015-08-26 11:35:41.9424|Info|      Executando timer: id:104, (11:35:41.9444)
2015-08-26 11:35:41.9424|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:41.9424|Info|      Encerrado timer: id:104, (11:35:41.9484)
2015-08-26 11:35:41.9424|Info|      Executando timer: id:105, (11:35:41.9494)
2015-08-26 11:35:41.9424|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:41.9424|Info|  Settimeout: id:110, (100) ms
2015-08-26 11:35:42.0074|Info|      Encerrado timer: id:105, (11:35:42.0074)
2015-08-26 11:35:42.0074|Info|      Executando timer: id:106, (11:35:42.0124)
2015-08-26 11:35:42.0074|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.0074|Info|      Encerrado timer: id:106, (11:35:42.0154)
2015-08-26 11:35:42.0074|Info|      Executando timer: id:107, (11:35:42.0164)
2015-08-26 11:35:42.0074|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.0074|Info|      Encerrado timer: id:107, (11:35:42.0184)
2015-08-26 11:35:42.0585|Info|      Executando timer: id:110, (11:35:42.0585)
2015-08-26 11:35:42.0585|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:42.0585|Info|      Encerrado timer: id:110, (11:35:42.0604)
2015-08-26 11:35:42.0925|Info|      Executando timer: id:108, (11:35:42.0925)
2015-08-26 11:35:42.0925|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.0925|Info|      Encerrado timer: id:108, (11:35:42.0945)
2015-08-26 11:35:42.2436|Info|      Executando timer: id:109, (11:35:42.2436)
2015-08-26 11:35:42.2436|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.2436|Info|  Settimeout: id:111, (13) ms
2015-08-26 11:35:42.3007|Info|      Encerrado timer: id:109, (11:35:42.3007)
2015-08-26 11:35:42.3016|Info|      Executando timer: id:111, (11:35:42.3016)
2015-08-26 11:35:42.3016|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:42.3016|Info|  Settimeout: id:112, (64) ms
2015-08-26 11:35:42.3547|Info|  Settimeout: id:113, (16) ms
2015-08-26 11:35:42.4067|Info|  Settimeout: id:114, (32) ms
2015-08-26 11:35:42.4578|Info|  Settimeout: id:115, (48) ms
2015-08-26 11:35:42.5088|Info|  Settimeout: id:116, (128) ms
2015-08-26 11:35:42.5599|Info|      Encerrado timer: id:111, (11:35:42.5599)
2015-08-26 11:35:42.5599|Info|      Executando timer: id:112, (11:35:42.5608)
2015-08-26 11:35:42.5599|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:42.5599|Info|      Encerrado timer: id:112, (11:35:42.5618)
2015-08-26 11:35:42.5599|Info|      Executando timer: id:113, (11:35:42.5628)
2015-08-26 11:35:42.5599|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.5599|Info|  Settimeout: id:117, (64) ms
2015-08-26 11:35:42.6148|Info|      Encerrado timer: id:113, (11:35:42.6148)
2015-08-26 11:35:42.6148|Info|      Executando timer: id:114, (11:35:42.6148)
2015-08-26 11:35:42.6148|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.6148|Info|      Encerrado timer: id:114, (11:35:42.6168)
2015-08-26 11:35:42.6148|Info|      Executando timer: id:115, (11:35:42.6168)
2015-08-26 11:35:42.6148|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.6148|Info|      Encerrado timer: id:115, (11:35:42.6188)
2015-08-26 11:35:42.6299|Info|      Executando timer: id:117, (11:35:42.6299)
2015-08-26 11:35:42.6299|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:42.6299|Info|  Settimeout: id:118, (52) ms
2015-08-26 11:35:42.6819|Info|      Encerrado timer: id:117, (11:35:42.6819)
2015-08-26 11:35:42.6819|Info|      Executando timer: id:116, (11:35:42.6819)
2015-08-26 11:35:42.6819|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.6819|Info|  Settimeout: id:119, (13) ms
2015-08-26 11:35:42.7359|Info|      Encerrado timer: id:116, (11:35:42.7359)
2015-08-26 11:35:42.7359|Info|      Executando timer: id:118, (11:35:42.7359)
2015-08-26 11:35:42.7359|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:42.7389|Info|      Encerrado timer: id:118, (11:35:42.7389)
2015-08-26 11:35:42.7389|Info|      Executando timer: id:119, (11:35:42.7399)
2015-08-26 11:35:42.7389|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:42.7389|Info|  Settimeout: id:120, (100) ms
2015-08-26 11:35:42.7920|Info|  Settimeout: id:121, (50) ms
2015-08-26 11:35:42.8431|Info|  Settimeout: id:122, (150) ms
2015-08-26 11:35:42.8941|Info|      Encerrado timer: id:119, (11:35:42.8941)
2015-08-26 11:35:42.8941|Info|      Executando timer: id:120, (11:35:42.8941)
2015-08-26 11:35:42.8950|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:42.8950|Info|      Encerrado timer: id:120, (11:35:42.8960)
2015-08-26 11:35:42.8950|Info|      Executando timer: id:121, (11:35:42.8960)
2015-08-26 11:35:42.8950|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:35:42.8950|Info|      Encerrado timer: id:121, (11:35:42.8980)
2015-08-26 11:35:42.9951|Info|      Executando timer: id:122, (11:35:42.9951)
2015-08-26 11:35:42.9951|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:35:42.9951|Info|  Settimeout: id:123, (13) ms
2015-08-26 11:35:43.0502|Info|      Encerrado timer: id:122, (11:35:43.0502)
2015-08-26 11:35:43.0532|Info|      Executando timer: id:123, (11:35:43.0532)
2015-08-26 11:35:43.0532|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:43.0532|Info|  Settimeout: id:124, (100) ms
2015-08-26 11:35:43.1092|Info|  Settimeout: id:125, (50) ms
2015-08-26 11:35:43.1602|Info|  Settimeout: id:126, (150) ms
2015-08-26 11:35:43.2113|Info|  Settimeout: id:127, (160) ms
2015-08-26 11:35:43.2623|Info|  Settimeout: id:128, (230) ms
2015-08-26 11:35:43.3133|Info|  Settimeout: id:129, (300) ms
2015-08-26 11:35:43.3644|Info|      Encerrado timer: id:123, (11:35:43.3644)
2015-08-26 11:35:43.3644|Info|      Executando timer: id:124, (11:35:43.3644)
2015-08-26 11:35:43.3644|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:43.3644|Info|      Encerrado timer: id:124, (11:35:43.3664)
2015-08-26 11:35:43.3644|Info|      Executando timer: id:125, (11:35:43.3674)
2015-08-26 11:35:43.3644|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:43.3644|Info|  Settimeout: id:130, (98) ms
2015-08-26 11:35:43.4194|Info|      Encerrado timer: id:125, (11:35:43.4194)
2015-08-26 11:35:43.4194|Info|      Executando timer: id:126, (11:35:43.4204)
2015-08-26 11:35:43.4194|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:43.4194|Info|      Encerrado timer: id:126, (11:35:43.4214)
2015-08-26 11:35:43.4194|Info|      Executando timer: id:127, (11:35:43.4224)
2015-08-26 11:35:43.4194|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:43.4194|Info|      Encerrado timer: id:127, (11:35:43.4234)
2015-08-26 11:35:43.4685|Info|      Executando timer: id:130, (11:35:43.4685)
2015-08-26 11:35:43.4685|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:43.4685|Info|      Encerrado timer: id:130, (11:35:43.4725)
2015-08-26 11:35:43.4945|Info|      Executando timer: id:128, (11:35:43.4945)
2015-08-26 11:35:43.4945|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:43.4945|Info|  Settimeout: id:131, (76) ms
2015-08-26 11:35:43.5475|Info|      Encerrado timer: id:128, (11:35:43.5475)
2015-08-26 11:35:43.5745|Info|      Executando timer: id:131, (11:35:43.5745)
2015-08-26 11:35:43.5845|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:43.5845|Info|      Encerrado timer: id:131, (11:35:43.5865)
2015-08-26 11:35:43.6146|Info|      Executando timer: id:129, (11:35:43.6146)
2015-08-26 11:35:43.6146|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:43.6146|Info|  Settimeout: id:132, (13) ms
2015-08-26 11:35:43.6676|Info|      Encerrado timer: id:129, (11:35:43.6676)
2015-08-26 11:35:43.6676|Info|      Executando timer: id:132, (11:35:43.6686)
2015-08-26 11:35:43.6676|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:43.6676|Info|  Settimeout: id:133, (32) ms
2015-08-26 11:35:43.7216|Info|  Settimeout: id:134, (96) ms
2015-08-26 11:35:43.7737|Info|      Encerrado timer: id:132, (11:35:43.7737)
2015-08-26 11:35:43.7967|Info|      Executando timer: id:133, (11:35:43.7967)
2015-08-26 11:35:43.7967|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:43.7967|Info|      Encerrado timer: id:133, (11:35:43.7987)
2015-08-26 11:35:43.8207|Info|      Executando timer: id:134, (11:35:43.8207)
2015-08-26 11:35:43.8207|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:43.8207|Info|  Settimeout: id:135, (13) ms
2015-08-26 11:35:43.8747|Info|      Encerrado timer: id:134, (11:35:43.8747)
2015-08-26 11:35:43.8747|Info|      Executando timer: id:135, (11:35:43.8747)
2015-08-26 11:35:43.8747|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:43.8747|Info|  Settimeout: id:136, (100) ms
2015-08-26 11:35:43.9278|Info|  Settimeout: id:137, (50) ms
2015-08-26 11:35:43.9788|Info|  Settimeout: id:138, (60) ms
2015-08-26 11:35:44.0298|Info|  Settimeout: id:139, (200) ms
2015-08-26 11:35:44.0809|Info|  Settimeout: id:140, (250) ms
2015-08-26 11:35:44.1320|Info|  Settimeout: id:141, (350) ms
2015-08-26 11:35:44.1830|Info|      Encerrado timer: id:135, (11:35:44.1830)
2015-08-26 11:35:44.1830|Info|      Executando timer: id:136, (11:35:44.1830)
2015-08-26 11:35:44.1830|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:44.1830|Info|      Encerrado timer: id:136, (11:35:44.1850)
2015-08-26 11:35:44.1830|Info|      Executando timer: id:137, (11:35:44.1860)
2015-08-26 11:35:44.1830|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.1830|Info|  Settimeout: id:142, (100) ms
2015-08-26 11:35:44.2380|Info|      Encerrado timer: id:137, (11:35:44.2380)
2015-08-26 11:35:44.2380|Info|      Executando timer: id:138, (11:35:44.2380)
2015-08-26 11:35:44.2390|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.2390|Info|      Encerrado timer: id:138, (11:35:44.2400)
2015-08-26 11:35:44.2390|Info|      Executando timer: id:139, (11:35:44.2410)
2015-08-26 11:35:44.2390|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.2390|Info|      Encerrado timer: id:139, (11:35:44.2420)
2015-08-26 11:35:44.2891|Info|      Executando timer: id:142, (11:35:44.2891)
2015-08-26 11:35:44.2891|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:44.2891|Info|      Encerrado timer: id:142, (11:35:44.2940)
2015-08-26 11:35:44.3321|Info|      Executando timer: id:140, (11:35:44.3321)
2015-08-26 11:35:44.3341|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.3341|Info|      Encerrado timer: id:140, (11:35:44.3381)
2015-08-26 11:35:44.4842|Info|      Executando timer: id:141, (11:35:44.4842)
2015-08-26 11:35:44.4842|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.4842|Info|  Settimeout: id:143, (13) ms
2015-08-26 11:35:44.5382|Info|      Encerrado timer: id:141, (11:35:44.5382)
2015-08-26 11:35:44.5382|Info|      Executando timer: id:143, (11:35:44.5392)
2015-08-26 11:35:44.5382|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:44.5382|Info|  Settimeout: id:144, (64) ms
2015-08-26 11:35:44.5923|Info|  Settimeout: id:145, (16) ms
2015-08-26 11:35:44.6443|Info|  Settimeout: id:146, (32) ms
2015-08-26 11:35:44.6963|Info|  Settimeout: id:147, (48) ms
2015-08-26 11:35:44.7484|Info|  Settimeout: id:148, (128) ms
2015-08-26 11:35:44.7994|Info|      Encerrado timer: id:143, (11:35:44.7994)
2015-08-26 11:35:44.8014|Info|      Executando timer: id:144, (11:35:44.8014)
2015-08-26 11:35:44.8014|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:44.8014|Info|      Encerrado timer: id:144, (11:35:44.8064)
2015-08-26 11:35:44.8014|Info|      Executando timer: id:145, (11:35:44.8084)
2015-08-26 11:35:44.8014|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.8014|Info|  Settimeout: id:149, (64) ms
2015-08-26 11:35:44.8675|Info|      Encerrado timer: id:145, (11:35:44.8675)
2015-08-26 11:35:44.8675|Info|      Executando timer: id:146, (11:35:44.8684)
2015-08-26 11:35:44.8675|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.8675|Info|      Encerrado timer: id:146, (11:35:44.8714)
2015-08-26 11:35:44.8675|Info|      Executando timer: id:147, (11:35:44.8724)
2015-08-26 11:35:44.8675|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.8675|Info|      Encerrado timer: id:147, (11:35:44.8745)
2015-08-26 11:35:44.8675|Info|      Executando timer: id:148, (11:35:44.8785)
2015-08-26 11:35:44.8794|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:44.8794|Info|  Settimeout: id:150, (13) ms
2015-08-26 11:35:44.9345|Info|      Encerrado timer: id:148, (11:35:44.9345)
2015-08-26 11:35:44.9345|Info|      Executando timer: id:149, (11:35:44.9345)
2015-08-26 11:35:44.9345|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:44.9345|Info|  Settimeout: id:151, (2) ms
2015-08-26 11:35:44.9876|Info|      Encerrado timer: id:149, (11:35:44.9876)
2015-08-26 11:35:44.9885|Info|      Executando timer: id:150, (11:35:44.9885)
2015-08-26 11:35:44.9885|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:44.9885|Info|  Settimeout: id:152, (100) ms
2015-08-26 11:35:45.0416|Info|  Settimeout: id:153, (50) ms
2015-08-26 11:35:45.0936|Info|  Settimeout: id:154, (150) ms
2015-08-26 11:35:45.1457|Info|      Encerrado timer: id:150, (11:35:45.1457)
2015-08-26 11:35:45.1457|Info|      Executando timer: id:151, (11:35:45.1477)
2015-08-26 11:35:45.1457|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:45.1457|Info|      Encerrado timer: id:151, (11:35:45.1526)
2015-08-26 11:35:45.1457|Info|      Executando timer: id:152, (11:35:45.1546)
2015-08-26 11:35:45.1457|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:45.1457|Info|      Encerrado timer: id:152, (11:35:45.1596)
2015-08-26 11:35:45.1616|Info|      Executando timer: id:153, (11:35:45.1616)
2015-08-26 11:35:45.1616|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:35:45.1616|Info|      Encerrado timer: id:153, (11:35:45.1717)
2015-08-26 11:35:45.2467|Info|      Executando timer: id:154, (11:35:45.2467)
2015-08-26 11:35:45.2467|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:35:45.2467|Info|  Settimeout: id:155, (13) ms
2015-08-26 11:35:45.2997|Info|      Encerrado timer: id:154, (11:35:45.2997)
2015-08-26 11:35:45.2997|Info|      Executando timer: id:155, (11:35:45.3008)
2015-08-26 11:35:45.3017|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:45.3017|Info|----------------------------------------
2015-08-26 11:35:45.3017|Info|Functions
2015-08-26 11:35:45.3017|Info|----------------------------------------
2015-08-26 11:35:45.3017|Info| FAIL - delay
2015-08-26 11:35:45.3017|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 11:35:45.3017|Info|    PASS | EQ | delayed the function
2015-08-26 11:35:45.3017|Info|  Settimeout: id:156, (100) ms
2015-08-26 11:35:45.3598|Info|  Settimeout: id:157, (50) ms
2015-08-26 11:35:45.4108|Info|  Settimeout: id:158, (150) ms
2015-08-26 11:35:45.4629|Info|  Settimeout: id:159, (160) ms
2015-08-26 11:35:45.5139|Info|  Settimeout: id:160, (230) ms
2015-08-26 11:35:45.5649|Info|  Settimeout: id:161, (300) ms
2015-08-26 11:35:45.6170|Info|      Encerrado timer: id:155, (11:35:45.6170)
2015-08-26 11:35:45.6170|Info|      Executando timer: id:156, (11:35:45.6180)
2015-08-26 11:35:45.6170|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:45.6170|Info|      Encerrado timer: id:156, (11:35:45.6190)
2015-08-26 11:35:45.6170|Info|      Executando timer: id:157, (11:35:45.6200)
2015-08-26 11:35:45.6170|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:45.6170|Info|  Settimeout: id:162, (97) ms
2015-08-26 11:35:45.6730|Info|      Encerrado timer: id:157, (11:35:45.6730)
2015-08-26 11:35:45.6730|Info|      Executando timer: id:158, (11:35:45.6740)
2015-08-26 11:35:45.6730|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:45.6780|Info|      Encerrado timer: id:158, (11:35:45.6780)
2015-08-26 11:35:45.6780|Info|      Executando timer: id:159, (11:35:45.6790)
2015-08-26 11:35:45.6780|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:45.6780|Info|      Encerrado timer: id:159, (11:35:45.6830)
2015-08-26 11:35:45.7210|Info|      Executando timer: id:162, (11:35:45.7210)
2015-08-26 11:35:45.7241|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:45.7241|Info|      Encerrado timer: id:162, (11:35:45.7250)
2015-08-26 11:35:45.7461|Info|      Executando timer: id:160, (11:35:45.7461)
2015-08-26 11:35:45.7461|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:45.7461|Info|  Settimeout: id:163, (76) ms
2015-08-26 11:35:45.8041|Info|      Encerrado timer: id:160, (11:35:45.8041)
2015-08-26 11:35:45.8311|Info|      Executando timer: id:163, (11:35:45.8311)
2015-08-26 11:35:45.8311|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:45.8311|Info|      Encerrado timer: id:163, (11:35:45.8321)
2015-08-26 11:35:45.8672|Info|      Executando timer: id:161, (11:35:45.8672)
2015-08-26 11:35:45.8672|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:45.8672|Info|  Settimeout: id:164, (13) ms
2015-08-26 11:35:45.9212|Info|      Encerrado timer: id:161, (11:35:45.9212)
2015-08-26 11:35:45.9212|Info|      Executando timer: id:164, (11:35:45.9212)
2015-08-26 11:35:45.9212|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:45.9212|Info| FAIL - throttle repeatedly with results
2015-08-26 11:35:45.9212|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 11:35:45.9212|Info|    PASS | EQ | delayed the function
2015-08-26 11:35:45.9212|Info|    PASS | EQ | incr was called once
2015-08-26 11:35:45.9272|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:45.9272|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:35:45.9272|Info|    PASS | EQ | incr was called twice
2015-08-26 11:35:45.9272|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:45.9272|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:35:45.9272|Info|  Settimeout: id:165, (32) ms
2015-08-26 11:35:45.9882|Info|  Settimeout: id:166, (96) ms
2015-08-26 11:35:46.0403|Info|      Encerrado timer: id:164, (11:35:46.0403)
2015-08-26 11:35:46.0403|Info|      Executando timer: id:165, (11:35:46.0413)
2015-08-26 11:35:46.0403|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:46.0403|Info|      Encerrado timer: id:165, (11:35:46.0453)
2015-08-26 11:35:46.0873|Info|      Executando timer: id:166, (11:35:46.0873)
2015-08-26 11:35:46.0873|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:46.0873|Info|  Settimeout: id:167, (13) ms
2015-08-26 11:35:46.1494|Info|      Encerrado timer: id:166, (11:35:46.1494)
2015-08-26 11:35:46.1494|Info|      Executando timer: id:167, (11:35:46.1494)
2015-08-26 11:35:46.1494|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:46.1494|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-26 11:35:46.1494|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 11:35:46.1494|Info|    PASS | EQ | delayed the function
2015-08-26 11:35:46.1494|Info|    PASS | EQ | incr was called once
2015-08-26 11:35:46.1494|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:46.1494|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:35:46.1494|Info|    PASS | EQ | incr was called twice
2015-08-26 11:35:46.1494|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:46.1494|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:35:46.1494|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:35:46.1494|Info|    PASS | EQ | okay
2015-08-26 11:35:46.1494|Info|  Settimeout: id:168, (100) ms
2015-08-26 11:35:46.2094|Info|  Settimeout: id:169, (50) ms
2015-08-26 11:35:46.2604|Info|  Settimeout: id:170, (60) ms
2015-08-26 11:35:46.3135|Info|  Settimeout: id:171, (200) ms
2015-08-26 11:35:46.3655|Info|  Settimeout: id:172, (250) ms
2015-08-26 11:35:46.4165|Info|  Settimeout: id:173, (350) ms
2015-08-26 11:35:46.4676|Info|      Encerrado timer: id:167, (11:35:46.4676)
2015-08-26 11:35:46.4676|Info|      Executando timer: id:168, (11:35:46.4696)
2015-08-26 11:35:46.4676|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:46.4736|Info|      Encerrado timer: id:168, (11:35:46.4736)
2015-08-26 11:35:46.4736|Info|      Executando timer: id:169, (11:35:46.4746)
2015-08-26 11:35:46.4736|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:46.4736|Info|  Settimeout: id:174, (100) ms
2015-08-26 11:35:46.5296|Info|      Encerrado timer: id:169, (11:35:46.5296)
2015-08-26 11:35:46.5296|Info|      Executando timer: id:170, (11:35:46.5296)
2015-08-26 11:35:46.5296|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:46.5296|Info|      Encerrado timer: id:170, (11:35:46.5316)
2015-08-26 11:35:46.5296|Info|      Executando timer: id:171, (11:35:46.5316)
2015-08-26 11:35:46.5296|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:46.5296|Info|      Encerrado timer: id:171, (11:35:46.5336)
2015-08-26 11:35:46.5807|Info|      Executando timer: id:174, (11:35:46.5807)
2015-08-26 11:35:46.5807|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:35:46.5807|Info|      Encerrado timer: id:174, (11:35:46.5817)
2015-08-26 11:35:46.6177|Info|      Executando timer: id:172, (11:35:46.6177)
2015-08-26 11:35:46.6177|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:46.6177|Info|      Encerrado timer: id:172, (11:35:46.6207)
2015-08-26 11:35:46.7688|Info|      Executando timer: id:173, (11:35:46.7688)
2015-08-26 11:35:46.7698|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:46.7698|Info|  Settimeout: id:175, (13) ms
2015-08-26 11:35:46.8218|Info|      Encerrado timer: id:173, (11:35:46.8218)
2015-08-26 11:35:46.8218|Info|      Executando timer: id:175, (11:35:46.8218)
2015-08-26 11:35:46.8218|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:46.8218|Info| FAIL - more throttle does not trigger leading call when leading is set to false
2015-08-26 11:35:46.8218|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 11:35:46.8218|Info|    PASS | EQ | delayed the function
2015-08-26 11:35:46.8218|Info|    PASS | EQ | incr was called once
2015-08-26 11:35:46.8218|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:46.8218|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:35:46.8218|Info|    PASS | EQ | incr was called twice
2015-08-26 11:35:46.8218|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:46.8218|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:35:46.8218|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:35:46.8218|Info|    PASS | EQ | okay
2015-08-26 11:35:46.8218|Info|    PASS | EQ | ok
2015-08-26 11:35:46.8218|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 11:35:46.8218|Info|    PASS | EQ | ok
2015-08-26 11:35:46.8218|Info|  Settimeout: id:176, (64) ms
2015-08-26 11:35:46.8829|Info|  Settimeout: id:177, (16) ms
2015-08-26 11:35:46.9339|Info|  Settimeout: id:178, (32) ms
2015-08-26 11:35:46.9950|Info|  Settimeout: id:179, (48) ms
2015-08-26 11:35:47.0470|Info|  Settimeout: id:180, (128) ms
2015-08-26 11:35:47.0980|Info|      Encerrado timer: id:175, (11:35:47.0980)
2015-08-26 11:35:47.0980|Info|      Executando timer: id:176, (11:35:47.0980)
2015-08-26 11:35:47.0980|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:47.0980|Info|      Encerrado timer: id:176, (11:35:47.1000)
2015-08-26 11:35:47.0980|Info|      Executando timer: id:177, (11:35:47.1000)
2015-08-26 11:35:47.0980|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:47.0980|Info|  Settimeout: id:181, (64) ms
2015-08-26 11:35:47.1531|Info|      Encerrado timer: id:177, (11:35:47.1531)
2015-08-26 11:35:47.1531|Info|      Executando timer: id:178, (11:35:47.1541)
2015-08-26 11:35:47.1531|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:47.1531|Info|      Encerrado timer: id:178, (11:35:47.1551)
2015-08-26 11:35:47.1531|Info|      Executando timer: id:179, (11:35:47.1561)
2015-08-26 11:35:47.1531|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:47.1531|Info|      Encerrado timer: id:179, (11:35:47.1581)
2015-08-26 11:35:47.1681|Info|      Executando timer: id:181, (11:35:47.1681)
2015-08-26 11:35:47.1681|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:47.1681|Info|  Settimeout: id:182, (52) ms
2015-08-26 11:35:47.2211|Info|      Encerrado timer: id:181, (11:35:47.2211)
2015-08-26 11:35:47.2211|Info|      Executando timer: id:180, (11:35:47.2221)
2015-08-26 11:35:47.2231|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:35:47.2231|Info|  Settimeout: id:183, (13) ms
2015-08-26 11:35:47.2762|Info|      Encerrado timer: id:180, (11:35:47.2762)
2015-08-26 11:35:47.2762|Info|      Executando timer: id:182, (11:35:47.2762)
2015-08-26 11:35:47.2762|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:35:47.2762|Info|      Encerrado timer: id:182, (11:35:47.2782)
2015-08-26 11:35:47.2762|Info|      Executando timer: id:183, (11:35:47.2782)
2015-08-26 11:35:47.2762|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:35:47.2762|Info| FAIL - debounce asap
2015-08-26 11:35:47.2762|Info|    FAIL | EQ | didn't delay the function quite yet | Expected: true, Actual: false
2015-08-26 11:35:47.2762|Info|    PASS | EQ | delayed the function
2015-08-26 11:35:47.2762|Info|    PASS | EQ | incr was called once
2015-08-26 11:35:47.2762|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:47.2762|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:35:47.2762|Info|    PASS | EQ | incr was called twice
2015-08-26 11:35:47.2762|Info|    PASS | EQ | incr was throttled
2015-08-26 11:35:47.2762|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:35:47.2762|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:35:47.2862|Info|    PASS | EQ | okay
2015-08-26 11:35:47.2862|Info|    PASS | EQ | ok
2015-08-26 11:35:47.2862|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 11:35:47.2862|Info|    PASS | EQ | ok
2015-08-26 11:35:47.2862|Info|    PASS | EQ | ok
2015-08-26 11:35:47.2862|Info|    PASS | EQ | ok
2015-08-26 11:35:47.2862|Info|    PASS | EQ | incr was called immediately
2015-08-26 11:35:47.2862|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-26 11:35:47.2862|Info|----------------------------------------
2015-08-26 11:35:47.2862|Info|    PASS: 1368  FAIL: 6  TOTAL: 1374
2015-08-26 11:35:47.2862|Info|    Finished in 13833 milliseconds.
2015-08-26 11:35:47.2862|Info|----------------------------------------
2015-08-26 11:35:47.3062|Info|      Encerrado timer: id:183, (11:35:47.3062)
2015-08-26 11:35:47.3062|Info|Encerrando os testes
2015-08-26 11:35:47.3062|Info|Total:1374, Sucesso: 1368, Falha: 6
2015-08-26 11:35:47.3062|Info|14 segundos para avaliar o individuo underscore.js
2015-08-26 11:35:47.3062|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:underscoreTests:1812:32)
    at Script Document [17]:1:23
2015-08-26 11:35:47.3062|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [77]:1:24
2015-08-26 11:35:47.3062|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Object.<anonymous> (V8Runtime:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime:Qunit:894:28)
    at V8Runtime:Qunit:1023:11
    at process (V8Runtime:Qunit:583:24)
    at begin (V8Runtime:Qunit:628:2)
2015-08-26 11:35:47.3062|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [103]:1:24
2015-08-26 11:35:47.3062|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [153]:1:24
2015-08-26 11:35:47.3062|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at V8Runtime:underscoreTests:2898:5
    at V8Runtime:underscoreTests:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (V8Runtime:underscoreTests:2900:65)
    at Object.Test.run (V8Runtime:Qunit:894:28)
    at V8Runtime:Qunit:1023:11
    at process (V8Runtime:Qunit:583:24)
    at begin (V8Runtime:Qunit:628:2)
    at Array.<anonymous> (V8Runtime:Qunit:643:4)
    at Script Document [179]:1:24
2015-08-26 11:35:47.3062|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:underscoreTests:1812:32)
    at Script Document [183]:1:24
2015-08-26 11:35:47.3062|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [203]:1:24
2015-08-26 11:35:47.3062|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Object.<anonymous> (V8Runtime:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime:Qunit:894:28)
    at V8Runtime:Qunit:1023:11
    at process (V8Runtime:Qunit:583:24)
    at begin (V8Runtime:Qunit:628:2)
2015-08-26 11:35:47.3062|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [223]:1:25
2015-08-26 11:35:47.3062|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [239]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:underscoreTests:1812:32)
    at Script Document [247]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [267]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Object.<anonymous> (V8Runtime:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime:Qunit:894:28)
    at V8Runtime:Qunit:1023:11
    at process (V8Runtime:Qunit:583:24)
    at begin (V8Runtime:Qunit:628:2)
2015-08-26 11:35:47.3172|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [287]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [301]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:underscoreTests:1812:32)
    at Script Document [311]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [331]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Object.<anonymous> (V8Runtime:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime:Qunit:894:28)
    at V8Runtime:Qunit:1023:11
    at process (V8Runtime:Qunit:583:24)
    at begin (V8Runtime:Qunit:628:2)
2015-08-26 11:35:47.3172|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [351]:1:25
2015-08-26 11:35:47.3172|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime:Qunit:1906:13
    at V8Runtime:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime:underscore:768:19)
    at Script Document [367]:1:25
2015-08-26 11:36:03.4575|Info|Iniciando os testes
2015-08-26 11:36:05.8796|Info|Encerrando os testes
2015-08-26 11:36:05.8796|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:36:05.8796|Info|2 segundos para avaliar o individuo global.js
2015-08-26 11:36:09.8623|Info|  Settimeout: id:0, (500) ms
2015-08-26 11:36:10.3937|Info|      Executando timer: id:0, (11:36:10.3937)
2015-08-26 11:36:10.5344|Info|Iniciando os testes
2015-08-26 11:36:10.5500|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 11:36:10.5656|Info|  Settimeout: id:1, (500) ms
2015-08-26 11:36:10.6282|Info|      Encerrado timer: id:0, (11:36:10.6282)
2015-08-26 11:36:10.6282|Info|  Settimeout: id:2, (13) ms
2015-08-26 11:36:10.6594|Info|      Executando timer: id:2, (11:36:10.6594)
2015-08-26 11:36:10.6907|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:10.7062|Info|  Settimeout: id:3, (13) ms
2015-08-26 11:36:10.7688|Info|      Encerrado timer: id:2, (11:36:10.7688)
2015-08-26 11:36:10.7688|Info|      Executando timer: id:3, (11:36:10.7688)
2015-08-26 11:36:10.7688|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:10.8469|Info|  Settimeout: id:4, (32) ms
2015-08-26 11:36:10.9094|Info|  Settimeout: id:5, (96) ms
2015-08-26 11:36:10.9719|Info|      Encerrado timer: id:3, (11:36:10.9719)
2015-08-26 11:36:10.9719|Info|      Executando timer: id:4, (11:36:10.9719)
2015-08-26 11:36:10.9719|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:10.9719|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:10.9719|Info|      Encerrado timer: id:4, (11:36:10.9719)
2015-08-26 11:36:11.0188|Info|      Executando timer: id:5, (11:36:11.0188)
2015-08-26 11:36:11.0344|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:36:11.0344|Info|  Settimeout: id:6, (13) ms
2015-08-26 11:36:11.1125|Info|      Encerrado timer: id:5, (11:36:11.1125)
2015-08-26 11:36:11.1125|Info|      Executando timer: id:1, (11:36:11.1125)
2015-08-26 11:36:11.1125|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 11:36:11.1125|Info|      Encerrado timer: id:1, (11:36:11.1125)
2015-08-26 11:36:11.1125|Info|      Executando timer: id:6, (11:36:11.1125)
2015-08-26 11:36:11.1125|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:11.1125|Info|  Settimeout: id:7, (32) ms
2015-08-26 11:36:11.1750|Info|  Settimeout: id:8, (64) ms
2015-08-26 11:36:11.2375|Info|  Settimeout: id:9, (128) ms
2015-08-26 11:36:11.3000|Info|      Encerrado timer: id:6, (11:36:11.3000)
2015-08-26 11:36:11.3000|Info|      Executando timer: id:7, (11:36:11.3000)
2015-08-26 11:36:11.3000|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:11.3000|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:11.3000|Info|      Encerrado timer: id:7, (11:36:11.3000)
2015-08-26 11:36:11.3000|Info|      Executando timer: id:8, (11:36:11.3000)
2015-08-26 11:36:11.3000|Info|          Deveria ter disparado: function () {
          notEqual(debounced('y'), 'y');
        }
2015-08-26 11:36:11.3000|Info|  Settimeout: id:10, (32) ms
2015-08-26 11:36:11.3625|Info|      Encerrado timer: id:8, (11:36:11.3625)
2015-08-26 11:36:11.3625|Info|      Executando timer: id:10, (11:36:11.3625)
2015-08-26 11:36:11.3625|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:11.3625|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:11.3625|Info|      Encerrado timer: id:10, (11:36:11.3625)
2015-08-26 11:36:11.3781|Info|      Executando timer: id:9, (11:36:11.3781)
2015-08-26 11:36:11.3781|Info|          Deveria ter disparado: function () {
          notEqual(debounced('z'), 'z');
          QUnit.start();
        }
2015-08-26 11:36:11.3781|Info|  Settimeout: id:11, (32) ms
2015-08-26 11:36:11.4407|Info|  Settimeout: id:12, (13) ms
2015-08-26 11:36:11.5032|Info|      Encerrado timer: id:9, (11:36:11.5032)
2015-08-26 11:36:11.5032|Info|      Executando timer: id:11, (11:36:11.5032)
2015-08-26 11:36:11.5032|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:11.5032|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:11.5032|Info|      Encerrado timer: id:11, (11:36:11.5032)
2015-08-26 11:36:11.5032|Info|      Executando timer: id:12, (11:36:11.5032)
2015-08-26 11:36:11.5032|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:11.5032|Info|  Settimeout: id:13, (32) ms
2015-08-26 11:36:11.5812|Info|  Settimeout: id:14, (64) ms
2015-08-26 11:36:11.6438|Info|      Encerrado timer: id:12, (11:36:11.6438)
2015-08-26 11:36:11.6438|Info|      Executando timer: id:13, (11:36:11.6438)
2015-08-26 11:36:11.6438|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:11.6438|Info|      Encerrado timer: id:13, (11:36:11.6438)
2015-08-26 11:36:11.6594|Info|      Executando timer: id:14, (11:36:11.6594)
2015-08-26 11:36:11.6594|Info|          Deveria ter disparado: function () {
          var result = [debounced('a'), debounced('b')];
          deepEqual(result, ['a', 'a']);
          QUnit.start();
        }
2015-08-26 11:36:11.6594|Info|  Settimeout: id:15, (32) ms
2015-08-26 11:36:11.7249|Info|  Settimeout: id:16, (13) ms
2015-08-26 11:36:11.7874|Info|      Encerrado timer: id:14, (11:36:11.7874)
2015-08-26 11:36:11.7874|Info|      Executando timer: id:15, (11:36:11.7874)
2015-08-26 11:36:11.7874|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:11.7874|Info|      Encerrado timer: id:15, (11:36:11.7874)
2015-08-26 11:36:11.7874|Info|      Executando timer: id:16, (11:36:11.7874)
2015-08-26 11:36:11.7874|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:11.7874|Info|  Settimeout: id:17, (32) ms
2015-08-26 11:36:11.8499|Info|  Settimeout: id:18, (64) ms
2015-08-26 11:36:11.9124|Info|      Encerrado timer: id:16, (11:36:11.9124)
2015-08-26 11:36:11.9124|Info|      Executando timer: id:17, (11:36:11.9124)
2015-08-26 11:36:11.9124|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:11.9124|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:11.9124|Info|      Encerrado timer: id:17, (11:36:11.9124)
2015-08-26 11:36:11.9281|Info|      Executando timer: id:18, (11:36:11.9281)
2015-08-26 11:36:11.9281|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:36:11.9281|Info|  Settimeout: id:19, (13) ms
2015-08-26 11:36:11.9906|Info|      Encerrado timer: id:18, (11:36:11.9906)
2015-08-26 11:36:11.9906|Info|      Executando timer: id:19, (11:36:11.9906)
2015-08-26 11:36:11.9906|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:11.9906|Info|  Settimeout: id:20, (32) ms
2015-08-26 11:36:12.0531|Info|  Settimeout: id:21, (32) ms
2015-08-26 11:36:12.1156|Info|  Settimeout: id:22, (32) ms
2015-08-26 11:36:12.1781|Info|  Settimeout: id:23, (64) ms
2015-08-26 11:36:12.2406|Info|      Encerrado timer: id:19, (11:36:12.2406)
2015-08-26 11:36:12.2406|Info|      Executando timer: id:20, (11:36:12.2406)
2015-08-26 11:36:12.2406|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:12.2406|Info|      Encerrado timer: id:20, (11:36:12.2406)
2015-08-26 11:36:12.2406|Info|      Executando timer: id:21, (11:36:12.2406)
2015-08-26 11:36:12.2406|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:12.2406|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:12.2561|Info|      Encerrado timer: id:21, (11:36:12.2561)
2015-08-26 11:36:12.2561|Info|      Executando timer: id:22, (11:36:12.2561)
2015-08-26 11:36:12.2561|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:12.2561|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:12.2561|Info|      Encerrado timer: id:22, (11:36:12.2561)
2015-08-26 11:36:12.2561|Info|      Executando timer: id:23, (11:36:12.2561)
2015-08-26 11:36:12.2718|Info|          Deveria ter disparado: function () {
          deepEqual(callCounts, [1, 2]);

          withLeading('x');
          strictEqual(callCounts[0], 2);

          QUnit.start();
        }
2015-08-26 11:36:12.2718|Info|  Settimeout: id:24, (32) ms
2015-08-26 11:36:12.3343|Info|  Settimeout: id:25, (13) ms
2015-08-26 11:36:12.3968|Info|      Encerrado timer: id:23, (11:36:12.3968)
2015-08-26 11:36:12.3968|Info|      Executando timer: id:24, (11:36:12.3968)
2015-08-26 11:36:12.3968|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:12.3968|Info|      Encerrado timer: id:24, (11:36:12.3968)
2015-08-26 11:36:12.3968|Info|      Executando timer: id:25, (11:36:12.3968)
2015-08-26 11:36:12.3968|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:12.3968|Info|  Settimeout: id:26, (32) ms
2015-08-26 11:36:12.4749|Info|  Settimeout: id:27, (32) ms
2015-08-26 11:36:12.5374|Info|  Settimeout: id:28, (64) ms
2015-08-26 11:36:12.5999|Info|      Encerrado timer: id:25, (11:36:12.5999)
2015-08-26 11:36:12.5999|Info|      Executando timer: id:26, (11:36:12.5999)
2015-08-26 11:36:12.5999|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:12.5999|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:12.5999|Info|      Encerrado timer: id:26, (11:36:12.5999)
2015-08-26 11:36:12.5999|Info|      Executando timer: id:27, (11:36:12.5999)
2015-08-26 11:36:12.5999|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:12.5999|Info|      Encerrado timer: id:27, (11:36:12.5999)
2015-08-26 11:36:12.6155|Info|      Executando timer: id:28, (11:36:12.6155)
2015-08-26 11:36:12.6155|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 1);
          strictEqual(withoutCount, 0);
          QUnit.start();
        }
2015-08-26 11:36:12.6155|Info|  Settimeout: id:29, (13) ms
2015-08-26 11:36:12.6936|Info|      Encerrado timer: id:28, (11:36:12.6936)
2015-08-26 11:36:12.6936|Info|      Executando timer: id:29, (11:36:12.6936)
2015-08-26 11:36:12.6936|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:12.6936|Info|  Settimeout: id:30, (128) ms
2015-08-26 11:36:12.7562|Info|  Settimeout: id:31, (64) ms
2015-08-26 11:36:12.8187|Info|  Settimeout: id:32, (96) ms
2015-08-26 11:36:12.8812|Info|  Settimeout: id:33, (128) ms
2015-08-26 11:36:12.9437|Info|  Settimeout: id:34, (64) ms
2015-08-26 11:36:13.0218|Info|  Settimeout: id:35, (1) ms
2015-08-26 11:36:13.0843|Info|      Encerrado timer: id:29, (11:36:13.0843)
2015-08-26 11:36:13.0843|Info|      Executando timer: id:32, (11:36:13.0843)
2015-08-26 11:36:13.0843|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:13.0843|Info|  Settimeout: id:36, (18) ms
2015-08-26 11:36:13.1468|Info|      Encerrado timer: id:32, (11:36:13.1468)
2015-08-26 11:36:13.1468|Info|      Executando timer: id:34, (11:36:13.1468)
2015-08-26 11:36:13.1468|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:13.1468|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:13.1468|Info|      Encerrado timer: id:34, (11:36:13.1468)
2015-08-26 11:36:13.1468|Info|      Executando timer: id:35, (11:36:13.1468)
2015-08-26 11:36:13.1468|Info|          Deveria ter disparado: function () {
          deepEqual(actual, [true, false]);
          QUnit.start();
        }
2015-08-26 11:36:13.1624|Info|  Settimeout: id:37, (13) ms
2015-08-26 11:36:13.2249|Info|      Encerrado timer: id:35, (11:36:13.2249)
2015-08-26 11:36:13.2249|Info|      Executando timer: id:36, (11:36:13.2249)
2015-08-26 11:36:13.2249|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:13.2249|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:13.2249|Info|      Encerrado timer: id:36, (11:36:13.2249)
2015-08-26 11:36:13.2249|Info|      Executando timer: id:37, (11:36:13.2249)
2015-08-26 11:36:13.2249|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:13.2405|Info|  Settimeout: id:38, (64) ms
2015-08-26 11:36:13.3031|Info|  Settimeout: id:39, (32) ms
2015-08-26 11:36:13.3658|Info|  Settimeout: id:40, (128) ms
2015-08-26 11:36:13.4283|Info|      Encerrado timer: id:37, (11:36:13.4283)
2015-08-26 11:36:13.4283|Info|      Executando timer: id:38, (11:36:13.4283)
2015-08-26 11:36:13.4283|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:13.4283|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:13.4283|Info|      Encerrado timer: id:38, (11:36:13.4283)
2015-08-26 11:36:13.5065|Info|      Executando timer: id:40, (11:36:13.5065)
2015-08-26 11:36:13.5065|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:36:13.5065|Info|  Settimeout: id:41, (13) ms
2015-08-26 11:36:13.5690|Info|      Encerrado timer: id:40, (11:36:13.5690)
2015-08-26 11:36:13.5690|Info|      Executando timer: id:41, (11:36:13.5690)
2015-08-26 11:36:13.5690|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:13.5690|Info|  Settimeout: id:42, (32) ms
2015-08-26 11:36:13.6315|Info|  Settimeout: id:43, (2) ms
2015-08-26 11:36:13.6940|Info|  Settimeout: id:44, (64) ms
2015-08-26 11:36:13.7565|Info|      Encerrado timer: id:41, (11:36:13.7565)
2015-08-26 11:36:13.7721|Info|      Executando timer: id:44, (11:36:13.7721)
2015-08-26 11:36:13.7721|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          deepEqual(actual, [object, 'a']);
          QUnit.start();
        }
2015-08-26 11:36:13.7721|Info|  Settimeout: id:45, (13) ms
2015-08-26 11:36:13.8346|Info|      Encerrado timer: id:44, (11:36:13.8346)
2015-08-26 11:36:13.8346|Info|      Executando timer: id:45, (11:36:13.8346)
2015-08-26 11:36:13.8346|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:13.8346|Info|  Settimeout: id:46, (1) ms
2015-08-26 11:36:13.8971|Info|  Settimeout: id:47, (32) ms
2015-08-26 11:36:13.9596|Info|      Encerrado timer: id:45, (11:36:13.9596)
2015-08-26 11:36:13.9596|Info|      Executando timer: id:46, (11:36:13.9596)
2015-08-26 11:36:13.9596|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:13.9596|Info|      Encerrado timer: id:46, (11:36:13.9596)
2015-08-26 11:36:13.9596|Info|      Executando timer: id:47, (11:36:13.9596)
2015-08-26 11:36:13.9596|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:13.9596|Info|  Settimeout: id:48, (13) ms
2015-08-26 11:36:14.0221|Info|      Encerrado timer: id:47, (11:36:14.0221)
2015-08-26 11:36:14.0221|Info|      Executando timer: id:48, (11:36:14.0221)
2015-08-26 11:36:14.0221|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:14.0221|Info|  Settimeout: id:49, (1) ms
2015-08-26 11:36:14.0846|Info|  Settimeout: id:50, (32) ms
2015-08-26 11:36:14.1471|Info|      Encerrado timer: id:48, (11:36:14.1471)
2015-08-26 11:36:14.1471|Info|      Executando timer: id:49, (11:36:14.1471)
2015-08-26 11:36:14.1471|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:14.1471|Info|      Encerrado timer: id:49, (11:36:14.1471)
2015-08-26 11:36:14.1471|Info|      Executando timer: id:50, (11:36:14.1471)
2015-08-26 11:36:14.1471|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-26 11:36:14.1471|Info|  Settimeout: id:51, (13) ms
2015-08-26 11:36:14.2252|Info|      Encerrado timer: id:50, (11:36:14.2252)
2015-08-26 11:36:14.2252|Info|      Executando timer: id:51, (11:36:14.2252)
2015-08-26 11:36:14.2252|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:14.2252|Info|  Settimeout: id:52, (1) ms
2015-08-26 11:36:14.2877|Info|  Settimeout: id:53, (32) ms
2015-08-26 11:36:14.3502|Info|      Encerrado timer: id:51, (11:36:14.3502)
2015-08-26 11:36:14.3502|Info|      Executando timer: id:53, (11:36:14.3502)
2015-08-26 11:36:14.3502|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:14.3502|Info|  Settimeout: id:54, (13) ms
2015-08-26 11:36:14.4127|Info|      Encerrado timer: id:53, (11:36:14.4127)
2015-08-26 11:36:14.4127|Info|      Executando timer: id:54, (11:36:14.4127)
2015-08-26 11:36:14.4127|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:14.4127|Info|  Settimeout: id:55, (32) ms
2015-08-26 11:36:14.4752|Info|  Settimeout: id:56, (1) ms
2015-08-26 11:36:14.5377|Info|  Settimeout: id:57, (64) ms
2015-08-26 11:36:14.6002|Info|      Encerrado timer: id:54, (11:36:14.6002)
2015-08-26 11:36:14.6002|Info|      Executando timer: id:55, (11:36:14.6002)
2015-08-26 11:36:14.6002|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:14.6002|Info|      Encerrado timer: id:55, (11:36:14.6002)
2015-08-26 11:36:14.6002|Info|      Executando timer: id:56, (11:36:14.6002)
2015-08-26 11:36:14.6002|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:14.6158|Info|      Encerrado timer: id:56, (11:36:14.6158)
2015-08-26 11:36:14.6158|Info|      Executando timer: id:57, (11:36:14.6158)
2015-08-26 11:36:14.6158|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:14.6158|Info|  Settimeout: id:58, (13) ms
2015-08-26 11:36:14.6784|Info|      Encerrado timer: id:57, (11:36:14.6784)
2015-08-26 11:36:14.6784|Info|      Executando timer: id:58, (11:36:14.6784)
2015-08-26 11:36:14.6784|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:14.6784|Info|  Settimeout: id:59, (32) ms
2015-08-26 11:36:14.7409|Info|  Settimeout: id:60, (64) ms
2015-08-26 11:36:14.8034|Info|      Encerrado timer: id:58, (11:36:14.8034)
2015-08-26 11:36:14.8034|Info|      Executando timer: id:59, (11:36:14.8034)
2015-08-26 11:36:14.8034|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:14.8034|Info|      Encerrado timer: id:59, (11:36:14.8034)
2015-08-26 11:36:14.8190|Info|      Executando timer: id:60, (11:36:14.8190)
2015-08-26 11:36:14.8190|Info|          Deveria ter disparado: function () {
          deepEqual(args, [1, 2]);
          QUnit.start();
        }
2015-08-26 11:36:14.8190|Info|  Settimeout: id:61, (13) ms
2015-08-26 11:36:14.8815|Info|      Encerrado timer: id:60, (11:36:14.8815)
2015-08-26 11:36:14.8815|Info|      Executando timer: id:61, (11:36:14.8815)
2015-08-26 11:36:14.8815|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:14.8815|Info|  Settimeout: id:62, (32) ms
2015-08-26 11:36:14.9439|Info|  Settimeout: id:63, (64) ms
2015-08-26 11:36:15.0065|Info|      Encerrado timer: id:61, (11:36:15.0065)
2015-08-26 11:36:15.0221|Info|      Executando timer: id:63, (11:36:15.0221)
2015-08-26 11:36:15.0221|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:15.0221|Info|  Settimeout: id:64, (13) ms
2015-08-26 11:36:15.0846|Info|      Encerrado timer: id:63, (11:36:15.0846)
2015-08-26 11:36:15.0846|Info|      Executando timer: id:64, (11:36:15.0846)
2015-08-26 11:36:15.0846|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:16.9551|Info|  Settimeout: id:65, (13) ms
2015-08-26 11:36:17.0177|Info|      Encerrado timer: id:64, (11:36:17.0177)
2015-08-26 11:36:17.0177|Info|      Executando timer: id:65, (11:36:17.0177)
2015-08-26 11:36:17.0177|Info|          Deveria ter disparado: function next() {
		process( last );
	}
2015-08-26 11:36:17.0801|Info|----------------------------------------
2015-08-26 11:36:17.0801|Info|lodash.isNil
2015-08-26 11:36:17.0801|Info|----------------------------------------
2015-08-26 11:36:17.0801|Info| FAIL - should work with nulls from another realm
2015-08-26 11:36:17.0958|Info|    FAIL | OK | Expected 2 assertions, but 1 were run
2015-08-26 11:36:17.3145|Info|  Settimeout: id:66, (32) ms
2015-08-26 11:36:17.3771|Info|      Encerrado timer: id:65, (11:36:17.3771)
2015-08-26 11:36:17.3771|Info|      Executando timer: id:66, (11:36:17.3771)
2015-08-26 11:36:17.3771|Info|          Deveria ter disparado: function () {
          ok(_.now() > actual);
          QUnit.start();
        }
2015-08-26 11:36:17.3771|Info|  Settimeout: id:67, (13) ms
2015-08-26 11:36:17.4396|Info|      Encerrado timer: id:66, (11:36:17.4396)
2015-08-26 11:36:17.4396|Info|      Executando timer: id:67, (11:36:17.4396)
2015-08-26 11:36:17.4396|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:17.5801|Info|  Settimeout: id:68, (32) ms
2015-08-26 11:36:17.6427|Info|  Settimeout: id:69, (64) ms
2015-08-26 11:36:17.7052|Info|      Encerrado timer: id:67, (11:36:17.7052)
2015-08-26 11:36:17.7208|Info|      Executando timer: id:69, (11:36:17.7208)
2015-08-26 11:36:17.7208|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:17.7208|Info|  Settimeout: id:70, (13) ms
2015-08-26 11:36:17.7833|Info|      Encerrado timer: id:69, (11:36:17.7833)
2015-08-26 11:36:17.7833|Info|      Executando timer: id:70, (11:36:17.7833)
2015-08-26 11:36:17.7833|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:17.7833|Info|  Settimeout: id:71, (32) ms
2015-08-26 11:36:17.8458|Info|  Settimeout: id:72, (64) ms
2015-08-26 11:36:17.9083|Info|      Encerrado timer: id:70, (11:36:17.9083)
2015-08-26 11:36:17.9083|Info|      Executando timer: id:71, (11:36:17.9083)
2015-08-26 11:36:17.9083|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:17.9083|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:17.9083|Info|      Encerrado timer: id:71, (11:36:17.9083)
2015-08-26 11:36:17.9239|Info|      Executando timer: id:72, (11:36:17.9239)
2015-08-26 11:36:17.9239|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:17.9239|Info|  Settimeout: id:73, (16) ms
2015-08-26 11:36:17.9864|Info|  Settimeout: id:74, (13) ms
2015-08-26 11:36:18.0489|Info|      Encerrado timer: id:72, (11:36:18.0489)
2015-08-26 11:36:18.0489|Info|      Executando timer: id:74, (11:36:18.0489)
2015-08-26 11:36:18.0489|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:18.0489|Info|  Settimeout: id:75, (32) ms
2015-08-26 11:36:18.1114|Info|  Settimeout: id:76, (64) ms
2015-08-26 11:36:18.1739|Info|      Encerrado timer: id:74, (11:36:18.1739)
2015-08-26 11:36:18.1896|Info|      Executando timer: id:76, (11:36:18.1896)
2015-08-26 11:36:18.1928|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:36:18.1928|Info|  Settimeout: id:77, (13) ms
2015-08-26 11:36:18.2561|Info|      Encerrado timer: id:76, (11:36:18.2561)
2015-08-26 11:36:18.2561|Info|      Executando timer: id:77, (11:36:18.2561)
2015-08-26 11:36:18.2561|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:18.2561|Info|  Settimeout: id:78, (64) ms
2015-08-26 11:36:18.3186|Info|      Encerrado timer: id:77, (11:36:18.3186)
2015-08-26 11:36:18.3343|Info|      Executando timer: id:78, (11:36:18.3343)
2015-08-26 11:36:18.3343|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 1);
          QUnit.start();
        }
2015-08-26 11:36:18.3343|Info|  Settimeout: id:79, (13) ms
2015-08-26 11:36:18.3967|Info|      Encerrado timer: id:78, (11:36:18.3967)
2015-08-26 11:36:18.3967|Info|      Executando timer: id:79, (11:36:18.3967)
2015-08-26 11:36:18.3967|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:18.3967|Info|  Settimeout: id:80, (32) ms
2015-08-26 11:36:18.4592|Info|  Settimeout: id:81, (32) ms
2015-08-26 11:36:18.5217|Info|  Settimeout: id:82, (32) ms
2015-08-26 11:36:18.5842|Info|  Settimeout: id:83, (32) ms
2015-08-26 11:36:18.6467|Info|  Settimeout: id:84, (32) ms
2015-08-26 11:36:18.7092|Info|  Settimeout: id:85, (32) ms
2015-08-26 11:36:18.7717|Info|  Settimeout: id:86, (1) ms
2015-08-26 11:36:18.8342|Info|      Encerrado timer: id:79, (11:36:18.8342)
2015-08-26 11:36:18.8342|Info|      Executando timer: id:85, (11:36:18.8342)
2015-08-26 11:36:18.8342|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:18.8342|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:18.8342|Info|      Encerrado timer: id:85, (11:36:18.8342)
2015-08-26 11:36:18.8342|Info|      Executando timer: id:86, (11:36:18.8342)
2015-08-26 11:36:18.8342|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-26 11:36:18.8342|Info|  Settimeout: id:87, (13) ms
2015-08-26 11:36:18.9124|Info|      Encerrado timer: id:86, (11:36:18.9124)
2015-08-26 11:36:18.9124|Info|      Executando timer: id:87, (11:36:18.9124)
2015-08-26 11:36:18.9124|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:18.9124|Info|  Settimeout: id:88, (32) ms
2015-08-26 11:36:18.9749|Info|  Settimeout: id:89, (32) ms
2015-08-26 11:36:19.0374|Info|  Settimeout: id:90, (32) ms
2015-08-26 11:36:19.0999|Info|  Settimeout: id:91, (32) ms
2015-08-26 11:36:19.1624|Info|  Settimeout: id:92, (32) ms
2015-08-26 11:36:19.2249|Info|  Settimeout: id:93, (32) ms
2015-08-26 11:36:19.2873|Info|  Settimeout: id:94, (1) ms
2015-08-26 11:36:19.3501|Info|      Encerrado timer: id:87, (11:36:19.3501)
2015-08-26 11:36:19.3501|Info|      Executando timer: id:93, (11:36:19.3501)
2015-08-26 11:36:19.3501|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:19.3501|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:19.3501|Info|      Encerrado timer: id:93, (11:36:19.3501)
2015-08-26 11:36:19.3501|Info|      Executando timer: id:94, (11:36:19.3501)
2015-08-26 11:36:19.3501|Info|          Deveria ter disparado: function () {
            ok(actual);
            QUnit.start();
          }
2015-08-26 11:36:19.3658|Info|  Settimeout: id:95, (13) ms
2015-08-26 11:36:19.4283|Info|      Encerrado timer: id:94, (11:36:19.4283)
2015-08-26 11:36:19.4283|Info|      Executando timer: id:95, (11:36:19.4283)
2015-08-26 11:36:19.4283|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:19.4283|Info|  Settimeout: id:96, (32) ms
2015-08-26 11:36:19.4908|Info|  Settimeout: id:97, (128) ms
2015-08-26 11:36:19.5533|Info|      Encerrado timer: id:95, (11:36:19.5533)
2015-08-26 11:36:19.5533|Info|      Executando timer: id:96, (11:36:19.5533)
2015-08-26 11:36:19.5533|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:19.5533|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:19.5533|Info|      Encerrado timer: id:96, (11:36:19.5533)
2015-08-26 11:36:19.6314|Info|      Executando timer: id:97, (11:36:19.6314)
2015-08-26 11:36:19.6314|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:36:19.6314|Info|  Settimeout: id:98, (13) ms
2015-08-26 11:36:19.6939|Info|      Encerrado timer: id:97, (11:36:19.6939)
2015-08-26 11:36:19.6939|Info|      Executando timer: id:98, (11:36:19.6939)
2015-08-26 11:36:19.6939|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:19.6939|Info|  Settimeout: id:99, (32) ms
2015-08-26 11:36:19.7564|Info|  Settimeout: id:100, (64) ms
2015-08-26 11:36:19.8189|Info|  Settimeout: id:101, (64) ms
2015-08-26 11:36:19.8814|Info|  Settimeout: id:102, (256) ms
2015-08-26 11:36:19.9439|Info|      Encerrado timer: id:98, (11:36:19.9439)
2015-08-26 11:36:19.9439|Info|      Executando timer: id:99, (11:36:19.9439)
2015-08-26 11:36:19.9595|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:19.9595|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:19.9595|Info|      Encerrado timer: id:99, (11:36:19.9595)
2015-08-26 11:36:19.9595|Info|      Executando timer: id:100, (11:36:19.9595)
2015-08-26 11:36:19.9595|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:19.9595|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:19.9751|Info|      Encerrado timer: id:100, (11:36:19.9751)
2015-08-26 11:36:19.9751|Info|      Executando timer: id:101, (11:36:19.9751)
2015-08-26 11:36:19.9751|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:19.9751|Info|      Encerrado timer: id:101, (11:36:19.9751)
2015-08-26 11:36:20.1427|Info|      Executando timer: id:102, (11:36:20.1427)
2015-08-26 11:36:20.1427|Info|          Deveria ter disparado: function () {
          strictEqual(withCount, 2);
          strictEqual(withoutCount, 1);
          QUnit.start();
        }
2015-08-26 11:36:20.1427|Info|  Settimeout: id:103, (13) ms
2015-08-26 11:36:20.1957|Info|      Encerrado timer: id:102, (11:36:20.1957)
2015-08-26 11:36:20.1957|Info|      Executando timer: id:103, (11:36:20.1957)
2015-08-26 11:36:20.1957|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:20.1957|Info|  Settimeout: id:104, (64) ms
2015-08-26 11:36:20.2582|Info|  Settimeout: id:105, (96) ms
2015-08-26 11:36:20.3207|Info|  Settimeout: id:106, (192) ms
2015-08-26 11:36:20.3831|Info|      Encerrado timer: id:103, (11:36:20.3831)
2015-08-26 11:36:20.3831|Info|      Executando timer: id:104, (11:36:20.3831)
2015-08-26 11:36:20.3831|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:20.3831|Info|      Encerrado timer: id:104, (11:36:20.3831)
2015-08-26 11:36:20.3831|Info|      Executando timer: id:105, (11:36:20.3831)
2015-08-26 11:36:20.4300|Info|          Deveria ter disparado: function () {
          throttled();
          throttled();
        }
2015-08-26 11:36:20.4300|Info|  Settimeout: id:107, (64) ms
2015-08-26 11:36:20.4925|Info|      Encerrado timer: id:105, (11:36:20.4925)
2015-08-26 11:36:20.5082|Info|      Executando timer: id:107, (11:36:20.5082)
2015-08-26 11:36:20.5082|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:20.5082|Info|      Encerrado timer: id:107, (11:36:20.5082)
2015-08-26 11:36:20.5238|Info|      Executando timer: id:106, (11:36:20.5238)
2015-08-26 11:36:20.5238|Info|          Deveria ter disparado: function () {
          ok(callCount > 1);
          QUnit.start();
        }
2015-08-26 11:36:20.5238|Info|  Settimeout: id:108, (13) ms
2015-08-26 11:36:20.5863|Info|      Encerrado timer: id:106, (11:36:20.5863)
2015-08-26 11:36:20.5863|Info|      Executando timer: id:108, (11:36:20.5863)
2015-08-26 11:36:20.5863|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:20.5863|Info|  Settimeout: id:109, (0) ms
2015-08-26 11:36:20.6488|Info|  Settimeout: id:110, (32) ms
2015-08-26 11:36:20.7113|Info|      Encerrado timer: id:108, (11:36:20.7113)
2015-08-26 11:36:20.7113|Info|      Executando timer: id:109, (11:36:20.7113)
2015-08-26 11:36:20.7113|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:20.7113|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:20.7113|Info|      Encerrado timer: id:109, (11:36:20.7113)
2015-08-26 11:36:20.7113|Info|      Executando timer: id:110, (11:36:20.7113)
2015-08-26 11:36:20.7113|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:36:20.7113|Info|  Settimeout: id:111, (0) ms
2015-08-26 11:36:20.7738|Info|  Settimeout: id:112, (13) ms
2015-08-26 11:36:20.8363|Info|      Encerrado timer: id:110, (11:36:20.8363)
2015-08-26 11:36:20.8363|Info|      Executando timer: id:111, (11:36:20.8363)
2015-08-26 11:36:20.8363|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:20.8363|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:20.8363|Info|      Encerrado timer: id:111, (11:36:20.8363)
2015-08-26 11:36:20.8363|Info|      Executando timer: id:112, (11:36:20.8363)
2015-08-26 11:36:20.8363|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:20.8363|Info|  Settimeout: id:113, (32) ms
2015-08-26 11:36:20.9144|Info|  Settimeout: id:114, (64) ms
2015-08-26 11:36:20.9769|Info|      Encerrado timer: id:112, (11:36:20.9769)
2015-08-26 11:36:20.9769|Info|      Executando timer: id:113, (11:36:20.9769)
2015-08-26 11:36:20.9769|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:20.9769|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:20.9769|Info|      Encerrado timer: id:113, (11:36:20.9769)
2015-08-26 11:36:20.9926|Info|      Executando timer: id:114, (11:36:20.9926)
2015-08-26 11:36:20.9926|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-26 11:36:20.9926|Info|  Settimeout: id:115, (13) ms
2015-08-26 11:36:21.0550|Info|      Encerrado timer: id:114, (11:36:21.0550)
2015-08-26 11:36:21.0550|Info|      Executando timer: id:115, (11:36:21.0550)
2015-08-26 11:36:21.0550|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:21.0550|Info|  Settimeout: id:116, (32) ms
2015-08-26 11:36:21.1176|Info|  Settimeout: id:117, (256) ms
2015-08-26 11:36:21.1801|Info|      Encerrado timer: id:115, (11:36:21.1801)
2015-08-26 11:36:21.1801|Info|      Executando timer: id:116, (11:36:21.1801)
2015-08-26 11:36:21.1801|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:21.1801|Info|  Settimeout: id:118, (32) ms
2015-08-26 11:36:21.2426|Info|!timeoutId && !maxTimeoutId false
2015-08-26 11:36:21.2426|Info|      Encerrado timer: id:116, (11:36:21.2426)
2015-08-26 11:36:21.2426|Info|      Executando timer: id:118, (11:36:21.2426)
2015-08-26 11:36:21.2426|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:21.2426|Info|  Settimeout: id:119, (32) ms
2015-08-26 11:36:21.3051|Info|!timeoutId && !maxTimeoutId false
2015-08-26 11:36:21.3051|Info|      Encerrado timer: id:118, (11:36:21.3051)
2015-08-26 11:36:21.3051|Info|      Executando timer: id:119, (11:36:21.3051)
2015-08-26 11:36:21.3051|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:21.3051|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:21.3051|Info|      Encerrado timer: id:119, (11:36:21.3051)
2015-08-26 11:36:21.3834|Info|      Executando timer: id:117, (11:36:21.3834)
2015-08-26 11:36:21.3834|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-26 11:36:21.3834|Info|  Settimeout: id:120, (13) ms
2015-08-26 11:36:21.4459|Info|      Encerrado timer: id:117, (11:36:21.4459)
2015-08-26 11:36:21.4459|Info|      Executando timer: id:120, (11:36:21.4459)
2015-08-26 11:36:21.4459|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:21.4615|Info|  Settimeout: id:121, (32) ms
2015-08-26 11:36:21.5240|Info|  Settimeout: id:122, (64) ms
2015-08-26 11:36:21.5865|Info|      Encerrado timer: id:120, (11:36:21.5865)
2015-08-26 11:36:21.5865|Info|      Executando timer: id:121, (11:36:21.5865)
2015-08-26 11:36:21.5865|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:21.5865|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:21.5865|Info|      Encerrado timer: id:121, (11:36:21.5865)
2015-08-26 11:36:21.6022|Info|      Executando timer: id:122, (11:36:21.6022)
2015-08-26 11:36:21.6022|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:36:21.6022|Info|  Settimeout: id:123, (32) ms
2015-08-26 11:36:21.6647|Info|  Settimeout: id:124, (13) ms
2015-08-26 11:36:21.7272|Info|      Encerrado timer: id:122, (11:36:21.7272)
2015-08-26 11:36:21.7272|Info|      Executando timer: id:123, (11:36:21.7272)
2015-08-26 11:36:21.7272|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:21.7272|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:21.7272|Info|      Encerrado timer: id:123, (11:36:21.7272)
2015-08-26 11:36:21.7272|Info|      Executando timer: id:124, (11:36:21.7272)
2015-08-26 11:36:21.7272|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:21.7427|Info|  Settimeout: id:125, (32) ms
2015-08-26 11:36:21.8052|Info|  Settimeout: id:126, (64) ms
2015-08-26 11:36:21.8678|Info|      Encerrado timer: id:124, (11:36:21.8678)
2015-08-26 11:36:21.8834|Info|      Executando timer: id:126, (11:36:21.8834)
2015-08-26 11:36:21.8834|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-26 11:36:21.8834|Info|  Settimeout: id:127, (13) ms
2015-08-26 11:36:21.9459|Info|      Encerrado timer: id:126, (11:36:21.9459)
2015-08-26 11:36:21.9459|Info|      Executando timer: id:127, (11:36:21.9459)
2015-08-26 11:36:21.9459|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:21.9459|Info|  Settimeout: id:128, (32) ms
2015-08-26 11:36:22.0084|Info|  Settimeout: id:129, (32) ms
2015-08-26 11:36:22.0709|Info|  Settimeout: id:130, (64) ms
2015-08-26 11:36:22.1334|Info|      Encerrado timer: id:127, (11:36:22.1334)
2015-08-26 11:36:22.1334|Info|      Executando timer: id:129, (11:36:22.1334)
2015-08-26 11:36:22.1334|Info|          Deveria ter disparado: function delayed() {
        var remaining = wait - (now() - stamp);
        //javascriptHelper.Escrever('Entra? {0}', remaining <= 0 || remaining > wait);
		if (remaining <= 0 || remaining > wait) {
			 //javascriptHelper.Escrever('trailingCall {0}', trailingCall);
			 //javascriptHelper.Escrever('maxTimeoutId {0}', maxTimeoutId);
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }
2015-08-26 11:36:22.1334|Info|      Encerrado timer: id:129, (11:36:22.1334)
2015-08-26 11:36:22.1490|Info|      Executando timer: id:130, (11:36:22.1490)
2015-08-26 11:36:22.1490|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:36:22.1490|Info|  Settimeout: id:131, (13) ms
2015-08-26 11:36:22.2115|Info|      Encerrado timer: id:130, (11:36:22.2115)
2015-08-26 11:36:22.2115|Info|      Executando timer: id:131, (11:36:22.2115)
2015-08-26 11:36:22.2115|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:22.2115|Info|  Settimeout: id:132, (32) ms
2015-08-26 11:36:22.2741|Info|      Encerrado timer: id:131, (11:36:22.2741)
2015-08-26 11:36:22.2741|Info|      Executando timer: id:132, (11:36:22.2741)
2015-08-26 11:36:22.2741|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:36:22.2741|Info|  Settimeout: id:133, (13) ms
2015-08-26 11:36:22.3366|Info|      Encerrado timer: id:132, (11:36:22.3366)
2015-08-26 11:36:22.3366|Info|      Executando timer: id:133, (11:36:22.3366)
2015-08-26 11:36:22.3366|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:22.3366|Info|  Settimeout: id:134, (32) ms
2015-08-26 11:36:22.3991|Info|  Settimeout: id:135, (64) ms
2015-08-26 11:36:22.4615|Info|      Encerrado timer: id:133, (11:36:22.4615)
2015-08-26 11:36:22.4615|Info|      Executando timer: id:134, (11:36:22.4615)
2015-08-26 11:36:22.4615|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:22.4615|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:22.4615|Info|      Encerrado timer: id:134, (11:36:22.4615)
2015-08-26 11:36:22.4772|Info|      Executando timer: id:135, (11:36:22.4772)
2015-08-26 11:36:22.4772|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected);
          QUnit.start();
        }
2015-08-26 11:36:22.4772|Info|  Settimeout: id:136, (13) ms
2015-08-26 11:36:22.5397|Info|      Encerrado timer: id:135, (11:36:22.5397)
2015-08-26 11:36:22.5397|Info|      Executando timer: id:136, (11:36:22.5397)
2015-08-26 11:36:22.5397|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:22.5397|Info|  Settimeout: id:137, (32) ms
2015-08-26 11:36:22.6022|Info|  Settimeout: id:138, (256) ms
2015-08-26 11:36:22.6647|Info|      Encerrado timer: id:136, (11:36:22.6647)
2015-08-26 11:36:22.6647|Info|      Executando timer: id:137, (11:36:22.6647)
2015-08-26 11:36:22.6647|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:22.6647|Info|  Settimeout: id:139, (32) ms
2015-08-26 11:36:22.7272|Info|!timeoutId && !maxTimeoutId false
2015-08-26 11:36:22.7272|Info|      Encerrado timer: id:137, (11:36:22.7272)
2015-08-26 11:36:22.7272|Info|      Executando timer: id:139, (11:36:22.7272)
2015-08-26 11:36:22.7272|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:22.7428|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:22.7428|Info|      Encerrado timer: id:139, (11:36:22.7428)
2015-08-26 11:36:22.8678|Info|      Executando timer: id:138, (11:36:22.8678)
2015-08-26 11:36:22.8678|Info|          Deveria ter disparado: function () {
          deepEqual(actual, expected.slice(0, actual.length));
          QUnit.start();
        }
2015-08-26 11:36:22.8678|Info|  Settimeout: id:140, (13) ms
2015-08-26 11:36:22.9303|Info|      Encerrado timer: id:138, (11:36:22.9303)
2015-08-26 11:36:22.9303|Info|      Executando timer: id:140, (11:36:22.9303)
2015-08-26 11:36:22.9303|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:22.9303|Info|  Settimeout: id:141, (64) ms
2015-08-26 11:36:22.9928|Info|      Encerrado timer: id:140, (11:36:22.9928)
2015-08-26 11:36:23.0084|Info|      Executando timer: id:141, (11:36:23.0084)
2015-08-26 11:36:23.0084|Info|          Deveria ter disparado: function () {
          funced();
          strictEqual(callCount, isDebounce ? 1 : 2);
          QUnit.start();
        }
2015-08-26 11:36:23.0084|Info|  Settimeout: id:142, (13) ms
2015-08-26 11:36:23.0709|Info|      Encerrado timer: id:141, (11:36:23.0709)
2015-08-26 11:36:23.0709|Info|      Executando timer: id:142, (11:36:23.0709)
2015-08-26 11:36:23.0709|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:23.0709|Info|  Settimeout: id:143, (32) ms
2015-08-26 11:36:23.1334|Info|  Settimeout: id:144, (64) ms
2015-08-26 11:36:23.1959|Info|      Encerrado timer: id:142, (11:36:23.1959)
2015-08-26 11:36:23.2116|Info|      Executando timer: id:144, (11:36:23.2116)
2015-08-26 11:36:23.2116|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 0);
          QUnit.start();
        }
2015-08-26 11:36:23.2116|Info|  Settimeout: id:145, (13) ms
2015-08-26 11:36:23.2700|Info|      Encerrado timer: id:144, (11:36:23.2700)
2015-08-26 11:36:23.2700|Info|      Executando timer: id:145, (11:36:23.2710)
2015-08-26 11:36:23.2700|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:23.2700|Info|  Settimeout: id:146, (64) ms
2015-08-26 11:36:23.3265|Info|      Encerrado timer: id:145, (11:36:23.3265)
2015-08-26 11:36:23.3421|Info|      Executando timer: id:146, (11:36:23.3421)
2015-08-26 11:36:23.3421|Info|          Deveria ter disparado: function () {
          strictEqual(callCount, 2);
          QUnit.start();
        }
2015-08-26 11:36:23.3421|Info|  Settimeout: id:147, (13) ms
2015-08-26 11:36:23.4046|Info|      Encerrado timer: id:146, (11:36:23.4046)
2015-08-26 11:36:23.4046|Info|      Executando timer: id:147, (11:36:23.4046)
2015-08-26 11:36:23.4046|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:23.5296|Info|  Settimeout: id:148, (32) ms
2015-08-26 11:36:23.5921|Info|  Settimeout: id:149, (1) ms
2015-08-26 11:36:23.6546|Info|  Settimeout: id:150, (64) ms
2015-08-26 11:36:23.7171|Info|      Encerrado timer: id:147, (11:36:23.7171)
2015-08-26 11:36:23.7171|Info|      Executando timer: id:148, (11:36:23.7171)
2015-08-26 11:36:23.7171|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:23.7171|Info|      Encerrado timer: id:148, (11:36:23.7171)
2015-08-26 11:36:23.7171|Info|      Executando timer: id:149, (11:36:23.7171)
2015-08-26 11:36:23.7171|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:23.7171|Info|      Encerrado timer: id:149, (11:36:23.7171)
2015-08-26 11:36:23.7327|Info|      Executando timer: id:150, (11:36:23.7327)
2015-08-26 11:36:23.7327|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:23.7327|Info|  Settimeout: id:151, (13) ms
2015-08-26 11:36:23.7952|Info|      Encerrado timer: id:150, (11:36:23.7952)
2015-08-26 11:36:23.7952|Info|      Executando timer: id:151, (11:36:23.7952)
2015-08-26 11:36:23.7952|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:23.7952|Info|  Settimeout: id:152, (32) ms
2015-08-26 11:36:23.8577|Info|  Settimeout: id:153, (64) ms
2015-08-26 11:36:23.9202|Info|      Encerrado timer: id:151, (11:36:23.9202)
2015-08-26 11:36:23.9359|Info|      Executando timer: id:153, (11:36:23.9359)
2015-08-26 11:36:23.9359|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:23.9359|Info|  Settimeout: id:154, (13) ms
2015-08-26 11:36:23.9984|Info|      Encerrado timer: id:153, (11:36:23.9984)
2015-08-26 11:36:23.9984|Info|      Executando timer: id:154, (11:36:23.9984)
2015-08-26 11:36:23.9984|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:23.9984|Info|  Settimeout: id:155, (32) ms
2015-08-26 11:36:24.0609|Info|  Settimeout: id:156, (64) ms
2015-08-26 11:36:24.1234|Info|      Encerrado timer: id:154, (11:36:24.1234)
2015-08-26 11:36:24.1234|Info|      Executando timer: id:155, (11:36:24.1234)
2015-08-26 11:36:24.1234|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:24.1234|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:24.1234|Info|      Encerrado timer: id:155, (11:36:24.1234)
2015-08-26 11:36:24.1390|Info|      Executando timer: id:156, (11:36:24.1390)
2015-08-26 11:36:24.1390|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:24.1390|Info|  Settimeout: id:157, (16) ms
2015-08-26 11:36:24.1896|Info|  Settimeout: id:158, (13) ms
2015-08-26 11:36:24.2430|Info|      Encerrado timer: id:156, (11:36:24.2430)
2015-08-26 11:36:24.2430|Info|      Executando timer: id:158, (11:36:24.2430)
2015-08-26 11:36:24.2430|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:24.2430|Info|  Settimeout: id:159, (32) ms
2015-08-26 11:36:24.3055|Info|  Settimeout: id:160, (1) ms
2015-08-26 11:36:24.3680|Info|  Settimeout: id:161, (64) ms
2015-08-26 11:36:24.4305|Info|      Encerrado timer: id:158, (11:36:24.4305)
2015-08-26 11:36:24.4305|Info|      Executando timer: id:159, (11:36:24.4305)
2015-08-26 11:36:24.4305|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:24.4305|Info|      Encerrado timer: id:159, (11:36:24.4305)
2015-08-26 11:36:24.4305|Info|      Executando timer: id:160, (11:36:24.4305)
2015-08-26 11:36:24.4305|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:24.4305|Info|      Encerrado timer: id:160, (11:36:24.4305)
2015-08-26 11:36:24.4461|Info|      Executando timer: id:161, (11:36:24.4461)
2015-08-26 11:36:24.4461|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:24.4461|Info|  Settimeout: id:162, (13) ms
2015-08-26 11:36:24.5086|Info|      Encerrado timer: id:161, (11:36:24.5086)
2015-08-26 11:36:24.5086|Info|      Executando timer: id:162, (11:36:24.5086)
2015-08-26 11:36:24.5086|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:24.5086|Info|  Settimeout: id:163, (32) ms
2015-08-26 11:36:24.5711|Info|  Settimeout: id:164, (64) ms
2015-08-26 11:36:24.6336|Info|      Encerrado timer: id:162, (11:36:24.6336)
2015-08-26 11:36:24.6493|Info|      Executando timer: id:164, (11:36:24.6493)
2015-08-26 11:36:24.6493|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:24.6493|Info|  Settimeout: id:165, (13) ms
2015-08-26 11:36:24.7118|Info|      Encerrado timer: id:164, (11:36:24.7118)
2015-08-26 11:36:24.7118|Info|      Executando timer: id:165, (11:36:24.7118)
2015-08-26 11:36:24.7118|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:24.7118|Info|  Settimeout: id:166, (32) ms
2015-08-26 11:36:24.7742|Info|  Settimeout: id:167, (64) ms
2015-08-26 11:36:24.8367|Info|      Encerrado timer: id:165, (11:36:24.8367)
2015-08-26 11:36:24.8367|Info|      Executando timer: id:166, (11:36:24.8367)
2015-08-26 11:36:24.8367|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:24.8367|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:24.8367|Info|      Encerrado timer: id:166, (11:36:24.8367)
2015-08-26 11:36:24.8524|Info|      Executando timer: id:167, (11:36:24.8524)
2015-08-26 11:36:24.8524|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:24.8524|Info|  Settimeout: id:168, (16) ms
2015-08-26 11:36:24.9149|Info|  Settimeout: id:169, (13) ms
2015-08-26 11:36:24.9774|Info|      Encerrado timer: id:167, (11:36:24.9774)
2015-08-26 11:36:24.9774|Info|      Executando timer: id:169, (11:36:24.9774)
2015-08-26 11:36:24.9774|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:24.9774|Info|  Settimeout: id:170, (32) ms
2015-08-26 11:36:25.0399|Info|  Settimeout: id:171, (1) ms
2015-08-26 11:36:25.1024|Info|  Settimeout: id:172, (64) ms
2015-08-26 11:36:25.1649|Info|      Encerrado timer: id:169, (11:36:25.1649)
2015-08-26 11:36:25.1649|Info|      Executando timer: id:170, (11:36:25.1649)
2015-08-26 11:36:25.1649|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:25.1649|Info|      Encerrado timer: id:170, (11:36:25.1649)
2015-08-26 11:36:25.1649|Info|      Executando timer: id:171, (11:36:25.1649)
2015-08-26 11:36:25.1649|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:25.1649|Info|      Encerrado timer: id:171, (11:36:25.1649)
2015-08-26 11:36:25.1805|Info|      Executando timer: id:172, (11:36:25.1805)
2015-08-26 11:36:25.1805|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:25.1805|Info|  Settimeout: id:173, (13) ms
2015-08-26 11:36:25.2430|Info|      Encerrado timer: id:172, (11:36:25.2430)
2015-08-26 11:36:25.2430|Info|      Executando timer: id:173, (11:36:25.2430)
2015-08-26 11:36:25.2430|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:25.2430|Info|  Settimeout: id:174, (32) ms
2015-08-26 11:36:25.3055|Info|  Settimeout: id:175, (64) ms
2015-08-26 11:36:25.3680|Info|      Encerrado timer: id:173, (11:36:25.3680)
2015-08-26 11:36:25.3857|Info|      Executando timer: id:175, (11:36:25.3857)
2015-08-26 11:36:25.3857|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:25.3857|Info|  Settimeout: id:176, (13) ms
2015-08-26 11:36:25.4482|Info|      Encerrado timer: id:175, (11:36:25.4482)
2015-08-26 11:36:25.4482|Info|      Executando timer: id:176, (11:36:25.4482)
2015-08-26 11:36:25.4482|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:25.4482|Info|  Settimeout: id:177, (32) ms
2015-08-26 11:36:25.5107|Info|  Settimeout: id:178, (64) ms
2015-08-26 11:36:25.5732|Info|      Encerrado timer: id:176, (11:36:25.5732)
2015-08-26 11:36:25.5732|Info|      Executando timer: id:177, (11:36:25.5732)
2015-08-26 11:36:25.5732|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:25.5887|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:25.5887|Info|      Encerrado timer: id:177, (11:36:25.5887)
2015-08-26 11:36:25.5887|Info|      Executando timer: id:178, (11:36:25.5887)
2015-08-26 11:36:25.5887|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:25.5887|Info|  Settimeout: id:179, (32) ms
2015-08-26 11:36:25.6513|Info|  Settimeout: id:180, (13) ms
2015-08-26 11:36:25.7137|Info|      Encerrado timer: id:178, (11:36:25.7137)
2015-08-26 11:36:25.7137|Info|      Executando timer: id:180, (11:36:25.7137)
2015-08-26 11:36:25.7137|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:25.7137|Info|  Settimeout: id:181, (32) ms
2015-08-26 11:36:25.7762|Info|  Settimeout: id:182, (1) ms
2015-08-26 11:36:25.8387|Info|  Settimeout: id:183, (64) ms
2015-08-26 11:36:25.9012|Info|      Encerrado timer: id:180, (11:36:25.9012)
2015-08-26 11:36:25.9012|Info|      Executando timer: id:181, (11:36:25.9012)
2015-08-26 11:36:25.9012|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:25.9012|Info|      Encerrado timer: id:181, (11:36:25.9012)
2015-08-26 11:36:25.9012|Info|      Executando timer: id:182, (11:36:25.9012)
2015-08-26 11:36:25.9012|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:25.9012|Info|      Encerrado timer: id:182, (11:36:25.9012)
2015-08-26 11:36:25.9169|Info|      Executando timer: id:183, (11:36:25.9169)
2015-08-26 11:36:25.9169|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:25.9169|Info|  Settimeout: id:184, (13) ms
2015-08-26 11:36:25.9794|Info|      Encerrado timer: id:183, (11:36:25.9794)
2015-08-26 11:36:25.9794|Info|      Executando timer: id:184, (11:36:25.9794)
2015-08-26 11:36:25.9794|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:25.9794|Info|  Settimeout: id:185, (32) ms
2015-08-26 11:36:26.0419|Info|  Settimeout: id:186, (64) ms
2015-08-26 11:36:26.1044|Info|      Encerrado timer: id:184, (11:36:26.1044)
2015-08-26 11:36:26.1200|Info|      Executando timer: id:186, (11:36:26.1200)
2015-08-26 11:36:26.1200|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:26.1200|Info|  Settimeout: id:187, (13) ms
2015-08-26 11:36:26.1825|Info|      Encerrado timer: id:186, (11:36:26.1825)
2015-08-26 11:36:26.1825|Info|      Executando timer: id:187, (11:36:26.1825)
2015-08-26 11:36:26.1825|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:26.1825|Info|  Settimeout: id:188, (32) ms
2015-08-26 11:36:26.2450|Info|  Settimeout: id:189, (64) ms
2015-08-26 11:36:26.3075|Info|      Encerrado timer: id:187, (11:36:26.3075)
2015-08-26 11:36:26.3075|Info|      Executando timer: id:188, (11:36:26.3075)
2015-08-26 11:36:26.3075|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:26.3075|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:26.3075|Info|      Encerrado timer: id:188, (11:36:26.3075)
2015-08-26 11:36:26.3231|Info|      Executando timer: id:189, (11:36:26.3231)
2015-08-26 11:36:26.3231|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:26.3231|Info|  Settimeout: id:190, (16) ms
2015-08-26 11:36:26.3856|Info|  Settimeout: id:191, (13) ms
2015-08-26 11:36:26.4481|Info|      Encerrado timer: id:189, (11:36:26.4481)
2015-08-26 11:36:26.4481|Info|      Executando timer: id:191, (11:36:26.4481)
2015-08-26 11:36:26.4481|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:26.4481|Info|  Settimeout: id:192, (32) ms
2015-08-26 11:36:26.5106|Info|  Settimeout: id:193, (1) ms
2015-08-26 11:36:26.5731|Info|  Settimeout: id:194, (64) ms
2015-08-26 11:36:26.6356|Info|      Encerrado timer: id:191, (11:36:26.6356)
2015-08-26 11:36:26.6356|Info|      Executando timer: id:192, (11:36:26.6356)
2015-08-26 11:36:26.6356|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:26.6356|Info|      Encerrado timer: id:192, (11:36:26.6356)
2015-08-26 11:36:26.6356|Info|      Executando timer: id:193, (11:36:26.6356)
2015-08-26 11:36:26.6356|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:26.6356|Info|      Encerrado timer: id:193, (11:36:26.6356)
2015-08-26 11:36:26.6512|Info|      Executando timer: id:194, (11:36:26.6512)
2015-08-26 11:36:26.6512|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:26.6512|Info|  Settimeout: id:195, (13) ms
2015-08-26 11:36:26.7137|Info|      Encerrado timer: id:194, (11:36:26.7137)
2015-08-26 11:36:26.7137|Info|      Executando timer: id:195, (11:36:26.7137)
2015-08-26 11:36:26.7137|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:26.7137|Info|  Settimeout: id:196, (32) ms
2015-08-26 11:36:26.7762|Info|  Settimeout: id:197, (64) ms
2015-08-26 11:36:26.8387|Info|      Encerrado timer: id:195, (11:36:26.8387)
2015-08-26 11:36:26.8544|Info|      Executando timer: id:197, (11:36:26.8544)
2015-08-26 11:36:26.8544|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:26.8544|Info|  Settimeout: id:198, (13) ms
2015-08-26 11:36:26.9169|Info|      Encerrado timer: id:197, (11:36:26.9169)
2015-08-26 11:36:26.9169|Info|      Executando timer: id:198, (11:36:26.9169)
2015-08-26 11:36:26.9169|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:26.9169|Info|  Settimeout: id:199, (32) ms
2015-08-26 11:36:26.9794|Info|  Settimeout: id:200, (64) ms
2015-08-26 11:36:27.0419|Info|      Encerrado timer: id:198, (11:36:27.0419)
2015-08-26 11:36:27.0419|Info|      Executando timer: id:199, (11:36:27.0419)
2015-08-26 11:36:27.0419|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:27.0419|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:27.0419|Info|      Encerrado timer: id:199, (11:36:27.0419)
2015-08-26 11:36:27.0575|Info|      Executando timer: id:200, (11:36:27.0575)
2015-08-26 11:36:27.0575|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:27.0575|Info|  Settimeout: id:201, (16) ms
2015-08-26 11:36:27.1200|Info|  Settimeout: id:202, (13) ms
2015-08-26 11:36:27.1825|Info|      Encerrado timer: id:200, (11:36:27.1825)
2015-08-26 11:36:27.1825|Info|      Executando timer: id:202, (11:36:27.1825)
2015-08-26 11:36:27.1825|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:27.1825|Info|  Settimeout: id:203, (32) ms
2015-08-26 11:36:27.2450|Info|  Settimeout: id:204, (1) ms
2015-08-26 11:36:27.3075|Info|  Settimeout: id:205, (64) ms
2015-08-26 11:36:27.3701|Info|      Encerrado timer: id:202, (11:36:27.3701)
2015-08-26 11:36:27.3701|Info|      Executando timer: id:203, (11:36:27.3701)
2015-08-26 11:36:27.3701|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:27.3701|Info|      Encerrado timer: id:203, (11:36:27.3701)
2015-08-26 11:36:27.3701|Info|      Executando timer: id:204, (11:36:27.3701)
2015-08-26 11:36:27.3701|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:27.3701|Info|      Encerrado timer: id:204, (11:36:27.3701)
2015-08-26 11:36:27.3857|Info|      Executando timer: id:205, (11:36:27.3857)
2015-08-26 11:36:27.3857|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:27.3857|Info|  Settimeout: id:206, (13) ms
2015-08-26 11:36:27.4482|Info|      Encerrado timer: id:205, (11:36:27.4482)
2015-08-26 11:36:27.4482|Info|      Executando timer: id:206, (11:36:27.4482)
2015-08-26 11:36:27.4482|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:27.4482|Info|  Settimeout: id:207, (32) ms
2015-08-26 11:36:27.5107|Info|  Settimeout: id:208, (64) ms
2015-08-26 11:36:27.5733|Info|      Encerrado timer: id:206, (11:36:27.5733)
2015-08-26 11:36:27.5889|Info|      Executando timer: id:208, (11:36:27.5889)
2015-08-26 11:36:27.5889|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:27.5889|Info|  Settimeout: id:209, (13) ms
2015-08-26 11:36:27.6514|Info|      Encerrado timer: id:208, (11:36:27.6514)
2015-08-26 11:36:27.6514|Info|      Executando timer: id:209, (11:36:27.6514)
2015-08-26 11:36:27.6514|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:27.6514|Info|  Settimeout: id:210, (32) ms
2015-08-26 11:36:27.7139|Info|  Settimeout: id:211, (64) ms
2015-08-26 11:36:27.7764|Info|      Encerrado timer: id:209, (11:36:27.7764)
2015-08-26 11:36:27.7764|Info|      Executando timer: id:210, (11:36:27.7764)
2015-08-26 11:36:27.7764|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:27.7764|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:27.7764|Info|      Encerrado timer: id:210, (11:36:27.7764)
2015-08-26 11:36:27.7920|Info|      Executando timer: id:211, (11:36:27.7920)
2015-08-26 11:36:27.7920|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:27.7920|Info|  Settimeout: id:212, (16) ms
2015-08-26 11:36:27.8545|Info|  Settimeout: id:213, (13) ms
2015-08-26 11:36:27.9061|Info|      Encerrado timer: id:211, (11:36:27.9061)
2015-08-26 11:36:27.9061|Info|      Executando timer: id:213, (11:36:27.9061)
2015-08-26 11:36:27.9061|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:27.9061|Info|  Settimeout: id:214, (32) ms
2015-08-26 11:36:27.9700|Info|  Settimeout: id:215, (1) ms
2015-08-26 11:36:28.0325|Info|  Settimeout: id:216, (64) ms
2015-08-26 11:36:28.0950|Info|      Encerrado timer: id:213, (11:36:28.0950)
2015-08-26 11:36:28.0950|Info|      Executando timer: id:214, (11:36:28.0950)
2015-08-26 11:36:28.0950|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:28.0950|Info|      Encerrado timer: id:214, (11:36:28.0950)
2015-08-26 11:36:28.0950|Info|      Executando timer: id:215, (11:36:28.0950)
2015-08-26 11:36:28.0950|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:28.0950|Info|      Encerrado timer: id:215, (11:36:28.0950)
2015-08-26 11:36:28.1106|Info|      Executando timer: id:216, (11:36:28.1106)
2015-08-26 11:36:28.1106|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:28.1106|Info|  Settimeout: id:217, (13) ms
2015-08-26 11:36:28.1731|Info|      Encerrado timer: id:216, (11:36:28.1731)
2015-08-26 11:36:28.1731|Info|      Executando timer: id:217, (11:36:28.1731)
2015-08-26 11:36:28.1731|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:28.1731|Info|  Settimeout: id:218, (32) ms
2015-08-26 11:36:28.2356|Info|  Settimeout: id:219, (64) ms
2015-08-26 11:36:28.2981|Info|      Encerrado timer: id:217, (11:36:28.2981)
2015-08-26 11:36:28.3137|Info|      Executando timer: id:219, (11:36:28.3137)
2015-08-26 11:36:28.3137|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:28.3137|Info|  Settimeout: id:220, (13) ms
2015-08-26 11:36:28.3762|Info|      Encerrado timer: id:219, (11:36:28.3762)
2015-08-26 11:36:28.3762|Info|      Executando timer: id:220, (11:36:28.3762)
2015-08-26 11:36:28.3762|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:28.3762|Info|  Settimeout: id:221, (32) ms
2015-08-26 11:36:28.4388|Info|  Settimeout: id:222, (64) ms
2015-08-26 11:36:28.5013|Info|      Encerrado timer: id:220, (11:36:28.5013)
2015-08-26 11:36:28.5013|Info|      Executando timer: id:221, (11:36:28.5013)
2015-08-26 11:36:28.5013|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:28.5013|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:28.5013|Info|      Encerrado timer: id:221, (11:36:28.5013)
2015-08-26 11:36:28.5169|Info|      Executando timer: id:222, (11:36:28.5169)
2015-08-26 11:36:28.5169|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:28.5169|Info|  Settimeout: id:223, (17) ms
2015-08-26 11:36:28.5794|Info|  Settimeout: id:224, (13) ms
2015-08-26 11:36:28.6419|Info|      Encerrado timer: id:222, (11:36:28.6419)
2015-08-26 11:36:28.6419|Info|      Executando timer: id:224, (11:36:28.6419)
2015-08-26 11:36:28.6419|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:28.6419|Info|  Settimeout: id:225, (32) ms
2015-08-26 11:36:28.7044|Info|  Settimeout: id:226, (1) ms
2015-08-26 11:36:28.7669|Info|  Settimeout: id:227, (64) ms
2015-08-26 11:36:28.8294|Info|      Encerrado timer: id:224, (11:36:28.8294)
2015-08-26 11:36:28.8294|Info|      Executando timer: id:225, (11:36:28.8294)
2015-08-26 11:36:28.8294|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:28.8294|Info|      Encerrado timer: id:225, (11:36:28.8294)
2015-08-26 11:36:28.8294|Info|      Executando timer: id:226, (11:36:28.8294)
2015-08-26 11:36:28.8294|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:28.8294|Info|      Encerrado timer: id:226, (11:36:28.8294)
2015-08-26 11:36:28.8450|Info|      Executando timer: id:227, (11:36:28.8450)
2015-08-26 11:36:28.8450|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:28.8450|Info|  Settimeout: id:228, (13) ms
2015-08-26 11:36:28.9075|Info|      Encerrado timer: id:227, (11:36:28.9075)
2015-08-26 11:36:28.9075|Info|      Executando timer: id:228, (11:36:28.9075)
2015-08-26 11:36:28.9075|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:28.9075|Info|  Settimeout: id:229, (32) ms
2015-08-26 11:36:28.9700|Info|  Settimeout: id:230, (64) ms
2015-08-26 11:36:29.0325|Info|      Encerrado timer: id:228, (11:36:29.0325)
2015-08-26 11:36:29.0481|Info|      Executando timer: id:230, (11:36:29.0481)
2015-08-26 11:36:29.0481|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:29.0481|Info|  Settimeout: id:231, (13) ms
2015-08-26 11:36:29.1106|Info|      Encerrado timer: id:230, (11:36:29.1106)
2015-08-26 11:36:29.1106|Info|      Executando timer: id:231, (11:36:29.1106)
2015-08-26 11:36:29.1106|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:29.1106|Info|  Settimeout: id:232, (32) ms
2015-08-26 11:36:29.1731|Info|  Settimeout: id:233, (64) ms
2015-08-26 11:36:29.2356|Info|      Encerrado timer: id:231, (11:36:29.2356)
2015-08-26 11:36:29.2356|Info|      Executando timer: id:232, (11:36:29.2356)
2015-08-26 11:36:29.2356|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:29.2356|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:29.2512|Info|      Encerrado timer: id:232, (11:36:29.2512)
2015-08-26 11:36:29.2512|Info|      Executando timer: id:233, (11:36:29.2512)
2015-08-26 11:36:29.2512|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:29.2512|Info|  Settimeout: id:234, (16) ms
2015-08-26 11:36:29.3138|Info|  Settimeout: id:235, (13) ms
2015-08-26 11:36:29.3765|Info|      Encerrado timer: id:233, (11:36:29.3765)
2015-08-26 11:36:29.3765|Info|      Executando timer: id:235, (11:36:29.3765)
2015-08-26 11:36:29.3765|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:29.3765|Info|  Settimeout: id:236, (32) ms
2015-08-26 11:36:29.4388|Info|  Settimeout: id:237, (1) ms
2015-08-26 11:36:29.5013|Info|  Settimeout: id:238, (64) ms
2015-08-26 11:36:29.5638|Info|      Encerrado timer: id:235, (11:36:29.5638)
2015-08-26 11:36:29.5638|Info|      Executando timer: id:236, (11:36:29.5638)
2015-08-26 11:36:29.5638|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:29.5638|Info|      Encerrado timer: id:236, (11:36:29.5638)
2015-08-26 11:36:29.5638|Info|      Executando timer: id:237, (11:36:29.5638)
2015-08-26 11:36:29.5638|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:29.5638|Info|      Encerrado timer: id:237, (11:36:29.5638)
2015-08-26 11:36:29.5794|Info|      Executando timer: id:238, (11:36:29.5794)
2015-08-26 11:36:29.5794|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:29.5794|Info|  Settimeout: id:239, (13) ms
2015-08-26 11:36:29.6418|Info|      Encerrado timer: id:238, (11:36:29.6418)
2015-08-26 11:36:29.6418|Info|      Executando timer: id:239, (11:36:29.6418)
2015-08-26 11:36:29.6418|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:29.6418|Info|  Settimeout: id:240, (32) ms
2015-08-26 11:36:29.7043|Info|  Settimeout: id:241, (64) ms
2015-08-26 11:36:29.7669|Info|      Encerrado timer: id:239, (11:36:29.7669)
2015-08-26 11:36:29.7825|Info|      Executando timer: id:241, (11:36:29.7825)
2015-08-26 11:36:29.7825|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:29.7825|Info|  Settimeout: id:242, (13) ms
2015-08-26 11:36:29.8450|Info|      Encerrado timer: id:241, (11:36:29.8450)
2015-08-26 11:36:29.8450|Info|      Executando timer: id:242, (11:36:29.8450)
2015-08-26 11:36:29.8450|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:29.8450|Info|  Settimeout: id:243, (32) ms
2015-08-26 11:36:29.9075|Info|  Settimeout: id:244, (64) ms
2015-08-26 11:36:29.9700|Info|      Encerrado timer: id:242, (11:36:29.9700)
2015-08-26 11:36:29.9700|Info|      Executando timer: id:243, (11:36:29.9700)
2015-08-26 11:36:29.9700|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:29.9700|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:29.9700|Info|      Encerrado timer: id:243, (11:36:29.9700)
2015-08-26 11:36:29.9857|Info|      Executando timer: id:244, (11:36:29.9857)
2015-08-26 11:36:29.9857|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:29.9857|Info|  Settimeout: id:245, (17) ms
2015-08-26 11:36:30.0482|Info|  Settimeout: id:246, (13) ms
2015-08-26 11:36:30.1106|Info|      Encerrado timer: id:244, (11:36:30.1106)
2015-08-26 11:36:30.1106|Info|      Executando timer: id:246, (11:36:30.1106)
2015-08-26 11:36:30.1106|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:30.1106|Info|  Settimeout: id:247, (32) ms
2015-08-26 11:36:30.1732|Info|  Settimeout: id:248, (1) ms
2015-08-26 11:36:30.2357|Info|  Settimeout: id:249, (64) ms
2015-08-26 11:36:30.2982|Info|      Encerrado timer: id:246, (11:36:30.2982)
2015-08-26 11:36:30.2982|Info|      Executando timer: id:247, (11:36:30.2982)
2015-08-26 11:36:30.2982|Info|          Deveria ter disparado: function () { func.apply(undefined, args); }
2015-08-26 11:36:30.2982|Info|      Encerrado timer: id:247, (11:36:30.2982)
2015-08-26 11:36:30.2982|Info|      Executando timer: id:248, (11:36:30.2982)
2015-08-26 11:36:30.2982|Info|          Deveria ter disparado: function () {
          ok(!pass);
        }
2015-08-26 11:36:30.2982|Info|      Encerrado timer: id:248, (11:36:30.2982)
2015-08-26 11:36:30.3137|Info|      Executando timer: id:249, (11:36:30.3137)
2015-08-26 11:36:30.3137|Info|          Deveria ter disparado: function () {
          ok(pass);
          QUnit.start();
        }
2015-08-26 11:36:30.3137|Info|  Settimeout: id:250, (13) ms
2015-08-26 11:36:30.3763|Info|      Encerrado timer: id:249, (11:36:30.3763)
2015-08-26 11:36:30.3763|Info|      Executando timer: id:250, (11:36:30.3770)
2015-08-26 11:36:30.3763|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:30.3763|Info|----------------------------------------
2015-08-26 11:36:30.3763|Info|lodash.delay
2015-08-26 11:36:30.3926|Info|----------------------------------------
2015-08-26 11:36:30.3926|Info| FAIL - should delay `func` execution
2015-08-26 11:36:30.3926|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:30.3926|Info|  Settimeout: id:251, (32) ms
2015-08-26 11:36:30.4552|Info|  Settimeout: id:252, (64) ms
2015-08-26 11:36:30.5176|Info|      Encerrado timer: id:250, (11:36:30.5176)
2015-08-26 11:36:30.5333|Info|      Executando timer: id:252, (11:36:30.5333)
2015-08-26 11:36:30.5333|Info|          Deveria ter disparado: function () {
          ok(callCount > lastCount);
          QUnit.start();
        }
2015-08-26 11:36:30.5333|Info|  Settimeout: id:253, (13) ms
2015-08-26 11:36:30.5958|Info|      Encerrado timer: id:252, (11:36:30.5958)
2015-08-26 11:36:30.5958|Info|      Executando timer: id:253, (11:36:30.5958)
2015-08-26 11:36:30.5958|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:30.5958|Info|----------------------------------------
2015-08-26 11:36:30.5958|Info|lodash.throttle
2015-08-26 11:36:30.5958|Info|----------------------------------------
2015-08-26 11:36:30.5958|Info| FAIL - should throttle a function
2015-08-26 11:36:30.5958|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:30.5958|Info|  Settimeout: id:254, (32) ms
2015-08-26 11:36:30.6583|Info|  Settimeout: id:255, (64) ms
2015-08-26 11:36:30.7207|Info|      Encerrado timer: id:253, (11:36:30.7207)
2015-08-26 11:36:30.7207|Info|      Executando timer: id:254, (11:36:30.7207)
2015-08-26 11:36:30.7207|Info|          Deveria ter disparado: function maxDelayed() {
        complete(trailing, timeoutId);
      }
2015-08-26 11:36:30.7207|Info|!timeoutId && !maxTimeoutId true
2015-08-26 11:36:30.7207|Info|      Encerrado timer: id:254, (11:36:30.7207)
2015-08-26 11:36:30.7364|Info|      Executando timer: id:255, (11:36:30.7364)
2015-08-26 11:36:30.7364|Info|          Deveria ter disparado: function () {
          var result = [throttled('x'), throttled('y')];
          notEqual(result[0], 'a');
          notStrictEqual(result[0], undefined);

          notEqual(result[1], 'y');
          notStrictEqual(result[1], undefined);
          QUnit.start();
        }
2015-08-26 11:36:30.7364|Info|  Settimeout: id:256, (16) ms
2015-08-26 11:36:30.7989|Info|  Settimeout: id:257, (13) ms
2015-08-26 11:36:30.8614|Info|      Encerrado timer: id:255, (11:36:30.8614)
2015-08-26 11:36:30.8614|Info|      Executando timer: id:257, (11:36:30.8614)
2015-08-26 11:36:30.8614|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:30.8614|Info| FAIL - subsequent calls should return the result of the first call
2015-08-26 11:36:30.8614|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:30.8614|Info|    FAIL | EQ | ok | Expected: y, Actual: y
2015-08-26 11:36:30.8614|Info|----------------------------------------
2015-08-26 11:36:30.8614|Info|    PASS: 4447  FAIL: 4  TOTAL: 4451
2015-08-26 11:36:30.8770|Info|    Finished in 20171 milliseconds.
2015-08-26 11:36:30.8770|Info|----------------------------------------
2015-08-26 11:36:30.8926|Info|      Encerrado timer: id:257, (11:36:30.8926)
2015-08-26 11:36:30.8926|Info|Encerrando os testes
2015-08-26 11:36:30.8926|Info|Total:4451, Sucesso: 4447, Falha: 4
2015-08-26 11:36:30.9082|Info|21 segundos para avaliar o individuo lodash.js
2015-08-26 11:36:30.9082|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [109]:1:24
2015-08-26 11:36:30.9082|Info|FAILED: lodash.isNil: should work with nulls from another realm: Expected 2 assertions, but 1 were run, ,     at V8Runtime:lodashTest:7765:5
    at V8Runtime:lodashTest:7774:4
    at V8Runtime:lodashTest:17424:3
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [131]:1:24
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [137]:1:24
2015-08-26 11:36:30.9082|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [261]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [267]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [273]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [279]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [285]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [291]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [297]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [303]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [309]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [315]:1:25
2015-08-26 11:36:30.9082|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [321]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [327]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [333]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [339]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [345]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [351]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [357]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [363]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [369]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [375]:1:25
2015-08-26 11:36:30.9239|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [381]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [387]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [393]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [399]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [405]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [411]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [417]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.delay: should delay `func` execution: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:3120:15)
    at Script Document [423]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.throttle: should throttle a function: failed, expected argument to be truthy, was: false, ,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:14984:24)
    at Script Document [429]:1:25
2015-08-26 11:36:30.9395|Info|FAILED: lodash.throttle: subsequent calls should return the result of the first call: expected: y, actual: y,     at V8Runtime:Qunit:1906:13
    at Array.<anonymous> (V8Runtime:lodashTest:15006:26)
    at Script Document [435]:1:25
2015-08-26 11:36:31.5490|Info|Iniciando os testes
2015-08-26 11:36:33.9153|Info|Encerrando os testes
2015-08-26 11:36:33.9153|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:36:33.9153|Info|2 segundos para avaliar o individuo global.js
2015-08-26 11:36:34.0091|Info|  Settimeout: id:0, (500) ms
2015-08-26 11:36:34.1497|Info|Iniciando os testes
2015-08-26 11:36:34.1497|Info|  Settimeout: id:1, (13) ms
2015-08-26 11:36:34.1810|Info|      Executando timer: id:1, (11:36:34.1810)
2015-08-26 11:36:34.2122|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:34.2278|Info|----------------------------------------
2015-08-26 11:36:34.2278|Info|Arrays
2015-08-26 11:36:34.2434|Info|----------------------------------------
2015-08-26 11:36:34.2434|Info| PASS - first
2015-08-26 11:36:34.2434|Info| PASS - head
2015-08-26 11:36:34.2434|Info| PASS - take
2015-08-26 11:36:34.2434|Info| PASS - rest
2015-08-26 11:36:34.2591|Info| PASS - tail
2015-08-26 11:36:34.2591|Info| PASS - drop
2015-08-26 11:36:34.2591|Info| PASS - initial
2015-08-26 11:36:34.2591|Info| PASS - last
2015-08-26 11:36:34.2591|Info| PASS - compact
2015-08-26 11:36:34.7747|Info| PASS - flatten
2015-08-26 11:36:34.7747|Info| PASS - without
2015-08-26 11:36:34.7747|Info| PASS - sortedIndex
2015-08-26 11:36:34.7747|Info| PASS - uniq
2015-08-26 11:36:34.7747|Info| PASS - unique
2015-08-26 11:36:34.7747|Info| PASS - intersection
2015-08-26 11:36:34.7747|Info| PASS - union
2015-08-26 11:36:34.7903|Info| PASS - difference
2015-08-26 11:36:34.7903|Info| PASS - zip
2015-08-26 11:36:34.7903|Info| PASS - unzip
2015-08-26 11:36:34.7903|Info| PASS - object
2015-08-26 11:36:34.7903|Info| PASS - indexOf
2015-08-26 11:36:34.7903|Info| PASS - indexOf with NaN
2015-08-26 11:36:34.7903|Info| PASS - indexOf with +- 0
2015-08-26 11:36:34.7903|Info| PASS - lastIndexOf
2015-08-26 11:36:34.7903|Info| PASS - lastIndexOf with NaN
2015-08-26 11:36:34.7903|Info| PASS - lastIndexOf with +- 0
2015-08-26 11:36:34.7903|Info| PASS - findIndex
2015-08-26 11:36:34.7903|Info| PASS - findLastIndex
2015-08-26 11:36:34.7903|Info| PASS - range
2015-08-26 11:36:34.7903|Info|----------------------------------------
2015-08-26 11:36:34.7903|Info|Chaining
2015-08-26 11:36:34.8059|Info|----------------------------------------
2015-08-26 11:36:34.8059|Info| PASS - map/flatten/reduce
2015-08-26 11:36:34.8059|Info| PASS - select/reject/sortBy
2015-08-26 11:36:34.8059|Info| PASS - select/reject/sortBy in functional style
2015-08-26 11:36:34.8059|Info| PASS - reverse/concat/unshift/pop/map
2015-08-26 11:36:34.8059|Info| PASS - splice
2015-08-26 11:36:34.8059|Info| PASS - shift
2015-08-26 11:36:34.8059|Info| PASS - pop
2015-08-26 11:36:34.8059|Info| PASS - chaining works in small stages
2015-08-26 11:36:34.8059|Info| PASS - #1562: Engine proxies for chained functions
2015-08-26 11:36:34.8059|Info|----------------------------------------
2015-08-26 11:36:34.8059|Info|Collections
2015-08-26 11:36:34.8059|Info|----------------------------------------
2015-08-26 11:36:34.8059|Info| PASS - each
2015-08-26 11:36:34.8059|Info| PASS - forEach
2015-08-26 11:36:34.8059|Info| PASS - lookupIterator with contexts
2015-08-26 11:36:34.8216|Info| PASS - Iterating objects with sketchy length properties
2015-08-26 11:36:34.8216|Info| PASS - Resistant to collection length and properties changing while iterating
2015-08-26 11:36:34.8216|Info| PASS - map
2015-08-26 11:36:34.8216|Info| PASS - collect
2015-08-26 11:36:34.8216|Info| PASS - reduce
2015-08-26 11:36:34.8216|Info| PASS - foldl
2015-08-26 11:36:34.8216|Info| PASS - reduceRight
2015-08-26 11:36:34.8216|Info| PASS - foldr
2015-08-26 11:36:34.8216|Info| PASS - find
2015-08-26 11:36:34.8216|Info| PASS - detect
2015-08-26 11:36:34.8372|Info| PASS - filter
2015-08-26 11:36:34.8372|Info| PASS - select
2015-08-26 11:36:34.8372|Info| PASS - reject
2015-08-26 11:36:34.8372|Info| PASS - every
2015-08-26 11:36:34.8372|Info| PASS - all
2015-08-26 11:36:34.8372|Info| PASS - some
2015-08-26 11:36:34.8372|Info| PASS - any
2015-08-26 11:36:34.8372|Info| PASS - includes
2015-08-26 11:36:34.8372|Info| PASS - include
2015-08-26 11:36:34.8372|Info| PASS - contains
2015-08-26 11:36:34.8372|Info| PASS - includes with NaN
2015-08-26 11:36:34.8372|Info| PASS - includes with +- 0
2015-08-26 11:36:34.8528|Info| PASS - invoke
2015-08-26 11:36:34.8528|Info| PASS - invoke w/ function reference
2015-08-26 11:36:34.8528|Info| PASS - invoke when strings have a call method
2015-08-26 11:36:34.8528|Info| PASS - pluck
2015-08-26 11:36:34.8528|Info| PASS - where
2015-08-26 11:36:34.8528|Info| PASS - findWhere
2015-08-26 11:36:34.8841|Info| PASS - max
2015-08-26 11:36:34.9153|Info| PASS - min
2015-08-26 11:36:34.9153|Info| PASS - sortBy
2015-08-26 11:36:34.9153|Info| PASS - groupBy
2015-08-26 11:36:34.9153|Info| PASS - indexBy
2015-08-26 11:36:34.9153|Info| PASS - countBy
2015-08-26 11:36:34.9153|Info| PASS - shuffle
2015-08-26 11:36:34.9153|Info| PASS - sample
2015-08-26 11:36:34.9153|Info| PASS - toArray
2015-08-26 11:36:34.9153|Info| PASS - size
2015-08-26 11:36:34.9153|Info| PASS - partition
2015-08-26 11:36:34.9153|Info|----------------------------------------
2015-08-26 11:36:34.9153|Info|Functions
2015-08-26 11:36:34.9153|Info|----------------------------------------
2015-08-26 11:36:34.9310|Info| PASS - bind
2015-08-26 11:36:34.9310|Info| PASS - partial
2015-08-26 11:36:34.9310|Info| PASS - bindAll
2015-08-26 11:36:34.9310|Info| PASS - memoize
2015-08-26 11:36:34.9310|Info|  Settimeout: id:2, (100) ms
2015-08-26 11:36:34.9935|Info|  Settimeout: id:3, (50) ms
2015-08-26 11:36:35.0560|Info|  Settimeout: id:4, (150) ms
2015-08-26 11:36:35.1185|Info|      Encerrado timer: id:1, (11:36:35.1185)
2015-08-26 11:36:35.1185|Info|      Executando timer: id:0, (11:36:35.1185)
2015-08-26 11:36:35.1185|Info|          Deveria ter disparado: function () { funcToCall(); setTimeout(funcToCall, millis); }
2015-08-26 11:36:35.1185|Info|  Settimeout: id:5, (500) ms
2015-08-26 11:36:35.1810|Info|      Encerrado timer: id:0, (11:36:35.1810)
2015-08-26 11:36:35.1810|Info|      Executando timer: id:2, (11:36:35.1810)
2015-08-26 11:36:35.1810|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:35.1810|Info|      Encerrado timer: id:2, (11:36:35.1810)
2015-08-26 11:36:35.1810|Info|      Executando timer: id:3, (11:36:35.1810)
2015-08-26 11:36:35.1810|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:36:35.1810|Info|      Encerrado timer: id:3, (11:36:35.1810)
2015-08-26 11:36:35.2123|Info|      Executando timer: id:4, (11:36:35.2123)
2015-08-26 11:36:35.2123|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:36:35.2123|Info|  Settimeout: id:6, (13) ms
2015-08-26 11:36:35.2747|Info|      Encerrado timer: id:4, (11:36:35.2747)
2015-08-26 11:36:35.2747|Info|      Executando timer: id:6, (11:36:35.2747)
2015-08-26 11:36:35.2747|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:35.2747|Info|  Settimeout: id:7, (1) ms
2015-08-26 11:36:35.3373|Info|  Settimeout: id:8, (50) ms
2015-08-26 11:36:35.4000|Info|      Encerrado timer: id:6, (11:36:35.4000)
2015-08-26 11:36:35.4000|Info|      Executando timer: id:7, (11:36:35.4000)
2015-08-26 11:36:35.4000|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:35.4000|Info|      Encerrado timer: id:7, (11:36:35.4000)
2015-08-26 11:36:35.4000|Info|      Executando timer: id:8, (11:36:35.4000)
2015-08-26 11:36:35.4000|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:35.4000|Info|  Settimeout: id:9, (13) ms
2015-08-26 11:36:35.4781|Info|      Encerrado timer: id:8, (11:36:35.4781)
2015-08-26 11:36:35.4781|Info|      Executando timer: id:9, (11:36:35.4781)
2015-08-26 11:36:35.4781|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:35.4781|Info| PASS - defer
2015-08-26 11:36:35.4781|Info|  Settimeout: id:10, (32) ms
2015-08-26 11:36:35.5406|Info|  Settimeout: id:11, (64) ms
2015-08-26 11:36:35.6030|Info|      Encerrado timer: id:9, (11:36:35.6030)
2015-08-26 11:36:35.6030|Info|      Executando timer: id:10, (11:36:35.6030)
2015-08-26 11:36:35.6030|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:35.6030|Info|      Encerrado timer: id:10, (11:36:35.6030)
2015-08-26 11:36:35.6187|Info|      Executando timer: id:11, (11:36:35.6187)
2015-08-26 11:36:35.6187|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:35.6187|Info|  Settimeout: id:12, (13) ms
2015-08-26 11:36:35.6812|Info|      Encerrado timer: id:11, (11:36:35.6812)
2015-08-26 11:36:35.6812|Info|      Executando timer: id:5, (11:36:35.6812)
2015-08-26 11:36:35.6812|Info|          Deveria ter disparado: function logThrobber() {
      logInline('Please wait' + repeat('.', (++waitCount % 3) + 1));
    }
2015-08-26 11:36:35.6812|Info|      Encerrado timer: id:5, (11:36:35.6812)
2015-08-26 11:36:35.6812|Info|      Executando timer: id:12, (11:36:35.6812)
2015-08-26 11:36:35.6812|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:35.6812|Info| PASS - throttle
2015-08-26 11:36:35.6968|Info|  Settimeout: id:13, (32) ms
2015-08-26 11:36:35.7593|Info|  Settimeout: id:14, (64) ms
2015-08-26 11:36:35.8219|Info|  Settimeout: id:15, (96) ms
2015-08-26 11:36:35.8844|Info|      Encerrado timer: id:12, (11:36:35.8844)
2015-08-26 11:36:35.8844|Info|      Executando timer: id:13, (11:36:35.8844)
2015-08-26 11:36:35.8844|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:35.8844|Info|      Encerrado timer: id:13, (11:36:35.8844)
2015-08-26 11:36:35.8844|Info|      Executando timer: id:14, (11:36:35.8844)
2015-08-26 11:36:35.8844|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:35.8844|Info|  Settimeout: id:16, (32) ms
2015-08-26 11:36:35.9625|Info|      Encerrado timer: id:14, (11:36:35.9625)
2015-08-26 11:36:35.9625|Info|      Executando timer: id:15, (11:36:35.9625)
2015-08-26 11:36:35.9625|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:35.9625|Info|  Settimeout: id:17, (13) ms
2015-08-26 11:36:36.0250|Info|      Encerrado timer: id:15, (11:36:36.0250)
2015-08-26 11:36:36.0250|Info|      Executando timer: id:16, (11:36:36.0250)
2015-08-26 11:36:36.0250|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:36.0250|Info|      Encerrado timer: id:16, (11:36:36.0250)
2015-08-26 11:36:36.0250|Info|      Executando timer: id:17, (11:36:36.0250)
2015-08-26 11:36:36.0250|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:36.0250|Info|  Settimeout: id:18, (64) ms
2015-08-26 11:36:36.1031|Info|      Encerrado timer: id:17, (11:36:36.1031)
2015-08-26 11:36:36.1187|Info|      Executando timer: id:18, (11:36:36.1187)
2015-08-26 11:36:36.1187|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:36.1187|Info|  Settimeout: id:19, (13) ms
2015-08-26 11:36:36.1812|Info|      Encerrado timer: id:18, (11:36:36.1812)
2015-08-26 11:36:36.1812|Info|      Executando timer: id:19, (11:36:36.1812)
2015-08-26 11:36:36.1812|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:36.1812|Info| PASS - throttle once
2015-08-26 11:36:36.1812|Info|  Settimeout: id:20, (32) ms
2015-08-26 11:36:36.2437|Info|  Settimeout: id:21, (64) ms
2015-08-26 11:36:36.3062|Info|      Encerrado timer: id:19, (11:36:36.3062)
2015-08-26 11:36:36.3062|Info|      Executando timer: id:20, (11:36:36.3062)
2015-08-26 11:36:36.3062|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:36.3062|Info|      Encerrado timer: id:20, (11:36:36.3062)
2015-08-26 11:36:36.3218|Info|      Executando timer: id:21, (11:36:36.3218)
2015-08-26 11:36:36.3218|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:36.3218|Info|  Settimeout: id:22, (13) ms
2015-08-26 11:36:36.3844|Info|      Encerrado timer: id:21, (11:36:36.3844)
2015-08-26 11:36:36.3844|Info|      Executando timer: id:22, (11:36:36.3844)
2015-08-26 11:36:36.3844|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:36.3844|Info| PASS - throttle twice
2015-08-26 11:36:36.3844|Info|  Settimeout: id:23, (30) ms
2015-08-26 11:36:36.4469|Info|  Settimeout: id:24, (85) ms
2015-08-26 11:36:36.5094|Info|      Encerrado timer: id:22, (11:36:36.5094)
2015-08-26 11:36:36.5094|Info|      Executando timer: id:23, (11:36:36.5094)
2015-08-26 11:36:36.5094|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:36.5094|Info|      Encerrado timer: id:23, (11:36:36.5094)
2015-08-26 11:36:36.5406|Info|      Executando timer: id:24, (11:36:36.5406)
2015-08-26 11:36:36.5406|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:36.5406|Info|  Settimeout: id:25, (13) ms
2015-08-26 11:36:36.6031|Info|      Encerrado timer: id:24, (11:36:36.6031)
2015-08-26 11:36:36.6031|Info|      Executando timer: id:25, (11:36:36.6045)
2015-08-26 11:36:36.6031|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:36.6031|Info| PASS - more throttling
2015-08-26 11:36:36.6031|Info|  Settimeout: id:26, (100) ms
2015-08-26 11:36:36.6737|Info|  Settimeout: id:27, (50) ms
2015-08-26 11:36:36.7361|Info|  Settimeout: id:28, (150) ms
2015-08-26 11:36:36.7986|Info|  Settimeout: id:29, (160) ms
2015-08-26 11:36:36.8612|Info|  Settimeout: id:30, (230) ms
2015-08-26 11:36:36.9237|Info|  Settimeout: id:31, (300) ms
2015-08-26 11:36:36.9862|Info|      Encerrado timer: id:25, (11:36:36.9862)
2015-08-26 11:36:36.9862|Info|      Executando timer: id:26, (11:36:36.9862)
2015-08-26 11:36:36.9862|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:36.9862|Info|      Encerrado timer: id:26, (11:36:36.9862)
2015-08-26 11:36:36.9862|Info|      Executando timer: id:27, (11:36:36.9862)
2015-08-26 11:36:36.9862|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:36.9862|Info|  Settimeout: id:32, (100) ms
2015-08-26 11:36:37.0487|Info|      Encerrado timer: id:27, (11:36:37.0487)
2015-08-26 11:36:37.0487|Info|      Executando timer: id:28, (11:36:37.0487)
2015-08-26 11:36:37.0487|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:37.0487|Info|      Encerrado timer: id:28, (11:36:37.0487)
2015-08-26 11:36:37.0487|Info|      Executando timer: id:29, (11:36:37.0487)
2015-08-26 11:36:37.0487|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:37.0487|Info|      Encerrado timer: id:29, (11:36:37.0487)
2015-08-26 11:36:37.0955|Info|      Executando timer: id:32, (11:36:37.0955)
2015-08-26 11:36:37.0955|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:37.0955|Info|      Encerrado timer: id:32, (11:36:37.0955)
2015-08-26 11:36:37.0955|Info|      Executando timer: id:30, (11:36:37.0955)
2015-08-26 11:36:37.0955|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:37.0955|Info|  Settimeout: id:33, (100) ms
2015-08-26 11:36:37.1580|Info|      Encerrado timer: id:30, (11:36:37.1580)
2015-08-26 11:36:37.2205|Info|      Executando timer: id:33, (11:36:37.2205)
2015-08-26 11:36:37.2205|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:37.2205|Info|      Encerrado timer: id:33, (11:36:37.2205)
2015-08-26 11:36:37.2362|Info|      Executando timer: id:31, (11:36:37.2362)
2015-08-26 11:36:37.2362|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:37.2362|Info|  Settimeout: id:34, (13) ms
2015-08-26 11:36:37.2969|Info|      Encerrado timer: id:31, (11:36:37.2969)
2015-08-26 11:36:37.2969|Info|      Executando timer: id:34, (11:36:37.2969)
2015-08-26 11:36:37.2969|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:37.2969|Info|  Settimeout: id:35, (32) ms
2015-08-26 11:36:37.3594|Info|  Settimeout: id:36, (96) ms
2015-08-26 11:36:37.4219|Info|      Encerrado timer: id:34, (11:36:37.4219)
2015-08-26 11:36:37.4219|Info|      Executando timer: id:35, (11:36:37.4219)
2015-08-26 11:36:37.4219|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:37.4219|Info|      Encerrado timer: id:35, (11:36:37.4219)
2015-08-26 11:36:37.4844|Info|      Executando timer: id:36, (11:36:37.4844)
2015-08-26 11:36:37.4844|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:37.4844|Info|  Settimeout: id:37, (13) ms
2015-08-26 11:36:37.5469|Info|      Encerrado timer: id:36, (11:36:37.5469)
2015-08-26 11:36:37.5469|Info|      Executando timer: id:37, (11:36:37.5469)
2015-08-26 11:36:37.5469|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:37.5469|Info|  Settimeout: id:38, (60) ms
2015-08-26 11:36:37.6095|Info|  Settimeout: id:39, (96) ms
2015-08-26 11:36:37.6719|Info|      Encerrado timer: id:37, (11:36:37.6719)
2015-08-26 11:36:37.7188|Info|      Executando timer: id:39, (11:36:37.7188)
2015-08-26 11:36:37.7188|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:37.7188|Info|  Settimeout: id:40, (13) ms
2015-08-26 11:36:37.7813|Info|      Encerrado timer: id:39, (11:36:37.7813)
2015-08-26 11:36:37.7813|Info|      Executando timer: id:40, (11:36:37.7813)
2015-08-26 11:36:37.7813|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:37.7813|Info|  Settimeout: id:41, (100) ms
2015-08-26 11:36:37.8438|Info|  Settimeout: id:42, (50) ms
2015-08-26 11:36:37.9063|Info|  Settimeout: id:43, (60) ms
2015-08-26 11:36:37.9688|Info|  Settimeout: id:44, (200) ms
2015-08-26 11:36:38.0313|Info|  Settimeout: id:45, (250) ms
2015-08-26 11:36:38.0938|Info|  Settimeout: id:46, (350) ms
2015-08-26 11:36:38.1563|Info|      Encerrado timer: id:40, (11:36:38.1563)
2015-08-26 11:36:38.1563|Info|      Executando timer: id:41, (11:36:38.1563)
2015-08-26 11:36:38.1563|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:38.1563|Info|      Encerrado timer: id:41, (11:36:38.1563)
2015-08-26 11:36:38.1563|Info|      Executando timer: id:42, (11:36:38.1563)
2015-08-26 11:36:38.1563|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:38.1563|Info|  Settimeout: id:47, (100) ms
2015-08-26 11:36:38.2188|Info|      Encerrado timer: id:42, (11:36:38.2188)
2015-08-26 11:36:38.2188|Info|      Executando timer: id:43, (11:36:38.2188)
2015-08-26 11:36:38.2188|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:38.2188|Info|      Encerrado timer: id:43, (11:36:38.2188)
2015-08-26 11:36:38.2188|Info|      Executando timer: id:44, (11:36:38.2188)
2015-08-26 11:36:38.2188|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:38.2188|Info|      Encerrado timer: id:44, (11:36:38.2188)
2015-08-26 11:36:38.2657|Info|      Executando timer: id:47, (11:36:38.2657)
2015-08-26 11:36:38.2657|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:38.2657|Info|      Encerrado timer: id:47, (11:36:38.2657)
2015-08-26 11:36:38.2970|Info|      Executando timer: id:45, (11:36:38.2970)
2015-08-26 11:36:38.2970|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:38.2970|Info|      Encerrado timer: id:45, (11:36:38.2970)
2015-08-26 11:36:38.4535|Info|      Executando timer: id:46, (11:36:38.4535)
2015-08-26 11:36:38.4535|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:38.4535|Info|  Settimeout: id:48, (13) ms
2015-08-26 11:36:38.5160|Info|      Encerrado timer: id:46, (11:36:38.5160)
2015-08-26 11:36:38.5160|Info|      Executando timer: id:48, (11:36:38.5160)
2015-08-26 11:36:38.5160|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:38.5160|Info|  Settimeout: id:49, (100) ms
2015-08-26 11:36:38.6253|Info|  Settimeout: id:50, (100) ms
2015-08-26 11:36:38.7347|Info|  Settimeout: id:51, (100) ms
2015-08-26 11:36:38.8441|Info|  Settimeout: id:52, (100) ms
2015-08-26 11:36:38.9067|Info|  Settimeout: id:53, (200) ms
2015-08-26 11:36:38.9691|Info|      Encerrado timer: id:48, (11:36:38.9691)
2015-08-26 11:36:38.9691|Info|      Executando timer: id:52, (11:36:38.9691)
2015-08-26 11:36:38.9691|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:38.9691|Info|      Encerrado timer: id:52, (11:36:38.9691)
2015-08-26 11:36:39.1254|Info|      Executando timer: id:53, (11:36:39.1254)
2015-08-26 11:36:39.1254|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:39.1254|Info|  Settimeout: id:54, (13) ms
2015-08-26 11:36:39.1879|Info|      Encerrado timer: id:53, (11:36:39.1879)
2015-08-26 11:36:39.1879|Info|      Executando timer: id:54, (11:36:39.1879)
2015-08-26 11:36:39.1879|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:39.1879|Info| PASS - one more throttle with leading: false test
2015-08-26 11:36:39.1879|Info|  Settimeout: id:55, (96) ms
2015-08-26 11:36:39.2504|Info|      Encerrado timer: id:54, (11:36:39.2504)
2015-08-26 11:36:39.2973|Info|      Executando timer: id:55, (11:36:39.2973)
2015-08-26 11:36:39.2973|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:39.2973|Info|  Settimeout: id:56, (96) ms
2015-08-26 11:36:39.3597|Info|      Encerrado timer: id:55, (11:36:39.3597)
2015-08-26 11:36:39.4067|Info|      Executando timer: id:56, (11:36:39.4067)
2015-08-26 11:36:39.4067|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:39.4067|Info|  Settimeout: id:57, (13) ms
2015-08-26 11:36:39.4692|Info|      Encerrado timer: id:56, (11:36:39.4692)
2015-08-26 11:36:39.4692|Info|      Executando timer: id:57, (11:36:39.4692)
2015-08-26 11:36:39.4692|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:39.4692|Info| PASS - throttle does not trigger trailing call when trailing is set to false
2015-08-26 11:36:39.4692|Info|  Settimeout: id:58, (200) ms
2015-08-26 11:36:39.5317|Info|      Encerrado timer: id:57, (11:36:39.5317)
2015-08-26 11:36:39.6879|Info|      Executando timer: id:58, (11:36:39.6879)
2015-08-26 11:36:39.6879|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:39.6879|Info|  Settimeout: id:59, (13) ms
2015-08-26 11:36:39.7504|Info|      Encerrado timer: id:58, (11:36:39.7504)
2015-08-26 11:36:39.7504|Info|      Executando timer: id:59, (11:36:39.7504)
2015-08-26 11:36:39.7504|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:39.7504|Info| PASS - throttle continues to function after system time is set backwards
2015-08-26 11:36:39.7504|Info|  Settimeout: id:60, (32) ms
2015-08-26 11:36:39.8129|Info|  Settimeout: id:61, (100) ms
2015-08-26 11:36:39.8754|Info|      Encerrado timer: id:59, (11:36:39.8754)
2015-08-26 11:36:39.8754|Info|      Executando timer: id:60, (11:36:39.8754)
2015-08-26 11:36:39.8754|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:39.8754|Info|  Settimeout: id:62, (32) ms
2015-08-26 11:36:39.9379|Info|      Encerrado timer: id:60, (11:36:39.9379)
2015-08-26 11:36:39.9379|Info|      Executando timer: id:61, (11:36:39.9379)
2015-08-26 11:36:39.9379|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:39.9379|Info|  Settimeout: id:63, (13) ms
2015-08-26 11:36:40.0004|Info|      Encerrado timer: id:61, (11:36:40.0004)
2015-08-26 11:36:40.0004|Info|      Executando timer: id:62, (11:36:40.0004)
2015-08-26 11:36:40.0004|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:40.0004|Info|      Encerrado timer: id:62, (11:36:40.0004)
2015-08-26 11:36:40.0004|Info|      Executando timer: id:63, (11:36:40.0004)
2015-08-26 11:36:40.0004|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:40.0004|Info|  Settimeout: id:64, (32) ms
2015-08-26 11:36:40.0629|Info|  Settimeout: id:65, (16) ms
2015-08-26 11:36:40.1254|Info|  Settimeout: id:66, (96) ms
2015-08-26 11:36:40.1879|Info|      Encerrado timer: id:63, (11:36:40.1879)
2015-08-26 11:36:40.1879|Info|      Executando timer: id:64, (11:36:40.1879)
2015-08-26 11:36:40.1879|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:40.1879|Info|      Encerrado timer: id:64, (11:36:40.1879)
2015-08-26 11:36:40.1879|Info|      Executando timer: id:65, (11:36:40.1879)
2015-08-26 11:36:40.1879|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:40.1879|Info|  Settimeout: id:67, (32) ms
2015-08-26 11:36:40.2504|Info|      Encerrado timer: id:65, (11:36:40.2504)
2015-08-26 11:36:40.2504|Info|      Executando timer: id:67, (11:36:40.2504)
2015-08-26 11:36:40.2504|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:40.2504|Info|      Encerrado timer: id:67, (11:36:40.2504)
2015-08-26 11:36:40.2504|Info|      Executando timer: id:66, (11:36:40.2504)
2015-08-26 11:36:40.2504|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:40.2504|Info|  Settimeout: id:68, (13) ms
2015-08-26 11:36:40.3129|Info|      Encerrado timer: id:66, (11:36:40.3129)
2015-08-26 11:36:40.3129|Info|      Executando timer: id:68, (11:36:40.3129)
2015-08-26 11:36:40.3129|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:40.3129|Info|  Settimeout: id:69, (64) ms
2015-08-26 11:36:40.3754|Info|  Settimeout: id:70, (16) ms
2015-08-26 11:36:40.4379|Info|  Settimeout: id:71, (32) ms
2015-08-26 11:36:40.5004|Info|  Settimeout: id:72, (48) ms
2015-08-26 11:36:40.5629|Info|  Settimeout: id:73, (128) ms
2015-08-26 11:36:40.6254|Info|      Encerrado timer: id:68, (11:36:40.6254)
2015-08-26 11:36:40.6254|Info|      Executando timer: id:69, (11:36:40.6254)
2015-08-26 11:36:40.6254|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:40.6254|Info|      Encerrado timer: id:69, (11:36:40.6254)
2015-08-26 11:36:40.6254|Info|      Executando timer: id:70, (11:36:40.6254)
2015-08-26 11:36:40.6254|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:40.6254|Info|  Settimeout: id:74, (64) ms
2015-08-26 11:36:40.6879|Info|      Encerrado timer: id:70, (11:36:40.6879)
2015-08-26 11:36:40.6879|Info|      Executando timer: id:71, (11:36:40.6879)
2015-08-26 11:36:40.6879|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:40.6879|Info|      Encerrado timer: id:71, (11:36:40.6879)
2015-08-26 11:36:40.6879|Info|      Executando timer: id:72, (11:36:40.6879)
2015-08-26 11:36:40.6879|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:40.6879|Info|      Encerrado timer: id:72, (11:36:40.6879)
2015-08-26 11:36:40.7035|Info|      Executando timer: id:74, (11:36:40.7035)
2015-08-26 11:36:40.7035|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:40.7035|Info|  Settimeout: id:75, (48) ms
2015-08-26 11:36:40.7661|Info|      Encerrado timer: id:74, (11:36:40.7661)
2015-08-26 11:36:40.7661|Info|      Executando timer: id:73, (11:36:40.7661)
2015-08-26 11:36:40.7661|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:40.7661|Info|  Settimeout: id:76, (13) ms
2015-08-26 11:36:40.8286|Info|      Encerrado timer: id:73, (11:36:40.8286)
2015-08-26 11:36:40.8286|Info|      Executando timer: id:75, (11:36:40.8286)
2015-08-26 11:36:40.8286|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:40.8286|Info|      Encerrado timer: id:75, (11:36:40.8286)
2015-08-26 11:36:40.8286|Info|      Executando timer: id:76, (11:36:40.8286)
2015-08-26 11:36:40.8286|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:40.8286|Info|  Settimeout: id:77, (32) ms
2015-08-26 11:36:40.8911|Info|  Settimeout: id:78, (96) ms
2015-08-26 11:36:40.9535|Info|      Encerrado timer: id:76, (11:36:40.9535)
2015-08-26 11:36:40.9535|Info|      Executando timer: id:77, (11:36:40.9535)
2015-08-26 11:36:40.9535|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:40.9535|Info|      Encerrado timer: id:77, (11:36:40.9535)
2015-08-26 11:36:41.0004|Info|      Executando timer: id:78, (11:36:41.0004)
2015-08-26 11:36:41.0004|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:41.0004|Info|  Settimeout: id:79, (13) ms
2015-08-26 11:36:41.0629|Info|      Encerrado timer: id:78, (11:36:41.0629)
2015-08-26 11:36:41.0629|Info|      Executando timer: id:79, (11:36:41.0629)
2015-08-26 11:36:41.0629|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:41.0629|Info| PASS - debounce asap recursively
2015-08-26 11:36:41.0629|Info|  Settimeout: id:80, (100) ms
2015-08-26 11:36:41.1254|Info|  Settimeout: id:81, (200) ms
2015-08-26 11:36:41.1879|Info|      Encerrado timer: id:79, (11:36:41.1879)
2015-08-26 11:36:41.1879|Info|      Executando timer: id:80, (11:36:41.1879)
2015-08-26 11:36:41.1879|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:41.1879|Info|      Encerrado timer: id:80, (11:36:41.1879)
2015-08-26 11:36:41.3442|Info|      Executando timer: id:81, (11:36:41.3442)
2015-08-26 11:36:41.3442|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:41.3442|Info|  Settimeout: id:82, (100) ms
2015-08-26 11:36:41.4073|Info|  Settimeout: id:83, (13) ms
2015-08-26 11:36:41.4697|Info|      Encerrado timer: id:81, (11:36:41.4697)
2015-08-26 11:36:41.4697|Info|      Executando timer: id:83, (11:36:41.4697)
2015-08-26 11:36:41.4697|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:41.4697|Info| PASS - debounce after system time is set backwards
2015-08-26 11:36:41.4697|Info|  Settimeout: id:84, (32) ms
2015-08-26 11:36:41.5322|Info|  Settimeout: id:85, (100) ms
2015-08-26 11:36:41.5947|Info|      Encerrado timer: id:83, (11:36:41.5947)
2015-08-26 11:36:41.5947|Info|      Executando timer: id:82, (11:36:41.5947)
2015-08-26 11:36:41.5947|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:41.5947|Info|      Encerrado timer: id:82, (11:36:41.5947)
2015-08-26 11:36:41.5947|Info|      Executando timer: id:84, (11:36:41.5947)
2015-08-26 11:36:41.5947|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:41.5947|Info|  Settimeout: id:86, (32) ms
2015-08-26 11:36:41.6572|Info|      Encerrado timer: id:84, (11:36:41.6572)
2015-08-26 11:36:41.6572|Info|      Executando timer: id:85, (11:36:41.6572)
2015-08-26 11:36:41.6572|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:41.6572|Info|  Settimeout: id:87, (13) ms
2015-08-26 11:36:41.7198|Info|      Encerrado timer: id:85, (11:36:41.7198)
2015-08-26 11:36:41.7198|Info|      Executando timer: id:86, (11:36:41.7198)
2015-08-26 11:36:41.7198|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:41.7198|Info|      Encerrado timer: id:86, (11:36:41.7198)
2015-08-26 11:36:41.7198|Info|      Executando timer: id:87, (11:36:41.7198)
2015-08-26 11:36:41.7198|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:41.7198|Info| PASS - once
2015-08-26 11:36:41.7198|Info| PASS - Recursive onced function.
2015-08-26 11:36:41.7198|Info| PASS - wrap
2015-08-26 11:36:41.7353|Info| PASS - negate
2015-08-26 11:36:41.7353|Info| PASS - compose
2015-08-26 11:36:41.7353|Info| PASS - after
2015-08-26 11:36:41.7353|Info| PASS - before
2015-08-26 11:36:41.7353|Info| PASS - iteratee
2015-08-26 11:36:41.7353|Info|----------------------------------------
2015-08-26 11:36:41.7353|Info|Objects
2015-08-26 11:36:41.7353|Info|----------------------------------------
2015-08-26 11:36:41.7353|Info| PASS - keys
2015-08-26 11:36:41.7510|Info| PASS - allKeys
2015-08-26 11:36:41.7510|Info| PASS - values
2015-08-26 11:36:41.7510|Info| PASS - pairs
2015-08-26 11:36:41.7510|Info| PASS - invert
2015-08-26 11:36:41.7510|Info| PASS - functions
2015-08-26 11:36:41.7510|Info| PASS - methods
2015-08-26 11:36:41.7510|Info| PASS - extend
2015-08-26 11:36:41.7666|Info| PASS - extendOwn
2015-08-26 11:36:41.7666|Info| PASS - pick
2015-08-26 11:36:41.7666|Info| PASS - omit
2015-08-26 11:36:41.7666|Info| PASS - defaults
2015-08-26 11:36:41.7666|Info| PASS - clone
2015-08-26 11:36:41.7666|Info| PASS - create
2015-08-26 11:36:41.7666|Info| PASS - isEqual
2015-08-26 11:36:41.7666|Info| PASS - isEmpty
2015-08-26 11:36:41.7666|Info| PASS - isArguments
2015-08-26 11:36:41.7822|Info| PASS - isObject
2015-08-26 11:36:41.7822|Info| PASS - isArray
2015-08-26 11:36:41.7822|Info| PASS - isString
2015-08-26 11:36:41.7822|Info| PASS - isNumber
2015-08-26 11:36:41.7822|Info| PASS - isBoolean
2015-08-26 11:36:41.7822|Info| PASS - isFunction
2015-08-26 11:36:41.7822|Info| FAIL - #1929 Typed Array constructors are functions
2015-08-26 11:36:41.7822|Info|    PASS | EQ | can extract the keys from an object
2015-08-26 11:36:41.7822|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 11:36:41.7822|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7822|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7822|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7822|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7822|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 11:36:41.7978|Info|    PASS | EQ | can extract the allKeys from an object
2015-08-26 11:36:41.7978|Info|    PASS | EQ | is not fooled by sparse arrays; see issue #95
2015-08-26 11:36:41.7978|Info|    PASS | EQ | is not fooled by sparse arrays with additional properties
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ok
2015-08-26 11:36:41.7978|Info|    PASS | EQ | matches non-enumerable properties
2015-08-26 11:36:41.7978|Info|    PASS | EQ | should include inherited keys
2015-08-26 11:36:41.7978|Info|    PASS | EQ | should get keys from constructor
2015-08-26 11:36:41.7978|Info|    PASS | EQ | can extract the values from an object
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 11:36:41.7978|Info|    PASS | EQ | can convert an object into pairs
2015-08-26 11:36:41.7978|Info|    PASS | EQ | ... even when one of them is "length"
2015-08-26 11:36:41.7978|Info|    PASS | EQ | can invert an object
2015-08-26 11:36:41.7978|Info|    PASS | EQ | two inverts gets you back where you started
2015-08-26 11:36:41.8134|Info|    PASS | EQ | can invert an object with "length"
2015-08-26 11:36:41.8134|Info|    PASS | EQ | can grab the function names of any passed-in object
2015-08-26 11:36:41.8134|Info|    PASS | EQ | also looks up functions on the prototype
2015-08-26 11:36:41.8134|Info|    PASS | EQ | alias for functions
2015-08-26 11:36:41.8134|Info|    PASS | EQ | can extend an object with the attributes of another
2015-08-26 11:36:41.8134|Info|    PASS | EQ | properties in source override destination
2015-08-26 11:36:41.8134|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 11:36:41.8134|Info|    PASS | EQ | can extend from multiple source objects
2015-08-26 11:36:41.8134|Info|    PASS | EQ | extending from multiple source objects last property trumps
2015-08-26 11:36:41.8134|Info|    PASS | EQ | extend copies undefined values
2015-08-26 11:36:41.8134|Info|    PASS | EQ | extend copies all properties from source
2015-08-26 11:36:41.8134|Info|    PASS | EQ | extend does not convert destination object's 'in' properties to 'own' properties
2015-08-26 11:36:41.8134|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:36:41.8134|Info|    PASS | EQ | extending null results in null
2015-08-26 11:36:41.8134|Info|    PASS | OK | extending undefined results in undefined
2015-08-26 11:36:41.8134|Info|    PASS | EQ | can assign an object with the attributes of another
2015-08-26 11:36:41.8134|Info|    PASS | EQ | properties in source override destination
2015-08-26 11:36:41.8134|Info|    PASS | EQ | properties not in source don't get overriden
2015-08-26 11:36:41.8134|Info|    PASS | EQ | can assign from multiple source objects
2015-08-26 11:36:41.8134|Info|    PASS | EQ | assigning from multiple source objects last property trumps
2015-08-26 11:36:41.8134|Info|    PASS | EQ | assign copies undefined values
2015-08-26 11:36:41.8134|Info|    PASS | EQ | assign copies own properties from source
2015-08-26 11:36:41.8134|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:36:41.8291|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:36:41.8291|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:36:41.8291|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:36:41.8291|Info|    PASS | EQ | assigning non-objects results in returning the non-object value
2015-08-26 11:36:41.8291|Info|    PASS | OK | assigning undefined results in undefined
2015-08-26 11:36:41.8291|Info|    PASS | EQ | assign should treat array-like objects like normal objects
2015-08-26 11:36:41.8291|Info|    PASS | EQ | can restrict properties to those named
2015-08-26 11:36:41.8291|Info|    PASS | EQ | can restrict properties to those named in an array
2015-08-26 11:36:41.8291|Info|    PASS | EQ | can restrict properties to those named in mixed args
2015-08-26 11:36:41.8291|Info|    PASS | EQ | can pick numeric properties
2015-08-26 11:36:41.8291|Info|    PASS | EQ | Called with null/undefined
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | Called with null/undefined
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | can iterate primitives
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8291|Info|    PASS | EQ | can accept a predicate and context
2015-08-26 11:36:41.8291|Info|    PASS | EQ | include prototype props
2015-08-26 11:36:41.8291|Info|    PASS | EQ | function is given context
2015-08-26 11:36:41.8291|Info|    PASS | EQ | does not set own property if property not in object
2015-08-26 11:36:41.8291|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:36:41.8447|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:36:41.8447|Info|    PASS | EQ | passes same object as third parameter of iteratee
2015-08-26 11:36:41.8447|Info|    PASS | EQ | can omit a single named property
2015-08-26 11:36:41.8447|Info|    PASS | EQ | can omit several named properties
2015-08-26 11:36:41.8447|Info|    PASS | EQ | can omit properties named in an array
2015-08-26 11:36:41.8447|Info|    PASS | EQ | can omit numeric properties
2015-08-26 11:36:41.8447|Info|    PASS | EQ | non objects return empty object
2015-08-26 11:36:41.8447|Info|    PASS | EQ | null/undefined return empty object
2015-08-26 11:36:41.8447|Info|    PASS | EQ | returns empty object for primitives
2015-08-26 11:36:41.8447|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8447|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8447|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8447|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8447|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8447|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8447|Info|    PASS | EQ | can accept a predicate
2015-08-26 11:36:41.8447|Info|    PASS | EQ | include prototype props
2015-08-26 11:36:41.8447|Info|    PASS | EQ | function is given context
2015-08-26 11:36:41.8447|Info|    PASS | EQ | value exists
2015-08-26 11:36:41.8447|Info|    PASS | EQ | value exists
2015-08-26 11:36:41.8447|Info|    PASS | EQ | default applied
2015-08-26 11:36:41.8447|Info|    PASS | EQ | null isn't overridden
2015-08-26 11:36:41.8447|Info|    PASS | EQ | value exists
2015-08-26 11:36:41.8447|Info|    PASS | EQ | NaN isn't overridden
2015-08-26 11:36:41.8447|Info|    PASS | EQ | new value is added, first one wins
2015-08-26 11:36:41.8447|Info|    PASS | EQ | should not error on `null` or `undefined` sources
2015-08-26 11:36:41.8447|Info|    PASS | EQ | result is null if destination is null
2015-08-26 11:36:41.8447|Info|    PASS | OK | result is undefined if destination is undefined
2015-08-26 11:36:41.8603|Info|    PASS | EQ | the clone as the attributes of the original
2015-08-26 11:36:41.8603|Info|    PASS | EQ | clones can change shallow attributes without affecting the original
2015-08-26 11:36:41.8603|Info|    PASS | EQ | changes to deep attributes are shared with the original
2015-08-26 11:36:41.8603|Info|    PASS | OK | non objects should not be changed by clone
2015-08-26 11:36:41.8603|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 11:36:41.8603|Info|    PASS | EQ | non objects should not be changed by clone
2015-08-26 11:36:41.8603|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:36:41.8603|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:36:41.8603|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:36:41.8603|Info|    PASS | EQ | should return empty object when a non-object is provided
2015-08-26 11:36:41.8603|Info|    PASS | EQ | should return new instance of array when array is provided
2015-08-26 11:36:41.8603|Info|    PASS | EQ | object should inherit prototype
2015-08-26 11:36:41.8603|Info|    PASS | EQ | properties should be added to object
2015-08-26 11:36:41.8603|Info|    PASS | EQ | ok
2015-08-26 11:36:41.8603|Info|    PASS | EQ | should only add own properties
2015-08-26 11:36:41.8603|Info|    PASS | EQ | `null` is equal to `null`
2015-08-26 11:36:41.8603|Info|    PASS | EQ | `undefined` is equal to `undefined`
2015-08-26 11:36:41.8603|Info|    PASS | EQ | `0` is not equal to `-0`
2015-08-26 11:36:41.8603|Info|    PASS | EQ | Commutative equality is implemented for `0` and `-0`
2015-08-26 11:36:41.8603|Info|    PASS | EQ | `null` is not equal to `undefined`
2015-08-26 11:36:41.8603|Info|    PASS | EQ | Commutative equality is implemented for `null` and `undefined`
2015-08-26 11:36:41.8603|Info|    PASS | EQ | Identical string primitives are equal
2015-08-26 11:36:41.8603|Info|    PASS | EQ | String objects with identical primitive values are equal
2015-08-26 11:36:41.8603|Info|    PASS | EQ | String primitives and their corresponding object wrappers are equal
2015-08-26 11:36:41.8603|Info|    PASS | EQ | Commutative equality is implemented for string objects and primitives
2015-08-26 11:36:41.8603|Info|    PASS | EQ | String primitives with different values are not equal
2015-08-26 11:36:41.8603|Info|    PASS | EQ | String objects with different primitive values are not equal
2015-08-26 11:36:41.8603|Info|    PASS | EQ | String objects and objects with a custom `toString` method are not equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Identical number primitives are equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Number objects with identical primitive values are equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Number primitives and their corresponding object wrappers are equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Commutative equality is implemented for number objects and primitives
2015-08-26 11:36:41.8759|Info|    PASS | EQ | `new Number(0)` and `-0` are not equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Commutative equality is implemented for `new Number(0)` and `-0`
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Number objects with different primitive values are not equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Number objects and objects with a `valueOf` method are not equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | `NaN` is equal to `NaN`
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Object(`NaN`) is equal to `NaN`
2015-08-26 11:36:41.8759|Info|    PASS | EQ | A number primitive is not equal to `NaN`
2015-08-26 11:36:41.8759|Info|    PASS | EQ | A number object is not equal to `NaN`
2015-08-26 11:36:41.8759|Info|    PASS | EQ | `Infinity` is not equal to `NaN`
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Identical boolean primitives are equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Boolean objects with identical primitive values are equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Boolean primitives and their corresponding object wrappers are equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Commutative equality is implemented for booleans
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Boolean objects with different primitive values are not equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | `new Boolean(false)` is not equal to `true`
2015-08-26 11:36:41.8759|Info|    PASS | EQ | String and number primitives with like values are not equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | String and number objects with like values are not equal
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Commutative equality is implemented for like string and number values
2015-08-26 11:36:41.8759|Info|    PASS | EQ | Number and string primitives with like values are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Number and boolean primitives with like values are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Boolean and number objects with like values are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Boolean primitives and string objects with like values are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Dates and their corresponding numeric primitive values are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Date objects referencing identical times are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Date objects referencing different times are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Date objects and objects with a `getTime` method are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Invalid dates are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Different functions with identical bodies and source code representations are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | RegExps with equivalent patterns and flags are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Flag order is not significant
2015-08-26 11:36:41.8916|Info|    PASS | EQ | RegExps with equivalent patterns and different flags are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | RegExps with different patterns and equivalent flags are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Commutative equality is implemented for RegExps
2015-08-26 11:36:41.8916|Info|    PASS | EQ | RegExps and RegExp-like objects are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Empty object literals are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Empty array literals are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Empty nested arrays and objects are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Array-like objects and arrays are not equal.
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Commutative equality is implemented for array-like objects
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Object literals and array literals are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Commutative equality is implemented for objects and arrays
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Arrays containing identical primitives are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Arrays containing equivalent elements are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Arrays containing nested arrays and objects are recursively compared
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Arrays containing equivalent elements and different non-numeric properties are equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Arrays of different lengths are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Arrays of identical lengths containing different elements are not equal
2015-08-26 11:36:41.8916|Info|    PASS | EQ | Sparse arrays of identical lengths are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Sparse arrays of different lengths are not equal when both are empty
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Handles sparse arrays as dense
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects containing identical primitives are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects containing equivalent members are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects of identical sizes with different values are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects of identical sizes with different property names are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects of different sizes are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Commutative equality is implemented for objects
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects with identical keys and different values are not equivalent
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects with nested equivalent members are recursively compared
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Object instances are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects with different constructors and identical own properties are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Object instances and objects sharing equivalent properties are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | The prototype chain of objects should not be examined
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Arrays containing circular references are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Arrays containing circular references and equivalent properties are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Arrays containing circular references and different properties are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Comparison of circular references with non-circular references are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects containing circular references are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects containing circular references and equivalent properties are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Objects containing circular references and different properties are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Comparison of circular references with non-circular object references are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Cyclic structures are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Cyclic structures containing equivalent properties are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Cyclic structures containing different properties are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Cyclic structures with nested and identically-named properties are equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Chained objects containing different values are not equal
2015-08-26 11:36:41.9072|Info|    PASS | EQ | `isEqual` can be chained
2015-08-26 11:36:41.9072|Info|    PASS | EQ | Handles objects without a constructor (e.g. from Object.create
2015-08-26 11:36:41.9228|Info|    PASS | EQ | Objects from different constructors are not equal
2015-08-26 11:36:41.9228|Info|    PASS | EQ | [1] is not empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | [] is empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | {one : 1} is not empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | {} is empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | objects with prototype properties are empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | null is empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | undefined is empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | the empty string is empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | but other strings are not
2015-08-26 11:36:41.9228|Info|    PASS | EQ | deleting all the keys from an object empties it
2015-08-26 11:36:41.9228|Info|    PASS | EQ | empty arguments object is empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | non-empty arguments object is not empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | non-enumerable property is not empty
2015-08-26 11:36:41.9228|Info|    PASS | EQ | a string is not an arguments object
2015-08-26 11:36:41.9228|Info|    PASS | EQ | a function is not an arguments object
2015-08-26 11:36:41.9228|Info|    PASS | EQ | but the arguments object is an arguments object
2015-08-26 11:36:41.9228|Info|    PASS | EQ | but not when it's converted into an array
2015-08-26 11:36:41.9228|Info|    PASS | EQ | and not vanilla arrays.
2015-08-26 11:36:41.9228|Info|    PASS | EQ | the arguments object is object
2015-08-26 11:36:41.9228|Info|    PASS | EQ | and arrays
2015-08-26 11:36:41.9228|Info|    PASS | EQ | and functions
2015-08-26 11:36:41.9228|Info|    PASS | EQ | but not null
2015-08-26 11:36:41.9228|Info|    PASS | EQ | and not undefined
2015-08-26 11:36:41.9228|Info|    PASS | EQ | and not string
2015-08-26 11:36:41.9228|Info|    PASS | EQ | and not number
2015-08-26 11:36:41.9228|Info|    PASS | EQ | and not boolean
2015-08-26 11:36:41.9228|Info|    PASS | EQ | but new String()
2015-08-26 11:36:41.9384|Info|    PASS | EQ | undefined vars are not arrays
2015-08-26 11:36:41.9384|Info|    PASS | EQ | the arguments object is not an array
2015-08-26 11:36:41.9384|Info|    PASS | EQ | but arrays are
2015-08-26 11:36:41.9384|Info|    PASS | EQ | but strings are
2015-08-26 11:36:41.9384|Info|    PASS | EQ | string literals are
2015-08-26 11:36:41.9384|Info|    PASS | EQ | so are String objects
2015-08-26 11:36:41.9384|Info|    PASS | EQ | ok
2015-08-26 11:36:41.9384|Info|    PASS | EQ | a string is not a number
2015-08-26 11:36:41.9384|Info|    PASS | EQ | the arguments object is not a number
2015-08-26 11:36:41.9384|Info|    PASS | EQ | undefined is not a number
2015-08-26 11:36:41.9384|Info|    PASS | EQ | but numbers are
2015-08-26 11:36:41.9384|Info|    PASS | EQ | NaN *is* a number
2015-08-26 11:36:41.9384|Info|    PASS | EQ | Infinity is a number
2015-08-26 11:36:41.9384|Info|    PASS | EQ | numeric strings are not numbers
2015-08-26 11:36:41.9384|Info|    PASS | EQ | a number is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | a string is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | the string "false" is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | the string "true" is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | the arguments object is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | undefined is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | NaN is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | null is not a boolean
2015-08-26 11:36:41.9384|Info|    PASS | EQ | but true is
2015-08-26 11:36:41.9384|Info|    PASS | EQ | and so is false
2015-08-26 11:36:41.9384|Info|    PASS | EQ | undefined vars are not functions
2015-08-26 11:36:41.9384|Info|    PASS | EQ | arrays are not functions
2015-08-26 11:36:41.9384|Info|    PASS | EQ | strings are not functions
2015-08-26 11:36:41.9384|Info|    PASS | EQ | but functions are
2015-08-26 11:36:41.9541|Info|    PASS | EQ | even anonymous ones
2015-08-26 11:36:41.9541|Info|    FAIL | OK | Died on test #1     at V8Runtime [3]:underscoreTests:2898:5
    at V8Runtime [3]:underscoreTests:3251:2: window is not defined
2015-08-26 11:36:41.9541|Info| PASS - isDate
2015-08-26 11:36:41.9541|Info| PASS - isRegExp
2015-08-26 11:36:41.9541|Info| PASS - isFinite
2015-08-26 11:36:41.9541|Info| PASS - isNaN
2015-08-26 11:36:41.9541|Info| PASS - isNull
2015-08-26 11:36:41.9541|Info| PASS - isUndefined
2015-08-26 11:36:41.9541|Info| PASS - isError
2015-08-26 11:36:41.9541|Info| PASS - tap
2015-08-26 11:36:41.9541|Info| PASS - has
2015-08-26 11:36:41.9541|Info| PASS - isMatch
2015-08-26 11:36:41.9541|Info| PASS - matcher
2015-08-26 11:36:41.9541|Info| PASS - matcher 
2015-08-26 11:36:41.9697|Info| PASS - findKey
2015-08-26 11:36:41.9697|Info| PASS - mapObject
2015-08-26 11:36:41.9697|Info|----------------------------------------
2015-08-26 11:36:41.9697|Info|Utility
2015-08-26 11:36:41.9697|Info|----------------------------------------
2015-08-26 11:36:41.9697|Info| PASS - #750 - Return _ instance.
2015-08-26 11:36:41.9697|Info| PASS - identity
2015-08-26 11:36:41.9697|Info| PASS - constant
2015-08-26 11:36:41.9697|Info| PASS - noop
2015-08-26 11:36:41.9697|Info| PASS - property
2015-08-26 11:36:41.9697|Info| PASS - propertyOf
2015-08-26 11:36:41.9697|Info| PASS - random
2015-08-26 11:36:41.9697|Info| PASS - now
2015-08-26 11:36:41.9697|Info| PASS - uniqueId
2015-08-26 11:36:41.9697|Info| PASS - times
2015-08-26 11:36:41.9853|Info| PASS - mixin
2015-08-26 11:36:41.9853|Info| PASS - _.escape
2015-08-26 11:36:41.9853|Info| PASS - _.unescape
2015-08-26 11:36:41.9853|Info| PASS - _.escape & unescape
2015-08-26 11:36:41.9853|Info| PASS - template
2015-08-26 11:36:41.9853|Info| PASS - _.template provides the generated function source, when a SyntaxError occurs
2015-08-26 11:36:41.9853|Info| PASS - _.template handles \u2028 & \u2029
2015-08-26 11:36:41.9853|Info| PASS - result calls functions and returns primitives
2015-08-26 11:36:41.9853|Info| PASS - result returns a default value if object is null or undefined
2015-08-26 11:36:41.9853|Info| PASS - result returns a default value if property of object is missing
2015-08-26 11:36:41.9853|Info| PASS - result only returns the default value if the object does not have the property or is undefined
2015-08-26 11:36:41.9853|Info| PASS - result does not return the default if the property of an object is found in the prototype
2015-08-26 11:36:41.9853|Info| PASS - result does use the fallback when the result of invoking the property is undefined
2015-08-26 11:36:41.9853|Info| PASS - result fallback can use a function
2015-08-26 11:36:42.0010|Info| PASS - _.templateSettings.variable
2015-08-26 11:36:42.0010|Info| PASS - #547 - _.templateSettings is unchanged by custom settings.
2015-08-26 11:36:42.0010|Info| PASS - #556 - undefined template variables.
2015-08-26 11:36:42.0010|Info| PASS - interpolate evaluates code only once.
2015-08-26 11:36:42.0010|Info| PASS - #746 - _.template settings are not modified.
2015-08-26 11:36:42.0010|Info| PASS - #779 - delimeters are applied to unescaped text.
2015-08-26 11:36:42.0010|Info|  Settimeout: id:88, (100) ms
2015-08-26 11:36:42.0635|Info|  Settimeout: id:89, (50) ms
2015-08-26 11:36:42.1260|Info|  Settimeout: id:90, (150) ms
2015-08-26 11:36:42.1823|Info|      Encerrado timer: id:87, (11:36:42.1823)
2015-08-26 11:36:42.1823|Info|      Executando timer: id:88, (11:36:42.1823)
2015-08-26 11:36:42.1823|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:42.1823|Info|      Encerrado timer: id:88, (11:36:42.1823)
2015-08-26 11:36:42.1823|Info|      Executando timer: id:89, (11:36:42.1823)
2015-08-26 11:36:42.1823|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:36:42.1823|Info|      Encerrado timer: id:89, (11:36:42.1823)
2015-08-26 11:36:42.2916|Info|      Executando timer: id:90, (11:36:42.2916)
2015-08-26 11:36:42.2916|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:36:42.2916|Info|  Settimeout: id:91, (13) ms
2015-08-26 11:36:42.3541|Info|      Encerrado timer: id:90, (11:36:42.3541)
2015-08-26 11:36:42.3541|Info|      Executando timer: id:91, (11:36:42.3541)
2015-08-26 11:36:42.3541|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:42.3541|Info|  Settimeout: id:92, (32) ms
2015-08-26 11:36:42.4166|Info|  Settimeout: id:93, (64) ms
2015-08-26 11:36:42.4791|Info|  Settimeout: id:94, (96) ms
2015-08-26 11:36:42.5416|Info|      Encerrado timer: id:91, (11:36:42.5416)
2015-08-26 11:36:42.5416|Info|      Executando timer: id:92, (11:36:42.5416)
2015-08-26 11:36:42.5416|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:42.5416|Info|      Encerrado timer: id:92, (11:36:42.5416)
2015-08-26 11:36:42.5416|Info|      Executando timer: id:93, (11:36:42.5416)
2015-08-26 11:36:42.5416|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:42.5416|Info|  Settimeout: id:95, (32) ms
2015-08-26 11:36:42.6041|Info|      Encerrado timer: id:93, (11:36:42.6041)
2015-08-26 11:36:42.6041|Info|      Executando timer: id:95, (11:36:42.6041)
2015-08-26 11:36:42.6041|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:42.6041|Info|      Encerrado timer: id:95, (11:36:42.6041)
2015-08-26 11:36:42.6041|Info|      Executando timer: id:94, (11:36:42.6041)
2015-08-26 11:36:42.6041|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:42.6041|Info|  Settimeout: id:96, (13) ms
2015-08-26 11:36:42.6666|Info|      Encerrado timer: id:94, (11:36:42.6666)
2015-08-26 11:36:42.6666|Info|      Executando timer: id:96, (11:36:42.6666)
2015-08-26 11:36:42.6666|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:42.6666|Info|----------------------------------------
2015-08-26 11:36:42.6666|Info|Functions
2015-08-26 11:36:42.6666|Info|----------------------------------------
2015-08-26 11:36:42.6666|Info| PASS - throttle arguments
2015-08-26 11:36:42.6666|Info|  Settimeout: id:97, (100) ms
2015-08-26 11:36:42.7448|Info|  Settimeout: id:98, (50) ms
2015-08-26 11:36:42.8073|Info|  Settimeout: id:99, (150) ms
2015-08-26 11:36:42.8698|Info|  Settimeout: id:100, (160) ms
2015-08-26 11:36:42.9322|Info|  Settimeout: id:101, (230) ms
2015-08-26 11:36:42.9948|Info|  Settimeout: id:102, (300) ms
2015-08-26 11:36:43.0449|Info|      Encerrado timer: id:96, (11:36:43.0449)
2015-08-26 11:36:43.0449|Info|      Executando timer: id:97, (11:36:43.0469)
2015-08-26 11:36:43.0449|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:43.0519|Info|      Encerrado timer: id:97, (11:36:43.0519)
2015-08-26 11:36:43.0519|Info|      Executando timer: id:98, (11:36:43.0539)
2015-08-26 11:36:43.0519|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:43.0519|Info|  Settimeout: id:103, (94) ms
2015-08-26 11:36:43.1196|Info|      Encerrado timer: id:98, (11:36:43.1196)
2015-08-26 11:36:43.1196|Info|      Executando timer: id:99, (11:36:43.1196)
2015-08-26 11:36:43.1196|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:43.1196|Info|      Encerrado timer: id:99, (11:36:43.1196)
2015-08-26 11:36:43.1196|Info|      Executando timer: id:100, (11:36:43.1196)
2015-08-26 11:36:43.1196|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:43.1196|Info|      Encerrado timer: id:100, (11:36:43.1196)
2015-08-26 11:36:43.1665|Info|      Executando timer: id:103, (11:36:43.1665)
2015-08-26 11:36:43.1665|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:43.1665|Info|      Encerrado timer: id:103, (11:36:43.1665)
2015-08-26 11:36:43.1665|Info|      Executando timer: id:101, (11:36:43.1665)
2015-08-26 11:36:43.1665|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:43.1665|Info|  Settimeout: id:104, (100) ms
2015-08-26 11:36:43.2290|Info|      Encerrado timer: id:101, (11:36:43.2290)
2015-08-26 11:36:43.2915|Info|      Executando timer: id:104, (11:36:43.2915)
2015-08-26 11:36:43.2915|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:43.2915|Info|      Encerrado timer: id:104, (11:36:43.2915)
2015-08-26 11:36:43.3071|Info|      Executando timer: id:102, (11:36:43.3071)
2015-08-26 11:36:43.3071|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:43.3071|Info|  Settimeout: id:105, (13) ms
2015-08-26 11:36:43.3696|Info|      Encerrado timer: id:102, (11:36:43.3696)
2015-08-26 11:36:43.3696|Info|      Executando timer: id:105, (11:36:43.3696)
2015-08-26 11:36:43.3696|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:43.3696|Info|  Settimeout: id:106, (32) ms
2015-08-26 11:36:43.4324|Info|  Settimeout: id:107, (96) ms
2015-08-26 11:36:43.4949|Info|      Encerrado timer: id:105, (11:36:43.4949)
2015-08-26 11:36:43.4949|Info|      Executando timer: id:106, (11:36:43.4949)
2015-08-26 11:36:43.4949|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:43.4949|Info|      Encerrado timer: id:106, (11:36:43.4949)
2015-08-26 11:36:43.5418|Info|      Executando timer: id:107, (11:36:43.5418)
2015-08-26 11:36:43.5418|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:43.5418|Info|  Settimeout: id:108, (13) ms
2015-08-26 11:36:43.6042|Info|      Encerrado timer: id:107, (11:36:43.6042)
2015-08-26 11:36:43.6042|Info|      Executando timer: id:108, (11:36:43.6042)
2015-08-26 11:36:43.6042|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:43.6042|Info|  Settimeout: id:109, (60) ms
2015-08-26 11:36:43.6668|Info|  Settimeout: id:110, (96) ms
2015-08-26 11:36:43.7293|Info|      Encerrado timer: id:108, (11:36:43.7293)
2015-08-26 11:36:43.7762|Info|      Executando timer: id:110, (11:36:43.7762)
2015-08-26 11:36:43.7762|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:43.7762|Info|  Settimeout: id:111, (13) ms
2015-08-26 11:36:43.8387|Info|      Encerrado timer: id:110, (11:36:43.8387)
2015-08-26 11:36:43.8387|Info|      Executando timer: id:111, (11:36:43.8387)
2015-08-26 11:36:43.8387|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:43.8387|Info|  Settimeout: id:112, (100) ms
2015-08-26 11:36:43.9012|Info|  Settimeout: id:113, (50) ms
2015-08-26 11:36:43.9637|Info|  Settimeout: id:114, (60) ms
2015-08-26 11:36:44.0261|Info|  Settimeout: id:115, (200) ms
2015-08-26 11:36:44.0886|Info|  Settimeout: id:116, (250) ms
2015-08-26 11:36:44.1511|Info|  Settimeout: id:117, (350) ms
2015-08-26 11:36:44.2136|Info|      Encerrado timer: id:111, (11:36:44.2136)
2015-08-26 11:36:44.2136|Info|      Executando timer: id:112, (11:36:44.2136)
2015-08-26 11:36:44.2136|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:44.2136|Info|      Encerrado timer: id:112, (11:36:44.2136)
2015-08-26 11:36:44.2136|Info|      Executando timer: id:113, (11:36:44.2136)
2015-08-26 11:36:44.2136|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:44.2136|Info|  Settimeout: id:118, (100) ms
2015-08-26 11:36:44.2762|Info|      Encerrado timer: id:113, (11:36:44.2762)
2015-08-26 11:36:44.2762|Info|      Executando timer: id:114, (11:36:44.2762)
2015-08-26 11:36:44.2762|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:44.2762|Info|      Encerrado timer: id:114, (11:36:44.2762)
2015-08-26 11:36:44.2762|Info|      Executando timer: id:115, (11:36:44.2762)
2015-08-26 11:36:44.2762|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:44.2762|Info|      Encerrado timer: id:115, (11:36:44.2762)
2015-08-26 11:36:44.3230|Info|      Executando timer: id:118, (11:36:44.3230)
2015-08-26 11:36:44.3230|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:44.3230|Info|      Encerrado timer: id:118, (11:36:44.3230)
2015-08-26 11:36:44.3543|Info|      Executando timer: id:116, (11:36:44.3543)
2015-08-26 11:36:44.3543|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:44.3543|Info|      Encerrado timer: id:116, (11:36:44.3543)
2015-08-26 11:36:44.5105|Info|      Executando timer: id:117, (11:36:44.5105)
2015-08-26 11:36:44.5105|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:44.5105|Info|  Settimeout: id:119, (13) ms
2015-08-26 11:36:44.5730|Info|      Encerrado timer: id:117, (11:36:44.5730)
2015-08-26 11:36:44.5730|Info|      Executando timer: id:119, (11:36:44.5730)
2015-08-26 11:36:44.5730|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:44.5730|Info|  Settimeout: id:120, (32) ms
2015-08-26 11:36:44.6355|Info|  Settimeout: id:121, (100) ms
2015-08-26 11:36:44.6980|Info|      Encerrado timer: id:119, (11:36:44.6980)
2015-08-26 11:36:44.6980|Info|      Executando timer: id:120, (11:36:44.6980)
2015-08-26 11:36:44.6980|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:44.6980|Info|  Settimeout: id:122, (32) ms
2015-08-26 11:36:44.7605|Info|      Encerrado timer: id:120, (11:36:44.7605)
2015-08-26 11:36:44.7605|Info|      Executando timer: id:122, (11:36:44.7605)
2015-08-26 11:36:44.7605|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:44.7605|Info|      Encerrado timer: id:122, (11:36:44.7605)
2015-08-26 11:36:44.7605|Info|      Executando timer: id:121, (11:36:44.7605)
2015-08-26 11:36:44.7605|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:44.7605|Info|  Settimeout: id:123, (13) ms
2015-08-26 11:36:44.8230|Info|      Encerrado timer: id:121, (11:36:44.8230)
2015-08-26 11:36:44.8230|Info|      Executando timer: id:123, (11:36:44.8230)
2015-08-26 11:36:44.8230|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:44.8230|Info| PASS - throttle re-entrant
2015-08-26 11:36:44.8230|Info|  Settimeout: id:124, (32) ms
2015-08-26 11:36:44.8855|Info|  Settimeout: id:125, (16) ms
2015-08-26 11:36:44.9480|Info|  Settimeout: id:126, (96) ms
2015-08-26 11:36:45.0105|Info|      Encerrado timer: id:123, (11:36:45.0105)
2015-08-26 11:36:45.0105|Info|      Executando timer: id:124, (11:36:45.0105)
2015-08-26 11:36:45.0105|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:45.0105|Info|      Encerrado timer: id:124, (11:36:45.0105)
2015-08-26 11:36:45.0105|Info|      Executando timer: id:125, (11:36:45.0105)
2015-08-26 11:36:45.0105|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:45.0105|Info|  Settimeout: id:127, (32) ms
2015-08-26 11:36:45.0731|Info|      Encerrado timer: id:125, (11:36:45.0731)
2015-08-26 11:36:45.0731|Info|      Executando timer: id:126, (11:36:45.0731)
2015-08-26 11:36:45.0731|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:45.0731|Info|  Settimeout: id:128, (13) ms
2015-08-26 11:36:45.1355|Info|      Encerrado timer: id:126, (11:36:45.1355)
2015-08-26 11:36:45.1355|Info|      Executando timer: id:127, (11:36:45.1355)
2015-08-26 11:36:45.1355|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:45.1355|Info|      Encerrado timer: id:127, (11:36:45.1355)
2015-08-26 11:36:45.1355|Info|      Executando timer: id:128, (11:36:45.1355)
2015-08-26 11:36:45.1355|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:45.1355|Info| PASS - debounce
2015-08-26 11:36:45.1355|Info|  Settimeout: id:129, (64) ms
2015-08-26 11:36:45.1981|Info|  Settimeout: id:130, (16) ms
2015-08-26 11:36:45.2606|Info|  Settimeout: id:131, (32) ms
2015-08-26 11:36:45.3231|Info|  Settimeout: id:132, (48) ms
2015-08-26 11:36:45.3856|Info|  Settimeout: id:133, (128) ms
2015-08-26 11:36:45.4483|Info|      Encerrado timer: id:128, (11:36:45.4483)
2015-08-26 11:36:45.4483|Info|      Executando timer: id:129, (11:36:45.4483)
2015-08-26 11:36:45.4483|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:45.4483|Info|      Encerrado timer: id:129, (11:36:45.4483)
2015-08-26 11:36:45.4483|Info|      Executando timer: id:130, (11:36:45.4483)
2015-08-26 11:36:45.4483|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:45.4483|Info|  Settimeout: id:134, (64) ms
2015-08-26 11:36:45.5108|Info|      Encerrado timer: id:130, (11:36:45.5108)
2015-08-26 11:36:45.5108|Info|      Executando timer: id:131, (11:36:45.5108)
2015-08-26 11:36:45.5108|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:45.5108|Info|      Encerrado timer: id:131, (11:36:45.5108)
2015-08-26 11:36:45.5108|Info|      Executando timer: id:132, (11:36:45.5108)
2015-08-26 11:36:45.5108|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:45.5108|Info|      Encerrado timer: id:132, (11:36:45.5108)
2015-08-26 11:36:45.5264|Info|      Executando timer: id:133, (11:36:45.5264)
2015-08-26 11:36:45.5264|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:45.5264|Info|  Settimeout: id:135, (13) ms
2015-08-26 11:36:45.5889|Info|      Encerrado timer: id:133, (11:36:45.5889)
2015-08-26 11:36:45.5889|Info|      Executando timer: id:134, (11:36:45.5889)
2015-08-26 11:36:45.5889|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:45.5889|Info|      Encerrado timer: id:134, (11:36:45.5889)
2015-08-26 11:36:45.5889|Info|      Executando timer: id:135, (11:36:45.5889)
2015-08-26 11:36:45.5889|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:45.5889|Info|  Settimeout: id:136, (32) ms
2015-08-26 11:36:45.6515|Info|  Settimeout: id:137, (100) ms
2015-08-26 11:36:45.7139|Info|      Encerrado timer: id:135, (11:36:45.7139)
2015-08-26 11:36:45.7139|Info|      Executando timer: id:136, (11:36:45.7139)
2015-08-26 11:36:45.7139|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:45.7139|Info|  Settimeout: id:138, (32) ms
2015-08-26 11:36:45.7764|Info|      Encerrado timer: id:136, (11:36:45.7764)
2015-08-26 11:36:45.7764|Info|      Executando timer: id:137, (11:36:45.7764)
2015-08-26 11:36:45.7764|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:45.7764|Info|  Settimeout: id:139, (13) ms
2015-08-26 11:36:45.8389|Info|      Encerrado timer: id:137, (11:36:45.8389)
2015-08-26 11:36:45.8389|Info|      Executando timer: id:138, (11:36:45.8389)
2015-08-26 11:36:45.8389|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:45.8389|Info|      Encerrado timer: id:138, (11:36:45.8389)
2015-08-26 11:36:45.8389|Info|      Executando timer: id:139, (11:36:45.8389)
2015-08-26 11:36:45.8389|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:45.8389|Info|  Settimeout: id:140, (100) ms
2015-08-26 11:36:45.9015|Info|  Settimeout: id:141, (50) ms
2015-08-26 11:36:45.9640|Info|  Settimeout: id:142, (150) ms
2015-08-26 11:36:46.0264|Info|      Encerrado timer: id:139, (11:36:46.0264)
2015-08-26 11:36:46.0264|Info|      Executando timer: id:141, (11:36:46.0264)
2015-08-26 11:36:46.0264|Info|          Deveria ter disparado: function (){ ok(!delayed, "didn't delay the function quite yet"); }
2015-08-26 11:36:46.0264|Info|      Encerrado timer: id:141, (11:36:46.0264)
2015-08-26 11:36:46.0264|Info|      Executando timer: id:140, (11:36:46.0264)
2015-08-26 11:36:46.0264|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:46.0264|Info|      Encerrado timer: id:140, (11:36:46.0264)
2015-08-26 11:36:46.1202|Info|      Executando timer: id:142, (11:36:46.1202)
2015-08-26 11:36:46.1202|Info|          Deveria ter disparado: function (){ ok(delayed, 'delayed the function'); start(); }
2015-08-26 11:36:46.1202|Info|  Settimeout: id:143, (13) ms
2015-08-26 11:36:46.1827|Info|      Encerrado timer: id:142, (11:36:46.1827)
2015-08-26 11:36:46.1827|Info|      Executando timer: id:143, (11:36:46.1827)
2015-08-26 11:36:46.1827|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:46.1827|Info| PASS - delay
2015-08-26 11:36:46.1827|Info|  Settimeout: id:144, (100) ms
2015-08-26 11:36:46.2451|Info|  Settimeout: id:145, (50) ms
2015-08-26 11:36:46.3077|Info|  Settimeout: id:146, (150) ms
2015-08-26 11:36:46.3702|Info|  Settimeout: id:147, (160) ms
2015-08-26 11:36:46.4327|Info|  Settimeout: id:148, (230) ms
2015-08-26 11:36:46.4952|Info|  Settimeout: id:149, (300) ms
2015-08-26 11:36:46.5577|Info|      Encerrado timer: id:143, (11:36:46.5577)
2015-08-26 11:36:46.5577|Info|      Executando timer: id:145, (11:36:46.5577)
2015-08-26 11:36:46.5577|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:46.5577|Info|      Encerrado timer: id:145, (11:36:46.5577)
2015-08-26 11:36:46.5577|Info|      Executando timer: id:146, (11:36:46.5577)
2015-08-26 11:36:46.5577|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:46.5577|Info|  Settimeout: id:150, (100) ms
2015-08-26 11:36:46.6202|Info|      Encerrado timer: id:146, (11:36:46.6202)
2015-08-26 11:36:46.6202|Info|      Executando timer: id:147, (11:36:46.6202)
2015-08-26 11:36:46.6202|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:46.6202|Info|      Encerrado timer: id:147, (11:36:46.6202)
2015-08-26 11:36:46.6671|Info|      Executando timer: id:148, (11:36:46.6671)
2015-08-26 11:36:46.6671|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:46.6671|Info|      Encerrado timer: id:148, (11:36:46.6671)
2015-08-26 11:36:46.8077|Info|      Executando timer: id:149, (11:36:46.8077)
2015-08-26 11:36:46.8077|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:46.8077|Info|  Settimeout: id:151, (13) ms
2015-08-26 11:36:46.8702|Info|      Encerrado timer: id:149, (11:36:46.8702)
2015-08-26 11:36:46.8702|Info|      Executando timer: id:151, (11:36:46.8702)
2015-08-26 11:36:46.8702|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:46.8702|Info|  Settimeout: id:152, (32) ms
2015-08-26 11:36:46.9327|Info|  Settimeout: id:153, (96) ms
2015-08-26 11:36:46.9952|Info|      Encerrado timer: id:151, (11:36:46.9952)
2015-08-26 11:36:46.9952|Info|      Executando timer: id:152, (11:36:46.9952)
2015-08-26 11:36:46.9952|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:46.9952|Info|      Encerrado timer: id:152, (11:36:46.9952)
2015-08-26 11:36:47.0420|Info|      Executando timer: id:153, (11:36:47.0420)
2015-08-26 11:36:47.0420|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:47.0420|Info|  Settimeout: id:154, (13) ms
2015-08-26 11:36:47.1045|Info|      Encerrado timer: id:153, (11:36:47.1045)
2015-08-26 11:36:47.1045|Info|      Executando timer: id:154, (11:36:47.1045)
2015-08-26 11:36:47.1045|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:47.1045|Info|  Settimeout: id:155, (60) ms
2015-08-26 11:36:47.1671|Info|  Settimeout: id:156, (96) ms
2015-08-26 11:36:47.2296|Info|      Encerrado timer: id:154, (11:36:47.2296)
2015-08-26 11:36:47.2764|Info|      Executando timer: id:156, (11:36:47.2764)
2015-08-26 11:36:47.2764|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:47.2764|Info|  Settimeout: id:157, (13) ms
2015-08-26 11:36:47.3390|Info|      Encerrado timer: id:156, (11:36:47.3390)
2015-08-26 11:36:47.3390|Info|      Executando timer: id:157, (11:36:47.3390)
2015-08-26 11:36:47.3390|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:47.3546|Info|  Settimeout: id:158, (100) ms
2015-08-26 11:36:47.4174|Info|  Settimeout: id:159, (50) ms
2015-08-26 11:36:47.4798|Info|  Settimeout: id:160, (60) ms
2015-08-26 11:36:47.5424|Info|  Settimeout: id:161, (200) ms
2015-08-26 11:36:47.6049|Info|  Settimeout: id:162, (250) ms
2015-08-26 11:36:47.6674|Info|  Settimeout: id:163, (350) ms
2015-08-26 11:36:47.7299|Info|      Encerrado timer: id:157, (11:36:47.7299)
2015-08-26 11:36:47.7299|Info|      Executando timer: id:158, (11:36:47.7299)
2015-08-26 11:36:47.7299|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:47.7299|Info|      Encerrado timer: id:158, (11:36:47.7299)
2015-08-26 11:36:47.7299|Info|      Executando timer: id:159, (11:36:47.7299)
2015-08-26 11:36:47.7299|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:47.7299|Info|  Settimeout: id:164, (100) ms
2015-08-26 11:36:47.8080|Info|      Encerrado timer: id:159, (11:36:47.8080)
2015-08-26 11:36:47.8080|Info|      Executando timer: id:160, (11:36:47.8080)
2015-08-26 11:36:47.8080|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:47.8080|Info|      Encerrado timer: id:160, (11:36:47.8080)
2015-08-26 11:36:47.8080|Info|      Executando timer: id:161, (11:36:47.8080)
2015-08-26 11:36:47.8080|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:47.8080|Info|      Encerrado timer: id:161, (11:36:47.8080)
2015-08-26 11:36:47.8549|Info|      Executando timer: id:164, (11:36:47.8549)
2015-08-26 11:36:47.8549|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:47.8549|Info|      Encerrado timer: id:164, (11:36:47.8549)
2015-08-26 11:36:47.8705|Info|      Executando timer: id:162, (11:36:47.8705)
2015-08-26 11:36:47.8705|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:47.8705|Info|      Encerrado timer: id:162, (11:36:47.8705)
2015-08-26 11:36:48.0267|Info|      Executando timer: id:163, (11:36:48.0267)
2015-08-26 11:36:48.0267|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:48.0267|Info|  Settimeout: id:165, (13) ms
2015-08-26 11:36:48.0892|Info|      Encerrado timer: id:163, (11:36:48.0892)
2015-08-26 11:36:48.0892|Info|      Executando timer: id:165, (11:36:48.0892)
2015-08-26 11:36:48.0892|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:48.0892|Info|  Settimeout: id:166, (64) ms
2015-08-26 11:36:48.1517|Info|  Settimeout: id:167, (16) ms
2015-08-26 11:36:48.2143|Info|  Settimeout: id:168, (32) ms
2015-08-26 11:36:48.2767|Info|  Settimeout: id:169, (48) ms
2015-08-26 11:36:48.3392|Info|  Settimeout: id:170, (128) ms
2015-08-26 11:36:48.4017|Info|      Encerrado timer: id:165, (11:36:48.4017)
2015-08-26 11:36:48.4017|Info|      Executando timer: id:166, (11:36:48.4017)
2015-08-26 11:36:48.4017|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:48.4017|Info|      Encerrado timer: id:166, (11:36:48.4017)
2015-08-26 11:36:48.4017|Info|      Executando timer: id:167, (11:36:48.4017)
2015-08-26 11:36:48.4017|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:48.4017|Info|  Settimeout: id:171, (64) ms
2015-08-26 11:36:48.4642|Info|      Encerrado timer: id:167, (11:36:48.4642)
2015-08-26 11:36:48.4642|Info|      Executando timer: id:168, (11:36:48.4642)
2015-08-26 11:36:48.4642|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:48.4642|Info|      Encerrado timer: id:168, (11:36:48.4642)
2015-08-26 11:36:48.4642|Info|      Executando timer: id:169, (11:36:48.4642)
2015-08-26 11:36:48.4642|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:48.4642|Info|      Encerrado timer: id:169, (11:36:48.4642)
2015-08-26 11:36:48.4798|Info|      Executando timer: id:170, (11:36:48.4798)
2015-08-26 11:36:48.4798|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:48.4798|Info|  Settimeout: id:172, (13) ms
2015-08-26 11:36:48.5424|Info|      Encerrado timer: id:170, (11:36:48.5424)
2015-08-26 11:36:48.5424|Info|      Executando timer: id:171, (11:36:48.5424)
2015-08-26 11:36:48.5424|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:48.5424|Info|      Encerrado timer: id:171, (11:36:48.5424)
2015-08-26 11:36:48.5424|Info|      Executando timer: id:172, (11:36:48.5424)
2015-08-26 11:36:48.5424|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:48.5424|Info|  Settimeout: id:173, (32) ms
2015-08-26 11:36:48.6049|Info|  Settimeout: id:174, (100) ms
2015-08-26 11:36:48.6674|Info|      Encerrado timer: id:172, (11:36:48.6674)
2015-08-26 11:36:48.6674|Info|      Executando timer: id:173, (11:36:48.6674)
2015-08-26 11:36:48.6674|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:48.6674|Info|  Settimeout: id:175, (32) ms
2015-08-26 11:36:48.7299|Info|      Encerrado timer: id:173, (11:36:48.7299)
2015-08-26 11:36:48.7299|Info|      Executando timer: id:174, (11:36:48.7299)
2015-08-26 11:36:48.7299|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:48.7299|Info|  Settimeout: id:176, (13) ms
2015-08-26 11:36:48.7923|Info|      Encerrado timer: id:174, (11:36:48.7923)
2015-08-26 11:36:48.7923|Info|      Executando timer: id:175, (11:36:48.7923)
2015-08-26 11:36:48.7923|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:48.7923|Info|      Encerrado timer: id:175, (11:36:48.7923)
2015-08-26 11:36:48.7923|Info|      Executando timer: id:176, (11:36:48.7923)
2015-08-26 11:36:48.7923|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:48.7923|Info|  Settimeout: id:177, (100) ms
2015-08-26 11:36:48.8548|Info|  Settimeout: id:178, (50) ms
2015-08-26 11:36:48.9174|Info|  Settimeout: id:179, (150) ms
2015-08-26 11:36:48.9799|Info|  Settimeout: id:180, (160) ms
2015-08-26 11:36:49.0424|Info|  Settimeout: id:181, (230) ms
2015-08-26 11:36:49.1049|Info|  Settimeout: id:182, (300) ms
2015-08-26 11:36:49.1554|Info|      Encerrado timer: id:176, (11:36:49.1554)
2015-08-26 11:36:49.1554|Info|      Executando timer: id:177, (11:36:49.1574)
2015-08-26 11:36:49.1604|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:49.1604|Info|      Encerrado timer: id:177, (11:36:49.1634)
2015-08-26 11:36:49.1764|Info|      Executando timer: id:178, (11:36:49.1764)
2015-08-26 11:36:49.1764|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:49.1764|Info|  Settimeout: id:183, (82) ms
2015-08-26 11:36:49.2447|Info|      Encerrado timer: id:178, (11:36:49.2447)
2015-08-26 11:36:49.2447|Info|      Executando timer: id:179, (11:36:49.2447)
2015-08-26 11:36:49.2447|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:49.2447|Info|      Encerrado timer: id:179, (11:36:49.2447)
2015-08-26 11:36:49.2447|Info|      Executando timer: id:180, (11:36:49.2447)
2015-08-26 11:36:49.2447|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:49.2447|Info|      Encerrado timer: id:180, (11:36:49.2447)
2015-08-26 11:36:49.2760|Info|      Executando timer: id:183, (11:36:49.2760)
2015-08-26 11:36:49.2760|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:49.2760|Info|      Encerrado timer: id:183, (11:36:49.2760)
2015-08-26 11:36:49.2760|Info|      Executando timer: id:181, (11:36:49.2760)
2015-08-26 11:36:49.2760|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:49.2760|Info|  Settimeout: id:184, (100) ms
2015-08-26 11:36:49.3384|Info|      Encerrado timer: id:181, (11:36:49.3384)
2015-08-26 11:36:49.4009|Info|      Executando timer: id:184, (11:36:49.4009)
2015-08-26 11:36:49.4009|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:49.4009|Info|      Encerrado timer: id:184, (11:36:49.4020)
2015-08-26 11:36:49.4177|Info|      Executando timer: id:182, (11:36:49.4177)
2015-08-26 11:36:49.4177|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:49.4177|Info|  Settimeout: id:185, (13) ms
2015-08-26 11:36:49.4802|Info|      Encerrado timer: id:182, (11:36:49.4802)
2015-08-26 11:36:49.4802|Info|      Executando timer: id:185, (11:36:49.4802)
2015-08-26 11:36:49.4802|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:49.4802|Info| FAIL - throttle repeatedly with results
2015-08-26 11:36:49.4802|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:49.4802|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:49.4802|Info|    PASS | EQ | ok
2015-08-26 11:36:49.4802|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:36:49.4958|Info|    PASS | EQ | incr was debounced
2015-08-26 11:36:49.4958|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:36:49.4958|Info|    PASS | EQ | delayed the function
2015-08-26 11:36:49.4958|Info|    PASS | EQ | incr was called once
2015-08-26 11:36:49.4958|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:49.4958|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:36:49.4958|Info|    PASS | EQ | incr was called twice
2015-08-26 11:36:49.4958|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:49.4958|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:36:49.5114|Info|  Settimeout: id:186, (32) ms
2015-08-26 11:36:49.5739|Info|  Settimeout: id:187, (96) ms
2015-08-26 11:36:49.6364|Info|      Encerrado timer: id:185, (11:36:49.6364)
2015-08-26 11:36:49.6364|Info|      Executando timer: id:186, (11:36:49.6364)
2015-08-26 11:36:49.6364|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:49.6364|Info|      Encerrado timer: id:186, (11:36:49.6364)
2015-08-26 11:36:49.6833|Info|      Executando timer: id:187, (11:36:49.6833)
2015-08-26 11:36:49.6833|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:49.6833|Info|  Settimeout: id:188, (13) ms
2015-08-26 11:36:49.7458|Info|      Encerrado timer: id:187, (11:36:49.7458)
2015-08-26 11:36:49.7458|Info|      Executando timer: id:188, (11:36:49.7458)
2015-08-26 11:36:49.7458|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:49.7458|Info| FAIL - throttle triggers trailing call when invoked repeatedly
2015-08-26 11:36:49.7458|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:49.7458|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:49.7458|Info|    PASS | EQ | ok
2015-08-26 11:36:49.7458|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:36:49.7458|Info|    PASS | EQ | incr was debounced
2015-08-26 11:36:49.7614|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:36:49.7614|Info|    PASS | EQ | delayed the function
2015-08-26 11:36:49.7614|Info|    PASS | EQ | incr was called once
2015-08-26 11:36:49.7614|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:49.7614|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:36:49.7614|Info|    PASS | EQ | incr was called twice
2015-08-26 11:36:49.7614|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:49.7614|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:36:49.7614|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:49.7770|Info|    PASS | EQ | okay
2015-08-26 11:36:49.7770|Info|  Settimeout: id:189, (60) ms
2015-08-26 11:36:49.8396|Info|  Settimeout: id:190, (96) ms
2015-08-26 11:36:49.9021|Info|      Encerrado timer: id:188, (11:36:49.9021)
2015-08-26 11:36:49.9489|Info|      Executando timer: id:190, (11:36:49.9489)
2015-08-26 11:36:49.9489|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:49.9489|Info|  Settimeout: id:191, (13) ms
2015-08-26 11:36:50.0114|Info|      Encerrado timer: id:190, (11:36:50.0114)
2015-08-26 11:36:50.0114|Info|      Executando timer: id:191, (11:36:50.0114)
2015-08-26 11:36:50.0114|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:50.0114|Info| FAIL - throttle does not trigger leading call when leading is set to false
2015-08-26 11:36:50.0114|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:50.0114|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:50.0114|Info|    PASS | EQ | ok
2015-08-26 11:36:50.0114|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:36:50.0114|Info|    PASS | EQ | incr was debounced
2015-08-26 11:36:50.0114|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:36:50.0114|Info|    PASS | EQ | delayed the function
2015-08-26 11:36:50.0114|Info|    PASS | EQ | incr was called once
2015-08-26 11:36:50.0114|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:50.0114|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:36:50.0114|Info|    PASS | EQ | incr was called twice
2015-08-26 11:36:50.0114|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:50.0114|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:36:50.0114|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:50.0114|Info|    PASS | EQ | okay
2015-08-26 11:36:50.0114|Info|    FAIL | EQ | ok | Expected: 0, Actual: 1
2015-08-26 11:36:50.0114|Info|    PASS | EQ | ok
2015-08-26 11:36:50.0114|Info|  Settimeout: id:192, (100) ms
2015-08-26 11:36:50.0739|Info|  Settimeout: id:193, (50) ms
2015-08-26 11:36:50.1364|Info|  Settimeout: id:194, (60) ms
2015-08-26 11:36:50.1989|Info|  Settimeout: id:195, (200) ms
2015-08-26 11:36:50.2614|Info|  Settimeout: id:196, (250) ms
2015-08-26 11:36:50.3239|Info|  Settimeout: id:197, (350) ms
2015-08-26 11:36:50.3864|Info|      Encerrado timer: id:191, (11:36:50.3864)
2015-08-26 11:36:50.3864|Info|      Executando timer: id:193, (11:36:50.3864)
2015-08-26 11:36:50.3864|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:50.3864|Info|      Encerrado timer: id:193, (11:36:50.3864)
2015-08-26 11:36:50.3864|Info|      Executando timer: id:194, (11:36:50.3864)
2015-08-26 11:36:50.3864|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:50.3864|Info|  Settimeout: id:198, (100) ms
2015-08-26 11:36:50.4490|Info|      Encerrado timer: id:194, (11:36:50.4490)
2015-08-26 11:36:50.4490|Info|      Executando timer: id:195, (11:36:50.4490)
2015-08-26 11:36:50.4490|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:50.4490|Info|      Encerrado timer: id:195, (11:36:50.4490)
2015-08-26 11:36:50.4958|Info|      Executando timer: id:198, (11:36:50.4958)
2015-08-26 11:36:50.4958|Info|          Deveria ter disparado: function () {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    }
2015-08-26 11:36:50.4958|Info|      Encerrado timer: id:198, (11:36:50.4958)
2015-08-26 11:36:50.5271|Info|      Executando timer: id:196, (11:36:50.5271)
2015-08-26 11:36:50.5271|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:50.5271|Info|      Encerrado timer: id:196, (11:36:50.5271)
2015-08-26 11:36:50.6833|Info|      Executando timer: id:197, (11:36:50.6833)
2015-08-26 11:36:50.6833|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:50.6833|Info|  Settimeout: id:199, (13) ms
2015-08-26 11:36:50.7458|Info|      Encerrado timer: id:197, (11:36:50.7458)
2015-08-26 11:36:50.7458|Info|      Executando timer: id:199, (11:36:50.7458)
2015-08-26 11:36:50.7458|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:50.7458|Info| FAIL - more throttle does not trigger leading call when leading is set to false
2015-08-26 11:36:50.7458|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:50.7458|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:50.7614|Info|    PASS | EQ | ok
2015-08-26 11:36:50.7614|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:36:50.7614|Info|    PASS | EQ | incr was debounced
2015-08-26 11:36:50.7614|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:36:50.7614|Info|    PASS | EQ | delayed the function
2015-08-26 11:36:50.7614|Info|    PASS | EQ | incr was called once
2015-08-26 11:36:50.7614|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:50.7614|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:36:50.7614|Info|    PASS | EQ | incr was called twice
2015-08-26 11:36:50.7614|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:50.7614|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:36:50.7614|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:50.7614|Info|    PASS | EQ | okay
2015-08-26 11:36:50.7614|Info|    FAIL | EQ | ok | Expected: 0, Actual: 1
2015-08-26 11:36:50.7614|Info|    PASS | EQ | ok
2015-08-26 11:36:50.7614|Info|    PASS | EQ | ok
2015-08-26 11:36:50.7614|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 11:36:50.7614|Info|    PASS | EQ | ok
2015-08-26 11:36:50.7614|Info|  Settimeout: id:200, (64) ms
2015-08-26 11:36:50.8396|Info|  Settimeout: id:201, (16) ms
2015-08-26 11:36:50.9021|Info|  Settimeout: id:202, (32) ms
2015-08-26 11:36:50.9646|Info|  Settimeout: id:203, (48) ms
2015-08-26 11:36:51.0271|Info|  Settimeout: id:204, (128) ms
2015-08-26 11:36:51.0896|Info|      Encerrado timer: id:199, (11:36:51.0896)
2015-08-26 11:36:51.0896|Info|      Executando timer: id:200, (11:36:51.0896)
2015-08-26 11:36:51.0896|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:51.0896|Info|      Encerrado timer: id:200, (11:36:51.0896)
2015-08-26 11:36:51.0896|Info|      Executando timer: id:201, (11:36:51.0896)
2015-08-26 11:36:51.0896|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:51.0896|Info|  Settimeout: id:205, (64) ms
2015-08-26 11:36:51.1677|Info|      Encerrado timer: id:201, (11:36:51.1677)
2015-08-26 11:36:51.1677|Info|      Executando timer: id:202, (11:36:51.1677)
2015-08-26 11:36:51.1677|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:51.1677|Info|      Encerrado timer: id:202, (11:36:51.1677)
2015-08-26 11:36:51.1677|Info|      Executando timer: id:203, (11:36:51.1677)
2015-08-26 11:36:51.1677|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:51.1677|Info|      Encerrado timer: id:203, (11:36:51.1677)
2015-08-26 11:36:51.1677|Info|      Executando timer: id:204, (11:36:51.1677)
2015-08-26 11:36:51.1677|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:51.1677|Info|  Settimeout: id:206, (13) ms
2015-08-26 11:36:51.2183|Info|      Encerrado timer: id:204, (11:36:51.2183)
2015-08-26 11:36:51.2183|Info|      Executando timer: id:205, (11:36:51.2192)
2015-08-26 11:36:51.2183|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:51.2183|Info|  Settimeout: id:207, (9) ms
2015-08-26 11:36:51.2871|Info|      Encerrado timer: id:205, (11:36:51.2871)
2015-08-26 11:36:51.2871|Info|      Executando timer: id:206, (11:36:51.2871)
2015-08-26 11:36:51.2871|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:51.2871|Info| FAIL - debounce asap
2015-08-26 11:36:51.2871|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:51.2871|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:51.2871|Info|    PASS | EQ | ok
2015-08-26 11:36:51.2871|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:36:51.2871|Info|    PASS | EQ | incr was debounced
2015-08-26 11:36:51.2871|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:36:51.2871|Info|    PASS | EQ | delayed the function
2015-08-26 11:36:51.3027|Info|    PASS | EQ | incr was called once
2015-08-26 11:36:51.3027|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:51.3027|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:36:51.3027|Info|    PASS | EQ | incr was called twice
2015-08-26 11:36:51.3027|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:51.3027|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:36:51.3027|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:51.3027|Info|    PASS | EQ | okay
2015-08-26 11:36:51.3027|Info|    FAIL | EQ | ok | Expected: 0, Actual: 1
2015-08-26 11:36:51.3027|Info|    PASS | EQ | ok
2015-08-26 11:36:51.3027|Info|    PASS | EQ | ok
2015-08-26 11:36:51.3027|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 11:36:51.3183|Info|    PASS | EQ | ok
2015-08-26 11:36:51.3183|Info|    PASS | EQ | ok
2015-08-26 11:36:51.3183|Info|    PASS | EQ | ok
2015-08-26 11:36:51.3183|Info|    PASS | EQ | incr was called immediately
2015-08-26 11:36:51.3183|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-26 11:36:51.3183|Info|  Settimeout: id:208, (32) ms
2015-08-26 11:36:51.3809|Info|  Settimeout: id:209, (100) ms
2015-08-26 11:36:51.4434|Info|      Encerrado timer: id:206, (11:36:51.4434)
2015-08-26 11:36:51.4434|Info|      Executando timer: id:207, (11:36:51.4434)
2015-08-26 11:36:51.4434|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:51.4434|Info|      Encerrado timer: id:207, (11:36:51.4434)
2015-08-26 11:36:51.4434|Info|      Executando timer: id:208, (11:36:51.4434)
2015-08-26 11:36:51.4434|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:51.4434|Info|  Settimeout: id:210, (32) ms
2015-08-26 11:36:51.5059|Info|      Encerrado timer: id:208, (11:36:51.5059)
2015-08-26 11:36:51.5059|Info|      Executando timer: id:209, (11:36:51.5059)
2015-08-26 11:36:51.5059|Info|          Deveria ter disparado: function (){
      return func.apply(null, args);
    }
2015-08-26 11:36:51.5059|Info|  Settimeout: id:211, (13) ms
2015-08-26 11:36:51.5684|Info|      Encerrado timer: id:209, (11:36:51.5684)
2015-08-26 11:36:51.5684|Info|      Executando timer: id:210, (11:36:51.5684)
2015-08-26 11:36:51.5684|Info|          Deveria ter disparado: function () {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    }
2015-08-26 11:36:51.5684|Info|      Encerrado timer: id:210, (11:36:51.5684)
2015-08-26 11:36:51.5684|Info|      Executando timer: id:211, (11:36:51.5684)
2015-08-26 11:36:51.5684|Info|          Deveria ter disparado: function () {
			if ( config.current && config.current.semaphore > 0 ) {
				return;
			}
			if ( config.timeout ) {
				clearTimeout( config.timeout );
			}
			begin();
		}
2015-08-26 11:36:51.5684|Info| FAIL - debounce re-entrant
2015-08-26 11:36:51.5839|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:51.5839|Info|    PASS | EQ | updated to latest value
2015-08-26 11:36:51.5839|Info|    PASS | EQ | ok
2015-08-26 11:36:51.5839|Info|    PASS | EQ | append was throttled successfully
2015-08-26 11:36:51.5839|Info|    PASS | EQ | incr was debounced
2015-08-26 11:36:51.5839|Info|    PASS | EQ | didn't delay the function quite yet
2015-08-26 11:36:51.5839|Info|    PASS | EQ | delayed the function
2015-08-26 11:36:51.5839|Info|    PASS | EQ | incr was called once
2015-08-26 11:36:51.5996|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:51.5996|Info|    FAIL | EQ | incr was throttled | Expected: 1, Actual: 2
2015-08-26 11:36:51.5996|Info|    PASS | EQ | incr was called twice
2015-08-26 11:36:51.5996|Info|    PASS | EQ | incr was throttled
2015-08-26 11:36:51.5996|Info|    PASS | EQ | incr was called trailing
2015-08-26 11:36:51.5996|Info|    FAIL | EQ | failed, expected argument to be truthy, was: false | Expected: true, Actual: false
2015-08-26 11:36:51.5996|Info|    PASS | EQ | okay
2015-08-26 11:36:51.5996|Info|    FAIL | EQ | ok | Expected: 0, Actual: 1
2015-08-26 11:36:51.5996|Info|    PASS | EQ | ok
2015-08-26 11:36:51.5996|Info|    PASS | EQ | ok
2015-08-26 11:36:51.5996|Info|    FAIL | EQ | ok | Expected: 1, Actual: 2
2015-08-26 11:36:51.5996|Info|    PASS | EQ | ok
2015-08-26 11:36:51.5996|Info|    PASS | EQ | ok
2015-08-26 11:36:51.5996|Info|    PASS | EQ | ok
2015-08-26 11:36:51.5996|Info|    PASS | EQ | incr was called immediately
2015-08-26 11:36:51.6152|Info|    FAIL | EQ | incr was debounced | Expected: 1, Actual: 2
2015-08-26 11:36:51.6152|Info|    PASS | EQ | ok
2015-08-26 11:36:51.6152|Info|    FAIL | EQ | append was debounced successfully | Expected: a1a2b1b2, Actual: a1a2
2015-08-26 11:36:51.6152|Info|----------------------------------------
2015-08-26 11:36:51.6152|Info|    PASS: 1367  FAIL: 7  TOTAL: 1374
2015-08-26 11:36:51.6152|Info|    Finished in 17403 milliseconds.
2015-08-26 11:36:51.6152|Info|----------------------------------------
2015-08-26 11:36:51.6152|Info|      Encerrado timer: id:211, (11:36:51.6152)
2015-08-26 11:36:51.6152|Info|Encerrando os testes
2015-08-26 11:36:51.6152|Info|Total:1374, Sucesso: 1367, Falha: 7
2015-08-26 11:36:51.6152|Info|17 segundos para avaliar o individuo underscore.js
2015-08-26 11:36:51.6152|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime [3]:Qunit:1906:13
    at Array.<anonymous> (V8Runtime [3]:underscoreTests:1812:32)
    at Script Document [17]:1:23
2015-08-26 11:36:51.6152|Info|FAILED: Functions: throttle arguments: updated to latest value, expected: 3, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1840:25
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [41]:1:24
2015-08-26 11:36:51.6152|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [77]:1:24
2015-08-26 11:36:51.6152|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6152|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1923:5)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6308|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [101]:1:24
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle re-entrant: append was throttled successfully, expected: a1a2c1c2b1b2, actual: a1a2c1c2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2026:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [125]:1:24
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce: incr was debounced, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2037:25
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [137]:1:24
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [151]:1:24
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2106:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [173]:1:24
2015-08-26 11:36:51.6308|Info|FAILED: Objects: #1929 Typed Array constructors are functions: Died on test #1     at V8Runtime [3]:underscoreTests:2898:5
    at V8Runtime [3]:underscoreTests:3251:2: window is not defined, , ReferenceError: window is not defined
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:2900:65)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
    at Array.<anonymous> (V8Runtime [3]:Qunit:643:4)
    at Script Document [177]:1:24
2015-08-26 11:36:51.6308|Info|FAILED: Functions: delay: didn't delay the function quite yet, ,     at V8Runtime [3]:Qunit:1906:13
    at Array.<anonymous> (V8Runtime [3]:underscoreTests:1812:32)
    at Script Document [181]:1:24
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [211]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1923:5)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6308|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [235]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [267]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2106:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [275]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [297]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1923:5)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6308|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [321]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [335]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2106:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [343]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle repeatedly with results: incr was throttled, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1890:20
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [363]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle triggers trailing call when invoked repeatedly: failed, expected argument to be truthy, was: false, ,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1909:16)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6308|Info|FAILED: Functions: throttle does not trigger leading call when leading is set to false: expected: 0, actual: 1,     at V8Runtime [3]:Qunit:1906:13
    at Object.<anonymous> (V8Runtime [3]:underscoreTests:1923:5)
    at Object.Test.run (V8Runtime [3]:Qunit:894:28)
    at V8Runtime [3]:Qunit:1023:11
    at process (V8Runtime [3]:Qunit:583:24)
    at begin (V8Runtime [3]:Qunit:628:2)
2015-08-26 11:36:51.6308|Info|FAILED: Functions: more throttle does not trigger leading call when leading is set to false: expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:1943:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [385]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce asap: incr was debounced, expected: 1, actual: 2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2053:25
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [399]:1:25
2015-08-26 11:36:51.6308|Info|FAILED: Functions: debounce re-entrant: append was debounced successfully, expected: a1a2b1b2, actual: a1a2,     at V8Runtime [3]:Qunit:1906:13
    at V8Runtime [3]:underscoreTests:2106:7
    at Array.<anonymous> (V8Runtime [3]:underscore:768:19)
    at Script Document [409]:1:25
2015-08-26 11:45:50.3795|Info|Iniciando os testes
2015-08-26 11:45:52.9110|Info|Encerrando os testes
2015-08-26 11:45:52.9110|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:45:52.9110|Info|2 segundos para avaliar o individuo global.js
2015-08-26 11:47:20.8687|Info|Iniciando os testes
2015-08-26 11:47:23.2500|Info|Encerrando os testes
2015-08-26 11:47:23.2500|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:47:23.2500|Info|2 segundos para avaliar o individuo global.js
2015-08-26 11:47:51.4921|Info|Iniciando os testes
2015-08-26 11:47:54.4342|Info|Encerrando os testes
2015-08-26 11:47:54.4342|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:47:54.4342|Info|3 segundos para avaliar o individuo global.js
2015-08-26 11:49:39.4401|Info|Iniciando os testes
2015-08-26 11:49:42.2854|Info|Encerrando os testes
2015-08-26 11:49:42.2874|Info|Total:57982, Sucesso: 57982, Falha: 0
2015-08-26 11:49:42.2874|Info|3 segundos para avaliar o individuo global.js
